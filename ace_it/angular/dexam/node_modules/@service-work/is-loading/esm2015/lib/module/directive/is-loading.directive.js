/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Renderer2, ElementRef, ComponentFactoryResolver, Injector, Inject, Optional, } from '@angular/core';
import { Observable, Subscription } from 'rxjs';
import { IsLoadingService } from '../../is-loading.service';
import { IsLoadingSpinnerComponent } from './is-loading-spinner.component';
import { SW_IS_LOADING_DIRECTIVE_CONFIG, } from './is-loading.directive.config';
// This code was inspired by angular2-promise-buttons
// https://github.com/johannesjo/angular2-promise-buttons
export class IsLoadingDirective {
    /**
     * @param {?} config
     * @param {?} renderer
     * @param {?} isLoadingService
     * @param {?} el
     * @param {?} componentFactoryResolver
     * @param {?} injector
     */
    constructor(config, renderer, isLoadingService, el, componentFactoryResolver, injector) {
        this.renderer = renderer;
        this.isLoadingService = isLoadingService;
        this.el = el;
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
        this._isLoading = false;
        this.config = {};
        this._swIsLoadingDisableEl = this.config.disableEl === undefined ? true : this.config.disableEl;
        this._swIsLoadingSpinner = this.config.addSpinnerEl !== undefined
            ? this.config.addSpinnerEl
            : this.el.nativeElement instanceof HTMLButtonElement ||
                this.el.nativeElement instanceof HTMLAnchorElement;
        this.loadingClass = this.config.loadingClass
            ? this.config.loadingClass
            : 'sw-is-loading';
        this.config = config || {};
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set swIsLoading(value) {
        if (typeof value === 'string') {
            this.stringValue(value);
        }
        else {
            this.notStringValue();
        }
        if (value instanceof Subscription) {
            this.subscriptionValue(value);
        }
        else {
            this.notSubscriptionValue();
        }
        if (value instanceof Promise) {
            this.promiseValue(value);
        }
        else {
            this.notPromiseValue();
        }
        if (typeof value === 'boolean') {
            this.booleanValue(value);
        }
        else {
            this.notBooleanValue();
        }
        if (value instanceof Observable) {
            this.observableValue();
        }
        else {
            this.notObservableValue();
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set swIsLoadingDisableEl(value) {
        this._swIsLoadingDisableEl = coerceBooleanValue(value);
    }
    /**
     * @return {?}
     */
    get swIsLoadingDisableEl() {
        return this._swIsLoadingDisableEl;
    }
    // By default, if this directive is attached to an anchor or a button
    // element, add a `sw-is-loading-spinner` element to the dom (for styling)
    /**
     * @param {?} value
     * @return {?}
     */
    set swIsLoadingSpinner(value) {
        this._swIsLoadingSpinner = coerceBooleanValue(value);
    }
    /**
     * @return {?}
     */
    get swIsLoadingSpinner() {
        return this._swIsLoadingSpinner;
    }
    /**
     * @return {?}
     */
    get isLoading() {
        return this._isLoading;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    set pending(value) {
        this.startLoading();
        value.finally((/**
         * @return {?}
         */
        () => this.stopLoading()));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.swIsLoadingSpinner &&
            !changes.swIsLoadingSpinner.isFirstChange() &&
            !changes.swIsLoadingSpinner.currentValue) {
            this.removeSpinnerEl();
        }
        if (changes.swIsLoadingDisableEl &&
            !changes.swIsLoadingDisableEl.isFirstChange() &&
            !changes.swIsLoadingDisableEl.currentValue) {
            this.renderer.removeAttribute(this.el.nativeElement, 'disabled');
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.swIsLoadingSpinner) {
            this.addSpinnerEl();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.textValueSubscription) {
            this.textValueSubscription.unsubscribe();
        }
    }
    /**
     * @private
     * @return {?}
     */
    startLoading() {
        this.renderer.addClass(this.el.nativeElement, this.loadingClass);
        if (this.swIsLoadingDisableEl) {
            this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');
        }
        this._isLoading = true;
    }
    /**
     * @private
     * @return {?}
     */
    stopLoading() {
        this.renderer.removeClass(this.el.nativeElement, this.loadingClass);
        if (this.swIsLoadingDisableEl) {
            this.renderer.removeAttribute(this.el.nativeElement, 'disabled');
        }
        this._isLoading = false;
    }
    /**
     * @private
     * @return {?}
     */
    addSpinnerEl() {
        this.spinnerEl = this.componentFactoryResolver
            .resolveComponentFactory(IsLoadingSpinnerComponent)
            .create(this.injector);
        // need to use Renderer2#appendChild instead of
        // ViewContainerRef#createComponent because the injected
        // view container is not for the element this directive
        // is applied to
        this.renderer.appendChild(this.el.nativeElement, this.spinnerEl.instance.el.nativeElement);
    }
    /**
     * @private
     * @return {?}
     */
    removeSpinnerEl() {
        if (!this.spinnerEl)
            return;
        this.renderer.removeChild(this.el.nativeElement, this.spinnerEl.instance.el.nativeElement);
        this.spinnerEl.destroy();
        this.spinnerEl = undefined;
    }
    /**
     * Input value handlers
     * @private
     * @param {?} value
     * @return {?}
     */
    stringValue(value) {
        if (this.textValueSubscription) {
            this.textValueSubscription.unsubscribe();
        }
        /** @type {?} */
        let obs;
        if (!value) {
            obs = this.isLoadingService.isLoading$();
        }
        else {
            obs = this.isLoadingService.isLoading$({
                key: value,
            });
        }
        this.textValueSubscription = obs.subscribe((/**
         * @param {?} loading
         * @return {?}
         */
        loading => {
            if (loading) {
                this.startLoading();
            }
            else if (this.isLoading) {
                this.stopLoading();
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    notStringValue() {
        if (this.textValueSubscription) {
            this.textValueSubscription.unsubscribe();
        }
    }
    /**
     * @private
     * @return {?}
     */
    observableValue() {
        throw new TypeError('swBtnPending must be an instance of Subscription, instance of Observable given');
    }
    /**
     * @private
     * @return {?}
     */
    notObservableValue() { }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    subscriptionValue(value) {
        this.pending = new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => value.add(resolve)));
    }
    /**
     * @private
     * @return {?}
     */
    notSubscriptionValue() { }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    promiseValue(value) {
        this.pending = value;
    }
    /**
     * @private
     * @return {?}
     */
    notPromiseValue() { }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    booleanValue(value) {
        if (value) {
            this.pending = new Promise((/**
             * @param {?} resolve
             * @return {?}
             */
            resolve => {
                this.booleanValueResolveFn = resolve;
            }));
        }
        else if (this.booleanValueResolveFn) {
            this.booleanValueResolveFn();
        }
        else {
            this.stopLoading();
        }
    }
    /**
     * @private
     * @return {?}
     */
    notBooleanValue() {
        if (this.booleanValueResolveFn) {
            this.booleanValueResolveFn();
        }
    }
}
IsLoadingDirective.decorators = [
    { type: Directive, args: [{
                selector: '[swIsLoading]',
                exportAs: 'swIsLoading',
            },] }
];
/** @nocollapse */
IsLoadingDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [SW_IS_LOADING_DIRECTIVE_CONFIG,] }] },
    { type: Renderer2 },
    { type: IsLoadingService },
    { type: ElementRef },
    { type: ComponentFactoryResolver },
    { type: Injector }
];
IsLoadingDirective.propDecorators = {
    swIsLoading: [{ type: Input }],
    swIsLoadingDisableEl: [{ type: Input }],
    swIsLoadingSpinner: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype._isLoading;
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype.spinnerEl;
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype.config;
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype._swIsLoadingDisableEl;
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype._swIsLoadingSpinner;
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype.loadingClass;
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype.textValueSubscription;
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype.booleanValueResolveFn;
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype.isLoadingService;
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype.injector;
}
/**
 * @param {?} val
 * @return {?}
 */
function coerceBooleanValue(val) {
    if (typeof val === 'boolean')
        return val;
    if (['', 'true'].includes(val))
        return true;
    return false;
}
//# sourceMappingURL=data:application/json;base64,