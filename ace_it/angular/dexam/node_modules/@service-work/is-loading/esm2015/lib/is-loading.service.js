/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject, Subscription, Observable } from 'rxjs';
import { distinctUntilChanged, debounceTime, take } from 'rxjs/operators';
import * as i0 from "@angular/core";
/**
 * @record
 */
export function IGetLoadingOptions() { }
if (false) {
    /** @type {?|undefined} */
    IGetLoadingOptions.prototype.key;
}
/**
 * @record
 */
export function IUpdateLoadingOptions() { }
if (false) {
    /** @type {?|undefined} */
    IUpdateLoadingOptions.prototype.key;
}
export class IsLoadingService {
    constructor() {
        this.defaultKey = 'default';
        // provides an observable indicating if a particular key is loading
        this.loadingSubjects = new Map();
        // tracks how many "things" are loading for each key
        this.loadingStacks = new Map();
        // tracks which keys are being watched so that unused keys
        // can be deleted/garbage collected.
        this.loadingKeyIndex = new Map();
    }
    /**
     * Used to determine if something is loading or not.
     *
     * When called without arguments, returns the default *isLoading*
     * observable for your app. When called with an options object
     * containing a `key` property, returns the *isLoading* observable
     * corresponding to that key.
     *
     * Internally, *isLoading* observables are `BehaviorSubject`s, so
     * they will return values immediately upon subscription.
     *
     * When called, this method creates a new observable and returns it.
     * This means that you should not use this method directly in an Angular
     * template because each time the method is called it will look
     * (to Angular change detection) like the value has changed. To make
     * subscribing in templates easier, check out the `IsLoadingPipe`.
     * Alternatively, store the observable returned from this method in
     * a variable on your component and use that variable inside your
     * template.
     *
     * Example:
     *
     * ```ts
     *  class MyCustomComponent implements OnInit {
     *    variableForUseInTemplate: Observable<boolean>;
     *
     *    constructor(private loadingService: IsLoadingService) {}
     *
     *    ngOnInit() {
     *      this.variableForUseInTemplate =
     *        this.loadingService.isLoading$({key: 'button'});
     *
     *      this.loadingService.isLoading$().subscribe(value => {
     *        // ... do stuff
     *      });
     *
     *      this.loadingService
     *        .isLoading$({key: MyCustomComponent})
     *        .subscribe(value => {
     *          // ... do stuff
     *        });
     *    }
     *  }
     * ```
     *
     * @param {?=} args
     * @return {?}
     */
    isLoading$(args = {}) {
        /** @type {?} */
        const keys = this.normalizeKeys(args.key);
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        observer => {
            // this function will called each time this
            // Observable is subscribed to.
            this.indexKeys(keys);
            /** @type {?} */
            const subscription = (/** @type {?} */ (this.loadingSubjects
                .get(keys[0]))).pipe(distinctUntilChanged(), debounceTime(10), distinctUntilChanged())
                .subscribe({
                /**
                 * @param {?} value
                 * @return {?}
                 */
                next(value) {
                    observer.next(value);
                },
                /**
                 * @param {?} err
                 * @return {?}
                 */
                error(err) {
                    observer.error(err);
                },
                /**
                 * @return {?}
                 */
                complete() {
                    observer.complete();
                },
            });
            // the return value is the teardown function,
            // which will be invoked when the new
            // Observable is unsubscribed from.
            return (/**
             * @return {?}
             */
            () => {
                subscription.unsubscribe();
                keys.forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                key => this.deIndexKey(key)));
            });
        }));
    }
    /**
     * Same as `isLoading$()` except a boolean is returned,
     * rather than an observable.
     *
     * @param {?=} args
     * @return {?}
     */
    isLoading(args = {}) {
        /** @type {?} */
        const key = this.normalizeKeys(args.key)[0];
        /** @type {?} */
        const obs = this.loadingSubjects.get(key);
        return (obs && obs.value) || false;
    }
    /**
     * @param {?=} first
     * @param {?=} second
     * @return {?}
     */
    add(first, second) {
        /** @type {?} */
        let keyParam;
        /** @type {?} */
        let sub;
        if (first instanceof Subscription) {
            if (first.closed)
                return first;
            sub = first;
            first.add((/**
             * @return {?}
             */
            () => this.remove(first, second)));
        }
        else if (first instanceof Promise) {
            sub = first;
            // If the promise is already resolved, this executes syncronously
            first.then((/**
             * @return {?}
             */
            () => this.remove(first, second)), (/**
             * @return {?}
             */
            () => this.remove(first, second)));
        }
        else if (first instanceof Observable) {
            sub = first.pipe(take(1)).subscribe();
            if (sub.closed)
                return first;
            sub.add((/**
             * @return {?}
             */
            () => this.remove((/** @type {?} */ (sub)), second)));
        }
        else if (first) {
            keyParam = first.key;
        }
        if (second && second.key) {
            keyParam = second.key;
        }
        /** @type {?} */
        const keys = this.normalizeKeys(keyParam);
        this.indexKeys(keys);
        keys.forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            (/** @type {?} */ (this.loadingStacks.get(key))).push(sub || true);
            this.updateLoadingStatus(key);
        }));
        return first instanceof Observable ? first : sub;
    }
    /**
     * @param {?=} first
     * @param {?=} second
     * @return {?}
     */
    remove(first, second) {
        /** @type {?} */
        let keyParam;
        /** @type {?} */
        let sub;
        if (first instanceof Subscription) {
            sub = first;
        }
        else if (first instanceof Promise) {
            sub = first;
        }
        else if (first) {
            keyParam = first.key;
        }
        if (second && second.key) {
            keyParam = second.key;
        }
        /** @type {?} */
        const keys = this.normalizeKeys(keyParam);
        keys.forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            /** @type {?} */
            const loadingStack = this.loadingStacks.get(key);
            // !loadingStack means that a user has called remove() needlessly
            if (!loadingStack)
                return;
            /** @type {?} */
            const index = loadingStack.indexOf(sub || true);
            if (index >= 0) {
                loadingStack.splice(index, 1);
                this.updateLoadingStatus(key);
                this.deIndexKey(key);
            }
        }));
    }
    /**
     * @private
     * @param {?=} key
     * @return {?}
     */
    normalizeKeys(key) {
        if (!key)
            key = [this.defaultKey];
        else if (!Array.isArray(key))
            key = [key];
        return (/** @type {?} */ (key));
    }
    /**
     * `indexKeys()` along with `deIndexKeys()` helps us track which
     * keys are being watched so that unused keys can be deleted
     * / garbage collected.
     *
     * When `indexKeys()` is called with an array of keys, it means
     * that each of those keys has at least one "thing" interested
     * in it. Therefore, we need to make sure that a loadingSubject
     * and loadingStack exists for that key. We also need to index
     * the number of "things" interested in that key in the
     * `loadingKeyIndex` map.
     *
     * When `deIndexKeys()` is called with an array of keys, it
     * means that some "thing" is no longer interested in each
     * of those keys. Therefore, we need to re-index
     * the number of "things" interested in each key. For keys
     * that no longer have anything interested in them, we need
     * to delete the associated `loadingKeyIndex`, `loadingSubject`,
     * and `loadingStack`. So that the `key` can be properly
     * released for garbage collection.
     * @private
     * @param {?} keys
     * @return {?}
     */
    indexKeys(keys) {
        keys.forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            if (this.loadingKeyIndex.has(key)) {
                /** @type {?} */
                const curr = (/** @type {?} */ (this.loadingKeyIndex.get(key)));
                this.loadingKeyIndex.set(key, curr + 1);
            }
            else {
                /** @type {?} */
                const subject = new BehaviorSubject(false);
                this.loadingKeyIndex.set(key, 1);
                this.loadingSubjects.set(key, subject);
                this.loadingStacks.set(key, []);
            }
        }));
    }
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    deIndexKey(key) {
        /** @type {?} */
        const curr = (/** @type {?} */ (this.loadingKeyIndex.get(key)));
        if (curr === 1) {
            this.loadingKeyIndex.delete(key);
            this.loadingSubjects.delete(key);
            this.loadingStacks.delete(key);
        }
        else {
            this.loadingKeyIndex.set(key, curr - 1);
        }
    }
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    updateLoadingStatus(key) {
        /** @type {?} */
        const loadingStatus = (/** @type {?} */ (this.loadingStacks.get(key))).length > 0;
        (/** @type {?} */ (this.loadingSubjects.get(key))).next(loadingStatus);
    }
}
IsLoadingService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */
IsLoadingService.ctorParameters = () => [];
/** @nocollapse */ IsLoadingService.ngInjectableDef = i0.defineInjectable({ factory: function IsLoadingService_Factory() { return new IsLoadingService(); }, token: IsLoadingService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    IsLoadingService.prototype.defaultKey;
    /**
     * @type {?}
     * @private
     */
    IsLoadingService.prototype.loadingSubjects;
    /**
     * @type {?}
     * @private
     */
    IsLoadingService.prototype.loadingStacks;
    /**
     * @type {?}
     * @private
     */
    IsLoadingService.prototype.loadingKeyIndex;
}
//# sourceMappingURL=data:application/json;base64,