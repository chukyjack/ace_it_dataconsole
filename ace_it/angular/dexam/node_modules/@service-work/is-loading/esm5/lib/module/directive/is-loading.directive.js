/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Renderer2, ElementRef, ComponentFactoryResolver, Injector, Inject, Optional, } from '@angular/core';
import { Observable, Subscription } from 'rxjs';
import { IsLoadingService } from '../../is-loading.service';
import { IsLoadingSpinnerComponent } from './is-loading-spinner.component';
import { SW_IS_LOADING_DIRECTIVE_CONFIG, } from './is-loading.directive.config';
// This code was inspired by angular2-promise-buttons
// https://github.com/johannesjo/angular2-promise-buttons
var IsLoadingDirective = /** @class */ (function () {
    function IsLoadingDirective(config, renderer, isLoadingService, el, componentFactoryResolver, injector) {
        this.renderer = renderer;
        this.isLoadingService = isLoadingService;
        this.el = el;
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
        this._isLoading = false;
        this.config = {};
        this._swIsLoadingDisableEl = this.config.disableEl === undefined ? true : this.config.disableEl;
        this._swIsLoadingSpinner = this.config.addSpinnerEl !== undefined
            ? this.config.addSpinnerEl
            : this.el.nativeElement instanceof HTMLButtonElement ||
                this.el.nativeElement instanceof HTMLAnchorElement;
        this.loadingClass = this.config.loadingClass
            ? this.config.loadingClass
            : 'sw-is-loading';
        this.config = config || {};
    }
    Object.defineProperty(IsLoadingDirective.prototype, "swIsLoading", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (typeof value === 'string') {
                this.stringValue(value);
            }
            else {
                this.notStringValue();
            }
            if (value instanceof Subscription) {
                this.subscriptionValue(value);
            }
            else {
                this.notSubscriptionValue();
            }
            if (value instanceof Promise) {
                this.promiseValue(value);
            }
            else {
                this.notPromiseValue();
            }
            if (typeof value === 'boolean') {
                this.booleanValue(value);
            }
            else {
                this.notBooleanValue();
            }
            if (value instanceof Observable) {
                this.observableValue();
            }
            else {
                this.notObservableValue();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IsLoadingDirective.prototype, "swIsLoadingDisableEl", {
        get: /**
         * @return {?}
         */
        function () {
            return this._swIsLoadingDisableEl;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._swIsLoadingDisableEl = coerceBooleanValue(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IsLoadingDirective.prototype, "swIsLoadingSpinner", {
        get: /**
         * @return {?}
         */
        function () {
            return this._swIsLoadingSpinner;
        },
        // By default, if this directive is attached to an anchor or a button
        // element, add a `sw-is-loading-spinner` element to the dom (for styling)
        set: 
        // By default, if this directive is attached to an anchor or a button
        // element, add a `sw-is-loading-spinner` element to the dom (for styling)
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._swIsLoadingSpinner = coerceBooleanValue(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IsLoadingDirective.prototype, "isLoading", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isLoading;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IsLoadingDirective.prototype, "pending", {
        set: /**
         * @private
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this.startLoading();
            value.finally((/**
             * @return {?}
             */
            function () { return _this.stopLoading(); }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    IsLoadingDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.swIsLoadingSpinner &&
            !changes.swIsLoadingSpinner.isFirstChange() &&
            !changes.swIsLoadingSpinner.currentValue) {
            this.removeSpinnerEl();
        }
        if (changes.swIsLoadingDisableEl &&
            !changes.swIsLoadingDisableEl.isFirstChange() &&
            !changes.swIsLoadingDisableEl.currentValue) {
            this.renderer.removeAttribute(this.el.nativeElement, 'disabled');
        }
    };
    /**
     * @return {?}
     */
    IsLoadingDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.swIsLoadingSpinner) {
            this.addSpinnerEl();
        }
    };
    /**
     * @return {?}
     */
    IsLoadingDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.textValueSubscription) {
            this.textValueSubscription.unsubscribe();
        }
    };
    /**
     * @private
     * @return {?}
     */
    IsLoadingDirective.prototype.startLoading = /**
     * @private
     * @return {?}
     */
    function () {
        this.renderer.addClass(this.el.nativeElement, this.loadingClass);
        if (this.swIsLoadingDisableEl) {
            this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');
        }
        this._isLoading = true;
    };
    /**
     * @private
     * @return {?}
     */
    IsLoadingDirective.prototype.stopLoading = /**
     * @private
     * @return {?}
     */
    function () {
        this.renderer.removeClass(this.el.nativeElement, this.loadingClass);
        if (this.swIsLoadingDisableEl) {
            this.renderer.removeAttribute(this.el.nativeElement, 'disabled');
        }
        this._isLoading = false;
    };
    /**
     * @private
     * @return {?}
     */
    IsLoadingDirective.prototype.addSpinnerEl = /**
     * @private
     * @return {?}
     */
    function () {
        this.spinnerEl = this.componentFactoryResolver
            .resolveComponentFactory(IsLoadingSpinnerComponent)
            .create(this.injector);
        // need to use Renderer2#appendChild instead of
        // ViewContainerRef#createComponent because the injected
        // view container is not for the element this directive
        // is applied to
        this.renderer.appendChild(this.el.nativeElement, this.spinnerEl.instance.el.nativeElement);
    };
    /**
     * @private
     * @return {?}
     */
    IsLoadingDirective.prototype.removeSpinnerEl = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.spinnerEl)
            return;
        this.renderer.removeChild(this.el.nativeElement, this.spinnerEl.instance.el.nativeElement);
        this.spinnerEl.destroy();
        this.spinnerEl = undefined;
    };
    /**
     * Input value handlers
     */
    /**
     * Input value handlers
     * @private
     * @param {?} value
     * @return {?}
     */
    IsLoadingDirective.prototype.stringValue = /**
     * Input value handlers
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        if (this.textValueSubscription) {
            this.textValueSubscription.unsubscribe();
        }
        /** @type {?} */
        var obs;
        if (!value) {
            obs = this.isLoadingService.isLoading$();
        }
        else {
            obs = this.isLoadingService.isLoading$({
                key: value,
            });
        }
        this.textValueSubscription = obs.subscribe((/**
         * @param {?} loading
         * @return {?}
         */
        function (loading) {
            if (loading) {
                _this.startLoading();
            }
            else if (_this.isLoading) {
                _this.stopLoading();
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    IsLoadingDirective.prototype.notStringValue = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.textValueSubscription) {
            this.textValueSubscription.unsubscribe();
        }
    };
    /**
     * @private
     * @return {?}
     */
    IsLoadingDirective.prototype.observableValue = /**
     * @private
     * @return {?}
     */
    function () {
        throw new TypeError('swBtnPending must be an instance of Subscription, instance of Observable given');
    };
    /**
     * @private
     * @return {?}
     */
    IsLoadingDirective.prototype.notObservableValue = /**
     * @private
     * @return {?}
     */
    function () { };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    IsLoadingDirective.prototype.subscriptionValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.pending = new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) { return value.add(resolve); }));
    };
    /**
     * @private
     * @return {?}
     */
    IsLoadingDirective.prototype.notSubscriptionValue = /**
     * @private
     * @return {?}
     */
    function () { };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    IsLoadingDirective.prototype.promiseValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.pending = value;
    };
    /**
     * @private
     * @return {?}
     */
    IsLoadingDirective.prototype.notPromiseValue = /**
     * @private
     * @return {?}
     */
    function () { };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    IsLoadingDirective.prototype.booleanValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        if (value) {
            this.pending = new Promise((/**
             * @param {?} resolve
             * @return {?}
             */
            function (resolve) {
                _this.booleanValueResolveFn = resolve;
            }));
        }
        else if (this.booleanValueResolveFn) {
            this.booleanValueResolveFn();
        }
        else {
            this.stopLoading();
        }
    };
    /**
     * @private
     * @return {?}
     */
    IsLoadingDirective.prototype.notBooleanValue = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.booleanValueResolveFn) {
            this.booleanValueResolveFn();
        }
    };
    IsLoadingDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[swIsLoading]',
                    exportAs: 'swIsLoading',
                },] }
    ];
    /** @nocollapse */
    IsLoadingDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [SW_IS_LOADING_DIRECTIVE_CONFIG,] }] },
        { type: Renderer2 },
        { type: IsLoadingService },
        { type: ElementRef },
        { type: ComponentFactoryResolver },
        { type: Injector }
    ]; };
    IsLoadingDirective.propDecorators = {
        swIsLoading: [{ type: Input }],
        swIsLoadingDisableEl: [{ type: Input }],
        swIsLoadingSpinner: [{ type: Input }]
    };
    return IsLoadingDirective;
}());
export { IsLoadingDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype._isLoading;
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype.spinnerEl;
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype.config;
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype._swIsLoadingDisableEl;
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype._swIsLoadingSpinner;
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype.loadingClass;
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype.textValueSubscription;
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype.booleanValueResolveFn;
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype.isLoadingService;
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    IsLoadingDirective.prototype.injector;
}
/**
 * @param {?} val
 * @return {?}
 */
function coerceBooleanValue(val) {
    if (typeof val === 'boolean')
        return val;
    if (['', 'true'].includes(val))
        return true;
    return false;
}
//# sourceMappingURL=data:application/json;base64,