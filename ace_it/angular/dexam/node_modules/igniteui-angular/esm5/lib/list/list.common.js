/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, TemplateRef } from '@angular/core';
/**
 * @record
 */
export function IListChild() { }
if (false) {
    /** @type {?} */
    IListChild.prototype.index;
}
/**
 * @hidden
 * @abstract
 */
var /**
 * @hidden
 * @abstract
 */
IgxListBase = /** @class */ (function () {
    function IgxListBase() {
    }
    return IgxListBase;
}());
/**
 * @hidden
 * @abstract
 */
export { IgxListBase };
if (false) {
    /** @type {?} */
    IgxListBase.prototype.onItemClicked;
    /** @type {?} */
    IgxListBase.prototype.allowLeftPanning;
    /** @type {?} */
    IgxListBase.prototype.allowRightPanning;
    /** @type {?} */
    IgxListBase.prototype.panEndTriggeringThreshold;
    /** @type {?} */
    IgxListBase.prototype.onLeftPan;
    /** @type {?} */
    IgxListBase.prototype.onRightPan;
    /** @type {?} */
    IgxListBase.prototype.onPanStateChange;
    /** @type {?} */
    IgxListBase.prototype.children;
    /** @type {?} */
    IgxListBase.prototype.listItemLeftPanningTemplate;
    /** @type {?} */
    IgxListBase.prototype.listItemRightPanningTemplate;
}
/** @enum {number} */
var IgxListPanState = {
    NONE: 0, LEFT: 1, RIGHT: 2,
};
export { IgxListPanState };
IgxListPanState[IgxListPanState.NONE] = 'NONE';
IgxListPanState[IgxListPanState.LEFT] = 'LEFT';
IgxListPanState[IgxListPanState.RIGHT] = 'RIGHT';
var IgxEmptyListTemplateDirective = /** @class */ (function () {
    function IgxEmptyListTemplateDirective(template) {
        this.template = template;
    }
    IgxEmptyListTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxEmptyList]'
                },] }
    ];
    /** @nocollapse */
    IgxEmptyListTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxEmptyListTemplateDirective;
}());
export { IgxEmptyListTemplateDirective };
if (false) {
    /** @type {?} */
    IgxEmptyListTemplateDirective.prototype.template;
}
var IgxDataLoadingTemplateDirective = /** @class */ (function () {
    function IgxDataLoadingTemplateDirective(template) {
        this.template = template;
    }
    IgxDataLoadingTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxDataLoading]'
                },] }
    ];
    /** @nocollapse */
    IgxDataLoadingTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxDataLoadingTemplateDirective;
}());
export { IgxDataLoadingTemplateDirective };
if (false) {
    /** @type {?} */
    IgxDataLoadingTemplateDirective.prototype.template;
}
var IgxListItemLeftPanningTemplateDirective = /** @class */ (function () {
    function IgxListItemLeftPanningTemplateDirective(template) {
        this.template = template;
    }
    IgxListItemLeftPanningTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxListItemLeftPanning]'
                },] }
    ];
    /** @nocollapse */
    IgxListItemLeftPanningTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxListItemLeftPanningTemplateDirective;
}());
export { IgxListItemLeftPanningTemplateDirective };
if (false) {
    /** @type {?} */
    IgxListItemLeftPanningTemplateDirective.prototype.template;
}
var IgxListItemRightPanningTemplateDirective = /** @class */ (function () {
    function IgxListItemRightPanningTemplateDirective(template) {
        this.template = template;
    }
    IgxListItemRightPanningTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxListItemRightPanning]'
                },] }
    ];
    /** @nocollapse */
    IgxListItemRightPanningTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxListItemRightPanningTemplateDirective;
}());
export { IgxListItemRightPanningTemplateDirective };
if (false) {
    /** @type {?} */
    IgxListItemRightPanningTemplateDirective.prototype.template;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5jb21tb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2xpc3QvbGlzdC5jb21tb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUEyQixNQUFNLGVBQWUsQ0FBQzs7OztBQUVoRixnQ0FFQzs7O0lBREcsMkJBQWM7Ozs7OztBQUlsQjs7Ozs7SUFBQTtJQVdBLENBQUM7SUFBRCxrQkFBQztBQUFELENBQUMsQUFYRCxJQVdDOzs7Ozs7OztJQVZHLG9DQUFpQzs7SUFDakMsdUNBQTBCOztJQUMxQix3Q0FBMkI7O0lBQzNCLGdEQUFrQzs7SUFDbEMsZ0NBQTZCOztJQUM3QixpQ0FBOEI7O0lBQzlCLHVDQUFvQzs7SUFDcEMsK0JBQXlCOztJQUN6QixrREFBcUU7O0lBQ3JFLG1EQUF1RTs7OztJQUc3QyxPQUFJLEVBQUUsT0FBSSxFQUFFLFFBQUs7Ozs7OztBQUUvQztJQUlJLHVDQUFtQixRQUEwQjtRQUExQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUFJLENBQUM7O2dCQUpyRCxTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGdCQUFnQjtpQkFDN0I7Ozs7Z0JBeEJtQixXQUFXOztJQTJCL0Isb0NBQUM7Q0FBQSxBQUxELElBS0M7U0FGWSw2QkFBNkI7OztJQUMxQixpREFBaUM7O0FBR2pEO0lBSUkseUNBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUksQ0FBQzs7Z0JBSnJELFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsa0JBQWtCO2lCQUMvQjs7OztnQkEvQm1CLFdBQVc7O0lBa0MvQixzQ0FBQztDQUFBLEFBTEQsSUFLQztTQUZZLCtCQUErQjs7O0lBQzVCLG1EQUFpQzs7QUFHakQ7SUFJSSxpREFBbUIsUUFBMEI7UUFBMUIsYUFBUSxHQUFSLFFBQVEsQ0FBa0I7SUFBSSxDQUFDOztnQkFKckQsU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSwwQkFBMEI7aUJBQ3ZDOzs7O2dCQXRDbUIsV0FBVzs7SUF5Qy9CLDhDQUFDO0NBQUEsQUFMRCxJQUtDO1NBRlksdUNBQXVDOzs7SUFDcEMsMkRBQWlDOztBQUdqRDtJQUlJLGtEQUFtQixRQUEwQjtRQUExQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUFJLENBQUM7O2dCQUpyRCxTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLDJCQUEyQjtpQkFDeEM7Ozs7Z0JBN0NtQixXQUFXOztJQWdEL0IsK0NBQUM7Q0FBQSxBQUxELElBS0M7U0FGWSx3Q0FBd0M7OztJQUNyQyw0REFBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIFRlbXBsYXRlUmVmLCBFdmVudEVtaXR0ZXIsIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElMaXN0Q2hpbGQge1xuICAgIGluZGV4OiBudW1iZXI7XG59XG5cbi8qKiBAaGlkZGVuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSWd4TGlzdEJhc2Uge1xuICAgIG9uSXRlbUNsaWNrZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGFsbG93TGVmdFBhbm5pbmc6IGJvb2xlYW47XG4gICAgYWxsb3dSaWdodFBhbm5pbmc6IGJvb2xlYW47XG4gICAgcGFuRW5kVHJpZ2dlcmluZ1RocmVzaG9sZDogbnVtYmVyO1xuICAgIG9uTGVmdFBhbjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25SaWdodFBhbjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25QYW5TdGF0ZUNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY2hpbGRyZW46IFF1ZXJ5TGlzdDxhbnk+O1xuICAgIGxpc3RJdGVtTGVmdFBhbm5pbmdUZW1wbGF0ZTogSWd4TGlzdEl0ZW1MZWZ0UGFubmluZ1RlbXBsYXRlRGlyZWN0aXZlO1xuICAgIGxpc3RJdGVtUmlnaHRQYW5uaW5nVGVtcGxhdGU6IElneExpc3RJdGVtUmlnaHRQYW5uaW5nVGVtcGxhdGVEaXJlY3RpdmU7XG59XG5cbmV4cG9ydCBlbnVtIElneExpc3RQYW5TdGF0ZSB7IE5PTkUsIExFRlQsIFJJR0hUIH1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4RW1wdHlMaXN0XSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4RW1wdHlMaXN0VGVtcGxhdGVEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PikgeyB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneERhdGFMb2FkaW5nXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4RGF0YUxvYWRpbmdUZW1wbGF0ZURpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7IH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4TGlzdEl0ZW1MZWZ0UGFubmluZ10nXG59KVxuZXhwb3J0IGNsYXNzIElneExpc3RJdGVtTGVmdFBhbm5pbmdUZW1wbGF0ZURpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7IH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4TGlzdEl0ZW1SaWdodFBhbm5pbmddJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hMaXN0SXRlbVJpZ2h0UGFubmluZ1RlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxufVxuIl19