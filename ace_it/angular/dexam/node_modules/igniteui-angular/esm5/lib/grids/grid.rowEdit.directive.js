/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, forwardRef, HostListener, Inject } from '@angular/core';
import { IgxGridBaseComponent } from './grid-base.component';
import { first, tap } from 'rxjs/operators';
/**
 * @hidden
 */
var IgxRowEditTemplateDirective = /** @class */ (function () {
    function IgxRowEditTemplateDirective() {
    }
    IgxRowEditTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxRowEdit]'
                },] }
    ];
    return IgxRowEditTemplateDirective;
}());
export { IgxRowEditTemplateDirective };
/**
 * @hidden
 */
var IgxRowEditTextDirective = /** @class */ (function () {
    function IgxRowEditTextDirective() {
    }
    IgxRowEditTextDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxRowEditText]'
                },] }
    ];
    return IgxRowEditTextDirective;
}());
export { IgxRowEditTextDirective };
/**
 * @hidden
 */
var IgxRowEditActionsDirective = /** @class */ (function () {
    function IgxRowEditActionsDirective() {
    }
    IgxRowEditActionsDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxRowEditActions]'
                },] }
    ];
    return IgxRowEditActionsDirective;
}());
export { IgxRowEditActionsDirective };
// TODO: Refactor circular ref, deps and logic
/**
 * @hidden
 */
var IgxRowEditTabStopDirective = /** @class */ (function () {
    function IgxRowEditTabStopDirective(grid, element) {
        this.grid = grid;
        this.element = element;
    }
    Object.defineProperty(IgxRowEditTabStopDirective.prototype, "allTabs", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.grid.rowEditTabs;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    IgxRowEditTabStopDirective.prototype.handleTab = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        if (this.allTabs.length > 1) {
            if ((this.allTabs.last === this && !event.shiftKey) ||
                (this.allTabs.first === this && event.shiftKey)) {
                this.move(event);
            }
        }
        else {
            this.move(event);
        }
    };
    /**
     * @private
     * @param {?} rowIndex
     * @param {?} cellIndex
     * @return {?}
     */
    IgxRowEditTabStopDirective.prototype.focusNextCell = /**
     * @private
     * @param {?} rowIndex
     * @param {?} cellIndex
     * @return {?}
     */
    function (rowIndex, cellIndex) {
        /** @type {?} */
        var grid = (/** @type {?} */ (this.grid));
        grid.parentVirtDir.onChunkLoad.pipe(first(), tap(function () { return grid.markForCheck(); })).subscribe(function () {
            grid.rowInEditMode.cells.find(function (c) { return c.visibleColumnIndex === cellIndex; }).element.nativeElement.focus();
        });
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    IgxRowEditTabStopDirective.prototype.move = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        /** @type {?} */
        var horizontalScroll = this.grid.parentVirtDir.getHorizontalScroll();
        /** @type {?} */
        var targetIndex = event.shiftKey ? this.grid.lastEditableColumnIndex : this.grid.firstEditableColumnIndex;
        /** @type {?} */
        var targetCell = this.grid.rowInEditMode.cells.find(function (e) { return e.visibleColumnIndex === targetIndex; });
        if (!targetCell ||
            !this.grid.navigation.isColumnFullyVisible(targetIndex)
            || !this.grid.navigation.isColumnLeftFullyVisible(targetIndex)) {
            this.focusNextCell(this.grid.rowInEditMode.index, targetIndex);
            horizontalScroll.scrollLeft =
                this.grid.rowInEditMode.virtDirRow.getColumnScrollLeft(this.grid.navigation.getColumnUnpinnedIndex(targetIndex));
        }
        else {
            targetCell.nativeElement.focus();
        }
    };
    IgxRowEditTabStopDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[igxRowEditTabStop]"
                },] }
    ];
    /** @nocollapse */
    IgxRowEditTabStopDirective.ctorParameters = function () { return [
        { type: IgxGridBaseComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return IgxGridBaseComponent; }),] }] },
        { type: ElementRef }
    ]; };
    IgxRowEditTabStopDirective.propDecorators = {
        handleTab: [{ type: HostListener, args: ['keydown.Tab', ["$event"],] }, { type: HostListener, args: ['keydown.Shift.Tab', ["$event"],] }]
    };
    return IgxRowEditTabStopDirective;
}());
export { IgxRowEditTabStopDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxRowEditTabStopDirective.prototype.grid;
    /** @type {?} */
    IgxRowEditTabStopDirective.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5yb3dFZGl0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZ3JpZHMvZ3JpZC5yb3dFZGl0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDbkcsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDN0QsT0FBTyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQUc1QztJQUFBO0lBRzJDLENBQUM7O2dCQUgzQyxTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGNBQWM7aUJBQzNCOztJQUMwQyxrQ0FBQztDQUFBLEFBSDVDLElBRzRDO1NBQS9CLDJCQUEyQjs7OztBQUd4QztJQUFBO0lBR3VDLENBQUM7O2dCQUh2QyxTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtpQkFDL0I7O0lBQ3NDLDhCQUFDO0NBQUEsQUFIeEMsSUFHd0M7U0FBM0IsdUJBQXVCOzs7O0FBR3BDO0lBQUE7SUFHMEMsQ0FBQzs7Z0JBSDFDLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUscUJBQXFCO2lCQUNsQzs7SUFDeUMsaUNBQUM7Q0FBQSxBQUgzQyxJQUcyQztTQUE5QiwwQkFBMEI7Ozs7O0FBS3ZDO0lBUUksb0NBQzRELElBQTBCLEVBQzNFLE9BQW1CO1FBRDhCLFNBQUksR0FBSixJQUFJLENBQXNCO1FBQzNFLFlBQU8sR0FBUCxPQUFPLENBQVk7SUFDMUIsQ0FBQztJQVBMLHNCQUFZLCtDQUFPOzs7OztRQUFuQjtZQUNJLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDakMsQ0FBQzs7O09BQUE7Ozs7O0lBU00sOENBQVM7Ozs7SUFGaEIs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bUIsRUFBRSxDQUFDLFFBQVEsQ0FBQzs7SUFrQ2pELGlDQUFDO0NBQUEsQUFoREQsSUFnREM7U0E3Q1ksMEJBQTBCOzs7Ozs7SUFNL0IsMENBQWtGOztJQUNsRiw2Q0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIGZvcndhcmRSZWYsIEhvc3RMaXN0ZW5lciwgSW5qZWN0LCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneEdyaWRCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi9ncmlkLWJhc2UuY29tcG9uZW50JztcbmltcG9ydCB7IGZpcnN0LCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbi8qKiBAaGlkZGVuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hSb3dFZGl0XSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4Um93RWRpdFRlbXBsYXRlRGlyZWN0aXZlIHsgfVxuXG4vKiogQGhpZGRlbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4Um93RWRpdFRleHRdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hSb3dFZGl0VGV4dERpcmVjdGl2ZSB7IH1cblxuLyoqIEBoaWRkZW4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneFJvd0VkaXRBY3Rpb25zXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4Um93RWRpdEFjdGlvbnNEaXJlY3RpdmUgeyB9XG5cblxuLy8gVE9ETzogUmVmYWN0b3IgY2lyY3VsYXIgcmVmLCBkZXBzIGFuZCBsb2dpY1xuLyoqIEBoaWRkZW4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiBgW2lneFJvd0VkaXRUYWJTdG9wXWBcbn0pXG5leHBvcnQgY2xhc3MgSWd4Um93RWRpdFRhYlN0b3BEaXJlY3RpdmUge1xuICAgIHByaXZhdGUgZ2V0IGFsbFRhYnMoKTogUXVlcnlMaXN0PElneFJvd0VkaXRUYWJTdG9wRGlyZWN0aXZlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWQucm93RWRpdFRhYnM7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBJZ3hHcmlkQmFzZUNvbXBvbmVudCkpIHByaXZhdGUgZ3JpZDogSWd4R3JpZEJhc2VDb21wb25lbnQsXG4gICAgICAgIHB1YmxpYyBlbGVtZW50OiBFbGVtZW50UmVmKSB7XG4gICAgICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uVGFiJywgW2AkZXZlbnRgXSlcbiAgICBASG9zdExpc3RlbmVyKCdrZXlkb3duLlNoaWZ0LlRhYicsIFtgJGV2ZW50YF0pXG4gICAgcHVibGljIGhhbmRsZVRhYihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgaWYgKHRoaXMuYWxsVGFicy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBpZiAoKHRoaXMuYWxsVGFicy5sYXN0ID09PSAgdGhpcyAmJiAhZXZlbnQuc2hpZnRLZXkpIHx8XG4gICAgICAgICAgICAgICAgKHRoaXMuYWxsVGFicy5maXJzdCA9PT0gIHRoaXMgJiYgZXZlbnQuc2hpZnRLZXkpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmUoZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tb3ZlKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwcml2YXRlIGZvY3VzTmV4dENlbGwocm93SW5kZXgsIGNlbGxJbmRleCkge1xuICAgICAgICBjb25zdCBncmlkID0gdGhpcy5ncmlkIGFzIGFueTtcbiAgICAgICAgZ3JpZC5wYXJlbnRWaXJ0RGlyLm9uQ2h1bmtMb2FkLnBpcGUoZmlyc3QoKSwgdGFwKCgpID0+IGdyaWQubWFya0ZvckNoZWNrKCkpKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgZ3JpZC5yb3dJbkVkaXRNb2RlLmNlbGxzLmZpbmQoYyA9PiBjLnZpc2libGVDb2x1bW5JbmRleCA9PT0gY2VsbEluZGV4KS5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHByaXZhdGUgbW92ZShldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjb25zdCBob3Jpem9udGFsU2Nyb2xsID0gdGhpcy5ncmlkLnBhcmVudFZpcnREaXIuZ2V0SG9yaXpvbnRhbFNjcm9sbCgpO1xuICAgICAgICBjb25zdCB0YXJnZXRJbmRleCA9IGV2ZW50LnNoaWZ0S2V5ID8gdGhpcy5ncmlkLmxhc3RFZGl0YWJsZUNvbHVtbkluZGV4IDogdGhpcy5ncmlkLmZpcnN0RWRpdGFibGVDb2x1bW5JbmRleDtcbiAgICAgICAgY29uc3QgdGFyZ2V0Q2VsbCA9IHRoaXMuZ3JpZC5yb3dJbkVkaXRNb2RlLmNlbGxzLmZpbmQoZSA9PiBlLnZpc2libGVDb2x1bW5JbmRleCA9PT0gdGFyZ2V0SW5kZXgpO1xuICAgICAgICBpZiAoIXRhcmdldENlbGwgfHxcbiAgICAgICAgICAgICF0aGlzLmdyaWQubmF2aWdhdGlvbi5pc0NvbHVtbkZ1bGx5VmlzaWJsZSh0YXJnZXRJbmRleClcbiAgICAgICAgICAgIHx8ICF0aGlzLmdyaWQubmF2aWdhdGlvbi5pc0NvbHVtbkxlZnRGdWxseVZpc2libGUodGFyZ2V0SW5kZXgpKSB7XG4gICAgICAgICAgICB0aGlzLmZvY3VzTmV4dENlbGwodGhpcy5ncmlkLnJvd0luRWRpdE1vZGUuaW5kZXgsIHRhcmdldEluZGV4KTtcbiAgICAgICAgICAgIGhvcml6b250YWxTY3JvbGwuc2Nyb2xsTGVmdCA9XG4gICAgICAgICAgICB0aGlzLmdyaWQucm93SW5FZGl0TW9kZS52aXJ0RGlyUm93LmdldENvbHVtblNjcm9sbExlZnQodGhpcy5ncmlkLm5hdmlnYXRpb24uZ2V0Q29sdW1uVW5waW5uZWRJbmRleCh0YXJnZXRJbmRleCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0Q2VsbC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=