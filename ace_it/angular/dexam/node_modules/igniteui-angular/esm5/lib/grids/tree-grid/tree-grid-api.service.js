/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { GridBaseAPIService } from '../api.service';
import { DataType } from '../../data-operations/data-util';
import { TransactionType } from '../../services';
import { mergeObjects } from '../../core/utils';
var IgxTreeGridAPIService = /** @class */ (function (_super) {
    tslib_1.__extends(IgxTreeGridAPIService, _super);
    function IgxTreeGridAPIService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?=} transactions
     * @return {?}
     */
    IgxTreeGridAPIService.prototype.get_all_data = /**
     * @param {?=} transactions
     * @return {?}
     */
    function (transactions) {
        /** @type {?} */
        var grid = this.grid;
        /** @type {?} */
        var data = transactions ? grid.dataWithAddedInTransactionRows : grid.flatData;
        return data ? data : [];
    };
    /**
     * @return {?}
     */
    IgxTreeGridAPIService.prototype.get_summary_data = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var grid = this.grid;
        /** @type {?} */
        var data = grid.processedRootRecords.filter(function (row) { return row.isFilteredOutParent === undefined || row.isFilteredOutParent === false; })
            .map(function (rec) { return rec.data; });
        if (grid.transactions.enabled) {
            /** @type {?} */
            var deletedRows = grid.transactions.getTransactionLog().filter(function (t) { return t.type === TransactionType.DELETE; }).map(function (t) { return t.id; });
            deletedRows.forEach(function (rowID) {
                /** @type {?} */
                var tempData = grid.primaryKey ? data.map(function (rec) { return rec[grid.primaryKey]; }) : data;
                /** @type {?} */
                var index = tempData.indexOf(rowID);
                if (index !== -1) {
                    data.splice(index, 1);
                }
            });
        }
        return data;
    };
    /**
     * @param {?} rowID
     * @return {?}
     */
    IgxTreeGridAPIService.prototype.expand_row = /**
     * @param {?} rowID
     * @return {?}
     */
    function (rowID) {
        /** @type {?} */
        var grid = this.grid;
        /** @type {?} */
        var expandedStates = grid.expansionStates;
        expandedStates.set(rowID, true);
        grid.expansionStates = expandedStates;
        if (grid.rowEditable) {
            grid.endEdit(true);
        }
    };
    /**
     * @param {?} rowID
     * @return {?}
     */
    IgxTreeGridAPIService.prototype.collapse_row = /**
     * @param {?} rowID
     * @return {?}
     */
    function (rowID) {
        /** @type {?} */
        var grid = this.grid;
        /** @type {?} */
        var expandedStates = grid.expansionStates;
        expandedStates.set(rowID, false);
        grid.expansionStates = expandedStates;
        if (grid.rowEditable) {
            grid.endEdit(true);
        }
    };
    /**
     * @param {?} rowID
     * @return {?}
     */
    IgxTreeGridAPIService.prototype.toggle_row_expansion = /**
     * @param {?} rowID
     * @return {?}
     */
    function (rowID) {
        /** @type {?} */
        var grid = this.grid;
        /** @type {?} */
        var expandedStates = grid.expansionStates;
        /** @type {?} */
        var treeRecord = grid.records.get(rowID);
        if (treeRecord) {
            /** @type {?} */
            var isExpanded = this.get_row_expansion_state(treeRecord);
            expandedStates.set(rowID, !isExpanded);
            grid.expansionStates = expandedStates;
        }
        if (grid.rowEditable) {
            grid.endEdit(true);
        }
    };
    /**
     * @param {?} row
     * @param {?} expanded
     * @param {?=} event
     * @param {?=} visibleColumnIndex
     * @return {?}
     */
    IgxTreeGridAPIService.prototype.trigger_row_expansion_toggle = /**
     * @param {?} row
     * @param {?} expanded
     * @param {?=} event
     * @param {?=} visibleColumnIndex
     * @return {?}
     */
    function (row, expanded, event, visibleColumnIndex) {
        var _this = this;
        /** @type {?} */
        var grid = this.grid;
        if (!row.children || row.children.length <= 0 && row.expanded === expanded) {
            return;
        }
        /** @type {?} */
        var args = {
            rowID: row.rowID,
            expanded: expanded,
            event: event,
            cancel: false
        };
        grid.onRowToggle.emit(args);
        if (args.cancel) {
            return;
        }
        visibleColumnIndex = visibleColumnIndex ? visibleColumnIndex : 0;
        /** @type {?} */
        var expandedStates = grid.expansionStates;
        expandedStates.set(row.rowID, expanded);
        grid.expansionStates = expandedStates;
        if (grid.rowEditable) {
            grid.endEdit(true);
        }
        requestAnimationFrame(function () {
            /** @type {?} */
            var el = _this.grid.selectionService.activeElement;
            if (el) {
                /** @type {?} */
                var cell = _this.get_cell_by_visible_index(el.row, el.column);
                if (cell) {
                    cell.nativeElement.focus();
                }
            }
        });
    };
    /**
     * @param {?} record
     * @return {?}
     */
    IgxTreeGridAPIService.prototype.expand_path_to_record = /**
     * @param {?} record
     * @return {?}
     */
    function (record) {
        /** @type {?} */
        var grid = this.grid;
        /** @type {?} */
        var expandedStates = grid.expansionStates;
        while (record.parent) {
            record = record.parent;
            /** @type {?} */
            var expanded = this.get_row_expansion_state(record);
            if (!expanded) {
                expandedStates.set(record.rowID, true);
            }
        }
        grid.expansionStates = expandedStates;
        if (grid.rowEditable) {
            grid.endEdit(true);
        }
    };
    /**
     * @param {?} record
     * @return {?}
     */
    IgxTreeGridAPIService.prototype.get_row_expansion_state = /**
     * @param {?} record
     * @return {?}
     */
    function (record) {
        /** @type {?} */
        var grid = this.grid;
        /** @type {?} */
        var states = grid.expansionStates;
        /** @type {?} */
        var expanded = states.get(record.rowID);
        if (expanded !== undefined) {
            return expanded;
        }
        else {
            return record.level < grid.expansionDepth;
        }
    };
    /**
     * @protected
     * @param {?} value
     * @param {?} rowID
     * @param {?} index
     * @return {?}
     */
    IgxTreeGridAPIService.prototype.update_row_in_array = /**
     * @protected
     * @param {?} value
     * @param {?} rowID
     * @param {?} index
     * @return {?}
     */
    function (value, rowID, index) {
        /** @type {?} */
        var grid = this.grid;
        if (grid.primaryKey && grid.foreignKey) {
            _super.prototype.update_row_in_array.call(this, value, rowID, index);
        }
        else {
            /** @type {?} */
            var record = grid.records.get(rowID);
            /** @type {?} */
            var childData = record.parent ? record.parent.data[grid.childDataKey] : grid.data;
            index = grid.primaryKey ? childData.map(function (c) { return c[grid.primaryKey]; }).indexOf(rowID) :
                childData.indexOf(rowID);
            childData[index] = value;
        }
    };
    /**
     * @param {?} column
     * @return {?}
     */
    IgxTreeGridAPIService.prototype.should_apply_number_style = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return column.dataType === DataType.Number && column.visibleIndex !== 0;
    };
    /**
     * @param {?} rowID
     * @return {?}
     */
    IgxTreeGridAPIService.prototype.deleteRowById = /**
     * @param {?} rowID
     * @return {?}
     */
    function (rowID) {
        /** @type {?} */
        var treeGrid = this.grid;
        /** @type {?} */
        var flatDataWithCascadeOnDeleteAndTransactions = treeGrid.primaryKey &&
            treeGrid.foreignKey &&
            treeGrid.cascadeOnDelete &&
            treeGrid.transactions.enabled;
        if (flatDataWithCascadeOnDeleteAndTransactions) {
            treeGrid.transactions.startPending();
        }
        _super.prototype.deleteRowById.call(this, rowID);
        if (flatDataWithCascadeOnDeleteAndTransactions) {
            treeGrid.transactions.endPending(true);
        }
    };
    /**
     * @param {?} rowID
     * @param {?} index
     * @return {?}
     */
    IgxTreeGridAPIService.prototype.deleteRowFromData = /**
     * @param {?} rowID
     * @param {?} index
     * @return {?}
     */
    function (rowID, index) {
        /** @type {?} */
        var treeGrid = this.grid;
        /** @type {?} */
        var record = treeGrid.records.get(rowID);
        if (treeGrid.primaryKey && treeGrid.foreignKey) {
            index = treeGrid.primaryKey ?
                treeGrid.data.map(function (c) { return c[treeGrid.primaryKey]; }).indexOf(rowID) :
                treeGrid.data.indexOf(rowID);
            _super.prototype.deleteRowFromData.call(this, rowID, index);
            if (treeGrid.cascadeOnDelete) {
                if (record && record.children && record.children.length > 0) {
                    for (var i = 0; i < record.children.length; i++) {
                        /** @type {?} */
                        var child = record.children[i];
                        _super.prototype.deleteRowById.call(this, child.rowID);
                    }
                }
            }
        }
        else {
            /** @type {?} */
            var collection = record.parent ? record.parent.data[treeGrid.childDataKey] : treeGrid.data;
            index = treeGrid.primaryKey ?
                collection.map(function (c) { return c[treeGrid.primaryKey]; }).indexOf(rowID) :
                collection.indexOf(rowID);
            /** @type {?} */
            var selectedChildren = [];
            this.get_selected_children(record, selectedChildren);
            if (selectedChildren.length > 0) {
                treeGrid.deselectRows(selectedChildren);
            }
            if (treeGrid.transactions.enabled) {
                /** @type {?} */
                var path = treeGrid.generateRowPath(rowID);
                treeGrid.transactions.add({
                    id: rowID,
                    type: TransactionType.DELETE,
                    newValue: null,
                    path: path
                }, collection[index]);
            }
            else {
                collection.splice(index, 1);
            }
        }
    };
    /**
     * Updates related row of provided grid's data source with provided new row value
     * @param grid Grid to update data for
     * @param rowID ID of the row to update
     * @param rowValueInDataSource Initial value of the row as it is in data source
     * @param rowCurrentValue Current value of the row as it is with applied previous transactions
     * @param rowNewValue New value of the row
     */
    /**
     * Updates related row of provided grid's data source with provided new row value
     * @protected
     * @param {?} grid Grid to update data for
     * @param {?} rowID ID of the row to update
     * @param {?} rowValueInDataSource Initial value of the row as it is in data source
     * @param {?} rowCurrentValue Current value of the row as it is with applied previous transactions
     * @param {?} rowNewValue New value of the row
     * @return {?}
     */
    IgxTreeGridAPIService.prototype.updateData = /**
     * Updates related row of provided grid's data source with provided new row value
     * @protected
     * @param {?} grid Grid to update data for
     * @param {?} rowID ID of the row to update
     * @param {?} rowValueInDataSource Initial value of the row as it is in data source
     * @param {?} rowCurrentValue Current value of the row as it is with applied previous transactions
     * @param {?} rowNewValue New value of the row
     * @return {?}
     */
    function (grid, rowID, rowValueInDataSource, rowCurrentValue, rowNewValue) {
        if (grid.transactions.enabled) {
            /** @type {?} */
            var path = grid.generateRowPath(rowID);
            /** @type {?} */
            var transaction = {
                id: rowID,
                type: TransactionType.UPDATE,
                newValue: rowNewValue,
                path: path
            };
            grid.transactions.add(transaction, rowCurrentValue);
        }
        else {
            mergeObjects(rowValueInDataSource, rowNewValue);
        }
    };
    /**
     * @param {?} record
     * @param {?} selectedRowIDs
     * @return {?}
     */
    IgxTreeGridAPIService.prototype.get_selected_children = /**
     * @param {?} record
     * @param {?} selectedRowIDs
     * @return {?}
     */
    function (record, selectedRowIDs) {
        var e_1, _a;
        /** @type {?} */
        var grid = this.grid;
        if (!record.children || record.children.length === 0) {
            return;
        }
        try {
            for (var _b = tslib_1.__values(record.children), _c = _b.next(); !_c.done; _c = _b.next()) {
                var child = _c.value;
                if (grid.selection.is_item_selected(grid.id, child.rowID)) {
                    selectedRowIDs.push(child.rowID);
                }
                this.get_selected_children(child, selectedRowIDs);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @param {?} rowID
     * @return {?}
     */
    IgxTreeGridAPIService.prototype.row_deleted_transaction = /**
     * @param {?} rowID
     * @return {?}
     */
    function (rowID) {
        return this.row_deleted_parent(rowID) || _super.prototype.row_deleted_transaction.call(this, rowID);
    };
    /**
     * @private
     * @param {?} rowID
     * @return {?}
     */
    IgxTreeGridAPIService.prototype.row_deleted_parent = /**
     * @private
     * @param {?} rowID
     * @return {?}
     */
    function (rowID) {
        /** @type {?} */
        var grid = this.grid;
        if (!grid) {
            return false;
        }
        if ((grid.cascadeOnDelete && grid.foreignKey) || grid.childDataKey) {
            /** @type {?} */
            var node = grid.records.get(rowID);
            while (node) {
                /** @type {?} */
                var state = grid.transactions.getState(node.rowID);
                if (state && state.type === TransactionType.DELETE) {
                    return true;
                }
                node = node.parent;
            }
        }
        return false;
    };
    return IgxTreeGridAPIService;
}(GridBaseAPIService));
export { IgxTreeGridAPIService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ncmlkLWFwaS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9ncmlkcy90cmVlLWdyaWQvdHJlZS1ncmlkLWFwaS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFcEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBSTNELE9BQU8sRUFBMkIsZUFBZSxFQUFTLE1BQU0sZ0JBQWdCLENBQUM7QUFDakYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWhEO0lBQTJDLGlEQUF3QztJQUFuRjs7SUFnUkEsQ0FBQzs7Ozs7SUEvUVUsNENBQVk7Ozs7SUFBbkIsVUFBb0IsWUFBc0I7O1lBQ2hDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSTs7WUFDaEIsSUFBSSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLDhCQUE4QixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUTtRQUMvRSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDNUIsQ0FBQzs7OztJQUVNLGdEQUFnQjs7O0lBQXZCOztZQUNVLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSTs7WUFDaEIsSUFBSSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxHQUFHLENBQUMsbUJBQW1CLEtBQUssU0FBUyxJQUFJLEdBQUcsQ0FBQyxtQkFBbUIsS0FBSyxLQUFLLEVBQTFFLENBQTBFLENBQUM7YUFDM0gsR0FBRyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxDQUFDLElBQUksRUFBUixDQUFRLENBQUM7UUFDekIsSUFBSSxJQUFJLENBQUMsWUFBWSxD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OztJQUExQixVQUEyQixLQUFVOztZQUMzQixJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUk7UUFDdEIsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNQLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7O2dCQUM1RCxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO1lBQ2xDLE9BQU8sSUFBSSxFQUFFOztvQkFDSCxLQUFLLEdBQVUsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDM0QsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxlQUFlLENBQUMsTUFBTSxFQUFFO29CQUNoRCxPQUFPLElBQUksQ0FBQztpQkFDZjtnQkFDRCxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQzthQUN0QjtTQUNKO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUNMLDRCQUFDO0FBQUQsQ0FBQyxBQWhSRCxDQUEyQyxrQkFBa0IsR0FnUjVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR3JpZEJhc2VBUElTZXJ2aWNlIH0gZnJvbSAnLi4vYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgSWd4VHJlZUdyaWRDb21wb25lbnQgfSBmcm9tICcuL3RyZWUtZ3JpZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGF0YVR5cGUgfSBmcm9tICcuLi8uLi9kYXRhLW9wZXJhdGlvbnMvZGF0YS11dGlsJztcbmltcG9ydCB7IElUcmVlR3JpZFJlY29yZCB9IGZyb20gJy4vdHJlZS1ncmlkLmludGVyZmFjZXMnO1xuaW1wb3J0IHsgSVJvd1RvZ2dsZUV2ZW50QXJncyB9IGZyb20gJy4vdHJlZS1ncmlkLmludGVyZmFjZXMnO1xuaW1wb3J0IHsgSWd4Q29sdW1uQ29tcG9uZW50IH0gZnJvbSAnLi4vY29sdW1uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBIaWVyYXJjaGljYWxUcmFuc2FjdGlvbiwgVHJhbnNhY3Rpb25UeXBlLCBTdGF0ZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzJztcbmltcG9ydCB7IG1lcmdlT2JqZWN0cyB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbHMnO1xuXG5leHBvcnQgY2xhc3MgSWd4VHJlZUdyaWRBUElTZXJ2aWNlIGV4dGVuZHMgR3JpZEJhc2VBUElTZXJ2aWNlPElneFRyZWVHcmlkQ29tcG9uZW50PiB7XG4gICAgcHVibGljIGdldF9hbGxfZGF0YSh0cmFuc2FjdGlvbnM/OiBib29sZWFuKTogYW55W10ge1xuICAgICAgICBjb25zdCBncmlkID0gdGhpcy5ncmlkO1xuICAgICAgICBjb25zdCBkYXRhID0gdHJhbnNhY3Rpb25zID8gZ3JpZC5kYXRhV2l0aEFkZGVkSW5UcmFuc2FjdGlvblJvd3MgOiBncmlkLmZsYXREYXRhO1xuICAgICAgICByZXR1cm4gZGF0YSA/IGRhdGEgOiBbXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0X3N1bW1hcnlfZGF0YSgpIHtcbiAgICAgICAgY29uc3QgZ3JpZCA9IHRoaXMuZ3JpZDtcbiAgICAgICAgY29uc3QgZGF0YSA9IGdyaWQucHJvY2Vzc2VkUm9vdFJlY29yZHMuZmlsdGVyKHJvdyA9PiByb3cuaXNGaWx0ZXJlZE91dFBhcmVudCA9PT0gdW5kZWZpbmVkIHx8IHJvdy5pc0ZpbHRlcmVkT3V0UGFyZW50ID09PSBmYWxzZSlcbiAgICAgICAgICAgIC5tYXAocmVjID0+IHJlYy5kYXRhKTtcbiAgICAgICAgaWYgKGdyaWQudHJhbnNhY3Rpb25zLmVuYWJsZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlbGV0ZWRSb3dzID0gZ3JpZC50cmFuc2FjdGlvbnMuZ2V0VHJhbnNhY3Rpb25Mb2coKS5maWx0ZXIodCA9PiB0LnR5cGUgPT09IFRyYW5zYWN0aW9uVHlwZS5ERUxFVEUpLm1hcCh0ID0+IHQuaWQpO1xuICAgICAgICAgICAgZGVsZXRlZFJvd3MuZm9yRWFjaChyb3dJRCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcERhdGEgPSBncmlkLnByaW1hcnlLZXkgPyBkYXRhLm1hcChyZWMgPT4gcmVjW2dyaWQucHJpbWFyeUtleV0pIDogZGF0YTtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IHRlbXBEYXRhLmluZGV4T2Yocm93SUQpO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHB1YmxpYyBleHBhbmRfcm93KHJvd0lEOiBhbnkpIHtcbiAgICAgICAgY29uc3QgZ3JpZCA9IHRoaXMuZ3JpZDtcbiAgICAgICAgY29uc3QgZXhwYW5kZWRTdGF0ZXMgPSBncmlkLmV4cGFuc2lvblN0YXRlcztcbiAgICAgICAgZXhwYW5kZWRTdGF0ZXMuc2V0KHJvd0lELCB0cnVlKTtcbiAgICAgICAgZ3JpZC5leHBhbnNpb25TdGF0ZXMgPSBleHBhbmRlZFN0YXRlcztcbiAgICAgICAgaWYgKGdyaWQucm93RWRpdGFibGUpIHtcbiAgICAgICAgICAgIGdyaWQuZW5kRWRpdCh0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBjb2xsYXBzZV9yb3cocm93SUQ6IGFueSkge1xuICAgICAgICBjb25zdCBncmlkID0gdGhpcy5ncmlkO1xuICAgICAgICBjb25zdCBleHBhbmRlZFN0YXRlcyA9IGdyaWQuZXhwYW5zaW9uU3RhdGVzO1xuICAgICAgICBleHBhbmRlZFN0YXRlcy5zZXQocm93SUQsIGZhbHNlKTtcbiAgICAgICAgZ3JpZC5leHBhbnNpb25TdGF0ZXMgPSBleHBhbmRlZFN0YXRlcztcbiAgICAgICAgaWYgKGdyaWQucm93RWRpdGFibGUpIHtcbiAgICAgICAgICAgIGdyaWQuZW5kRWRpdCh0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyB0b2dnbGVfcm93X2V4cGFuc2lvbihyb3dJRDogYW55KSB7XG4gICAgICAgIGNvbnN0IGdyaWQgPSB0aGlzLmdyaWQ7XG4gICAgICAgIGNvbnN0IGV4cGFuZGVkU3RhdGVzID0gZ3JpZC5leHBhbnNpb25TdGF0ZXM7XG4gICAgICAgIGNvbnN0IHRyZWVSZWNvcmQgPSBncmlkLnJlY29yZHMuZ2V0KHJvd0lEKTtcblxuICAgICAgICBpZiAodHJlZVJlY29yZCkge1xuICAgICAgICAgICAgY29uc3QgaXNFeHBhbmRlZCA9IHRoaXMuZ2V0X3Jvd19leHBhbnNpb25fc3RhdGUodHJlZVJlY29yZCk7XG4gICAgICAgICAgICBleHBhbmRlZFN0YXRlcy5zZXQocm93SUQsICFpc0V4cGFuZGVkKTtcbiAgICAgICAgICAgIGdyaWQuZXhwYW5zaW9uU3RhdGVzID0gZXhwYW5kZWRTdGF0ZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdyaWQucm93RWRpdGFibGUpIHtcbiAgICAgICAgICAgIGdyaWQuZW5kRWRpdCh0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyB0cmlnZ2VyX3Jvd19leHBhbnNpb25fdG9nZ2xlKHJvdzogSVRyZWVHcmlkUmVjb3JkLCBleHBhbmRlZDogYm9vbGVhbiwgZXZlbnQ/OiBFdmVudCwgdmlzaWJsZUNvbHVtbkluZGV4Pykge1xuICAgICAgICBjb25zdCBncmlkID0gdGhpcy5ncmlkO1xuXG4gICAgICAgIGlmICghcm93LmNoaWxkcmVuIHx8IHJvdy5jaGlsZHJlbi5sZW5ndGggPD0gMCAmJiByb3cuZXhwYW5kZWQgPT09IGV4cGFuZGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhcmdzOiBJUm93VG9nZ2xlRXZlbnRBcmdzID0ge1xuICAgICAgICAgICAgcm93SUQ6IHJvdy5yb3dJRCxcbiAgICAgICAgICAgIGV4cGFuZGVkOiBleHBhbmRlZCxcbiAgICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICAgIGNhbmNlbDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgZ3JpZC5vblJvd1RvZ2dsZS5lbWl0KGFyZ3MpO1xuXG4gICAgICAgIGlmIChhcmdzLmNhbmNlbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZpc2libGVDb2x1bW5JbmRleCA9IHZpc2libGVDb2x1bW5JbmRleCA/IHZpc2libGVDb2x1bW5JbmRleCA6IDA7XG4gICAgICAgIGNvbnN0IGV4cGFuZGVkU3RhdGVzID0gZ3JpZC5leHBhbnNpb25TdGF0ZXM7XG4gICAgICAgIGV4cGFuZGVkU3RhdGVzLnNldChyb3cucm93SUQsIGV4cGFuZGVkKTtcbiAgICAgICAgZ3JpZC5leHBhbnNpb25TdGF0ZXMgPSBleHBhbmRlZFN0YXRlcztcblxuICAgICAgICBpZiAoZ3JpZC5yb3dFZGl0YWJsZSkge1xuICAgICAgICAgICAgZ3JpZC5lbmRFZGl0KHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsID0gdGhpcy5ncmlkLnNlbGVjdGlvblNlcnZpY2UuYWN0aXZlRWxlbWVudDtcbiAgICAgICAgICAgIGlmIChlbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNlbGwgPSB0aGlzLmdldF9jZWxsX2J5X3Zpc2libGVfaW5kZXgoZWwucm93LCBlbC5jb2x1bW4pO1xuICAgICAgICAgICAgICAgIGlmIChjZWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNlbGwubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGV4cGFuZF9wYXRoX3RvX3JlY29yZChyZWNvcmQ6IElUcmVlR3JpZFJlY29yZCkge1xuICAgICAgICBjb25zdCBncmlkID0gdGhpcy5ncmlkO1xuICAgICAgICBjb25zdCBleHBhbmRlZFN0YXRlcyA9IGdyaWQuZXhwYW5zaW9uU3RhdGVzO1xuXG4gICAgICAgIHdoaWxlIChyZWNvcmQucGFyZW50KSB7XG4gICAgICAgICAgICByZWNvcmQgPSByZWNvcmQucGFyZW50O1xuICAgICAgICAgICAgY29uc3QgZXhwYW5kZWQgPSB0aGlzLmdldF9yb3dfZXhwYW5zaW9uX3N0YXRlKHJlY29yZCk7XG5cbiAgICAgICAgICAgIGlmICghZXhwYW5kZWQpIHtcbiAgICAgICAgICAgICAgICBleHBhbmRlZFN0YXRlcy5zZXQocmVjb3JkLnJvd0lELCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBncmlkLmV4cGFuc2lvblN0YXRlcyA9IGV4cGFuZGVkU3RhdGVzO1xuXG4gICAgICAgIGlmIChncmlkLnJvd0VkaXRhYmxlKSB7XG4gICAgICAgICAgICBncmlkLmVuZEVkaXQodHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0X3Jvd19leHBhbnNpb25fc3RhdGUocmVjb3JkOiBJVHJlZUdyaWRSZWNvcmQpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgZ3JpZCA9IHRoaXMuZ3JpZDtcbiAgICAgICAgY29uc3Qgc3RhdGVzID0gZ3JpZC5leHBhbnNpb25TdGF0ZXM7XG4gICAgICAgIGNvbnN0IGV4cGFuZGVkID0gc3RhdGVzLmdldChyZWNvcmQucm93SUQpO1xuXG4gICAgICAgIGlmIChleHBhbmRlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhwYW5kZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkLmxldmVsIDwgZ3JpZC5leHBhbnNpb25EZXB0aDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCB1cGRhdGVfcm93X2luX2FycmF5KHZhbHVlOiBhbnksIHJvd0lEOiBhbnksIGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgZ3JpZCA9IHRoaXMuZ3JpZDtcbiAgICAgICAgaWYgKGdyaWQucHJpbWFyeUtleSAmJiBncmlkLmZvcmVpZ25LZXkpIHtcbiAgICAgICAgICAgIHN1cGVyLnVwZGF0ZV9yb3dfaW5fYXJyYXkodmFsdWUsIHJvd0lELCBpbmRleCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCByZWNvcmQgPSBncmlkLnJlY29yZHMuZ2V0KHJvd0lEKTtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkRGF0YSA9IHJlY29yZC5wYXJlbnQgPyByZWNvcmQucGFyZW50LmRhdGFbZ3JpZC5jaGlsZERhdGFLZXldIDogZ3JpZC5kYXRhO1xuICAgICAgICAgICAgaW5kZXggPSBncmlkLnByaW1hcnlLZXkgPyBjaGlsZERhdGEubWFwKGMgPT4gY1tncmlkLnByaW1hcnlLZXldKS5pbmRleE9mKHJvd0lEKSA6XG4gICAgICAgICAgICAgICAgY2hpbGREYXRhLmluZGV4T2Yocm93SUQpO1xuICAgICAgICAgICAgY2hpbGREYXRhW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHNob3VsZF9hcHBseV9udW1iZXJfc3R5bGUoY29sdW1uOiBJZ3hDb2x1bW5Db21wb25lbnQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGNvbHVtbi5kYXRhVHlwZSA9PT0gRGF0YVR5cGUuTnVtYmVyICYmIGNvbHVtbi52aXNpYmxlSW5kZXggIT09IDA7XG4gICAgfVxuXG4gICAgcHVibGljIGRlbGV0ZVJvd0J5SWQocm93SUQ6IGFueSkge1xuICAgICAgICBjb25zdCB0cmVlR3JpZCA9IHRoaXMuZ3JpZDtcbiAgICAgICAgY29uc3QgZmxhdERhdGFXaXRoQ2FzY2FkZU9uRGVsZXRlQW5kVHJhbnNhY3Rpb25zID1cbiAgICAgICAgdHJlZUdyaWQucHJpbWFyeUtleSAmJlxuICAgICAgICB0cmVlR3JpZC5mb3JlaWduS2V5ICYmXG4gICAgICAgIHRyZWVHcmlkLmNhc2NhZGVPbkRlbGV0ZSAmJlxuICAgICAgICB0cmVlR3JpZC50cmFuc2FjdGlvbnMuZW5hYmxlZDtcblxuICAgICAgICBpZiAoZmxhdERhdGFXaXRoQ2FzY2FkZU9uRGVsZXRlQW5kVHJhbnNhY3Rpb25zKSB7XG4gICAgICAgICAgICB0cmVlR3JpZC50cmFuc2FjdGlvbnMuc3RhcnRQZW5kaW5nKCk7XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlci5kZWxldGVSb3dCeUlkKHJvd0lEKTtcblxuICAgICAgICBpZiAoZmxhdERhdGFXaXRoQ2FzY2FkZU9uRGVsZXRlQW5kVHJhbnNhY3Rpb25zKSB7XG4gICAgICAgICAgICB0cmVlR3JpZC50cmFuc2FjdGlvbnMuZW5kUGVuZGluZyh0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBkZWxldGVSb3dGcm9tRGF0YShyb3dJRDogYW55LCBpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHRyZWVHcmlkID0gdGhpcy5ncmlkO1xuICAgICAgICBjb25zdCByZWNvcmQgPSB0cmVlR3JpZC5yZWNvcmRzLmdldChyb3dJRCk7XG5cbiAgICAgICAgaWYgKHRyZWVHcmlkLnByaW1hcnlLZXkgJiYgdHJlZUdyaWQuZm9yZWlnbktleSkge1xuICAgICAgICAgICAgaW5kZXggPSB0cmVlR3JpZC5wcmltYXJ5S2V5ID9cbiAgICAgICAgICAgICAgICB0cmVlR3JpZC5kYXRhLm1hcChjID0+IGNbdHJlZUdyaWQucHJpbWFyeUtleV0pLmluZGV4T2Yocm93SUQpIDpcbiAgICAgICAgICAgICAgICB0cmVlR3JpZC5kYXRhLmluZGV4T2Yocm93SUQpO1xuICAgICAgICAgICAgc3VwZXIuZGVsZXRlUm93RnJvbURhdGEocm93SUQsIGluZGV4KTtcblxuICAgICAgICAgICAgaWYgKHRyZWVHcmlkLmNhc2NhZGVPbkRlbGV0ZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZWNvcmQgJiYgcmVjb3JkLmNoaWxkcmVuICYmIHJlY29yZC5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVjb3JkLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IHJlY29yZC5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyLmRlbGV0ZVJvd0J5SWQoY2hpbGQucm93SUQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgY29sbGVjdGlvbiA9IHJlY29yZC5wYXJlbnQgPyByZWNvcmQucGFyZW50LmRhdGFbdHJlZUdyaWQuY2hpbGREYXRhS2V5XSA6IHRyZWVHcmlkLmRhdGE7XG4gICAgICAgICAgICBpbmRleCA9IHRyZWVHcmlkLnByaW1hcnlLZXkgP1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb24ubWFwKGMgPT4gY1t0cmVlR3JpZC5wcmltYXJ5S2V5XSkuaW5kZXhPZihyb3dJRCkgOlxuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb24uaW5kZXhPZihyb3dJRCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkQ2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgIHRoaXMuZ2V0X3NlbGVjdGVkX2NoaWxkcmVuKHJlY29yZCwgc2VsZWN0ZWRDaGlsZHJlbik7XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRDaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdHJlZUdyaWQuZGVzZWxlY3RSb3dzKHNlbGVjdGVkQ2hpbGRyZW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHJlZUdyaWQudHJhbnNhY3Rpb25zLmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXRoID0gdHJlZUdyaWQuZ2VuZXJhdGVSb3dQYXRoKHJvd0lEKTtcbiAgICAgICAgICAgICAgICB0cmVlR3JpZC50cmFuc2FjdGlvbnMuYWRkKHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHJvd0lELFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBUcmFuc2FjdGlvblR5cGUuREVMRVRFLFxuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogcGF0aFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25baW5kZXhdXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbi5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyByZWxhdGVkIHJvdyBvZiBwcm92aWRlZCBncmlkJ3MgZGF0YSBzb3VyY2Ugd2l0aCBwcm92aWRlZCBuZXcgcm93IHZhbHVlXG4gICAgICogQHBhcmFtIGdyaWQgR3JpZCB0byB1cGRhdGUgZGF0YSBmb3JcbiAgICAgKiBAcGFyYW0gcm93SUQgSUQgb2YgdGhlIHJvdyB0byB1cGRhdGVcbiAgICAgKiBAcGFyYW0gcm93VmFsdWVJbkRhdGFTb3VyY2UgSW5pdGlhbCB2YWx1ZSBvZiB0aGUgcm93IGFzIGl0IGlzIGluIGRhdGEgc291cmNlXG4gICAgICogQHBhcmFtIHJvd0N1cnJlbnRWYWx1ZSBDdXJyZW50IHZhbHVlIG9mIHRoZSByb3cgYXMgaXQgaXMgd2l0aCBhcHBsaWVkIHByZXZpb3VzIHRyYW5zYWN0aW9uc1xuICAgICAqIEBwYXJhbSByb3dOZXdWYWx1ZSBOZXcgdmFsdWUgb2YgdGhlIHJvd1xuICAgICAqL1xuICAgIHByb3RlY3RlZCB1cGRhdGVEYXRhKFxuICAgICAgICBncmlkOiBJZ3hUcmVlR3JpZENvbXBvbmVudCxcbiAgICAgICAgcm93SUQ6IGFueSxcbiAgICAgICAgcm93VmFsdWVJbkRhdGFTb3VyY2U6IGFueSxcbiAgICAgICAgcm93Q3VycmVudFZhbHVlOiBhbnksXG4gICAgICAgIHJvd05ld1ZhbHVlOiB7IFt4OiBzdHJpbmddOiBhbnkgfSkge1xuICAgICAgICBpZiAoZ3JpZC50cmFuc2FjdGlvbnMuZW5hYmxlZCkge1xuICAgICAgICAgICAgY29uc3QgcGF0aCA9IGdyaWQuZ2VuZXJhdGVSb3dQYXRoKHJvd0lEKTtcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uOiBIaWVyYXJjaGljYWxUcmFuc2FjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBpZDogcm93SUQsXG4gICAgICAgICAgICAgICAgdHlwZTogVHJhbnNhY3Rpb25UeXBlLlVQREFURSxcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZTogcm93TmV3VmFsdWUsXG4gICAgICAgICAgICAgICAgcGF0aDogcGF0aFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdyaWQudHJhbnNhY3Rpb25zLmFkZCh0cmFuc2FjdGlvbiwgcm93Q3VycmVudFZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lcmdlT2JqZWN0cyhyb3dWYWx1ZUluRGF0YVNvdXJjZSwgcm93TmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldF9zZWxlY3RlZF9jaGlsZHJlbihyZWNvcmQ6IElUcmVlR3JpZFJlY29yZCwgc2VsZWN0ZWRSb3dJRHM6IGFueVtdKSB7XG4gICAgICAgIGNvbnN0IGdyaWQgPSB0aGlzLmdyaWQ7XG4gICAgICAgIGlmICghcmVjb3JkLmNoaWxkcmVuIHx8IHJlY29yZC5jaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHJlY29yZC5jaGlsZHJlbikge1xuICAgICAgICAgICAgaWYgKGdyaWQuc2VsZWN0aW9uLmlzX2l0ZW1fc2VsZWN0ZWQoZ3JpZC5pZCwgY2hpbGQucm93SUQpKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRSb3dJRHMucHVzaChjaGlsZC5yb3dJRCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmdldF9zZWxlY3RlZF9jaGlsZHJlbihjaGlsZCwgc2VsZWN0ZWRSb3dJRHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHJvd19kZWxldGVkX3RyYW5zYWN0aW9uKHJvd0lEOiBhbnkpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm93X2RlbGV0ZWRfcGFyZW50KHJvd0lEKSB8fCBzdXBlci5yb3dfZGVsZXRlZF90cmFuc2FjdGlvbihyb3dJRCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByb3dfZGVsZXRlZF9wYXJlbnQocm93SUQ6IGFueSk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBncmlkID0gdGhpcy5ncmlkO1xuICAgICAgICBpZiAoIWdyaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKGdyaWQuY2FzY2FkZU9uRGVsZXRlICYmIGdyaWQuZm9yZWlnbktleSkgfHwgZ3JpZC5jaGlsZERhdGFLZXkpIHtcbiAgICAgICAgICAgIGxldCBub2RlID0gZ3JpZC5yZWNvcmRzLmdldChyb3dJRCk7XG4gICAgICAgICAgICB3aGlsZSAobm9kZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRlOiBTdGF0ZSA9IGdyaWQudHJhbnNhY3Rpb25zLmdldFN0YXRlKG5vZGUucm93SUQpO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZSAmJiBzdGF0ZS50eXBlID09PSBUcmFuc2FjdGlvblR5cGUuREVMRVRFKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbiJdfQ==