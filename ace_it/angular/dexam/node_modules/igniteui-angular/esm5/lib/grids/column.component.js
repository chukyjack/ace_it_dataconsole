/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Input, QueryList, TemplateRef, forwardRef } from '@angular/core';
import { DataType } from '../data-operations/data-util';
import { GridBaseAPIService } from './api.service';
import { IgxDateSummaryOperand, IgxNumberSummaryOperand, IgxSummaryOperand } from './summaries/grid-summary';
import { IgxRowComponent } from './row.component';
import { IgxCellEditorTemplateDirective, IgxCellHeaderTemplateDirective, IgxCellTemplateDirective, IgxFilterCellTemplateDirective } from './grid.common';
import { DefaultSortingStrategy } from '../data-operations/sorting-strategy';
import { getNodeSizeViaRange, flatten } from '../core/utils';
import { IgxBooleanFilteringOperand, IgxNumberFilteringOperand, IgxDateFilteringOperand, IgxStringFilteringOperand, IgxFilteringOperand } from '../data-operations/filtering-condition';
import { DeprecateProperty } from '../core/deprecateDecorators';
/**
 * **Ignite UI for Angular Column** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html#columns-configuration)
 *
 * The Ignite UI Column is used within an `igx-grid` element to define what data the column will show. Features such as sorting,
 * filtering & editing are enabled at the column level.  You can also provide a template containing custom content inside
 * the column using `ng-template` which will be used for all cells within the column.
 */
var IgxColumnComponent = /** @class */ (function () {
    function IgxColumnComponent(gridAPI, cdr) {
        this.gridAPI = gridAPI;
        this.cdr = cdr;
        /**
         * Sets/gets the `header` value.
         * ```typescript
         * let columnHeader = this.column.header;
         * ```
         * ```html
         * <igx-column [header] = "'ID'"></igx-column>
         * ```
         *
         * \@memberof IgxColumnComponent
         */
        this.header = '';
        /**
         * Sets/gets whether the column is sortable.
         * Default value is `false`.
         * ```typescript
         * let isSortable = this.column.sortable;
         * ```
         * ```html
         * <igx-column [sortable] = "true"></igx-column>
         * ```
         * \@memberof IgxColumnComponent
         */
        this.sortable = false;
        /**
         * Sets/gets whether the column is groupable.
         * Default value is `false`.
         * ```typescript
         * let isGroupable = this.column.groupable;
         * ```
         * ```html
         * <igx-column [groupable] = "true"></igx-column>
         * ```
         * \@memberof IgxColumnComponent
         */
        this.groupable = false;
        /**
         * Sets/gets whether the column is editable.
         * Default value is `false`.
         * ```typescript
         * let isEditable = this.column.editable;
         * ```
         * ```html
         * <igx-column [editable] = "true"></igx-column>
         * ```
         * \@memberof IgxColumnComponent
         */
        this.editable = null;
        /**
         * Sets/gets whether the column is filterable.
         * Default value is `true`.
         * ```typescript
         * let isFilterable = this.column.filterable;
         * ```
         * ```html
         * <igx-column [filterable] = "false"></igx-column>
         * ```
         * \@memberof IgxColumnComponent
         */
        this.filterable = true;
        /**
         * Sets/gets whether the column is resizable.
         * Default value is `false`.
         * ```typescript
         * let isResizable = this.column.resizable;
         * ```
         * ```html
         * <igx-column [resizable] = "true"></igx-column>
         * ```
         * \@memberof IgxColumnComponent
         */
        this.resizable = false;
        /**
         * Sets/gets whether the column is movable.
         * Default value is `false`.
         * ```typescript
         * let isMovable = this.column.movable;
         * ```
         * ```html
         * <igx-column [movable] = "true"></igx-column>
         * ```
         * \@memberof IgxColumnComponent
         */
        this.movable = false;
        this._calcWidth = null;
        /**
         * Sets/gets the minimum `width` of the column.
         * Default value is `88`;
         * ```typescript
         * let columnMinWidth = this.column.minWidth;
         * ```
         * ```html
         * <igx-column [minWidth] = "'15%'"></igx-column>
         * ```
         * \@memberof IgxColumnComponent
         */
        this.minWidth = this.defaultMinWidth;
        /**
         * Sets/gets the class selector of the column header.
         * ```typescript
         * let columnHeaderClass = this.column.headerClasses;
         * ```
         * ```html
         * <igx-column [headerClasses] = "'column-header'"></igx-column>
         * ```
         * \@memberof IgxColumnComponent
         */
        this.headerClasses = '';
        /**
         * Sets/gets the class selector of the column group header.
         * ```typescript
         * let columnHeaderClass = this.column.headerGroupClasses;
         * ```
         * ```html
         * <igx-column [headerGroupClasses] = "'column-group-header'"></igx-column>
         * ```
         * \@memberof IgxColumnComponent
         */
        this.headerGroupClasses = '';
        /**
         * Sets/gets whether the column filtering should be case sensitive.
         * Default value is `true`.
         * ```typescript
         * let filteringIgnoreCase = this.column.filteringIgnoreCase;
         * ```
         * ```html
         * <igx-column [filteringIgnoreCase] = "false"></igx-column>
         * ```
         * \@memberof IgxColumnComponent
         */
        this.filteringIgnoreCase = true;
        /**
         * Sets/gets whether the column sorting should be case sensitive.
         * Default value is `true`.
         * ```typescript
         * let sortingIgnoreCase = this.column.sortingIgnoreCase;
         * ```
         * ```html
         * <igx-column [sortingIgnoreCase] = "false"></igx-column>
         * ```
         * \@memberof IgxColumnComponent
         */
        this.sortingIgnoreCase = true;
        /**
         * Sets/gets the data type of the column values.
         * Default value is `string`.
         * ```typescript
         * let columnDataType = this.column.dataType;
         * ```
         * ```html
         * <igx-column [dataType] = "'number'"></igx-column>
         * ```
         * \@memberof IgxColumnComponent
         */
        this.dataType = DataType.String;
        /**
         * Sets/gets whether the column is `searchable`.
         * Default value is `true`.
         * ```typescript
         * let isSearchable =  this.column.searchable';
         * ```
         * ```html
         *  <igx-column [searchable] = "false"></igx-column>
         * ```
         * \@memberof IgxColumnComponent
         */
        this.searchable = true;
        /**
         * Sets/gets the parent column.
         * ```typescript
         * let parentColumn = this.column.parent;
         * ```
         * ```typescript
         * this.column.parent = higherLevelColumn;
         * ```
         * \@memberof IgxColumnComponent
         */
        this.parent = null;
        /**
         * @hidden
         */
        this._pinned = false;
        /**
         * @hidden
         */
        this._summaries = null;
        /**
         * @hidden
         */
        this._filters = null;
        /**
         * @hidden
         */
        this._sortStrategy = DefaultSortingStrategy.instance();
        /**
         * @hidden
         */
        this._hidden = false;
        /**
         * @hidden
         */
        this._disableHiding = false;
        /**
         * @hidden
         */
        this._disablePinning = false;
        /**
         * @hidden
         */
        this._defaultMinWidth = '80';
        /**
         * @hidden
         */
        this._hasSummary = false;
        this._vIndex = NaN;
    }
    Object.defineProperty(IgxColumnComponent.prototype, "hasSummary", {
        /**
         * Gets a value indicating whether the summary for the column is enabled.
         * ```typescript
         * let hasSummary = this.column.hasSummary;
         * ```
         * @memberof IgxColumnComponent
         */
        get: /**
         * Gets a value indicating whether the summary for the column is enabled.
         * ```typescript
         * let hasSummary = this.column.hasSummary;
         * ```
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            return this._hasSummary;
        },
        /**
         * Sets a value indicating whether the summary for the column is enabled.
         * Default value is `false`.
         * ```html
         * <igx-column [hasSummary] = "true"></igx-column>
         * ```
         * @memberof IgxColumnComponent
         */
        set: /**
         * Sets a value indicating whether the summary for the column is enabled.
         * Default value is `false`.
         * ```html
         * <igx-column [hasSummary] = "true"></igx-column>
         * ```
         * \@memberof IgxColumnComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hasSummary = value;
            if (this.grid) {
                this.grid.summaryService.recalculateSummaries();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "hidden", {
        /**
         * Gets whether the column is hidden.
         * ```typescript
         * let isHidden = this.column.hidden;
         * ```
         *@memberof IgxColumnComponent
         */
        get: /**
         * Gets whether the column is hidden.
         * ```typescript
         * let isHidden = this.column.hidden;
         * ```
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            return this._hidden;
        },
        /**
         * Sets the column hidden property.
         * Default value is `false`.
         * ```typescript
         * <igx-column [hidden] = "true"></igx-column>
         * ```
         * @memberof IgxColumnComponent
         */
        set: /**
         * Sets the column hidden property.
         * Default value is `false`.
         * ```typescript
         * <igx-column [hidden] = "true"></igx-column>
         * ```
         * \@memberof IgxColumnComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._hidden !== value) {
                this._hidden = value;
                if (this.grid) {
                    this.grid.resetCaches();
                    this.grid.endEdit(false);
                }
                // TODO: Simplify
                this.check();
                if (this.grid) {
                    this.grid.refreshSearch(true);
                    this.grid.summaryService.resetSummaryHeight();
                    this.grid.reflow();
                    this.grid.filteringService.refreshExpressions();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "disableHiding", {
        /**
         * Gets whether the hiding is disabled.
         * ```typescript
         * let isHidingDisabled =  this.column.disableHiding;
         * ```
         * @memberof IgxColumnComponent
         */
        get: /**
         * Gets whether the hiding is disabled.
         * ```typescript
         * let isHidingDisabled =  this.column.disableHiding;
         * ```
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            return this._disableHiding;
        },
        /**
         * Enables/disables hiding for the column.
         * Default value is `false`.
         * ```typescript
         * <igx-column [hidden] = "true"></igx-column>
         * ```
         * @memberof IgxColumnComponent
         */
        set: /**
         * Enables/disables hiding for the column.
         * Default value is `false`.
         * ```typescript
         * <igx-column [hidden] = "true"></igx-column>
         * ```
         * \@memberof IgxColumnComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._disableHiding !== value) {
                this._disableHiding = value;
                this.check();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "disablePinning", {
        /**
         * Gets whether the pinning is disabled.
         * ```typescript
         * let isPinningDisabled =  this.column.disablePinning;
         * ```
         * @memberof IgxColumnComponent
         */
        get: /**
         * Gets whether the pinning is disabled.
         * ```typescript
         * let isPinningDisabled =  this.column.disablePinning;
         * ```
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            return this._disablePinning;
        },
        /**
         * Enables/disables pinning for the column.
         * Default value is `false`.
         * ```typescript
         * <igx-column [pinned] = "true"></igx-column>
         * ```
         * @memberof IgxColumnComponent
         */
        set: /**
         * Enables/disables pinning for the column.
         * Default value is `false`.
         * ```typescript
         * <igx-column [pinned] = "true"></igx-column>
         * ```
         * \@memberof IgxColumnComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._disablePinning !== value) {
                this._disablePinning = value;
                this.check();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "width", {
        /**
         * Gets the `width` of the column.
         * ```typescript
         * let columnWidth = this.column.width;
         * ```
         * @memberof IgxColumnComponent
         */
        get: /**
         * Gets the `width` of the column.
         * ```typescript
         * let columnWidth = this.column.width;
         * ```
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            return this.widthSetByUser ? this._width : this.defaultWidth;
        },
        /**
         * Sets the `width` of the column.
         * ```html
         * <igx-column [width] = "'25%'"></igx-column>
         * ```
         * @memberof IgxColumnComponent
         */
        set: /**
         * Sets the `width` of the column.
         * ```html
         * <igx-column [width] = "'25%'"></igx-column>
         * ```
         * \@memberof IgxColumnComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._calcWidth = null;
                this.calcPixelWidth = NaN;
                this.widthSetByUser = true;
                this._width = value;
                if (this.grid) {
                    this.cacheCalcWidth();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "calcWidth", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._calcWidth !== null && !isNaN(this.calcPixelWidth)) {
                return this._calcWidth;
            }
            this.cacheCalcWidth();
            return this._calcWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "index", {
        /**
         * Gets the column index.
         * ```typescript
         * let columnIndex = this.column.index;
         * ```
         * @memberof IgxColumnComponent
         */
        get: /**
         * Gets the column index.
         * ```typescript
         * let columnIndex = this.column.index;
         * ```
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            return this.grid.columns.indexOf(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "pinned", {
        /**
         * Gets whether the column is `pinned`.
         * ```typescript
         * let isPinned = this.column.pinned;
         * ```
         * @memberof IgxColumnComponent
         */
        get: /**
         * Gets whether the column is `pinned`.
         * ```typescript
         * let isPinned = this.column.pinned;
         * ```
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            return this._pinned;
        },
        /**
         * Sets whether the column is pinned.
         * Default value is `false`.
         * ```html
         * <igx-column [pinned] = "true"></igx-column>
         * ```
         * @memberof IgxColumnComponent
         */
        set: /**
         * Sets whether the column is pinned.
         * Default value is `false`.
         * ```html
         * <igx-column [pinned] = "true"></igx-column>
         * ```
         * \@memberof IgxColumnComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._pinned !== value) {
                if (this.grid && this.width && !isNaN(parseInt(this.width, 10))) {
                    value ? this.pin() : this.unpin();
                    return;
                }
                /* No grid/width available at initialization. `initPinning` in the grid
                   will re-init the group (if present)
                */
                this._pinned = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "summaries", {
        /**
         * Gets the column `summaries`.
         * ```typescript
         * let columnSummaries = this.column.summaries;
         * ```
         * @memberof IgxColumnComponent
         */
        get: /**
         * Gets the column `summaries`.
         * ```typescript
         * let columnSummaries = this.column.summaries;
         * ```
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            return this._summaries;
        },
        /**
         * Sets the column `summaries`.
         * ```typescript
         * this.column.summaries = IgxNumberSummaryOperand;
         * ```
         * @memberof IgxColumnComponent
         */
        set: /**
         * Sets the column `summaries`.
         * ```typescript
         * this.column.summaries = IgxNumberSummaryOperand;
         * ```
         * \@memberof IgxColumnComponent
         * @param {?} classRef
         * @return {?}
         */
        function (classRef) {
            this._summaries = new classRef();
            if (this.grid) {
                this.grid.summaryService.removeSummariesCachePerColumn(this.field);
                ((/** @type {?} */ (this.grid)))._summaryPipeTrigger++;
                this.grid.summaryService.recalculateSummaries();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "filters", {
        /**
         * Gets the column `filters`.
         * ```typescript
         * let columnFilters = this.column.filters'
         * ```
         * @memberof IgxColumnComponent
         */
        get: /**
         * Gets the column `filters`.
         * ```typescript
         * let columnFilters = this.column.filters'
         * ```
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            return this._filters;
        },
        /**
         * Sets the column `filters`.
         * ```typescript
         * this.column.filters = IgxBooleanFilteringOperand.instance().
         * ```
         * @memberof IgxColumnComponent
         */
        set: /**
         * Sets the column `filters`.
         * ```typescript
         * this.column.filters = IgxBooleanFilteringOperand.instance().
         * ```
         * \@memberof IgxColumnComponent
         * @param {?} instance
         * @return {?}
         */
        function (instance) {
            this._filters = instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "sortStrategy", {
        /**
         * Gets the column `sortStrategy`.
         * ```typescript
         * let sortStrategy = this.column.sortStrategy'
         * ```
         * @memberof IgxColumnComponent
         */
        get: /**
         * Gets the column `sortStrategy`.
         * ```typescript
         * let sortStrategy = this.column.sortStrategy'
         * ```
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            return this._sortStrategy;
        },
        /**
         * Sets the column `sortStrategy`.
         * ```typescript
         * this.column.sortStrategy = new CustomSortingStrategy().
         *
         * class CustomSortingStrategy extends SortingStrategy {
         * ...
         * }
         * ```
         * @memberof IgxColumnComponent
         */
        set: /**
         * Sets the column `sortStrategy`.
         * ```typescript
         * this.column.sortStrategy = new CustomSortingStrategy().
         *
         * class CustomSortingStrategy extends SortingStrategy {
         * ...
         * }
         * ```
         * \@memberof IgxColumnComponent
         * @param {?} classRef
         * @return {?}
         */
        function (classRef) {
            this._sortStrategy = classRef;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "groupingComparer", {
        /**
        * Gets the function that compares values for grouping.
        * ```typescript
        * let groupingComparer = this.column.groupingComparer'
        * ```
        * @memberof IgxColumnComponent
        */
        get: /**
         * Gets the function that compares values for grouping.
         * ```typescript
         * let groupingComparer = this.column.groupingComparer'
         * ```
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            return this._groupingComparer;
        },
        /**
         * Sets a custom function to compare values for grouping.
         * Subsequent values in the sorted data that the function returns 0 for are grouped.
         * ```typescript
         * this.column.groupingComparer = (a: any, b: any) => { return a === b ? 0 : -1; }
         * ```
         * @memberof IgxColumnComponent
         */
        set: /**
         * Sets a custom function to compare values for grouping.
         * Subsequent values in the sorted data that the function returns 0 for are grouped.
         * ```typescript
         * this.column.groupingComparer = (a: any, b: any) => { return a === b ? 0 : -1; }
         * ```
         * \@memberof IgxColumnComponent
         * @param {?} funcRef
         * @return {?}
         */
        function (funcRef) {
            this._groupingComparer = funcRef;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "defaultMinWidth", {
        /**
         * Gets the default minimum `width` of the column.
         * ```typescript
         * let defaultMinWidth =  this.column.defaultMinWidth;
         * ```
         * @memberof IgxColumnComponent
         */
        get: /**
         * Gets the default minimum `width` of the column.
         * ```typescript
         * let defaultMinWidth =  this.column.defaultMinWidth;
         * ```
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            return this._defaultMinWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "bodyTemplate", {
        /**
         * Returns a reference to the `bodyTemplate`.
         * ```typescript
         * let bodyTemplate = this.column.bodyTemplate;
         * ```
         * @memberof IgxColumnComponent
         */
        get: /**
         * Returns a reference to the `bodyTemplate`.
         * ```typescript
         * let bodyTemplate = this.column.bodyTemplate;
         * ```
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            return this._bodyTemplate;
        },
        /**
         * Sets the body template.
         * ```html
         * <ng-template #bodyTemplate igxCell let-val>
         *    <div style = "background-color: yellowgreen" (click) = "changeColor(val)">
         *       <span> {{val}} </span>
         *    </div>
         * </ng-template>
         * ```
         * ```typescript
         * @ViewChild("'bodyTemplate'", {read: TemplateRef })
         * public bodyTemplate: TemplateRef<any>;
         * this.column.bodyTemplate = this.bodyTemplate;
         * ```
         * @memberof IgxColumnComponent
         */
        set: /**
         * Sets the body template.
         * ```html
         * <ng-template #bodyTemplate igxCell let-val>
         *    <div style = "background-color: yellowgreen" (click) = "changeColor(val)">
         *       <span> {{val}} </span>
         *    </div>
         * </ng-template>
         * ```
         * ```typescript
         * \@ViewChild("'bodyTemplate'", {read: TemplateRef })
         * public bodyTemplate: TemplateRef<any>;
         * this.column.bodyTemplate = this.bodyTemplate;
         * ```
         * \@memberof IgxColumnComponent
         * @param {?} template
         * @return {?}
         */
        function (template) {
            this._bodyTemplate = template;
            if (this.grid) {
                this.grid.cdr.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "headerTemplate", {
        /**
         * Returns a reference to the header template.
         * ```typescript
         * let headerTemplate = this.column.headerTemplate;
         * ```
         * @memberof IgxColumnComponent
         */
        get: /**
         * Returns a reference to the header template.
         * ```typescript
         * let headerTemplate = this.column.headerTemplate;
         * ```
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            return this._headerTemplate;
        },
        /**
         * Sets the header template.
         * ```html
         * <ng-template #headerTemplate>
         *   <div style = "background-color:black" (click) = "changeColor(val)">
         *       <span style="color:red" >{{column.field}}</span>
         *   </div>
         * </ng-template>
         * ```
         * ```typescript
         * @ViewChild("'headerTemplate'", {read: TemplateRef })
         * public headerTemplate: TemplateRef<any>;
         * this.column.headerTemplate = this.headerTemplate;
         * ```
         * @memberof IgxColumnComponent
         */
        set: /**
         * Sets the header template.
         * ```html
         * <ng-template #headerTemplate>
         *   <div style = "background-color:black" (click) = "changeColor(val)">
         *       <span style="color:red" >{{column.field}}</span>
         *   </div>
         * </ng-template>
         * ```
         * ```typescript
         * \@ViewChild("'headerTemplate'", {read: TemplateRef })
         * public headerTemplate: TemplateRef<any>;
         * this.column.headerTemplate = this.headerTemplate;
         * ```
         * \@memberof IgxColumnComponent
         * @param {?} template
         * @return {?}
         */
        function (template) {
            this._headerTemplate = template;
            if (this.grid) {
                this.grid.cdr.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "inlineEditorTemplate", {
        /**
         * Returns a reference to the inline editor template.
         * ```typescript
         * let inlineEditorTemplate = this.column.inlineEditorTemplate;
         * ```
         * @memberof IgxColumnComponent
         */
        get: /**
         * Returns a reference to the inline editor template.
         * ```typescript
         * let inlineEditorTemplate = this.column.inlineEditorTemplate;
         * ```
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            return this._inlineEditorTemplate;
        },
        /**
         * Sets the inline editor template.
         * ```html
         * <ng-template #inlineEditorTemplate igxCellEditor let-cell="cell">
         *     <input type="string" [(ngModel)]="cell.value"/>
         * </ng-template>
         * ```
         * ```typescript
         * @ViewChild("'inlineEditorTemplate'", {read: TemplateRef })
         * public inlineEditorTemplate: TemplateRef<any>;
         * this.column.inlineEditorTemplate = this.inlineEditorTemplate;
         * ```
         * @memberof IgxColumnComponent
         */
        set: /**
         * Sets the inline editor template.
         * ```html
         * <ng-template #inlineEditorTemplate igxCellEditor let-cell="cell">
         *     <input type="string" [(ngModel)]="cell.value"/>
         * </ng-template>
         * ```
         * ```typescript
         * \@ViewChild("'inlineEditorTemplate'", {read: TemplateRef })
         * public inlineEditorTemplate: TemplateRef<any>;
         * this.column.inlineEditorTemplate = this.inlineEditorTemplate;
         * ```
         * \@memberof IgxColumnComponent
         * @param {?} template
         * @return {?}
         */
        function (template) {
            this._inlineEditorTemplate = template;
            if (this.grid) {
                this.grid.cdr.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "filterCellTemplate", {
        /**
         * Returns a reference to the `filterCellTemplate`.
         * ```typescript
         * let filterCellTemplate = this.column.filterCellTemplate;
         * ```
         * @memberof IgxColumnComponent
         */
        get: /**
         * Returns a reference to the `filterCellTemplate`.
         * ```typescript
         * let filterCellTemplate = this.column.filterCellTemplate;
         * ```
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            return this._filterCellTemplate;
        },
        /**
         * Sets the quick filter template.
         * ```html
         * <ng-template #filterCellTemplate IgxFilterCellTemplate let-column="column">
         *    <input (input)="onInput()">
         * </ng-template>
         * ```
         * ```typescript
         * @ViewChild("'filterCellTemplate'", {read: TemplateRef })
         * public filterCellTemplate: TemplateRef<any>;
         * this.column.filterCellTemplate = this.filterCellTemplate;
         * ```
         * @memberof IgxColumnComponent
         */
        set: /**
         * Sets the quick filter template.
         * ```html
         * <ng-template #filterCellTemplate IgxFilterCellTemplate let-column="column">
         *    <input (input)="onInput()">
         * </ng-template>
         * ```
         * ```typescript
         * \@ViewChild("'filterCellTemplate'", {read: TemplateRef })
         * public filterCellTemplate: TemplateRef<any>;
         * this.column.filterCellTemplate = this.filterCellTemplate;
         * ```
         * \@memberof IgxColumnComponent
         * @param {?} template
         * @return {?}
         */
        function (template) {
            this._filterCellTemplate = template;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "cells", {
        /**
         * Gets the cells of the column.
         * ```typescript
         * let columnCells =  this.column.cells;
         * ```
         * @memberof IgxColumnComponent
         */
        get: /**
         * Gets the cells of the column.
         * ```typescript
         * let columnCells =  this.column.cells;
         * ```
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            var _this = this;
            return this.grid.rowList.filter(function (row) { return row instanceof IgxRowComponent; })
                .map(function (row) {
                if (row.cells) {
                    return row.cells.filter(function (cell) { return cell.columnIndex === _this.index; });
                }
            }).reduce(function (a, b) { return a.concat(b); }, []);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "visibleIndex", {
        /**
         * Gets the column visible index.
         * If the column is not visible, returns `-1`.
         * ```typescript
         * let visibleColumnIndex =  this.column.visibleIndex;
         * ```
         * @memberof IgxColumnComponent
         */
        get: /**
         * Gets the column visible index.
         * If the column is not visible, returns `-1`.
         * ```typescript
         * let visibleColumnIndex =  this.column.visibleIndex;
         * ```
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            if (!isNaN(this._vIndex)) {
                return this._vIndex;
            }
            /** @type {?} */
            var unpinnedColumns = this.grid.unpinnedColumns.filter(function (c) { return !c.columnGroup; });
            /** @type {?} */
            var pinnedColumns = this.grid.pinnedColumns.filter(function (c) { return !c.columnGroup; });
            /** @type {?} */
            var col = this;
            /** @type {?} */
            var vIndex = -1;
            if (this.columnGroup) {
                col = (/** @type {?} */ (this.allChildren.filter(function (c) { return !c.columnGroup; })[0]));
            }
            if (!this.pinned) {
                /** @type {?} */
                var indexInCollection = unpinnedColumns.indexOf(col);
                vIndex = indexInCollection === -1 ? -1 : pinnedColumns.length + indexInCollection;
            }
            else {
                vIndex = pinnedColumns.indexOf(col);
            }
            this._vIndex = vIndex;
            return vIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "columnGroup", {
        /**
         * Returns a boolean indicating if the column is a `ColumnGroup`.
         * ```typescript
         * let columnGroup =  this.column.columnGroup;
         * ```
         * @memberof IgxColumnComponent
         */
        get: /**
         * Returns a boolean indicating if the column is a `ColumnGroup`.
         * ```typescript
         * let columnGroup =  this.column.columnGroup;
         * ```
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "allChildren", {
        /**
         * Returns the children columns collection.
         * Returns an empty array if the column does not contain children columns.
         * ```typescript
         * let childrenColumns =  this.column.allChildren;
         * ```
         * @memberof IgxColumnComponent
         */
        get: /**
         * Returns the children columns collection.
         * Returns an empty array if the column does not contain children columns.
         * ```typescript
         * let childrenColumns =  this.column.allChildren;
         * ```
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            return [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "level", {
        /**
         * Returns the level of the column in a column group.
         * Returns `0` if the column doesn't have a `parent`.
         * ```typescript
         * let columnLevel =  this.column.level;
         * ```
         * @memberof IgxColumnComponent
         */
        get: /**
         * Returns the level of the column in a column group.
         * Returns `0` if the column doesn't have a `parent`.
         * ```typescript
         * let columnLevel =  this.column.level;
         * ```
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            /** @type {?} */
            var ptr = this.parent;
            /** @type {?} */
            var lvl = 0;
            while (ptr) {
                lvl++;
                ptr = ptr.parent;
            }
            return lvl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "isLastPinned", {
        get: /**
         * @return {?}
         */
        function () {
            return this.grid.pinnedColumns[this.grid.pinnedColumns.length - 1] === this;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "filteringExpressionsTree", {
        /**
         * Returns the filteringExpressionsTree of the column.
         * ```typescript
         * let tree =  this.column.filteringExpressionsTree;
         * ```
         * @memberof IgxColumnComponent
         */
        get: /**
         * Returns the filteringExpressionsTree of the column.
         * ```typescript
         * let tree =  this.column.filteringExpressionsTree;
         * ```
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            return (/** @type {?} */ (this.grid.filteringExpressionsTree.find(this.field)));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     * @internal
     */
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    IgxColumnComponent.prototype.resetCaches = /**
     * @hidden
     * \@internal
     * @return {?}
     */
    function () {
        this._vIndex = NaN;
        this.cacheCalcWidth();
    };
    /**
     *@hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxColumnComponent.prototype.ngAfterContentInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.cellTemplate) {
            this._bodyTemplate = this.cellTemplate.template;
        }
        if (this.headTemplate) {
            this._headerTemplate = this.headTemplate.template;
        }
        if (this.editorTemplate) {
            this._inlineEditorTemplate = this.editorTemplate.template;
        }
        if (this.filterCellTemplateDirective) {
            this._filterCellTemplate = this.filterCellTemplateDirective.template;
        }
        if (!this.summaries) {
            switch (this.dataType) {
                case DataType.String:
                case DataType.Boolean:
                    this.summaries = IgxSummaryOperand;
                    break;
                case DataType.Number:
                    this.summaries = IgxNumberSummaryOperand;
                    break;
                case DataType.Date:
                    this.summaries = IgxDateSummaryOperand;
                    break;
                default:
                    this.summaries = IgxSummaryOperand;
                    break;
            }
        }
        if (!this.filters) {
            switch (this.dataType) {
                case DataType.Boolean:
                    this.filters = IgxBooleanFilteringOperand.instance();
                    break;
                case DataType.Number:
                    this.filters = IgxNumberFilteringOperand.instance();
                    break;
                case DataType.Date:
                    this.filters = IgxDateFilteringOperand.instance();
                    break;
                case DataType.String:
                default:
                    this.filters = IgxStringFilteringOperand.instance();
                    break;
            }
        }
    };
    /**
     * Pins the column at the provided index in the pinned area. Defaults to index `0` if not provided.
     * Returns `true` if the column is successfully pinned. Returns `false` if the column cannot be pinned.
     * Column cannot be pinned if:
     * - Is already pinned
     * - index argument is out of range
     * - The pinned area exceeds 80% of the grid width
     * ```typescript
     * let success = this.column.pin();
     * ```
     * @memberof IgxColumnComponent
     */
    /**
     * Pins the column at the provided index in the pinned area. Defaults to index `0` if not provided.
     * Returns `true` if the column is successfully pinned. Returns `false` if the column cannot be pinned.
     * Column cannot be pinned if:
     * - Is already pinned
     * - index argument is out of range
     * - The pinned area exceeds 80% of the grid width
     * ```typescript
     * let success = this.column.pin();
     * ```
     * \@memberof IgxColumnComponent
     * @param {?=} index
     * @return {?}
     */
    IgxColumnComponent.prototype.pin = /**
     * Pins the column at the provided index in the pinned area. Defaults to index `0` if not provided.
     * Returns `true` if the column is successfully pinned. Returns `false` if the column cannot be pinned.
     * Column cannot be pinned if:
     * - Is already pinned
     * - index argument is out of range
     * - The pinned area exceeds 80% of the grid width
     * ```typescript
     * let success = this.column.pin();
     * ```
     * \@memberof IgxColumnComponent
     * @param {?=} index
     * @return {?}
     */
    function (index) {
        // TODO: Probably should the return type of the old functions
        // should be moved as a event parameter.
        if (this.grid) {
            this.grid.endEdit(true);
        }
        if (this._pinned) {
            return false;
        }
        if (this.parent && !this.parent.pinned) {
            return this.topLevelParent.pin(index);
        }
        /** @type {?} */
        var grid = ((/** @type {?} */ (this.grid)));
        /** @type {?} */
        var hasIndex = index !== undefined;
        if (hasIndex && (index < 0 || index >= grid.pinnedColumns.length)) {
            return false;
        }
        /** @type {?} */
        var width = parseInt(this.width, 10);
        if (!this.parent && (grid.getUnpinnedWidth(true) - width < grid.unpinnedAreaMinWidth)) {
            return false;
        }
        this._pinned = true;
        this._unpinnedIndex = grid._unpinnedColumns.indexOf(this);
        index = index !== undefined ? index : grid._pinnedColumns.length;
        /** @type {?} */
        var targetColumn = grid._pinnedColumns[index];
        /** @type {?} */
        var args = { column: this, insertAtIndex: index, isPinned: true };
        grid.onColumnPinning.emit(args);
        if (grid._pinnedColumns.indexOf(this) === -1) {
            grid._pinnedColumns.splice(args.insertAtIndex, 0, this);
            if (grid._unpinnedColumns.indexOf(this) !== -1) {
                grid._unpinnedColumns.splice(grid._unpinnedColumns.indexOf(this), 1);
            }
        }
        if (hasIndex) {
            grid._moveColumns(this, targetColumn);
        }
        if (this.columnGroup) {
            this.allChildren.forEach(function (child) { return child.pin(); });
            grid.reinitPinStates();
        }
        grid.resetCaches();
        grid.cdr.detectChanges();
        this.grid.filteringService.refreshExpressions();
        this.grid.refreshSearch(true);
        return true;
    };
    /**
     * Unpins the column and place it at the provided index in the unpinned area. Defaults to index `0` if not provided.
     * Returns `true` if the column is successfully unpinned. Returns `false` if the column cannot be unpinned.
     * Column cannot be unpinned if:
     * - Is already unpinned
     * - index argument is out of range
     * ```typescript
     * let success = this.column.unpin();
     * ```
     * @memberof IgxColumnComponent
     */
    /**
     * Unpins the column and place it at the provided index in the unpinned area. Defaults to index `0` if not provided.
     * Returns `true` if the column is successfully unpinned. Returns `false` if the column cannot be unpinned.
     * Column cannot be unpinned if:
     * - Is already unpinned
     * - index argument is out of range
     * ```typescript
     * let success = this.column.unpin();
     * ```
     * \@memberof IgxColumnComponent
     * @param {?=} index
     * @return {?}
     */
    IgxColumnComponent.prototype.unpin = /**
     * Unpins the column and place it at the provided index in the unpinned area. Defaults to index `0` if not provided.
     * Returns `true` if the column is successfully unpinned. Returns `false` if the column cannot be unpinned.
     * Column cannot be unpinned if:
     * - Is already unpinned
     * - index argument is out of range
     * ```typescript
     * let success = this.column.unpin();
     * ```
     * \@memberof IgxColumnComponent
     * @param {?=} index
     * @return {?}
     */
    function (index) {
        if (this.grid) {
            this.grid.endEdit(true);
        }
        if (!this._pinned) {
            return false;
        }
        if (this.parent && this.parent.pinned) {
            return this.topLevelParent.unpin(index);
        }
        /** @type {?} */
        var grid = ((/** @type {?} */ (this.grid)));
        /** @type {?} */
        var hasIndex = index !== undefined;
        if (hasIndex && (index < 0 || index >= grid._unpinnedColumns.length)) {
            return false;
        }
        index = (index !== undefined ? index :
            this._unpinnedIndex !== undefined ? this._unpinnedIndex : this.index);
        this._pinned = false;
        /** @type {?} */
        var targetColumn = grid._unpinnedColumns[index];
        grid._unpinnedColumns.splice(index, 0, this);
        if (grid._pinnedColumns.indexOf(this) !== -1) {
            grid._pinnedColumns.splice(grid._pinnedColumns.indexOf(this), 1);
        }
        if (hasIndex) {
            grid._moveColumns(this, targetColumn);
        }
        if (this.columnGroup) {
            this.allChildren.forEach(function (child) { return child.unpin(); });
        }
        grid.reinitPinStates();
        grid.resetCaches();
        /** @type {?} */
        var insertAtIndex = grid._unpinnedColumns.indexOf(this);
        /** @type {?} */
        var args = { column: this, insertAtIndex: insertAtIndex, isPinned: false };
        grid.onColumnPinning.emit(args);
        grid.cdr.detectChanges();
        this.grid.filteringService.refreshExpressions();
        this.grid.refreshSearch(true);
        return true;
    };
    Object.defineProperty(IgxColumnComponent.prototype, "topLevelParent", {
        /**
         * Returns a reference to the top level parent column.
         * ```typescript
         * let topLevelParent =  this.column.topLevelParent;
         * ```
         * @memberof IgxColumnComponent
         */
        get: /**
         * Returns a reference to the top level parent column.
         * ```typescript
         * let topLevelParent =  this.column.topLevelParent;
         * ```
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            /** @type {?} */
            var parent = this.parent;
            while (parent && parent.parent) {
                parent = parent.parent;
            }
            return parent;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *@hidden
     */
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    IgxColumnComponent.prototype.check = /**
     * @hidden
     * @protected
     * @return {?}
     */
    function () {
        if (this.grid) {
            this.grid.markForCheck();
        }
    };
    Object.defineProperty(IgxColumnComponent.prototype, "headerCell", {
        /**
         * Returns a reference to the header of the column.
         * ```typescript
         * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];
         * let headerCell = column.headerCell;
         * ```
         * @memberof IgxColumnComponent
         */
        get: /**
         * Returns a reference to the header of the column.
         * ```typescript
         * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];
         * let headerCell = column.headerCell;
         * ```
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            var _this = this;
            return this.grid.headerCellList.find(function (header) { return header.column === _this; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "filterCell", {
        /**
        * Returns a reference to the filter cell of the column.
        * ```typescript
        * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];
        * let filterell = column.filterell;
        * ```
        * @memberof IgxColumnComponent
        */
        get: /**
         * Returns a reference to the filter cell of the column.
         * ```typescript
         * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];
         * let filterell = column.filterell;
         * ```
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            var _this = this;
            return this.grid.filterCellList.find(function (filterCell) { return filterCell.column === _this; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnComponent.prototype, "headerGroup", {
        /**
         * Returns a reference to the header group of the column.
         * @memberof IgxColumnComponent
         */
        get: /**
         * Returns a reference to the header group of the column.
         * \@memberof IgxColumnComponent
         * @return {?}
         */
        function () {
            var _this = this;
            return this.grid.headerGroupsList.find(function (headerGroup) { return headerGroup.column === _this; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Autosize the column to the longest currently visible cell value, including the header cell.
     * ```typescript
     * @ViewChild('grid') grid: IgxGridComponent;
     *
     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];
     * column.autosize();
     * ```
     * @memberof IgxColumnComponent
     */
    /**
     * Autosize the column to the longest currently visible cell value, including the header cell.
     * ```typescript
     * \@ViewChild('grid') grid: IgxGridComponent;
     *
     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];
     * column.autosize();
     * ```
     * \@memberof IgxColumnComponent
     * @return {?}
     */
    IgxColumnComponent.prototype.autosize = /**
     * Autosize the column to the longest currently visible cell value, including the header cell.
     * ```typescript
     * \@ViewChild('grid') grid: IgxGridComponent;
     *
     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];
     * column.autosize();
     * ```
     * \@memberof IgxColumnComponent
     * @return {?}
     */
    function () {
        if (!this.columnGroup) {
            this.width = this.getLargestCellWidth();
            this.grid.markForCheck();
            this.grid.reflow();
        }
    };
    /**
     * @hidden
     * Returns the size (in pixels) of the longest currently visible cell, including the header cell.
     * ```typescript
     * @ViewChild('grid') grid: IgxGridComponent;
     *
     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];
     * let size = column.getLargestCellWidth();
     * ```
     * @memberof IgxColumnComponent
     */
    /**
     * @hidden
     * Returns the size (in pixels) of the longest currently visible cell, including the header cell.
     * ```typescript
     * \@ViewChild('grid') grid: IgxGridComponent;
     *
     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];
     * let size = column.getLargestCellWidth();
     * ```
     * \@memberof IgxColumnComponent
     * @return {?}
     */
    IgxColumnComponent.prototype.getLargestCellWidth = /**
     * @hidden
     * Returns the size (in pixels) of the longest currently visible cell, including the header cell.
     * ```typescript
     * \@ViewChild('grid') grid: IgxGridComponent;
     *
     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];
     * let size = column.getLargestCellWidth();
     * ```
     * \@memberof IgxColumnComponent
     * @return {?}
     */
    function () {
        /** @type {?} */
        var range = this.grid.document.createRange();
        /** @type {?} */
        var largest = new Map();
        if (this.cells.length > 0) {
            /** @type {?} */
            var cellsContentWidths_1 = [];
            if (this.cells[0].nativeElement.children.length > 0) {
                this.cells.forEach(function (cell) { return cellsContentWidths_1.push(cell.calculateSizeToFit(range)); });
            }
            else {
                cellsContentWidths_1 = this.cells.map(function (cell) { return getNodeSizeViaRange(range, cell.nativeElement); });
            }
            /** @type {?} */
            var index = cellsContentWidths_1.indexOf(Math.max.apply(Math, tslib_1.__spread(cellsContentWidths_1)));
            /** @type {?} */
            var cellStyle = this.grid.document.defaultView.getComputedStyle(this.cells[index].nativeElement);
            /** @type {?} */
            var cellPadding = parseFloat(cellStyle.paddingLeft) + parseFloat(cellStyle.paddingRight) +
                parseFloat(cellStyle.borderRightWidth);
            largest.set(Math.max.apply(Math, tslib_1.__spread(cellsContentWidths_1)), cellPadding);
        }
        if (this.headerCell) {
            /** @type {?} */
            var headerCell = void 0;
            if (this.headerTemplate && this.headerCell.elementRef.nativeElement.children[0].children.length > 0) {
                headerCell = Math.max.apply(Math, tslib_1.__spread(Array.from(this.headerCell.elementRef.nativeElement.children[0].children)
                    .map(function (child) { return getNodeSizeViaRange(range, child); })));
            }
            else {
                headerCell = getNodeSizeViaRange(range, this.headerCell.elementRef.nativeElement.children[0]);
            }
            if (this.sortable || this.filterable) {
                headerCell += this.headerCell.elementRef.nativeElement.children[1].getBoundingClientRect().width;
            }
            /** @type {?} */
            var headerStyle = this.grid.document.defaultView.getComputedStyle(this.headerCell.elementRef.nativeElement);
            /** @type {?} */
            var headerPadding = parseFloat(headerStyle.paddingLeft) + parseFloat(headerStyle.paddingRight) +
                parseFloat(headerStyle.borderRightWidth);
            largest.set(headerCell, headerPadding);
        }
        /** @type {?} */
        var largestCell = Math.max.apply(Math, tslib_1.__spread(Array.from(largest.keys())));
        /** @type {?} */
        var width = Math.ceil(largestCell + largest.get(largestCell));
        if (Number.isNaN(width)) {
            return this.width;
        }
        else {
            return width + 'px';
        }
    };
    /**
     *@hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxColumnComponent.prototype.getCellWidth = /**
     * @hidden
     * @return {?}
     */
    function () {
        /** @type {?} */
        var colWidth = this.width;
        /** @type {?} */
        var isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;
        if (colWidth && !isPercentageWidth) {
            /** @type {?} */
            var cellWidth = colWidth;
            if (typeof cellWidth !== 'string' || cellWidth.endsWith('px') === false) {
                cellWidth += 'px';
            }
            return cellWidth;
        }
        else {
            return colWidth;
        }
    };
    /**
     * @hidden
     * @internal
     */
    /**
     * @hidden
     * \@internal
     * @protected
     * @return {?}
     */
    IgxColumnComponent.prototype.cacheCalcWidth = /**
     * @hidden
     * \@internal
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var grid = this.gridAPI.grid;
        /** @type {?} */
        var colWidth = this.width;
        /** @type {?} */
        var isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;
        if (isPercentageWidth) {
            this._calcWidth = parseInt(colWidth, 10) / 100 * grid.unpinnedWidth;
        }
        else if (!colWidth) {
            // no width
            this._calcWidth = this.defaultWidth || grid.getPossibleColumnWidth();
        }
        else {
            this._calcWidth = this.width;
        }
        this.calcPixelWidth = parseInt(this._calcWidth, 10);
    };
    IgxColumnComponent.decorators = [
        { type: Component, args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    selector: 'igx-column',
                    template: ""
                }] }
    ];
    /** @nocollapse */
    IgxColumnComponent.ctorParameters = function () { return [
        { type: GridBaseAPIService },
        { type: ChangeDetectorRef }
    ]; };
    IgxColumnComponent.propDecorators = {
        field: [{ type: Input }],
        header: [{ type: Input }],
        sortable: [{ type: Input }],
        groupable: [{ type: Input }],
        editable: [{ type: Input }],
        filterable: [{ type: Input }],
        resizable: [{ type: Input }],
        hasSummary: [{ type: Input }],
        hidden: [{ type: Input }],
        disableHiding: [{ type: Input }],
        disablePinning: [{ type: Input }],
        movable: [{ type: Input }],
        width: [{ type: Input }],
        maxWidth: [{ type: Input }],
        minWidth: [{ type: Input }],
        headerClasses: [{ type: Input }],
        headerGroupClasses: [{ type: Input }],
        cellClasses: [{ type: Input }],
        formatter: [{ type: Input }],
        filteringIgnoreCase: [{ type: Input }],
        sortingIgnoreCase: [{ type: Input }],
        dataType: [{ type: Input }],
        pinned: [{ type: Input }],
        summaries: [{ type: Input }],
        searchable: [{ type: Input }],
        filters: [{ type: Input }],
        sortStrategy: [{ type: Input }],
        groupingComparer: [{ type: Input }],
        bodyTemplate: [{ type: Input, args: ['cellTemplate',] }],
        headerTemplate: [{ type: Input }],
        inlineEditorTemplate: [{ type: Input, args: ['cellEditorTemplate',] }],
        filterCellTemplate: [{ type: Input, args: ['filterCellTemplate',] }],
        cellTemplate: [{ type: ContentChild, args: [IgxCellTemplateDirective, { read: IgxCellTemplateDirective },] }],
        headTemplate: [{ type: ContentChild, args: [IgxCellHeaderTemplateDirective, { read: IgxCellHeaderTemplateDirective },] }],
        editorTemplate: [{ type: ContentChild, args: [IgxCellEditorTemplateDirective, { read: IgxCellEditorTemplateDirective },] }],
        filterCellTemplateDirective: [{ type: ContentChild, args: [IgxFilterCellTemplateDirective, { read: IgxFilterCellTemplateDirective },] }]
    };
    tslib_1.__decorate([
        DeprecateProperty("The property is deprecated. Please, use `column.grid.id` instead."),
        tslib_1.__metadata("design:type", String)
    ], IgxColumnComponent.prototype, "gridID", void 0);
    return IgxColumnComponent;
}());
export { IgxColumnComponent };
if (false) {
    /**
     * Sets/gets the `field` value.
     * ```typescript
     * let columnField = this.column.field;
     * ```
     * ```html
     * <igx-column [field] = "'ID'"></igx-column>
     * ```
     * \@memberof IgxColumnComponent
     * @type {?}
     */
    IgxColumnComponent.prototype.field;
    /**
     * Sets/gets the `header` value.
     * ```typescript
     * let columnHeader = this.column.header;
     * ```
     * ```html
     * <igx-column [header] = "'ID'"></igx-column>
     * ```
     *
     * \@memberof IgxColumnComponent
     * @type {?}
     */
    IgxColumnComponent.prototype.header;
    /**
     * Sets/gets whether the column is sortable.
     * Default value is `false`.
     * ```typescript
     * let isSortable = this.column.sortable;
     * ```
     * ```html
     * <igx-column [sortable] = "true"></igx-column>
     * ```
     * \@memberof IgxColumnComponent
     * @type {?}
     */
    IgxColumnComponent.prototype.sortable;
    /**
     * Sets/gets whether the column is groupable.
     * Default value is `false`.
     * ```typescript
     * let isGroupable = this.column.groupable;
     * ```
     * ```html
     * <igx-column [groupable] = "true"></igx-column>
     * ```
     * \@memberof IgxColumnComponent
     * @type {?}
     */
    IgxColumnComponent.prototype.groupable;
    /**
     * Sets/gets whether the column is editable.
     * Default value is `false`.
     * ```typescript
     * let isEditable = this.column.editable;
     * ```
     * ```html
     * <igx-column [editable] = "true"></igx-column>
     * ```
     * \@memberof IgxColumnComponent
     * @type {?}
     */
    IgxColumnComponent.prototype.editable;
    /**
     * Sets/gets whether the column is filterable.
     * Default value is `true`.
     * ```typescript
     * let isFilterable = this.column.filterable;
     * ```
     * ```html
     * <igx-column [filterable] = "false"></igx-column>
     * ```
     * \@memberof IgxColumnComponent
     * @type {?}
     */
    IgxColumnComponent.prototype.filterable;
    /**
     * Sets/gets whether the column is resizable.
     * Default value is `false`.
     * ```typescript
     * let isResizable = this.column.resizable;
     * ```
     * ```html
     * <igx-column [resizable] = "true"></igx-column>
     * ```
     * \@memberof IgxColumnComponent
     * @type {?}
     */
    IgxColumnComponent.prototype.resizable;
    /**
     * Sets/gets whether the column is movable.
     * Default value is `false`.
     * ```typescript
     * let isMovable = this.column.movable;
     * ```
     * ```html
     * <igx-column [movable] = "true"></igx-column>
     * ```
     * \@memberof IgxColumnComponent
     * @type {?}
     */
    IgxColumnComponent.prototype.movable;
    /**
     * @type {?}
     * @private
     */
    IgxColumnComponent.prototype._calcWidth;
    /** @type {?} */
    IgxColumnComponent.prototype.calcPixelWidth;
    /**
     * Sets/gets the maximum `width` of the column.
     * ```typescript
     * let columnMaxWidth = this.column.width;
     * ```
     * ```html
     * <igx-column [maxWidth] = "'75%'"></igx-column>
     * ```
     * \@memberof IgxColumnComponent
     * @type {?}
     */
    IgxColumnComponent.prototype.maxWidth;
    /**
     * Sets/gets the minimum `width` of the column.
     * Default value is `88`;
     * ```typescript
     * let columnMinWidth = this.column.minWidth;
     * ```
     * ```html
     * <igx-column [minWidth] = "'15%'"></igx-column>
     * ```
     * \@memberof IgxColumnComponent
     * @type {?}
     */
    IgxColumnComponent.prototype.minWidth;
    /**
     * Sets/gets the class selector of the column header.
     * ```typescript
     * let columnHeaderClass = this.column.headerClasses;
     * ```
     * ```html
     * <igx-column [headerClasses] = "'column-header'"></igx-column>
     * ```
     * \@memberof IgxColumnComponent
     * @type {?}
     */
    IgxColumnComponent.prototype.headerClasses;
    /**
     * Sets/gets the class selector of the column group header.
     * ```typescript
     * let columnHeaderClass = this.column.headerGroupClasses;
     * ```
     * ```html
     * <igx-column [headerGroupClasses] = "'column-group-header'"></igx-column>
     * ```
     * \@memberof IgxColumnComponent
     * @type {?}
     */
    IgxColumnComponent.prototype.headerGroupClasses;
    /**
     * Sets a conditional class selector of the column cells.
     * Accepts an object literal, containing key-value pairs,
     * where the key is the name of the CSS class, while the
     * value is either a callback function that returns a boolean,
     * or boolean, like so:
     * ```typescript
     * callback = (rowData, columnKey) => { return rowData[columnKey] > 6; }
     * cellClasses = { 'className' : this.callback };
     * ```
     * ```html
     * <igx-column [cellClasses] = "cellClasses"></igx-column>
     * <igx-column [cellClasses] = "{'class1' : true }"></igx-column>
     * ```
     * \@memberof IgxColumnComponent
     * @type {?}
     */
    IgxColumnComponent.prototype.cellClasses;
    /**
     * Gets formatter for the column.
     * ```typescript
     * let columnFormatter = this.column.formatter;
     * ```
     * \@memberof IgxColumnComponent
     * @type {?}
     */
    IgxColumnComponent.prototype.formatter;
    /**
     * Sets/gets whether the column filtering should be case sensitive.
     * Default value is `true`.
     * ```typescript
     * let filteringIgnoreCase = this.column.filteringIgnoreCase;
     * ```
     * ```html
     * <igx-column [filteringIgnoreCase] = "false"></igx-column>
     * ```
     * \@memberof IgxColumnComponent
     * @type {?}
     */
    IgxColumnComponent.prototype.filteringIgnoreCase;
    /**
     * Sets/gets whether the column sorting should be case sensitive.
     * Default value is `true`.
     * ```typescript
     * let sortingIgnoreCase = this.column.sortingIgnoreCase;
     * ```
     * ```html
     * <igx-column [sortingIgnoreCase] = "false"></igx-column>
     * ```
     * \@memberof IgxColumnComponent
     * @type {?}
     */
    IgxColumnComponent.prototype.sortingIgnoreCase;
    /**
     * Sets/gets the data type of the column values.
     * Default value is `string`.
     * ```typescript
     * let columnDataType = this.column.dataType;
     * ```
     * ```html
     * <igx-column [dataType] = "'number'"></igx-column>
     * ```
     * \@memberof IgxColumnComponent
     * @type {?}
     */
    IgxColumnComponent.prototype.dataType;
    /**
     * @deprecated
     * Gets/Sets the `id` of the `igx-grid`.
     * ```typescript
     * let columnGridId = this.column.gridID;
     * ```
     * ```typescript
     * this.column.gridID = 'grid-1';
     * ```
     * \@memberof IgxColumnComponent
     * @type {?}
     */
    IgxColumnComponent.prototype.gridID;
    /**
     * Sets/gets whether the column is `searchable`.
     * Default value is `true`.
     * ```typescript
     * let isSearchable =  this.column.searchable';
     * ```
     * ```html
     *  <igx-column [searchable] = "false"></igx-column>
     * ```
     * \@memberof IgxColumnComponent
     * @type {?}
     */
    IgxColumnComponent.prototype.searchable;
    /**
     * The reference to the `igx-grid` owner.
     * ```typescript
     * let gridComponent = this.column.grid;
     * ```
     * \@memberof IgxColumnComponent
     * @type {?}
     */
    IgxColumnComponent.prototype.grid;
    /**
     * hidden
     * @type {?}
     */
    IgxColumnComponent.prototype.defaultWidth;
    /**
     * hidden
     * @type {?}
     */
    IgxColumnComponent.prototype.widthSetByUser;
    /**
     * Sets/gets the parent column.
     * ```typescript
     * let parentColumn = this.column.parent;
     * ```
     * ```typescript
     * this.column.parent = higherLevelColumn;
     * ```
     * \@memberof IgxColumnComponent
     * @type {?}
     */
    IgxColumnComponent.prototype.parent;
    /**
     * Sets/gets the children columns.
     * ```typescript
     * let columnChildren = this.column.children;
     * ```
     * ```typescript
     * this.column.children = childrenColumns;
     * ```
     * \@memberof IgxColumnComponent
     * @type {?}
     */
    IgxColumnComponent.prototype.children;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxColumnComponent.prototype._unpinnedIndex;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxColumnComponent.prototype._pinned;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxColumnComponent.prototype._bodyTemplate;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxColumnComponent.prototype._headerTemplate;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxColumnComponent.prototype._inlineEditorTemplate;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxColumnComponent.prototype._filterCellTemplate;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxColumnComponent.prototype._summaries;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxColumnComponent.prototype._filters;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxColumnComponent.prototype._sortStrategy;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxColumnComponent.prototype._groupingComparer;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxColumnComponent.prototype._hidden;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxColumnComponent.prototype._index;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxColumnComponent.prototype._disableHiding;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxColumnComponent.prototype._disablePinning;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxColumnComponent.prototype._width;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxColumnComponent.prototype._defaultMinWidth;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxColumnComponent.prototype._hasSummary;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxColumnComponent.prototype.cellTemplate;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxColumnComponent.prototype.headTemplate;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxColumnComponent.prototype.editorTemplate;
    /**
     * @type {?}
     * @private
     */
    IgxColumnComponent.prototype._vIndex;
    /**
     * @hidden
     * @type {?}
     */
    IgxColumnComponent.prototype.filterCellTemplateDirective;
    /** @type {?} */
    IgxColumnComponent.prototype.gridAPI;
    /** @type {?} */
    IgxColumnComponent.prototype.cdr;
}
var IgxColumnGroupComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxColumnGroupComponent, _super);
    function IgxColumnGroupComponent(gridAPI, cdr) {
        var _this = 
        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future
        _super.call(this, gridAPI, cdr) || this;
        _this.gridAPI = gridAPI;
        _this.cdr = cdr;
        _this.children = new QueryList();
        /**
         * Sets/gets whether the column group is `searchable`.
         * Default value is `true`.
         * ```typescript
         * let isSearchable =  this.columnGroup.searchable;
         * ```
         * ```html
         *  <igx-column-group [searchable] = "false"></igx-column-group>
         * ```
         * \@memberof IgxColumnGroupComponent
         */
        _this.searchable = true;
        return _this;
    }
    Object.defineProperty(IgxColumnGroupComponent.prototype, "summaries", {
        /**
         * Gets the column group `summaries`.
         * ```typescript
         * let columnGroupSummaries = this.columnGroup.summaries;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        get: /**
         * Gets the column group `summaries`.
         * ```typescript
         * let columnGroupSummaries = this.columnGroup.summaries;
         * ```
         * \@memberof IgxColumnGroupComponent
         * @return {?}
         */
        function () {
            return this._summaries;
        },
        /**
         * Sets the column group `summaries`.
         * ```typescript
         * this.columnGroup.summaries = IgxNumberSummaryOperand;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        set: /**
         * Sets the column group `summaries`.
         * ```typescript
         * this.columnGroup.summaries = IgxNumberSummaryOperand;
         * ```
         * \@memberof IgxColumnGroupComponent
         * @param {?} classRef
         * @return {?}
         */
        function (classRef) { },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnGroupComponent.prototype, "filters", {
        /**
         * Gets the column group `filters`.
         * ```typescript
         * let columnGroupFilters = this.columnGroup.filters;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        get: /**
         * Gets the column group `filters`.
         * ```typescript
         * let columnGroupFilters = this.columnGroup.filters;
         * ```
         * \@memberof IgxColumnGroupComponent
         * @return {?}
         */
        function () {
            return this._filters;
        },
        /**
         * Sets the column group `filters`.
         * ```typescript
         * this.columnGroup.filters = IgxStringFilteringOperand;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        set: /**
         * Sets the column group `filters`.
         * ```typescript
         * this.columnGroup.filters = IgxStringFilteringOperand;
         * ```
         * \@memberof IgxColumnGroupComponent
         * @param {?} classRef
         * @return {?}
         */
        function (classRef) { },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnGroupComponent.prototype, "defaultMinWidth", {
        /**
         * Gets the default minimum `width` of the column group.
         * ```typescript
         * let defaultMinWidth = this.columnGroup.defaultMinWidth;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        get: /**
         * Gets the default minimum `width` of the column group.
         * ```typescript
         * let defaultMinWidth = this.columnGroup.defaultMinWidth;
         * ```
         * \@memberof IgxColumnGroupComponent
         * @return {?}
         */
        function () {
            return this._defaultMinWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnGroupComponent.prototype, "bodyTemplate", {
        /**
         * Returns a reference to the body template.
         * ```typescript
         * let bodyTemplate = this.columnGroup.bodyTemplate;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        get: /**
         * Returns a reference to the body template.
         * ```typescript
         * let bodyTemplate = this.columnGroup.bodyTemplate;
         * ```
         * \@memberof IgxColumnGroupComponent
         * @return {?}
         */
        function () {
            return this._bodyTemplate;
        },
        /**
         * @hidden
         */
        set: /**
         * @hidden
         * @param {?} template
         * @return {?}
         */
        function (template) { },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnGroupComponent.prototype, "headerTemplate", {
        /**
         * Returns a reference to the header template.
         * ```typescript
         * let headerTemplate = this.columnGroup.headerTemplate;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        get: /**
         * Returns a reference to the header template.
         * ```typescript
         * let headerTemplate = this.columnGroup.headerTemplate;
         * ```
         * \@memberof IgxColumnGroupComponent
         * @return {?}
         */
        function () {
            return this._headerTemplate;
        },
        /**
         * @hidden
         * @memberof IgxColumnGroupComponent
         */
        set: /**
         * @hidden
         * \@memberof IgxColumnGroupComponent
         * @param {?} template
         * @return {?}
         */
        function (template) { },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnGroupComponent.prototype, "inlineEditorTemplate", {
        /**
         * Returns a reference to the inline editor template.
         * ```typescript
         * let inlineEditorTemplate = this.columnGroup.inlineEditorTemplate;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        get: /**
         * Returns a reference to the inline editor template.
         * ```typescript
         * let inlineEditorTemplate = this.columnGroup.inlineEditorTemplate;
         * ```
         * \@memberof IgxColumnGroupComponent
         * @return {?}
         */
        function () {
            return this._inlineEditorTemplate;
        },
        /**
         * @hidden
         */
        set: /**
         * @hidden
         * @param {?} template
         * @return {?}
         */
        function (template) { },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnGroupComponent.prototype, "cells", {
        /**
         * Gets the column group cells.
         * ```typescript
         * let columnCells = this.columnGroup.cells;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        get: /**
         * Gets the column group cells.
         * ```typescript
         * let columnCells = this.columnGroup.cells;
         * ```
         * \@memberof IgxColumnGroupComponent
         * @return {?}
         */
        function () {
            return [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnGroupComponent.prototype, "hidden", {
        /**
         * Gets whether the column group is hidden.
         * ```typescript
         * let isHidden = this.columnGroup.hidden;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        get: /**
         * Gets whether the column group is hidden.
         * ```typescript
         * let isHidden = this.columnGroup.hidden;
         * ```
         * \@memberof IgxColumnGroupComponent
         * @return {?}
         */
        function () {
            return this.allChildren.every(function (c) { return c.hidden; });
        },
        /**
         * Sets the column group hidden property.
         * ```typescript
         * <igx-column [hidden] = "true"></igx-column>
         * ```
         * @memberof IgxColumnGroupComponent
         */
        set: /**
         * Sets the column group hidden property.
         * ```typescript
         * <igx-column [hidden] = "true"></igx-column>
         * ```
         * \@memberof IgxColumnGroupComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hidden = value;
            this.children.forEach(function (child) { return child.hidden = value; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     *@hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxColumnGroupComponent.prototype.ngAfterContentInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        /*
            @ContentChildren with descendants still returns the `parent`
            component in the query list.
        */
        this.children.reset(this.children.toArray().slice(1));
        this.children.forEach(function (child) {
            child.parent = _this;
        });
    };
    Object.defineProperty(IgxColumnGroupComponent.prototype, "allChildren", {
        /**
         * Returns the children columns collection.
         * ```typescript
         * let columns =  this.columnGroup.allChildren;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        get: /**
         * Returns the children columns collection.
         * ```typescript
         * let columns =  this.columnGroup.allChildren;
         * ```
         * \@memberof IgxColumnGroupComponent
         * @return {?}
         */
        function () {
            return flatten(this.children.toArray());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnGroupComponent.prototype, "columnGroup", {
        /**
         * Returns a boolean indicating if the column is a `ColumnGroup`.
         * ```typescript
         * let isColumnGroup =  this.columnGroup.columnGroup
         * ```
         * @memberof IgxColumnGroupComponent
         */
        get: /**
         * Returns a boolean indicating if the column is a `ColumnGroup`.
         * ```typescript
         * let isColumnGroup =  this.columnGroup.columnGroup
         * ```
         * \@memberof IgxColumnGroupComponent
         * @return {?}
         */
        function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnGroupComponent.prototype, "width", {
        /**
         * Gets the width of the column group.
         * ```typescript
         * let columnGroupWidth = this.columnGroup.width;
         * ```
         * @memberof IgxColumnGroupComponent
         */
        get: /**
         * Gets the width of the column group.
         * ```typescript
         * let columnGroupWidth = this.columnGroup.width;
         * ```
         * \@memberof IgxColumnGroupComponent
         * @return {?}
         */
        function () {
            /** @type {?} */
            var isChildrenWidthInPercent = false;
            /** @type {?} */
            var width = "" + this.children.reduce(function (acc, val) {
                if (val.hidden) {
                    return acc;
                }
                if (typeof val.width === 'string' && val.width.indexOf('%') !== -1) {
                    isChildrenWidthInPercent = true;
                }
                return acc + parseInt(val.width, 10);
            }, 0);
            return isChildrenWidthInPercent ? width + '%' : width;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) { },
        enumerable: true,
        configurable: true
    });
    IgxColumnGroupComponent.decorators = [
        { type: Component, args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(function () { return IgxColumnGroupComponent; }) }],
                    selector: 'igx-column-group',
                    template: ""
                }] }
    ];
    /** @nocollapse */
    IgxColumnGroupComponent.ctorParameters = function () { return [
        { type: GridBaseAPIService },
        { type: ChangeDetectorRef }
    ]; };
    IgxColumnGroupComponent.propDecorators = {
        children: [{ type: ContentChildren, args: [IgxColumnComponent, { read: IgxColumnComponent },] }],
        summaries: [{ type: Input }],
        searchable: [{ type: Input }],
        filters: [{ type: Input }],
        hidden: [{ type: Input }]
    };
    return IgxColumnGroupComponent;
}(IgxColumnComponent));
export { IgxColumnGroupComponent };
if (false) {
    /** @type {?} */
    IgxColumnGroupComponent.prototype.children;
    /**
     * Sets/gets whether the column group is `searchable`.
     * Default value is `true`.
     * ```typescript
     * let isSearchable =  this.columnGroup.searchable;
     * ```
     * ```html
     *  <igx-column-group [searchable] = "false"></igx-column-group>
     * ```
     * \@memberof IgxColumnGroupComponent
     * @type {?}
     */
    IgxColumnGroupComponent.prototype.searchable;
    /** @type {?} */
    IgxColumnGroupComponent.prototype.gridAPI;
    /** @type {?} */
    IgxColumnGroupComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,