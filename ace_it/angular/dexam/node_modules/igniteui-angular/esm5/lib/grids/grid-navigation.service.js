/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { FilterMode } from './grid-base.component';
import { first } from 'rxjs/operators';
import { IgxGridGroupByRowComponent } from './grid/groupby-row.component';
/** @enum {string} */
var MoveDirection = {
    LEFT: 'left',
    RIGHT: 'right',
};
/**
 * @hidden
 */
var IgxGridNavigationService = /** @class */ (function () {
    function IgxGridNavigationService() {
    }
    Object.defineProperty(IgxGridNavigationService.prototype, "displayContainerWidth", {
        get: /**
         * @return {?}
         */
        function () {
            return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridNavigationService.prototype, "displayContainerScrollLeft", {
        get: /**
         * @return {?}
         */
        function () {
            return parseInt(this.grid.parentVirtDir.getHorizontalScroll().scrollLeft, 10);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridNavigationService.prototype, "verticalDisplayContainerElement", {
        get: /**
         * @return {?}
         */
        function () {
            return this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} rowIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.horizontalScroll = /**
     * @param {?} rowIndex
     * @return {?}
     */
    function (rowIndex) {
        /** @type {?} */
        var rowComp = this.grid.dataRowList.find(function (row) { return row.index === rowIndex; }) ?
            this.grid.dataRowList.find(function (row) { return row.index === rowIndex; }) : this.grid.dataRowList.first;
        if (!rowComp) {
            rowComp = this.grid.summariesRowList.find(function (row) { return row.index === rowIndex; });
        }
        return rowComp.virtDirRow;
    };
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.getColumnUnpinnedIndex = /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (visibleColumnIndex) {
        /** @type {?} */
        var column = this.grid.unpinnedColumns.find(function (col) { return !col.columnGroup && col.visibleIndex === visibleColumnIndex; });
        return this.grid.pinnedColumns.length ? this.grid.unpinnedColumns.filter(function (c) { return !c.columnGroup; }).indexOf(column) :
            visibleColumnIndex;
    };
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.isColumnFullyVisible = /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (visibleColumnIndex) {
        /** @type {?} */
        var forOfDir;
        if (this.grid.dataRowList.length > 0) {
            forOfDir = this.grid.dataRowList.first.virtDirRow;
        }
        else {
            forOfDir = this.grid.headerContainer;
        }
        /** @type {?} */
        var horizontalScroll = forOfDir.getHorizontalScroll();
        if (!horizontalScroll.clientWidth ||
            this.grid.columnList.filter(function (c) { return !c.columnGroup; }).find(function (column) { return column.visibleIndex === visibleColumnIndex; }).pinned) {
            return true;
        }
        /** @type {?} */
        var index = this.getColumnUnpinnedIndex(visibleColumnIndex);
        return this.displayContainerWidth >= forOfDir.getColumnScrollLeft(index + 1) - this.displayContainerScrollLeft;
    };
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.isColumnLeftFullyVisible = /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (visibleColumnIndex) {
        /** @type {?} */
        var forOfDir;
        if (this.grid.dataRowList.length > 0) {
            forOfDir = this.grid.dataRowList.first.virtDirRow;
        }
        else {
            forOfDir = this.grid.headerContainer;
        }
        /** @type {?} */
        var horizontalScroll = forOfDir.getHorizontalScroll();
        if (!horizontalScroll.clientWidth ||
            this.grid.columnList.filter(function (c) { return !c.columnGroup; }).find(function (column) { return column.visibleIndex === visibleColumnIndex; }).pinned) {
            return true;
        }
        /** @type {?} */
        var index = this.getColumnUnpinnedIndex(visibleColumnIndex);
        return this.displayContainerScrollLeft <= forOfDir.getColumnScrollLeft(index);
    };
    Object.defineProperty(IgxGridNavigationService.prototype, "gridOrderedColumns", {
        get: /**
         * @return {?}
         */
        function () {
            return tslib_1.__spread(this.grid.pinnedColumns, this.grid.unpinnedColumns).filter(function (c) { return !c.columnGroup; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} rowIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.isRowInEditMode = /**
     * @param {?} rowIndex
     * @return {?}
     */
    function (rowIndex) {
        return this.grid.rowEditable && (this.grid.rowInEditMode && this.grid.rowInEditMode.index === rowIndex);
    };
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.isColumnEditable = /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (visibleColumnIndex) {
        /** @type {?} */
        var column = this.gridOrderedColumns.find(function (c) { return c.visibleIndex === visibleColumnIndex; });
        return column ? column.editable : false;
    };
    /**
     * @param {?} direction
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.findNextEditable = /**
     * @param {?} direction
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (direction, visibleColumnIndex) {
        /** @type {?} */
        var gridColumns = this.gridOrderedColumns;
        if (direction === MoveDirection.LEFT) {
            return gridColumns.splice(0, visibleColumnIndex + 1).reverse().findIndex(function (e) { return e.editable; });
        }
        else if (direction === MoveDirection.RIGHT) {
            return gridColumns.splice(visibleColumnIndex, gridColumns.length - 1).findIndex(function (e) { return e.editable; });
        }
    };
    /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @param {?=} isSummary
     * @return {?}
     */
    IgxGridNavigationService.prototype.getCellElementByVisibleIndex = /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @param {?=} isSummary
     * @return {?}
     */
    function (rowIndex, visibleColumnIndex, isSummary) {
        if (isSummary === void 0) { isSummary = false; }
        /** @type {?} */
        var cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);
        return this.grid.nativeElement.querySelector(cellSelector + "[data-rowindex=\"" + rowIndex + "\"][data-visibleIndex=\"" + visibleColumnIndex + "\"]");
    };
    /**
     * @param {?} element
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @param {?=} isSummary
     * @return {?}
     */
    IgxGridNavigationService.prototype.onKeydownArrowRight = /**
     * @param {?} element
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @param {?=} isSummary
     * @return {?}
     */
    function (element, rowIndex, visibleColumnIndex, isSummary) {
        if (isSummary === void 0) { isSummary = false; }
        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {
            return;
        }
        if (this.isColumnFullyVisible(visibleColumnIndex + 1)) { // if next column is fully visible or is pinned
            if (element.classList.contains('igx-grid__td--pinned-last') || element.classList.contains('igx-grid-summary--pinned-last')) {
                if (this.isColumnLeftFullyVisible(visibleColumnIndex + 1)) {
                    element.nextElementSibling.firstElementChild.focus({ preventScroll: true });
                }
                else {
                    this.getFocusableGrid().nativeElement.focus({ preventScroll: true });
                    this.grid.parentVirtDir.onChunkLoad
                        .pipe(first())
                        .subscribe(function () {
                        element.nextElementSibling.firstElementChild.focus({ preventScroll: true });
                    });
                    this.horizontalScroll(rowIndex).scrollTo(0);
                }
            }
            else {
                element.nextElementSibling.focus({ preventScroll: true });
            }
        }
        else {
            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex + 1, isSummary);
        }
    };
    /**
     * @param {?} element
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @param {?=} isSummary
     * @return {?}
     */
    IgxGridNavigationService.prototype.onKeydownArrowLeft = /**
     * @param {?} element
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @param {?=} isSummary
     * @return {?}
     */
    function (element, rowIndex, visibleColumnIndex, isSummary) {
        if (isSummary === void 0) { isSummary = false; }
        if (visibleColumnIndex === 0) {
            return;
        }
        /** @type {?} */
        var index = this.getColumnUnpinnedIndex(visibleColumnIndex - 1);
        if (!element.previousElementSibling && this.grid.pinnedColumns.length && index === -1) {
            element.parentNode.previousElementSibling.focus({ preventScroll: true });
        }
        else if (!this.isColumnLeftFullyVisible(visibleColumnIndex - 1)) {
            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex - 1, isSummary);
        }
        else {
            element.previousElementSibling.focus({ preventScroll: true });
        }
    };
    /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.movePreviousEditable = /**
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (rowIndex, visibleColumnIndex) {
        /** @type {?} */
        var addedIndex = this.isColumnEditable(visibleColumnIndex - 1) ?
            0 :
            this.findNextEditable(MoveDirection.LEFT, visibleColumnIndex - 1);
        if (addedIndex === -1) {
            this.grid.rowEditTabs.last.element.nativeElement.focus();
            return;
        }
        /** @type {?} */
        var editableIndex = visibleColumnIndex - 1 - addedIndex;
        if (this.getColumnUnpinnedIndex(editableIndex) === -1 && this.grid.pinnedColumns.length) {
            // if target is NOT pinned and there are pinned columns
            // since addedIndex !== -1, there will always be a target
            this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus();
        }
        else if (!this.isColumnLeftFullyVisible(editableIndex)) { // if not fully visible, perform scroll
            this.performHorizontalScrollToCell(rowIndex, editableIndex);
        }
        else {
            this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus(); // if fully visible, just focus
        }
    };
    /**
     * @param {?} element
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.moveNextEditable = /**
     * @param {?} element
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (element, rowIndex, visibleColumnIndex) {
        /** @type {?} */
        var addedIndex = 0;
        addedIndex = this.isColumnEditable(visibleColumnIndex + 1) ?
            0 :
            this.findNextEditable(MoveDirection.RIGHT, visibleColumnIndex + 1);
        if (addedIndex === -1 && this.grid.rowEditTabs) { // no previous edit column -> go to RE buttons
            this.grid.rowEditTabs.first.element.nativeElement.focus();
            return;
        }
        /** @type {?} */
        var editableIndex = visibleColumnIndex + 1 + addedIndex;
        if (this.isColumnFullyVisible(editableIndex)) { // If column is fully visible
            if (element.classList.contains('igx-grid__td--pinned-last')) { // If this is pinned
                if (this.isColumnLeftFullyVisible(editableIndex)) { // If next column is fully visible LEFT
                    this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus(); // focus
                }
                else { // if NOT fully visible, perform scroll
                    this.performHorizontalScrollToCell(rowIndex, editableIndex);
                }
            }
            else { // cell is next cell
                this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus();
            }
        }
        else {
            this.performHorizontalScrollToCell(rowIndex, editableIndex);
        }
    };
    /**
     * @param {?} rowIndex
     * @param {?=} isSummary
     * @return {?}
     */
    IgxGridNavigationService.prototype.onKeydownHome = /**
     * @param {?} rowIndex
     * @param {?=} isSummary
     * @return {?}
     */
    function (rowIndex, isSummary) {
        if (isSummary === void 0) { isSummary = false; }
        /** @type {?} */
        var rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;
        /** @type {?} */
        var rowElement = rowList.find(function (row) { return row.index === rowIndex; });
        /** @type {?} */
        var cellSelector = this.getCellSelector(0, isSummary);
        if (!rowElement) {
            return;
        }
        rowElement = rowElement.nativeElement;
        /** @type {?} */
        var firstCell = rowElement.querySelector(cellSelector);
        if (this.grid.pinnedColumns.length || this.displayContainerScrollLeft === 0) {
            firstCell.focus({ preventScroll: true });
        }
        else {
            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });
            this.grid.parentVirtDir.onChunkLoad
                .pipe(first())
                .subscribe(function () {
                firstCell = rowElement.querySelector(cellSelector);
                firstCell.focus({ preventScroll: true });
            });
            this.horizontalScroll(rowIndex).scrollTo(0);
        }
    };
    /**
     * @param {?} rowIndex
     * @param {?=} isSummary
     * @return {?}
     */
    IgxGridNavigationService.prototype.onKeydownEnd = /**
     * @param {?} rowIndex
     * @param {?=} isSummary
     * @return {?}
     */
    function (rowIndex, isSummary) {
        var _this = this;
        if (isSummary === void 0) { isSummary = false; }
        /** @type {?} */
        var index = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex;
        /** @type {?} */
        var rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;
        /** @type {?} */
        var rowElement = rowList.find(function (row) { return row.index === rowIndex; });
        if (!rowElement) {
            return;
        }
        rowElement = rowElement.nativeElement;
        if (this.isColumnFullyVisible(index)) {
            /** @type {?} */
            var allCells = rowElement.querySelectorAll(this.getCellSelector(-1, isSummary));
            allCells[allCells.length - 1].focus({ preventScroll: true });
        }
        else {
            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });
            this.grid.parentVirtDir.onChunkLoad
                .pipe(first())
                .subscribe(function () {
                /** @type {?} */
                var allCells = rowElement.querySelectorAll(_this.getCellSelector(-1, isSummary));
                allCells[allCells.length - 1].focus({ preventScroll: true });
            });
            this.horizontalScroll(rowIndex).scrollTo(this.getColumnUnpinnedIndex(index));
        }
    };
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.navigateTop = /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (visibleColumnIndex) {
        var _this = this;
        /** @type {?} */
        var verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();
        /** @type {?} */
        var cellSelector = this.getCellSelector(visibleColumnIndex);
        if (verticalScroll.scrollTop === 0) {
            /** @type {?} */
            var cells = this.grid.nativeElement.querySelectorAll(cellSelector + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
            cells[0].focus();
        }
        else {
            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });
            this.grid.verticalScrollContainer.scrollTo(0);
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first()).subscribe(function () {
                /** @type {?} */
                var cells = _this.grid.nativeElement.querySelectorAll(cellSelector + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
                if (cells.length > 0) {
                    cells[0].focus();
                }
            });
        }
    };
    /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.navigateBottom = /**
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (visibleColumnIndex) {
        var _this = this;
        /** @type {?} */
        var verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();
        /** @type {?} */
        var cellSelector = this.getCellSelector(visibleColumnIndex);
        if (verticalScroll.scrollHeight === 0 ||
            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {
            /** @type {?} */
            var cells = this.grid.nativeElement.querySelectorAll(cellSelector + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
            cells[cells.length - 1].focus();
        }
        else {
            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });
            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first()).subscribe(function () {
                /** @type {?} */
                var cells = _this.grid.nativeElement.querySelectorAll(cellSelector + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
                if (cells.length > 0) {
                    cells[cells.length - 1].focus();
                }
            });
        }
    };
    /**
     * @param {?} rowElement
     * @param {?} currentRowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.navigateUp = /**
     * @param {?} rowElement
     * @param {?} currentRowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (rowElement, currentRowIndex, visibleColumnIndex) {
        var _this = this;
        if (currentRowIndex === 0) {
            return;
        }
        /** @type {?} */
        var containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);
        if (!rowElement.previousElementSibling ||
            rowElement.previousElementSibling.offsetTop < Math.abs(containerTopOffset)) {
            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });
            this.grid.verticalScrollContainer.scrollTo(currentRowIndex - 1);
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first())
                .subscribe(function () {
                /** @type {?} */
                var tag = rowElement.tagName.toLowerCase();
                /** @type {?} */
                var rowSelector = _this.getRowSelector();
                if (tag === rowSelector || tag === 'igx-grid-summary-row') {
                    rowElement = _this.getRowByIndex(currentRowIndex, tag);
                }
                else {
                    rowElement = _this.grid.nativeElement.querySelector("igx-grid-groupby-row[data-rowindex=\"" + currentRowIndex + "\"]");
                }
                _this.focusPreviousElement(rowElement, visibleColumnIndex);
            });
        }
        else {
            this.focusPreviousElement(rowElement, visibleColumnIndex);
        }
    };
    /**
     * @protected
     * @param {?} currentRowEl
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.focusPreviousElement = /**
     * @protected
     * @param {?} currentRowEl
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (currentRowEl, visibleColumnIndex) {
        this.focusElem(currentRowEl.previousElementSibling, visibleColumnIndex);
    };
    /**
     * @param {?} rowElement
     * @param {?} currentRowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.navigateDown = /**
     * @param {?} rowElement
     * @param {?} currentRowIndex
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (rowElement, currentRowIndex, visibleColumnIndex) {
        var _this = this;
        if (currentRowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1 ||
            (currentRowIndex === 0 && rowElement.tagName.toLowerCase() === 'igx-grid-summary-row')) { // check if this is rootSummary row
            return;
        }
        /** @type {?} */
        var rowHeight = this.grid.verticalScrollContainer.getSizeAt(currentRowIndex + 1);
        /** @type {?} */
        var containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;
        /** @type {?} */
        var targetEndTopOffset = rowElement.nextElementSibling ?
            rowElement.nextElementSibling.offsetTop + rowHeight + parseInt(this.verticalDisplayContainerElement.style.top, 10) :
            containerHeight + rowHeight;
        this.getFocusableGrid().nativeElement.focus({ preventScroll: true });
        if (containerHeight && containerHeight < targetEndTopOffset) {
            /** @type {?} */
            var nextIndex_1 = currentRowIndex + 1;
            this.grid.verticalScrollContainer.scrollTo(nextIndex_1);
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first())
                .subscribe(function () {
                rowElement = _this.getNextRowByIndex(nextIndex_1);
                _this.focusElem(rowElement, visibleColumnIndex);
            });
        }
        else {
            this.focusNextElement(rowElement, visibleColumnIndex);
        }
    };
    /**
     * @protected
     * @param {?} rowElement
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.focusElem = /**
     * @protected
     * @param {?} rowElement
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (rowElement, visibleColumnIndex) {
        if (rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row') {
            rowElement.focus();
        }
        else {
            /** @type {?} */
            var isSummaryRow = rowElement.tagName.toLowerCase() === 'igx-grid-summary-row';
            if (this.isColumnFullyVisible(visibleColumnIndex) && this.isColumnLeftFullyVisible(visibleColumnIndex)) {
                /** @type {?} */
                var cellSelector = this.getCellSelector(visibleColumnIndex, isSummaryRow);
                /** @type {?} */
                var cell = rowElement.querySelector(cellSelector + "[data-visibleIndex=\"" + visibleColumnIndex + "\"]");
                if (cell) {
                    cell.focus();
                }
                return cell;
            }
            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });
            this.performHorizontalScrollToCell(parseInt(rowElement.getAttribute('data-rowindex'), 10), visibleColumnIndex, isSummaryRow);
        }
    };
    /**
     * @protected
     * @param {?} rowElement
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.focusNextElement = /**
     * @protected
     * @param {?} rowElement
     * @param {?} visibleColumnIndex
     * @return {?}
     */
    function (rowElement, visibleColumnIndex) {
        return this.focusElem(rowElement.nextElementSibling, visibleColumnIndex);
    };
    /**
     * @return {?}
     */
    IgxGridNavigationService.prototype.goToFirstCell = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();
        /** @type {?} */
        var horizontalScroll = this.grid.dataRowList.first.virtDirRow.getHorizontalScroll();
        if (verticalScroll.scrollTop === 0) {
            this.onKeydownHome(this.grid.dataRowList.first.index);
        }
        else {
            if (!horizontalScroll.clientWidth || parseInt(horizontalScroll.scrollLeft, 10) <= 1 || this.grid.pinnedColumns.length) {
                this.navigateTop(0);
            }
            else {
                this.getFocusableGrid().nativeElement.focus({ preventScroll: true });
                this.horizontalScroll(this.grid.dataRowList.first.index).scrollTo(0);
                this.grid.parentVirtDir.onChunkLoad
                    .pipe(first())
                    .subscribe(function () {
                    _this.navigateTop(0);
                });
            }
        }
    };
    /**
     * @return {?}
     */
    IgxGridNavigationService.prototype.goToLastCell = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();
        if (verticalScroll.scrollHeight === 0 ||
            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {
            /** @type {?} */
            var rows = this.getAllRows();
            /** @type {?} */
            var rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);
            this.onKeydownEnd(rowIndex);
        }
        else {
            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });
            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first()).subscribe(function () {
                /** @type {?} */
                var rows = _this.getAllRows();
                if (rows.length > 0) {
                    /** @type {?} */
                    var rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);
                    _this.onKeydownEnd(rowIndex);
                }
            });
        }
    };
    /**
     * @return {?}
     */
    IgxGridNavigationService.prototype.goToLastBodyElement = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();
        if (verticalScroll.scrollHeight === 0 ||
            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {
            /** @type {?} */
            var rowIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;
            /** @type {?} */
            var row = this.grid.nativeElement.querySelector("[data-rowindex=\"" + rowIndex + "\"]");
            if (row && row.tagName.toLowerCase() === 'igx-grid-groupby-row') {
                row.focus();
                return;
            }
            /** @type {?} */
            var isSummary = (row && row.tagName.toLowerCase() === 'igx-grid-summary-row') ? true : false;
            this.onKeydownEnd(rowIndex, isSummary);
        }
        else {
            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);
            this.grid.verticalScrollContainer.onChunkLoad
                .pipe(first()).subscribe(function () {
                /** @type {?} */
                var rowIndex = _this.grid.verticalScrollContainer.igxForOf.length - 1;
                /** @type {?} */
                var row = _this.grid.nativeElement.querySelector("[data-rowindex=\"" + rowIndex + "\"]");
                if (row && row.tagName.toLowerCase() === 'igx-grid-groupby-row') {
                    row.focus();
                    return;
                }
                /** @type {?} */
                var isSummary = (row && row.tagName.toLowerCase() === 'igx-grid-summary-row') ? true : false;
                _this.onKeydownEnd(rowIndex, isSummary);
            });
        }
    };
    /**
     * @param {?} currentRowEl
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @param {?=} isSummaryRow
     * @return {?}
     */
    IgxGridNavigationService.prototype.performTab = /**
     * @param {?} currentRowEl
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @param {?=} isSummaryRow
     * @return {?}
     */
    function (currentRowEl, rowIndex, visibleColumnIndex, isSummaryRow) {
        if (isSummaryRow === void 0) { isSummaryRow = false; }
        if (isSummaryRow && rowIndex === 0 &&
            this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {
            return;
        }
        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {
            if (this.isRowInEditMode(rowIndex)) {
                this.grid.rowEditTabs.first.element.nativeElement.focus();
                return;
            }
            /** @type {?} */
            var rowEl = this.grid.rowList.find(function (row) { return row.index === rowIndex + 1; }) ?
                this.grid.rowList.find(function (row) { return row.index === rowIndex + 1; }) :
                this.grid.summariesRowList.find(function (row) { return row.index === rowIndex + 1; });
            if (rowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1 && this.grid.rootSummariesEnabled) {
                this.onKeydownHome(0, true);
                return;
            }
            if (rowEl) {
                this.navigateDown(currentRowEl, rowIndex, 0);
            }
        }
        else {
            /** @type {?} */
            var cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummaryRow);
            if (cell) {
                if (this.grid.rowEditable && this.isRowInEditMode(rowIndex)) {
                    this.moveNextEditable(cell, rowIndex, visibleColumnIndex);
                    return;
                }
                this.onKeydownArrowRight(cell, rowIndex, visibleColumnIndex, isSummaryRow);
            }
        }
    };
    /**
     * @param {?=} toStart
     * @return {?}
     */
    IgxGridNavigationService.prototype.moveFocusToFilterCell = /**
     * @param {?=} toStart
     * @return {?}
     */
    function (toStart) {
        if (this.grid.filteringService.isFilterRowVisible) {
            this.grid.filteringService.focusFilterRowCloseButton();
            return;
        }
        /** @type {?} */
        var columns = this.grid.filteringService.unpinnedFilterableColumns;
        /** @type {?} */
        var targetIndex = toStart ? 0 : columns.length - 1;
        /** @type {?} */
        var visibleIndex = columns[targetIndex].visibleIndex;
        /** @type {?} */
        var isVisible = toStart ? this.isColumnLeftFullyVisible(visibleIndex) : this.isColumnFullyVisible(visibleIndex);
        if (isVisible) {
            this.grid.filteringService.focusFilterCellChip(columns[targetIndex], false);
        }
        else {
            this.grid.filteringService.scrollToFilterCell(columns[targetIndex], false);
        }
    };
    /**
     * @param {?} column
     * @param {?} eventArgs
     * @return {?}
     */
    IgxGridNavigationService.prototype.navigatePrevFilterCell = /**
     * @param {?} column
     * @param {?} eventArgs
     * @return {?}
     */
    function (column, eventArgs) {
        /** @type {?} */
        var cols = this.grid.filteringService.unpinnedFilterableColumns;
        /** @type {?} */
        var prevFilterableIndex = cols.indexOf(column) - 1;
        /** @type {?} */
        var visibleIndex = column.visibleIndex;
        if (visibleIndex === 0 || prevFilterableIndex < 0) {
            // prev is not filter cell
            /** @type {?} */
            var firstFiltarableCol = this.getFirstPinnedFilterableColumn();
            if (!firstFiltarableCol || column === firstFiltarableCol) {
                eventArgs.preventDefault();
            }
            return;
        }
        /** @type {?} */
        var prevColumn = cols[prevFilterableIndex];
        /** @type {?} */
        var prevVisibleIndex = prevColumn.visibleIndex;
        if (prevFilterableIndex >= 0 && visibleIndex > 0 && !this.isColumnLeftFullyVisible(prevVisibleIndex) && !column.pinned) {
            eventArgs.preventDefault();
            this.grid.filteringService.scrollToFilterCell(prevColumn, false);
        }
    };
    /**
     * @param {?} eventArgs
     * @return {?}
     */
    IgxGridNavigationService.prototype.navigateFirstCellIfPossible = /**
     * @param {?} eventArgs
     * @return {?}
     */
    function (eventArgs) {
        if (this.grid.rowList.length > 0) {
            if (this.grid.rowList.filter(function (row) { return row instanceof IgxGridGroupByRowComponent; }).length > 0) {
                eventArgs.stopPropagation();
                return;
            }
            this.goToFirstCell();
        }
        else if (this.grid.rootSummariesEnabled) {
            this.onKeydownHome(0, true);
        }
        eventArgs.preventDefault();
    };
    /**
     * @param {?} column
     * @param {?} eventArgs
     * @return {?}
     */
    IgxGridNavigationService.prototype.navigateNextFilterCell = /**
     * @param {?} column
     * @param {?} eventArgs
     * @return {?}
     */
    function (column, eventArgs) {
        /** @type {?} */
        var cols = this.grid.filteringService.unpinnedFilterableColumns;
        /** @type {?} */
        var nextFilterableIndex = cols.indexOf(column) + 1;
        if (nextFilterableIndex >= this.grid.filteringService.unpinnedFilterableColumns.length) {
            // next is not filter cell
            this.navigateFirstCellIfPossible(eventArgs);
            return;
        }
        /** @type {?} */
        var nextColumn = cols[nextFilterableIndex];
        /** @type {?} */
        var nextVisibleIndex = nextColumn.visibleIndex;
        if (!column.pinned && !this.isColumnFullyVisible(nextVisibleIndex)) {
            eventArgs.preventDefault();
            this.grid.filteringService.scrollToFilterCell(nextColumn, true);
        }
        else if (column === this.getLastPinnedFilterableColumn() && !this.isColumnFullyVisible(nextVisibleIndex)) {
            this.grid.filteringService.scrollToFilterCell(nextColumn, false);
            eventArgs.stopPropagation();
        }
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridNavigationService.prototype.getLastPinnedFilterableColumn = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var pinnedFilterableColums = this.grid.pinnedColumns.filter(function (col) { return !(col.columnGroup) && col.filterable; });
        return pinnedFilterableColums[pinnedFilterableColums.length - 1];
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridNavigationService.prototype.getFirstPinnedFilterableColumn = /**
     * @private
     * @return {?}
     */
    function () {
        return this.grid.pinnedColumns.filter(function (col) { return !(col.columnGroup) && col.filterable; })[0];
    };
    /**
     * @param {?} currentRowEl
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @param {?=} isSummary
     * @return {?}
     */
    IgxGridNavigationService.prototype.performShiftTabKey = /**
     * @param {?} currentRowEl
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @param {?=} isSummary
     * @return {?}
     */
    function (currentRowEl, rowIndex, visibleColumnIndex, isSummary) {
        if (isSummary === void 0) { isSummary = false; }
        if (isSummary && rowIndex === 0 && visibleColumnIndex === 0 && this.grid.rowList.length) {
            this.goToLastBodyElement();
            return;
        }
        if (visibleColumnIndex === 0) {
            if (this.isRowInEditMode(rowIndex)) {
                this.grid.rowEditTabs.last.element.nativeElement.focus();
                return;
            }
            if (rowIndex === 0 && this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {
                this.moveFocusToFilterCell();
            }
            else {
                this.navigateUp(currentRowEl, rowIndex, this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex);
            }
        }
        else {
            /** @type {?} */
            var cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary);
            if (cell) {
                if (this.grid.rowEditable && this.isRowInEditMode(rowIndex)) {
                    this.movePreviousEditable(rowIndex, visibleColumnIndex);
                    return;
                }
                this.onKeydownArrowLeft(cell, rowIndex, visibleColumnIndex, isSummary);
            }
        }
    };
    /**
     * @param {?} targetRowIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.shouldPerformVerticalScroll = /**
     * @param {?} targetRowIndex
     * @return {?}
     */
    function (targetRowIndex) {
        /** @type {?} */
        var containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);
        /** @type {?} */
        var targetRow = this.grid.summariesRowList.filter(function (s) { return s.index !== 0; })
            .concat(this.grid.rowList.toArray()).find(function (r) { return r.index === targetRowIndex; });
        /** @type {?} */
        var rowHeight = this.grid.verticalScrollContainer.getSizeAt(targetRowIndex);
        /** @type {?} */
        var containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;
        /** @type {?} */
        var targetEndTopOffset = targetRow ? targetRow.nativeElement.offsetTop + rowHeight + containerTopOffset :
            containerHeight + rowHeight;
        if (!targetRow || targetRow.nativeElement.offsetTop < Math.abs(containerTopOffset)
            || containerHeight && containerHeight < targetEndTopOffset) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @private
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @param {?=} isSummary
     * @return {?}
     */
    IgxGridNavigationService.prototype.performHorizontalScrollToCell = /**
     * @private
     * @param {?} rowIndex
     * @param {?} visibleColumnIndex
     * @param {?=} isSummary
     * @return {?}
     */
    function (rowIndex, visibleColumnIndex, isSummary) {
        var _this = this;
        if (isSummary === void 0) { isSummary = false; }
        /** @type {?} */
        var unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex);
        this.getFocusableGrid().nativeElement.focus({ preventScroll: true });
        this.grid.parentVirtDir.onChunkLoad
            .pipe(first())
            .subscribe(function () {
            _this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary).focus({ preventScroll: true });
        });
        this.horizontalScroll(rowIndex).scrollTo(unpinnedIndex);
    };
    /**
     * @protected
     * @return {?}
     */
    IgxGridNavigationService.prototype.getFocusableGrid = /**
     * @protected
     * @return {?}
     */
    function () {
        return this.grid;
    };
    /**
     * @protected
     * @param {?} index
     * @param {?=} selector
     * @return {?}
     */
    IgxGridNavigationService.prototype.getRowByIndex = /**
     * @protected
     * @param {?} index
     * @param {?=} selector
     * @return {?}
     */
    function (index, selector) {
        if (selector === void 0) { selector = this.getRowSelector(); }
        return this.grid.nativeElement.querySelector(selector + "[data-rowindex=\"" + index + "\"]");
    };
    /**
     * @protected
     * @param {?} nextIndex
     * @return {?}
     */
    IgxGridNavigationService.prototype.getNextRowByIndex = /**
     * @protected
     * @param {?} nextIndex
     * @return {?}
     */
    function (nextIndex) {
        return this.grid.tbody.nativeElement.querySelector("[data-rowindex=\"" + nextIndex + "\"]");
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridNavigationService.prototype.getAllRows = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selector = this.getRowSelector();
        return this.grid.nativeElement.querySelectorAll(selector);
    };
    /**
     * @protected
     * @param {?=} visibleIndex
     * @param {?=} isSummary
     * @return {?}
     */
    IgxGridNavigationService.prototype.getCellSelector = /**
     * @protected
     * @param {?=} visibleIndex
     * @param {?=} isSummary
     * @return {?}
     */
    function (visibleIndex, isSummary) {
        if (isSummary === void 0) { isSummary = false; }
        return isSummary ? 'igx-grid-summary-cell' : 'igx-grid-cell';
    };
    /**
     * @protected
     * @return {?}
     */
    IgxGridNavigationService.prototype.getRowSelector = /**
     * @protected
     * @return {?}
     */
    function () {
        return 'igx-grid-row';
    };
    IgxGridNavigationService.decorators = [
        { type: Injectable }
    ];
    return IgxGridNavigationService;
}());
export { IgxGridNavigationService };
if (false) {
    /** @type {?} */
    IgxGridNavigationService.prototype.grid;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1uYXZpZ2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2dyaWRzL2dyaWQtbmF2aWdhdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQXdCLFVBQVUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV2QyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7O0lBR3RFLE1BQU8sTUFBTTtJQUNiLE9BQVEsT0FBTzs7Ozs7QUFJbkI7SUFBQTtJQXFsQkEsQ0FBQztJQWpsQkcsc0JBQUksMkRBQXFCOzs7O1FBQXpCO1lBQ0ksT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDOUcsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSxnRUFBMEI7Ozs7UUFBOUI7WUFDSSxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNsRixDQUFDOzs7T0FBQTtJQUVELHNCQUFJLHFFQUErQjs7OztRQUFuQztZQUNJLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO1FBQzlGLENBQUM7OztPQUFBOzs7OztJQUVNLG1EQUFnQjs7OztJQUF2QixVQUF3QixRQUFROztZQUN4QixPQUFPLEdBQUcsSUFB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QWU7Ozs7OztJQUF6QixVQUEwQixZQUFxQixFQUFFLFNBQWlCO1FBQWpCLDBCQUFBLEVBQUEsaUJBQWlCO1FBQzlELE9BQU8sU0FBUyxDQUFDLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDO0lBQ2pFLENBQUM7Ozs7O0lBRVMsaURBQWM7Ozs7SUFBeEI7UUFDSSxPQUFPLGNBQWMsQ0FBQztJQUMxQixDQUFDOztnQkFwbEJKLFVBQVU7O0lBcWxCWCwrQkFBQztDQUFBLEFBcmxCRCxJQXFsQkM7U0FwbEJZLHdCQUF3Qjs7O0lBQ2pDLHdDQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneEdyaWRCYXNlQ29tcG9uZW50LCBGaWx0ZXJNb2RlIH0gZnJvbSAnLi9ncmlkLWJhc2UuY29tcG9uZW50JztcbmltcG9ydCB7IGZpcnN0IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSWd4Q29sdW1uQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW4uY29tcG9uZW50JztcbmltcG9ydCB7IElneEdyaWRHcm91cEJ5Um93Q29tcG9uZW50IH0gZnJvbSAnLi9ncmlkL2dyb3VwYnktcm93LmNvbXBvbmVudCc7XG5cbmVudW0gTW92ZURpcmVjdGlvbiB7XG4gICAgTEVGVCA9ICdsZWZ0JyxcbiAgICBSSUdIVCA9ICdyaWdodCdcbn1cblxuLyoqIEBoaWRkZW4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBJZ3hHcmlkTmF2aWdhdGlvblNlcnZpY2Uge1xuICAgIHB1YmxpYyBncmlkOiBJZ3hHcmlkQmFzZUNvbXBvbmVudDtcblxuICAgIGdldCBkaXNwbGF5Q29udGFpbmVyV2lkdGgoKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludCh0aGlzLmdyaWQucGFyZW50VmlydERpci5kYy5pbnN0YW5jZS5fdmlld0NvbnRhaW5lci5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGgsIDEwKTtcbiAgICB9XG5cbiAgICBnZXQgZGlzcGxheUNvbnRhaW5lclNjcm9sbExlZnQoKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludCh0aGlzLmdyaWQucGFyZW50VmlydERpci5nZXRIb3Jpem9udGFsU2Nyb2xsKCkuc2Nyb2xsTGVmdCwgMTApO1xuICAgIH1cblxuICAgIGdldCB2ZXJ0aWNhbERpc3BsYXlDb250YWluZXJFbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmRjLmluc3RhbmNlLl92aWV3Q29udGFpbmVyLmVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgICB9XG5cbiAgICBwdWJsaWMgaG9yaXpvbnRhbFNjcm9sbChyb3dJbmRleCkge1xuICAgICAgICBsZXQgcm93Q29tcCA9IHRoaXMuZ3JpZC5kYXRhUm93TGlzdC5maW5kKChyb3cpID0+IHJvdy5pbmRleCA9PT0gcm93SW5kZXgpID9cbiAgICAgICAgdGhpcy5ncmlkLmRhdGFSb3dMaXN0LmZpbmQoKHJvdykgPT4gcm93LmluZGV4ID09PSByb3dJbmRleCkgOiB0aGlzLmdyaWQuZGF0YVJvd0xpc3QuZmlyc3Q7XG4gICAgICAgIGlmICghcm93Q29tcCkge1xuICAgICAgICAgICAgcm93Q29tcCA9IHRoaXMuZ3JpZC5zdW1tYXJpZXNSb3dMaXN0LmZpbmQoKHJvdykgPT4gcm93LmluZGV4ID09PSByb3dJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJvd0NvbXAudmlydERpclJvdztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Q29sdW1uVW5waW5uZWRJbmRleCh2aXNpYmxlQ29sdW1uSW5kZXg6IG51bWJlcikge1xuICAgICAgICBjb25zdCBjb2x1bW4gPSB0aGlzLmdyaWQudW5waW5uZWRDb2x1bW5zLmZpbmQoKGNvbCkgPT4gIWNvbC5jb2x1bW5Hcm91cCAmJiBjb2wudmlzaWJsZUluZGV4ID09PSB2aXNpYmxlQ29sdW1uSW5kZXgpO1xuICAgICAgICByZXR1cm4gdGhpcy5ncmlkLnBpbm5lZENvbHVtbnMubGVuZ3RoID8gdGhpcy5ncmlkLnVucGlubmVkQ29sdW1ucy5maWx0ZXIoKGMpID0+ICFjLmNvbHVtbkdyb3VwKS5pbmRleE9mKGNvbHVtbikgOlxuICAgICAgICAgICAgdmlzaWJsZUNvbHVtbkluZGV4O1xuICAgIH1cblxuICAgIHB1YmxpYyBpc0NvbHVtbkZ1bGx5VmlzaWJsZSh2aXNpYmxlQ29sdW1uSW5kZXg6IG51bWJlcikge1xuICAgICAgICBsZXQgZm9yT2ZEaXI7XG4gICAgICAgIGlmICh0aGlzLmdyaWQuZGF0YVJvd0xpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yT2ZEaXIgPSB0aGlzLmdyaWQuZGF0YVJvd0xpc3QuZmlyc3QudmlydERpclJvdztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvck9mRGlyID0gdGhpcy5ncmlkLmhlYWRlckNvbnRhaW5lcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBob3Jpem9udGFsU2Nyb2xsID0gZm9yT2ZEaXIuZ2V0SG9yaXpvbnRhbFNjcm9sbCgpO1xuICAgICAgICBpZiAoIWhvcml6b250YWxTY3JvbGwuY2xpZW50V2lkdGggfHxcbiAgICAgICAgICAgIHRoaXMuZ3JpZC5jb2x1bW5MaXN0LmZpbHRlcihjID0+ICFjLmNvbHVtbkdyb3VwKS5maW5kKChjb2x1bW4pID0+IGNvbHVtbi52aXNpYmxlSW5kZXggPT09IHZpc2libGVDb2x1bW5JbmRleCkucGlubmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuZ2V0Q29sdW1uVW5waW5uZWRJbmRleCh2aXNpYmxlQ29sdW1uSW5kZXgpO1xuICAgICAgICByZXR1cm4gdGhpcy5kaXNwbGF5Q29udGFpbmVyV2lkdGggPj0gZm9yT2ZEaXIuZ2V0Q29sdW1uU2Nyb2xsTGVmdChpbmRleCArIDEpIC0gdGhpcy5kaXNwbGF5Q29udGFpbmVyU2Nyb2xsTGVmdDtcbiAgICB9XG5cbiAgICBwdWJsaWMgaXNDb2x1bW5MZWZ0RnVsbHlWaXNpYmxlKHZpc2libGVDb2x1bW5JbmRleCkge1xuICAgICAgICBsZXQgZm9yT2ZEaXI7XG4gICAgICAgIGlmICh0aGlzLmdyaWQuZGF0YVJvd0xpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yT2ZEaXIgPSB0aGlzLmdyaWQuZGF0YVJvd0xpc3QuZmlyc3QudmlydERpclJvdztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvck9mRGlyID0gdGhpcy5ncmlkLmhlYWRlckNvbnRhaW5lcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBob3Jpem9udGFsU2Nyb2xsID0gZm9yT2ZEaXIuZ2V0SG9yaXpvbnRhbFNjcm9sbCgpO1xuICAgICAgICBpZiAoIWhvcml6b250YWxTY3JvbGwuY2xpZW50V2lkdGggfHxcbiAgICAgICAgICAgIHRoaXMuZ3JpZC5jb2x1bW5MaXN0LmZpbHRlcihjID0+ICFjLmNvbHVtbkdyb3VwKS5maW5kKChjb2x1bW4pID0+IGNvbHVtbi52aXNpYmxlSW5kZXggPT09IHZpc2libGVDb2x1bW5JbmRleCkucGlubmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuZ2V0Q29sdW1uVW5waW5uZWRJbmRleCh2aXNpYmxlQ29sdW1uSW5kZXgpO1xuICAgICAgICByZXR1cm4gdGhpcy5kaXNwbGF5Q29udGFpbmVyU2Nyb2xsTGVmdCA8PSBmb3JPZkRpci5nZXRDb2x1bW5TY3JvbGxMZWZ0KGluZGV4KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGdyaWRPcmRlcmVkQ29sdW1ucygpOiBJZ3hDb2x1bW5Db21wb25lbnRbXSB7XG4gICAgICAgIHJldHVybiBbLi4udGhpcy5ncmlkLnBpbm5lZENvbHVtbnMsIC4uLnRoaXMuZ3JpZC51bnBpbm5lZENvbHVtbnNdLmZpbHRlcihjID0+ICFjLmNvbHVtbkdyb3VwKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaXNSb3dJbkVkaXRNb2RlKHJvd0luZGV4KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWQucm93RWRpdGFibGUgJiYgKHRoaXMuZ3JpZC5yb3dJbkVkaXRNb2RlICYmIHRoaXMuZ3JpZC5yb3dJbkVkaXRNb2RlLmluZGV4ID09PSByb3dJbmRleCk7XG4gICAgfVxuXG4gICAgcHVibGljIGlzQ29sdW1uRWRpdGFibGUodmlzaWJsZUNvbHVtbkluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgY29sdW1uID0gdGhpcy5ncmlkT3JkZXJlZENvbHVtbnMuZmluZChjID0+IGMudmlzaWJsZUluZGV4ID09PSB2aXNpYmxlQ29sdW1uSW5kZXgpO1xuICAgICAgICByZXR1cm4gY29sdW1uID8gY29sdW1uLmVkaXRhYmxlIDogZmFsc2U7XG4gICAgfVxuXG4gICAgcHVibGljIGZpbmROZXh0RWRpdGFibGUoZGlyZWN0aW9uOiBzdHJpbmcsIHZpc2libGVDb2x1bW5JbmRleDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGdyaWRDb2x1bW5zID0gdGhpcy5ncmlkT3JkZXJlZENvbHVtbnM7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09IE1vdmVEaXJlY3Rpb24uTEVGVCkge1xuICAgICAgICAgICAgcmV0dXJuIGdyaWRDb2x1bW5zLnNwbGljZSgwLCB2aXNpYmxlQ29sdW1uSW5kZXggKyAxKS5yZXZlcnNlKCkuZmluZEluZGV4KGUgPT4gZS5lZGl0YWJsZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSBNb3ZlRGlyZWN0aW9uLlJJR0hUKSB7XG4gICAgICAgICAgICByZXR1cm4gZ3JpZENvbHVtbnMuc3BsaWNlKHZpc2libGVDb2x1bW5JbmRleCwgZ3JpZENvbHVtbnMubGVuZ3RoIC0gMSkuZmluZEluZGV4KGUgPT4gZS5lZGl0YWJsZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Q2VsbEVsZW1lbnRCeVZpc2libGVJbmRleChyb3dJbmRleCwgdmlzaWJsZUNvbHVtbkluZGV4LCBpc1N1bW1hcnkgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBjZWxsU2VsZWN0b3IgPSB0aGlzLmdldENlbGxTZWxlY3Rvcih2aXNpYmxlQ29sdW1uSW5kZXgsIGlzU3VtbWFyeSk7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWQubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgYCR7Y2VsbFNlbGVjdG9yfVtkYXRhLXJvd2luZGV4PVwiJHtyb3dJbmRleH1cIl1bZGF0YS12aXNpYmxlSW5kZXg9XCIke3Zpc2libGVDb2x1bW5JbmRleH1cIl1gKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25LZXlkb3duQXJyb3dSaWdodChlbGVtZW50LCByb3dJbmRleCwgdmlzaWJsZUNvbHVtbkluZGV4LCBpc1N1bW1hcnkgPSBmYWxzZSkge1xuICAgICAgICBpZiAodGhpcy5ncmlkLnVucGlubmVkQ29sdW1uc1t0aGlzLmdyaWQudW5waW5uZWRDb2x1bW5zLmxlbmd0aCAtIDFdLnZpc2libGVJbmRleCA9PT0gdmlzaWJsZUNvbHVtbkluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNDb2x1bW5GdWxseVZpc2libGUodmlzaWJsZUNvbHVtbkluZGV4ICsgMSkpIHsgLy8gaWYgbmV4dCBjb2x1bW4gaXMgZnVsbHkgdmlzaWJsZSBvciBpcyBwaW5uZWRcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnaWd4LWdyaWRfX3RkLS1waW5uZWQtbGFzdCcpIHx8IGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdpZ3gtZ3JpZC1zdW1tYXJ5LS1waW5uZWQtbGFzdCcpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNDb2x1bW5MZWZ0RnVsbHlWaXNpYmxlKHZpc2libGVDb2x1bW5JbmRleCArIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nLmZpcnN0RWxlbWVudENoaWxkLmZvY3VzKHsgcHJldmVudFNjcm9sbDogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldEZvY3VzYWJsZUdyaWQoKS5uYXRpdmVFbGVtZW50LmZvY3VzKHsgcHJldmVudFNjcm9sbDogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ncmlkLnBhcmVudFZpcnREaXIub25DaHVua0xvYWRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5waXBlKGZpcnN0KCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZy5maXJzdEVsZW1lbnRDaGlsZC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ob3Jpem9udGFsU2Nyb2xsKHJvd0luZGV4KS5zY3JvbGxUbygwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nLmZvY3VzKHsgcHJldmVudFNjcm9sbDogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucGVyZm9ybUhvcml6b250YWxTY3JvbGxUb0NlbGwocm93SW5kZXgsIHZpc2libGVDb2x1bW5JbmRleCArIDEsIGlzU3VtbWFyeSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgb25LZXlkb3duQXJyb3dMZWZ0KGVsZW1lbnQsIHJvd0luZGV4LCB2aXNpYmxlQ29sdW1uSW5kZXgsIGlzU3VtbWFyeSA9IGZhbHNlKSB7XG4gICAgICAgIGlmICh2aXNpYmxlQ29sdW1uSW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuZ2V0Q29sdW1uVW5waW5uZWRJbmRleCh2aXNpYmxlQ29sdW1uSW5kZXggLSAxKTtcbiAgICAgICAgaWYgKCFlbGVtZW50LnByZXZpb3VzRWxlbWVudFNpYmxpbmcgJiYgdGhpcy5ncmlkLnBpbm5lZENvbHVtbnMubGVuZ3RoICYmIGluZGV4ID09PSAtIDEpIHtcbiAgICAgICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLmZvY3VzKHsgcHJldmVudFNjcm9sbDogdHJ1ZSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5pc0NvbHVtbkxlZnRGdWxseVZpc2libGUodmlzaWJsZUNvbHVtbkluZGV4IC0gMSkpIHtcbiAgICAgICAgICAgIHRoaXMucGVyZm9ybUhvcml6b250YWxTY3JvbGxUb0NlbGwocm93SW5kZXgsIHZpc2libGVDb2x1bW5JbmRleCAtIDEsIGlzU3VtbWFyeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50LnByZXZpb3VzRWxlbWVudFNpYmxpbmcuZm9jdXMoeyBwcmV2ZW50U2Nyb2xsOiB0cnVlIH0pO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgbW92ZVByZXZpb3VzRWRpdGFibGUocm93SW5kZXgsIHZpc2libGVDb2x1bW5JbmRleCkge1xuICAgICAgICBjb25zdCBhZGRlZEluZGV4ID0gdGhpcy5pc0NvbHVtbkVkaXRhYmxlKHZpc2libGVDb2x1bW5JbmRleCAtIDEpID9cbiAgICAgICAgICAgIDAgOlxuICAgICAgICAgICAgdGhpcy5maW5kTmV4dEVkaXRhYmxlKE1vdmVEaXJlY3Rpb24uTEVGVCwgdmlzaWJsZUNvbHVtbkluZGV4IC0gMSk7XG4gICAgICAgIGlmIChhZGRlZEluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5ncmlkLnJvd0VkaXRUYWJzLmxhc3QuZWxlbWVudC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZWRpdGFibGVJbmRleCA9IHZpc2libGVDb2x1bW5JbmRleCAtIDEgLSBhZGRlZEluZGV4O1xuICAgICAgICBpZiAodGhpcy5nZXRDb2x1bW5VbnBpbm5lZEluZGV4KGVkaXRhYmxlSW5kZXgpID09PSAtMSAmJiB0aGlzLmdyaWQucGlubmVkQ29sdW1ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIGlmIHRhcmdldCBpcyBOT1QgcGlubmVkIGFuZCB0aGVyZSBhcmUgcGlubmVkIGNvbHVtbnNcbiAgICAgICAgICAgIC8vIHNpbmNlIGFkZGVkSW5kZXggIT09IC0xLCB0aGVyZSB3aWxsIGFsd2F5cyBiZSBhIHRhcmdldFxuICAgICAgICAgICAgdGhpcy5nZXRDZWxsRWxlbWVudEJ5VmlzaWJsZUluZGV4KHJvd0luZGV4LCBlZGl0YWJsZUluZGV4KS5mb2N1cygpO1xuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmlzQ29sdW1uTGVmdEZ1bGx5VmlzaWJsZShlZGl0YWJsZUluZGV4KSkgeyAgLy8gaWYgbm90IGZ1bGx5IHZpc2libGUsIHBlcmZvcm0gc2Nyb2xsXG4gICAgICAgICAgICB0aGlzLnBlcmZvcm1Ib3Jpem9udGFsU2Nyb2xsVG9DZWxsKHJvd0luZGV4LCBlZGl0YWJsZUluZGV4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0Q2VsbEVsZW1lbnRCeVZpc2libGVJbmRleChyb3dJbmRleCwgZWRpdGFibGVJbmRleCkuZm9jdXMoKTsgLy8gaWYgZnVsbHkgdmlzaWJsZSwganVzdCBmb2N1c1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIG1vdmVOZXh0RWRpdGFibGUoZWxlbWVudCwgcm93SW5kZXgsIHZpc2libGVDb2x1bW5JbmRleCkge1xuICAgICAgICBsZXQgYWRkZWRJbmRleCA9IDA7XG4gICAgICAgIGFkZGVkSW5kZXggPSB0aGlzLmlzQ29sdW1uRWRpdGFibGUodmlzaWJsZUNvbHVtbkluZGV4ICsgMSkgP1xuICAgICAgICAgICAgMCA6XG4gICAgICAgICAgICB0aGlzLmZpbmROZXh0RWRpdGFibGUoTW92ZURpcmVjdGlvbi5SSUdIVCwgdmlzaWJsZUNvbHVtbkluZGV4ICsgMSk7XG4gICAgICAgIGlmIChhZGRlZEluZGV4ID09PSAtMSAmJiB0aGlzLmdyaWQucm93RWRpdFRhYnMpIHsgLy8gbm8gcHJldmlvdXMgZWRpdCBjb2x1bW4gLT4gZ28gdG8gUkUgYnV0dG9uc1xuICAgICAgICAgICAgdGhpcy5ncmlkLnJvd0VkaXRUYWJzLmZpcnN0LmVsZW1lbnQubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVkaXRhYmxlSW5kZXggPSB2aXNpYmxlQ29sdW1uSW5kZXggKyAxICsgYWRkZWRJbmRleDtcbiAgICAgICAgaWYgKHRoaXMuaXNDb2x1bW5GdWxseVZpc2libGUoZWRpdGFibGVJbmRleCkpIHsgLy8gSWYgY29sdW1uIGlzIGZ1bGx5IHZpc2libGVcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnaWd4LWdyaWRfX3RkLS1waW5uZWQtbGFzdCcpKSB7IC8vIElmIHRoaXMgaXMgcGlubmVkXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNDb2x1bW5MZWZ0RnVsbHlWaXNpYmxlKGVkaXRhYmxlSW5kZXgpKSB7IC8vIElmIG5leHQgY29sdW1uIGlzIGZ1bGx5IHZpc2libGUgTEVGVFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldENlbGxFbGVtZW50QnlWaXNpYmxlSW5kZXgocm93SW5kZXgsIGVkaXRhYmxlSW5kZXgpLmZvY3VzKCk7IC8vIGZvY3VzXG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gaWYgTk9UIGZ1bGx5IHZpc2libGUsIHBlcmZvcm0gc2Nyb2xsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGVyZm9ybUhvcml6b250YWxTY3JvbGxUb0NlbGwocm93SW5kZXgsIGVkaXRhYmxlSW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIGNlbGwgaXMgbmV4dCBjZWxsXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRDZWxsRWxlbWVudEJ5VmlzaWJsZUluZGV4KHJvd0luZGV4LCBlZGl0YWJsZUluZGV4KS5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wZXJmb3JtSG9yaXpvbnRhbFNjcm9sbFRvQ2VsbChyb3dJbmRleCwgZWRpdGFibGVJbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgb25LZXlkb3duSG9tZShyb3dJbmRleCwgaXNTdW1tYXJ5ID0gZmFsc2UpIHtcbiAgICAgICAgY29uc3Qgcm93TGlzdCA9IGlzU3VtbWFyeSA/IHRoaXMuZ3JpZC5zdW1tYXJpZXNSb3dMaXN0IDogdGhpcy5ncmlkLmRhdGFSb3dMaXN0O1xuICAgICAgICBsZXQgcm93RWxlbWVudCA9IHJvd0xpc3QuZmluZCgocm93KSA9PiByb3cuaW5kZXggPT09IHJvd0luZGV4KTtcbiAgICAgICAgY29uc3QgY2VsbFNlbGVjdG9yID0gdGhpcy5nZXRDZWxsU2VsZWN0b3IoMCwgaXNTdW1tYXJ5KTtcbiAgICAgICAgaWYgKCFyb3dFbGVtZW50KSB7IHJldHVybjsgfVxuICAgICAgICByb3dFbGVtZW50ID0gcm93RWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICAgICAgICBsZXQgZmlyc3RDZWxsID0gIHJvd0VsZW1lbnQucXVlcnlTZWxlY3RvcihjZWxsU2VsZWN0b3IpO1xuICAgICAgICBpZiAodGhpcy5ncmlkLnBpbm5lZENvbHVtbnMubGVuZ3RoIHx8IHRoaXMuZGlzcGxheUNvbnRhaW5lclNjcm9sbExlZnQgPT09IDApIHtcbiAgICAgICAgICAgIGZpcnN0Q2VsbC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmdldEZvY3VzYWJsZUdyaWQoKS5uYXRpdmVFbGVtZW50LmZvY3VzKHsgcHJldmVudFNjcm9sbDogdHJ1ZSB9KTtcbiAgICAgICAgICAgIHRoaXMuZ3JpZC5wYXJlbnRWaXJ0RGlyLm9uQ2h1bmtMb2FkXG4gICAgICAgICAgICAgICAgLnBpcGUoZmlyc3QoKSlcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RDZWxsID0gcm93RWxlbWVudC5xdWVyeVNlbGVjdG9yKGNlbGxTZWxlY3Rvcik7XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0Q2VsbC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmhvcml6b250YWxTY3JvbGwocm93SW5kZXgpLnNjcm9sbFRvKDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIG9uS2V5ZG93bkVuZChyb3dJbmRleCwgaXNTdW1tYXJ5ID0gZmFsc2UpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmdyaWQudW5waW5uZWRDb2x1bW5zW3RoaXMuZ3JpZC51bnBpbm5lZENvbHVtbnMubGVuZ3RoIC0gMV0udmlzaWJsZUluZGV4O1xuICAgICAgICBjb25zdCByb3dMaXN0ID0gaXNTdW1tYXJ5ID8gdGhpcy5ncmlkLnN1bW1hcmllc1Jvd0xpc3QgOiB0aGlzLmdyaWQuZGF0YVJvd0xpc3Q7XG4gICAgICAgIGxldCByb3dFbGVtZW50ID0gcm93TGlzdC5maW5kKChyb3cpID0+IHJvdy5pbmRleCA9PT0gcm93SW5kZXgpO1xuICAgICAgICBpZiAoIXJvd0VsZW1lbnQpIHsgcmV0dXJuOyB9XG4gICAgICAgIHJvd0VsZW1lbnQgPSByb3dFbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIGlmICh0aGlzLmlzQ29sdW1uRnVsbHlWaXNpYmxlKGluZGV4KSkge1xuICAgICAgICAgICAgY29uc3QgYWxsQ2VsbHMgPSByb3dFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5nZXRDZWxsU2VsZWN0b3IoLTEsIGlzU3VtbWFyeSkpO1xuICAgICAgICAgICAgYWxsQ2VsbHNbYWxsQ2VsbHMubGVuZ3RoIC0gMV0uZm9jdXMoeyBwcmV2ZW50U2Nyb2xsOiB0cnVlIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5nZXRGb2N1c2FibGVHcmlkKCkubmF0aXZlRWxlbWVudC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XG4gICAgICAgICAgICB0aGlzLmdyaWQucGFyZW50VmlydERpci5vbkNodW5rTG9hZFxuICAgICAgICAgICAgICAgIC5waXBlKGZpcnN0KCkpXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFsbENlbGxzID0gcm93RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuZ2V0Q2VsbFNlbGVjdG9yKC0xLCBpc1N1bW1hcnkpKTtcbiAgICAgICAgICAgICAgICAgICAgYWxsQ2VsbHNbYWxsQ2VsbHMubGVuZ3RoIC0gMV0uZm9jdXMoeyBwcmV2ZW50U2Nyb2xsOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5ob3Jpem9udGFsU2Nyb2xsKHJvd0luZGV4KS5zY3JvbGxUbyh0aGlzLmdldENvbHVtblVucGlubmVkSW5kZXgoaW5kZXgpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBuYXZpZ2F0ZVRvcCh2aXNpYmxlQ29sdW1uSW5kZXgpIHtcbiAgICAgICAgY29uc3QgdmVydGljYWxTY3JvbGwgPSB0aGlzLmdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuZ2V0VmVydGljYWxTY3JvbGwoKTtcbiAgICAgICAgY29uc3QgY2VsbFNlbGVjdG9yID0gdGhpcy5nZXRDZWxsU2VsZWN0b3IodmlzaWJsZUNvbHVtbkluZGV4KTtcbiAgICAgICAgaWYgKHZlcnRpY2FsU2Nyb2xsLnNjcm9sbFRvcCA9PT0gMCkge1xuICAgICAgICAgICAgY29uc3QgY2VsbHMgPSB0aGlzLmdyaWQubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICAgICAgICAgIGAke2NlbGxTZWxlY3Rvcn1bZGF0YS12aXNpYmxlSW5kZXg9XCIke3Zpc2libGVDb2x1bW5JbmRleH1cIl1gKTtcbiAgICAgICAgICAgIGNlbGxzWzBdLmZvY3VzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgIHRoaXMuZ2V0Rm9jdXNhYmxlR3JpZCgpLm5hdGl2ZUVsZW1lbnQuZm9jdXMoeyBwcmV2ZW50U2Nyb2xsOiB0cnVlIH0pO1xuICAgICAgICAgICAgdGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLnNjcm9sbFRvKDApO1xuICAgICAgICAgICAgdGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLm9uQ2h1bmtMb2FkXG4gICAgICAgICAgICAgICAgLnBpcGUoZmlyc3QoKSkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VsbHMgPSB0aGlzLmdyaWQubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgYCR7Y2VsbFNlbGVjdG9yfVtkYXRhLXZpc2libGVJbmRleD1cIiR7dmlzaWJsZUNvbHVtbkluZGV4fVwiXWApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2VsbHMubGVuZ3RoID4gMCkgeyBjZWxsc1swXS5mb2N1cygpOyB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgbmF2aWdhdGVCb3R0b20odmlzaWJsZUNvbHVtbkluZGV4KSB7XG4gICAgICAgIGNvbnN0IHZlcnRpY2FsU2Nyb2xsID0gdGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmdldFZlcnRpY2FsU2Nyb2xsKCk7XG4gICAgICAgIGNvbnN0IGNlbGxTZWxlY3RvciA9IHRoaXMuZ2V0Q2VsbFNlbGVjdG9yKHZpc2libGVDb2x1bW5JbmRleCk7XG4gICAgICAgIGlmICh2ZXJ0aWNhbFNjcm9sbC5zY3JvbGxIZWlnaHQgPT09IDAgfHxcbiAgICAgICAgICAgIHZlcnRpY2FsU2Nyb2xsLnNjcm9sbFRvcCA9PT0gdmVydGljYWxTY3JvbGwuc2Nyb2xsSGVpZ2h0IC0gdGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmlneEZvckNvbnRhaW5lclNpemUpIHtcbiAgICAgICAgICAgIGNvbnN0IGNlbGxzID0gdGhpcy5ncmlkLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICAgICAgICAgICBgJHtjZWxsU2VsZWN0b3J9W2RhdGEtdmlzaWJsZUluZGV4PVwiJHt2aXNpYmxlQ29sdW1uSW5kZXh9XCJdYCk7XG4gICAgICAgICAgICBjZWxsc1tjZWxscy5sZW5ndGggLSAxXS5mb2N1cygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICB0aGlzLmdldEZvY3VzYWJsZUdyaWQoKS5uYXRpdmVFbGVtZW50LmZvY3VzKHsgcHJldmVudFNjcm9sbDogdHJ1ZSB9KTtcbiAgICAgICAgICAgIHRoaXMuZ3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5zY3JvbGxUbyh0aGlzLmdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuaWd4Rm9yT2YubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICB0aGlzLmdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIub25DaHVua0xvYWRcbiAgICAgICAgICAgICAgICAucGlwZShmaXJzdCgpKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjZWxscyA9IHRoaXMuZ3JpZC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICBgJHtjZWxsU2VsZWN0b3J9W2RhdGEtdmlzaWJsZUluZGV4PVwiJHt2aXNpYmxlQ29sdW1uSW5kZXh9XCJdYCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjZWxscy5sZW5ndGggPiAwKSB7IGNlbGxzW2NlbGxzLmxlbmd0aCAtIDFdLmZvY3VzKCk7IH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBuYXZpZ2F0ZVVwKHJvd0VsZW1lbnQsIGN1cnJlbnRSb3dJbmRleCwgdmlzaWJsZUNvbHVtbkluZGV4KSB7XG4gICAgICAgIGlmIChjdXJyZW50Um93SW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250YWluZXJUb3BPZmZzZXQgPSBwYXJzZUludCh0aGlzLnZlcnRpY2FsRGlzcGxheUNvbnRhaW5lckVsZW1lbnQuc3R5bGUudG9wLCAxMCk7XG4gICAgICAgIGlmICghcm93RWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nIHx8XG4gICAgICAgICAgICByb3dFbGVtZW50LnByZXZpb3VzRWxlbWVudFNpYmxpbmcub2Zmc2V0VG9wIDwgTWF0aC5hYnMoY29udGFpbmVyVG9wT2Zmc2V0KSkge1xuICAgICAgICAgICB0aGlzLmdldEZvY3VzYWJsZUdyaWQoKS5uYXRpdmVFbGVtZW50LmZvY3VzKHsgcHJldmVudFNjcm9sbDogdHJ1ZSB9KTtcbiAgICAgICAgICAgIHRoaXMuZ3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5zY3JvbGxUbyhjdXJyZW50Um93SW5kZXggLSAxKTtcbiAgICAgICAgICAgIHRoaXMuZ3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5vbkNodW5rTG9hZFxuICAgICAgICAgICAgICAgIC5waXBlKGZpcnN0KCkpXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhZyA9IHJvd0VsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByb3dTZWxlY3RvciA9IHRoaXMuZ2V0Um93U2VsZWN0b3IoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyA9PT0gcm93U2VsZWN0b3IgfHwgdGFnID09PSAnaWd4LWdyaWQtc3VtbWFyeS1yb3cnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3dFbGVtZW50ID0gdGhpcy5nZXRSb3dCeUluZGV4KGN1cnJlbnRSb3dJbmRleCwgdGFnKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd0VsZW1lbnQgPSB0aGlzLmdyaWQubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBpZ3gtZ3JpZC1ncm91cGJ5LXJvd1tkYXRhLXJvd2luZGV4PVwiJHtjdXJyZW50Um93SW5kZXh9XCJdYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c1ByZXZpb3VzRWxlbWVudChyb3dFbGVtZW50LCB2aXNpYmxlQ29sdW1uSW5kZXgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5mb2N1c1ByZXZpb3VzRWxlbWVudChyb3dFbGVtZW50LCB2aXNpYmxlQ29sdW1uSW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGZvY3VzUHJldmlvdXNFbGVtZW50KGN1cnJlbnRSb3dFbCwgdmlzaWJsZUNvbHVtbkluZGV4KSB7XG4gICAgICAgIHRoaXMuZm9jdXNFbGVtKGN1cnJlbnRSb3dFbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLCB2aXNpYmxlQ29sdW1uSW5kZXgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBuYXZpZ2F0ZURvd24ocm93RWxlbWVudCwgY3VycmVudFJvd0luZGV4LCB2aXNpYmxlQ29sdW1uSW5kZXgpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRSb3dJbmRleCA9PT0gdGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmlneEZvck9mLmxlbmd0aCAtIDEgfHxcbiAgICAgICAgICAgIChjdXJyZW50Um93SW5kZXggPT09IDAgJiYgcm93RWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpZ3gtZ3JpZC1zdW1tYXJ5LXJvdycpKSB7IC8vIGNoZWNrIGlmIHRoaXMgaXMgcm9vdFN1bW1hcnkgcm93XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgcm93SGVpZ2h0ID0gdGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmdldFNpemVBdChjdXJyZW50Um93SW5kZXggKyAxKTtcbiAgICAgICAgY29uc3QgY29udGFpbmVySGVpZ2h0ID0gdGhpcy5ncmlkLmNhbGNIZWlnaHQgPyBNYXRoLmNlaWwodGhpcy5ncmlkLmNhbGNIZWlnaHQpIDogMDtcbiAgICAgICAgY29uc3QgdGFyZ2V0RW5kVG9wT2Zmc2V0ID0gcm93RWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcgP1xuICAgICAgICAgICAgcm93RWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcub2Zmc2V0VG9wICsgcm93SGVpZ2h0ICsgcGFyc2VJbnQodGhpcy52ZXJ0aWNhbERpc3BsYXlDb250YWluZXJFbGVtZW50LnN0eWxlLnRvcCwgMTApIDpcbiAgICAgICAgICAgIGNvbnRhaW5lckhlaWdodCArIHJvd0hlaWdodDtcbiAgICAgICB0aGlzLmdldEZvY3VzYWJsZUdyaWQoKS5uYXRpdmVFbGVtZW50LmZvY3VzKHsgcHJldmVudFNjcm9sbDogdHJ1ZSB9KTtcbiAgICAgICAgaWYgKGNvbnRhaW5lckhlaWdodCAmJiBjb250YWluZXJIZWlnaHQgPCB0YXJnZXRFbmRUb3BPZmZzZXQpIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRJbmRleCA9IGN1cnJlbnRSb3dJbmRleCArIDE7XG4gICAgICAgICAgICB0aGlzLmdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuc2Nyb2xsVG8obmV4dEluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuZ3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5vbkNodW5rTG9hZFxuICAgICAgICAgICAgICAgIC5waXBlKGZpcnN0KCkpXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJvd0VsZW1lbnQgPSB0aGlzLmdldE5leHRSb3dCeUluZGV4KG5leHRJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNFbGVtKHJvd0VsZW1lbnQsIHZpc2libGVDb2x1bW5JbmRleCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmZvY3VzTmV4dEVsZW1lbnQocm93RWxlbWVudCwgdmlzaWJsZUNvbHVtbkluZGV4KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBmb2N1c0VsZW0ocm93RWxlbWVudCwgdmlzaWJsZUNvbHVtbkluZGV4KSB7XG4gICAgICAgIGlmIChyb3dFbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2lneC1ncmlkLWdyb3VwYnktcm93Jykge1xuICAgICAgICAgICAgcm93RWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgaXNTdW1tYXJ5Um93ID0gcm93RWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpZ3gtZ3JpZC1zdW1tYXJ5LXJvdyc7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0NvbHVtbkZ1bGx5VmlzaWJsZSh2aXNpYmxlQ29sdW1uSW5kZXgpICYmIHRoaXMuaXNDb2x1bW5MZWZ0RnVsbHlWaXNpYmxlKHZpc2libGVDb2x1bW5JbmRleCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjZWxsU2VsZWN0b3IgPSB0aGlzLmdldENlbGxTZWxlY3Rvcih2aXNpYmxlQ29sdW1uSW5kZXgsIGlzU3VtbWFyeVJvdyk7XG4gICAgICAgICAgICAgICAgY29uc3QgY2VsbCA9IHJvd0VsZW1lbnQucXVlcnlTZWxlY3RvcihgJHtjZWxsU2VsZWN0b3J9W2RhdGEtdmlzaWJsZUluZGV4PVwiJHt2aXNpYmxlQ29sdW1uSW5kZXh9XCJdYCk7XG4gICAgICAgICAgICAgICAgaWYgKGNlbGwpIHsgY2VsbC5mb2N1cygpOyB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNlbGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgIHRoaXMuZ2V0Rm9jdXNhYmxlR3JpZCgpLm5hdGl2ZUVsZW1lbnQuZm9jdXMoeyBwcmV2ZW50U2Nyb2xsOiB0cnVlIH0pO1xuICAgICAgICAgICAgdGhpcy5wZXJmb3JtSG9yaXpvbnRhbFNjcm9sbFRvQ2VsbChwYXJzZUludChcbiAgICAgICAgICAgIHJvd0VsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXJvd2luZGV4JyksIDEwKSwgdmlzaWJsZUNvbHVtbkluZGV4LCBpc1N1bW1hcnlSb3cpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGZvY3VzTmV4dEVsZW1lbnQocm93RWxlbWVudCwgdmlzaWJsZUNvbHVtbkluZGV4KSB7XG4gICAgICAgIHJldHVybiAgdGhpcy5mb2N1c0VsZW0ocm93RWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcsIHZpc2libGVDb2x1bW5JbmRleCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdvVG9GaXJzdENlbGwoKSB7XG4gICAgICAgIGNvbnN0IHZlcnRpY2FsU2Nyb2xsID0gdGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmdldFZlcnRpY2FsU2Nyb2xsKCk7XG4gICAgICAgIGNvbnN0IGhvcml6b250YWxTY3JvbGwgPSB0aGlzLmdyaWQuZGF0YVJvd0xpc3QuZmlyc3QudmlydERpclJvdy5nZXRIb3Jpem9udGFsU2Nyb2xsKCk7XG4gICAgICAgIGlmICh2ZXJ0aWNhbFNjcm9sbC5zY3JvbGxUb3AgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMub25LZXlkb3duSG9tZSh0aGlzLmdyaWQuZGF0YVJvd0xpc3QuZmlyc3QuaW5kZXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFob3Jpem9udGFsU2Nyb2xsLmNsaWVudFdpZHRoIHx8IHBhcnNlSW50KGhvcml6b250YWxTY3JvbGwuc2Nyb2xsTGVmdCwgMTApIDw9IDEgfHwgdGhpcy5ncmlkLnBpbm5lZENvbHVtbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0ZVRvcCgwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICB0aGlzLmdldEZvY3VzYWJsZUdyaWQoKS5uYXRpdmVFbGVtZW50LmZvY3VzKHsgcHJldmVudFNjcm9sbDogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLmhvcml6b250YWxTY3JvbGwodGhpcy5ncmlkLmRhdGFSb3dMaXN0LmZpcnN0LmluZGV4KS5zY3JvbGxUbygwKTtcbiAgICAgICAgICAgICAgICB0aGlzLmdyaWQucGFyZW50VmlydERpci5vbkNodW5rTG9hZFxuICAgICAgICAgICAgICAgICAgICAucGlwZShmaXJzdCgpKVxuICAgICAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF2aWdhdGVUb3AoMCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdvVG9MYXN0Q2VsbCgpIHtcbiAgICAgICAgY29uc3QgdmVydGljYWxTY3JvbGwgPSB0aGlzLmdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuZ2V0VmVydGljYWxTY3JvbGwoKTtcbiAgICAgICAgaWYgKHZlcnRpY2FsU2Nyb2xsLnNjcm9sbEhlaWdodCA9PT0gMCB8fFxuICAgICAgICAgICAgdmVydGljYWxTY3JvbGwuc2Nyb2xsVG9wID09PSB2ZXJ0aWNhbFNjcm9sbC5zY3JvbGxIZWlnaHQgLSB0aGlzLmdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuaWd4Rm9yQ29udGFpbmVyU2l6ZSkge1xuICAgICAgICAgICAgY29uc3Qgcm93cyA9IHRoaXMuZ2V0QWxsUm93cygpO1xuICAgICAgICAgICAgY29uc3Qgcm93SW5kZXggPSBwYXJzZUludChyb3dzW3Jvd3MubGVuZ3RoIC0gMV0uZ2V0QXR0cmlidXRlKCdkYXRhLXJvd0luZGV4JyksIDEwKTtcbiAgICAgICAgICAgIHRoaXMub25LZXlkb3duRW5kKHJvd0luZGV4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0Rm9jdXNhYmxlR3JpZCgpLm5hdGl2ZUVsZW1lbnQuZm9jdXMoeyBwcmV2ZW50U2Nyb2xsOiB0cnVlIH0pO1xuICAgICAgICAgICAgdGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLnNjcm9sbFRvKHRoaXMuZ3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5pZ3hGb3JPZi5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIHRoaXMuZ3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5vbkNodW5rTG9hZFxuICAgICAgICAgICAgICAgIC5waXBlKGZpcnN0KCkpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvd3MgPSB0aGlzLmdldEFsbFJvd3MoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJvd3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm93SW5kZXggPSBwYXJzZUludChyb3dzW3Jvd3MubGVuZ3RoIC0gMV0uZ2V0QXR0cmlidXRlKCdkYXRhLXJvd0luZGV4JyksIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25LZXlkb3duRW5kKHJvd0luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdvVG9MYXN0Qm9keUVsZW1lbnQoKSB7XG4gICAgICAgIGNvbnN0IHZlcnRpY2FsU2Nyb2xsID0gdGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmdldFZlcnRpY2FsU2Nyb2xsKCk7XG4gICAgICAgIGlmICh2ZXJ0aWNhbFNjcm9sbC5zY3JvbGxIZWlnaHQgPT09IDAgfHxcbiAgICAgICAgICAgIHZlcnRpY2FsU2Nyb2xsLnNjcm9sbFRvcCA9PT0gdmVydGljYWxTY3JvbGwuc2Nyb2xsSGVpZ2h0IC0gdGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmlneEZvckNvbnRhaW5lclNpemUpIHtcbiAgICAgICAgICAgIGNvbnN0IHJvd0luZGV4ID0gdGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmlneEZvck9mLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICBjb25zdCByb3cgPSB0aGlzLmdyaWQubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1yb3dpbmRleD1cIiR7cm93SW5kZXh9XCJdYCk7XG4gICAgICAgICAgICBpZiAocm93ICYmIHJvdy50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpZ3gtZ3JpZC1ncm91cGJ5LXJvdycpIHtcbiAgICAgICAgICAgICAgICByb3cuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBpc1N1bW1hcnkgPSAocm93ICYmIHJvdy50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpZ3gtZ3JpZC1zdW1tYXJ5LXJvdycpID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5vbktleWRvd25FbmQocm93SW5kZXgsIGlzU3VtbWFyeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuc2Nyb2xsVG8odGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmlneEZvck9mLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgdGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLm9uQ2h1bmtMb2FkXG4gICAgICAgICAgICAgICAgLnBpcGUoZmlyc3QoKSkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm93SW5kZXggPSB0aGlzLmdyaWQudmVydGljYWxTY3JvbGxDb250YWluZXIuaWd4Rm9yT2YubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm93ID0gdGhpcy5ncmlkLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtcm93aW5kZXg9XCIke3Jvd0luZGV4fVwiXWApO1xuICAgICAgICAgICAgICAgICAgICBpZiAocm93ICYmIHJvdy50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpZ3gtZ3JpZC1ncm91cGJ5LXJvdycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzU3VtbWFyeSA9IChyb3cgJiYgcm93LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2lneC1ncmlkLXN1bW1hcnktcm93JykgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25LZXlkb3duRW5kKHJvd0luZGV4LCBpc1N1bW1hcnkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHBlcmZvcm1UYWIoY3VycmVudFJvd0VsLCByb3dJbmRleCwgdmlzaWJsZUNvbHVtbkluZGV4LCBpc1N1bW1hcnlSb3cgPSBmYWxzZSkge1xuICAgICAgICBpZiAoaXNTdW1tYXJ5Um93ICYmIHJvd0luZGV4ID09PSAwICYmXG4gICAgICAgICAgICB0aGlzLmdyaWQudW5waW5uZWRDb2x1bW5zW3RoaXMuZ3JpZC51bnBpbm5lZENvbHVtbnMubGVuZ3RoIC0gMV0udmlzaWJsZUluZGV4ID09PSB2aXNpYmxlQ29sdW1uSW5kZXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5ncmlkLnVucGlubmVkQ29sdW1uc1t0aGlzLmdyaWQudW5waW5uZWRDb2x1bW5zLmxlbmd0aCAtIDFdLnZpc2libGVJbmRleCA9PT0gdmlzaWJsZUNvbHVtbkluZGV4KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1Jvd0luRWRpdE1vZGUocm93SW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ncmlkLnJvd0VkaXRUYWJzLmZpcnN0LmVsZW1lbnQubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJvd0VsID0gdGhpcy5ncmlkLnJvd0xpc3QuZmluZChyb3cgPT4gcm93LmluZGV4ID09PSByb3dJbmRleCArIDEpID9cbiAgICAgICAgICAgICAgICB0aGlzLmdyaWQucm93TGlzdC5maW5kKHJvdyA9PiByb3cuaW5kZXggPT09IHJvd0luZGV4ICsgMSkgOlxuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZC5zdW1tYXJpZXNSb3dMaXN0LmZpbmQocm93ID0+IHJvdy5pbmRleCA9PT0gcm93SW5kZXggKyAxKTtcbiAgICAgICAgICAgIGlmIChyb3dJbmRleCA9PT0gdGhpcy5ncmlkLnZlcnRpY2FsU2Nyb2xsQ29udGFpbmVyLmlneEZvck9mLmxlbmd0aCAtIDEgJiYgdGhpcy5ncmlkLnJvb3RTdW1tYXJpZXNFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbktleWRvd25Ib21lKDAsIHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyb3dFbCkge1xuICAgICAgICAgICAgICAgIHRoaXMubmF2aWdhdGVEb3duKGN1cnJlbnRSb3dFbCwgcm93SW5kZXgsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgY2VsbCA9IHRoaXMuZ2V0Q2VsbEVsZW1lbnRCeVZpc2libGVJbmRleChyb3dJbmRleCwgdmlzaWJsZUNvbHVtbkluZGV4LCBpc1N1bW1hcnlSb3cpO1xuICAgICAgICAgICAgaWYgKGNlbGwpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ncmlkLnJvd0VkaXRhYmxlICYmIHRoaXMuaXNSb3dJbkVkaXRNb2RlKHJvd0luZGV4KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdmVOZXh0RWRpdGFibGUoY2VsbCwgcm93SW5kZXgsIHZpc2libGVDb2x1bW5JbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5vbktleWRvd25BcnJvd1JpZ2h0KGNlbGwsIHJvd0luZGV4LCB2aXNpYmxlQ29sdW1uSW5kZXgsIGlzU3VtbWFyeVJvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgbW92ZUZvY3VzVG9GaWx0ZXJDZWxsKHRvU3RhcnQ/OiBib29sZWFuKSB7XG4gICAgICAgIGlmICh0aGlzLmdyaWQuZmlsdGVyaW5nU2VydmljZS5pc0ZpbHRlclJvd1Zpc2libGUpIHtcbiAgICAgICAgICAgIHRoaXMuZ3JpZC5maWx0ZXJpbmdTZXJ2aWNlLmZvY3VzRmlsdGVyUm93Q2xvc2VCdXR0b24oKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvbHVtbnMgPSB0aGlzLmdyaWQuZmlsdGVyaW5nU2VydmljZS51bnBpbm5lZEZpbHRlcmFibGVDb2x1bW5zO1xuICAgICAgICBjb25zdCB0YXJnZXRJbmRleCA9IHRvU3RhcnQgPyAwIDogY29sdW1ucy5sZW5ndGggLSAxO1xuICAgICAgICBjb25zdCB2aXNpYmxlSW5kZXggPSBjb2x1bW5zW3RhcmdldEluZGV4XS52aXNpYmxlSW5kZXg7XG4gICAgICAgIGNvbnN0IGlzVmlzaWJsZSA9IHRvU3RhcnQgPyB0aGlzLmlzQ29sdW1uTGVmdEZ1bGx5VmlzaWJsZSh2aXNpYmxlSW5kZXgpIDogdGhpcy5pc0NvbHVtbkZ1bGx5VmlzaWJsZSh2aXNpYmxlSW5kZXgpO1xuICAgICAgICBpZiAoaXNWaXNpYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmdyaWQuZmlsdGVyaW5nU2VydmljZS5mb2N1c0ZpbHRlckNlbGxDaGlwKGNvbHVtbnNbdGFyZ2V0SW5kZXhdLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmdyaWQuZmlsdGVyaW5nU2VydmljZS5zY3JvbGxUb0ZpbHRlckNlbGwoY29sdW1uc1t0YXJnZXRJbmRleF0sIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBuYXZpZ2F0ZVByZXZGaWx0ZXJDZWxsKGNvbHVtbjogSWd4Q29sdW1uQ29tcG9uZW50LCBldmVudEFyZ3MpIHtcbiAgICAgICAgY29uc3QgY29scyA9IHRoaXMuZ3JpZC5maWx0ZXJpbmdTZXJ2aWNlLnVucGlubmVkRmlsdGVyYWJsZUNvbHVtbnM7XG4gICAgICAgIGNvbnN0IHByZXZGaWx0ZXJhYmxlSW5kZXggPSBjb2xzLmluZGV4T2YoY29sdW1uKSAtIDE7XG4gICAgICAgIGNvbnN0IHZpc2libGVJbmRleCA9IGNvbHVtbi52aXNpYmxlSW5kZXg7XG4gICAgICAgIGlmICh2aXNpYmxlSW5kZXggPT09IDAgfHwgcHJldkZpbHRlcmFibGVJbmRleCA8IDApIHtcbiAgICAgICAgICAgIC8vIHByZXYgaXMgbm90IGZpbHRlciBjZWxsXG4gICAgICAgICAgICBjb25zdCBmaXJzdEZpbHRhcmFibGVDb2wgPSB0aGlzLmdldEZpcnN0UGlubmVkRmlsdGVyYWJsZUNvbHVtbigpO1xuICAgICAgICAgICAgaWYgKCFmaXJzdEZpbHRhcmFibGVDb2wgfHwgY29sdW1uID09PSBmaXJzdEZpbHRhcmFibGVDb2wpIHtcbiAgICAgICAgICAgICAgICBldmVudEFyZ3MucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcmV2Q29sdW1uID0gY29sc1twcmV2RmlsdGVyYWJsZUluZGV4XTtcbiAgICAgICAgY29uc3QgcHJldlZpc2libGVJbmRleCA9IHByZXZDb2x1bW4udmlzaWJsZUluZGV4O1xuXG4gICAgICAgIGlmIChwcmV2RmlsdGVyYWJsZUluZGV4ID49IDAgJiYgdmlzaWJsZUluZGV4ID4gMCAmJiAhdGhpcy5pc0NvbHVtbkxlZnRGdWxseVZpc2libGUocHJldlZpc2libGVJbmRleCkgJiYgIWNvbHVtbi5waW5uZWQpIHtcbiAgICAgICAgICAgIGV2ZW50QXJncy5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpcy5ncmlkLmZpbHRlcmluZ1NlcnZpY2Uuc2Nyb2xsVG9GaWx0ZXJDZWxsKHByZXZDb2x1bW4sIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBuYXZpZ2F0ZUZpcnN0Q2VsbElmUG9zc2libGUoZXZlbnRBcmdzKSB7XG4gICAgICAgIGlmICh0aGlzLmdyaWQucm93TGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5ncmlkLnJvd0xpc3QuZmlsdGVyKHJvdyA9PiByb3cgaW5zdGFuY2VvZiBJZ3hHcmlkR3JvdXBCeVJvd0NvbXBvbmVudCkubGVuZ3RoID4gMCApIHtcbiAgICAgICAgICAgICAgICBldmVudEFyZ3Muc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5nb1RvRmlyc3RDZWxsKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5ncmlkLnJvb3RTdW1tYXJpZXNFbmFibGVkKSB7XG4gICAgICAgICAgICB0aGlzLm9uS2V5ZG93bkhvbWUoMCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnRBcmdzLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgcHVibGljIG5hdmlnYXRlTmV4dEZpbHRlckNlbGwoY29sdW1uOiBJZ3hDb2x1bW5Db21wb25lbnQsIGV2ZW50QXJncykge1xuICAgICAgICBjb25zdCBjb2xzID0gdGhpcy5ncmlkLmZpbHRlcmluZ1NlcnZpY2UudW5waW5uZWRGaWx0ZXJhYmxlQ29sdW1ucztcbiAgICAgICAgY29uc3QgbmV4dEZpbHRlcmFibGVJbmRleCA9IGNvbHMuaW5kZXhPZihjb2x1bW4pICsgMTtcbiAgICAgICAgaWYgKG5leHRGaWx0ZXJhYmxlSW5kZXggPj0gdGhpcy5ncmlkLmZpbHRlcmluZ1NlcnZpY2UudW5waW5uZWRGaWx0ZXJhYmxlQ29sdW1ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIG5leHQgaXMgbm90IGZpbHRlciBjZWxsXG4gICAgICAgICAgICB0aGlzLm5hdmlnYXRlRmlyc3RDZWxsSWZQb3NzaWJsZShldmVudEFyZ3MpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5leHRDb2x1bW4gPSBjb2xzW25leHRGaWx0ZXJhYmxlSW5kZXhdO1xuICAgICAgICBjb25zdCBuZXh0VmlzaWJsZUluZGV4ID0gbmV4dENvbHVtbi52aXNpYmxlSW5kZXg7XG4gICAgICAgIGlmICghY29sdW1uLnBpbm5lZCAmJiAhdGhpcy5pc0NvbHVtbkZ1bGx5VmlzaWJsZShuZXh0VmlzaWJsZUluZGV4KSkge1xuICAgICAgICAgICAgZXZlbnRBcmdzLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB0aGlzLmdyaWQuZmlsdGVyaW5nU2VydmljZS5zY3JvbGxUb0ZpbHRlckNlbGwobmV4dENvbHVtbiwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29sdW1uID09PSB0aGlzLmdldExhc3RQaW5uZWRGaWx0ZXJhYmxlQ29sdW1uKCkgJiYgIXRoaXMuaXNDb2x1bW5GdWxseVZpc2libGUobmV4dFZpc2libGVJbmRleCkpIHtcbiAgICAgICAgICAgIHRoaXMuZ3JpZC5maWx0ZXJpbmdTZXJ2aWNlLnNjcm9sbFRvRmlsdGVyQ2VsbChuZXh0Q29sdW1uLCBmYWxzZSk7XG4gICAgICAgICAgICBldmVudEFyZ3Muc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldExhc3RQaW5uZWRGaWx0ZXJhYmxlQ29sdW1uKCk6IElneENvbHVtbkNvbXBvbmVudCB7XG4gICAgICAgIGNvbnN0IHBpbm5lZEZpbHRlcmFibGVDb2x1bXMgPVxuICAgICAgICAgICAgdGhpcy5ncmlkLnBpbm5lZENvbHVtbnMuZmlsdGVyKGNvbCA9PiAhKGNvbC5jb2x1bW5Hcm91cCkgJiYgY29sLmZpbHRlcmFibGUpO1xuICAgICAgICByZXR1cm4gcGlubmVkRmlsdGVyYWJsZUNvbHVtc1twaW5uZWRGaWx0ZXJhYmxlQ29sdW1zLmxlbmd0aCAtIDFdO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0Rmlyc3RQaW5uZWRGaWx0ZXJhYmxlQ29sdW1uKCk6IElneENvbHVtbkNvbXBvbmVudCB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWQucGlubmVkQ29sdW1ucy5maWx0ZXIoY29sID0+ICEoY29sLmNvbHVtbkdyb3VwKSAmJiBjb2wuZmlsdGVyYWJsZSlbMF07XG4gICAgfVxuXG4gICAgcHVibGljIHBlcmZvcm1TaGlmdFRhYktleShjdXJyZW50Um93RWwsIHJvd0luZGV4LCB2aXNpYmxlQ29sdW1uSW5kZXgsIGlzU3VtbWFyeSA9IGZhbHNlKSB7XG4gICAgICAgIGlmIChpc1N1bW1hcnkgJiYgcm93SW5kZXggPT09IDAgJiYgdmlzaWJsZUNvbHVtbkluZGV4ID09PSAwICYmIHRoaXMuZ3JpZC5yb3dMaXN0Lmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5nb1RvTGFzdEJvZHlFbGVtZW50KCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZpc2libGVDb2x1bW5JbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNSb3dJbkVkaXRNb2RlKHJvd0luZGV4KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZC5yb3dFZGl0VGFicy5sYXN0LmVsZW1lbnQubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyb3dJbmRleCA9PT0gMCAmJiB0aGlzLmdyaWQuYWxsb3dGaWx0ZXJpbmcgJiYgdGhpcy5ncmlkLmZpbHRlck1vZGUgPT09IEZpbHRlck1vZGUucXVpY2tGaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmVGb2N1c1RvRmlsdGVyQ2VsbCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRlVXAoY3VycmVudFJvd0VsLCByb3dJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ncmlkLnVucGlubmVkQ29sdW1uc1t0aGlzLmdyaWQudW5waW5uZWRDb2x1bW5zLmxlbmd0aCAtIDFdLnZpc2libGVJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBjZWxsID0gdGhpcy5nZXRDZWxsRWxlbWVudEJ5VmlzaWJsZUluZGV4KHJvd0luZGV4LCB2aXNpYmxlQ29sdW1uSW5kZXgsIGlzU3VtbWFyeSk7XG4gICAgICAgICAgICBpZiAoY2VsbCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdyaWQucm93RWRpdGFibGUgJiYgdGhpcy5pc1Jvd0luRWRpdE1vZGUocm93SW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZVByZXZpb3VzRWRpdGFibGUocm93SW5kZXgsIHZpc2libGVDb2x1bW5JbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5vbktleWRvd25BcnJvd0xlZnQoY2VsbCwgcm93SW5kZXgsIHZpc2libGVDb2x1bW5JbmRleCwgaXNTdW1tYXJ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzaG91bGRQZXJmb3JtVmVydGljYWxTY3JvbGwodGFyZ2V0Um93SW5kZXgpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyVG9wT2Zmc2V0ID0gcGFyc2VJbnQodGhpcy52ZXJ0aWNhbERpc3BsYXlDb250YWluZXJFbGVtZW50LnN0eWxlLnRvcCwgMTApO1xuICAgICAgICBjb25zdCB0YXJnZXRSb3cgPSB0aGlzLmdyaWQuc3VtbWFyaWVzUm93TGlzdC5maWx0ZXIocyA9PiBzLmluZGV4ICE9PSAwKVxuICAgICAgICAgICAgLmNvbmNhdCh0aGlzLmdyaWQucm93TGlzdC50b0FycmF5KCkpLmZpbmQociA9PiByLmluZGV4ID09PSB0YXJnZXRSb3dJbmRleCk7XG4gICAgICAgIGNvbnN0IHJvd0hlaWdodCA9IHRoaXMuZ3JpZC52ZXJ0aWNhbFNjcm9sbENvbnRhaW5lci5nZXRTaXplQXQodGFyZ2V0Um93SW5kZXgpO1xuICAgICAgICBjb25zdCBjb250YWluZXJIZWlnaHQgPSB0aGlzLmdyaWQuY2FsY0hlaWdodCA/IE1hdGguY2VpbCh0aGlzLmdyaWQuY2FsY0hlaWdodCkgOiAwO1xuICAgICAgICBjb25zdCB0YXJnZXRFbmRUb3BPZmZzZXQgPSB0YXJnZXRSb3cgPyB0YXJnZXRSb3cubmF0aXZlRWxlbWVudC5vZmZzZXRUb3AgKyByb3dIZWlnaHQgKyBjb250YWluZXJUb3BPZmZzZXQgOlxuICAgICAgICAgICAgICAgIGNvbnRhaW5lckhlaWdodCArIHJvd0hlaWdodDtcbiAgICAgICAgaWYgKCF0YXJnZXRSb3cgfHwgdGFyZ2V0Um93Lm5hdGl2ZUVsZW1lbnQub2Zmc2V0VG9wIDwgTWF0aC5hYnMoY29udGFpbmVyVG9wT2Zmc2V0KVxuICAgICAgICAgICAgICAgIHx8IGNvbnRhaW5lckhlaWdodCAmJiBjb250YWluZXJIZWlnaHQgPCB0YXJnZXRFbmRUb3BPZmZzZXQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwZXJmb3JtSG9yaXpvbnRhbFNjcm9sbFRvQ2VsbChyb3dJbmRleCwgdmlzaWJsZUNvbHVtbkluZGV4LCBpc1N1bW1hcnkgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCB1bnBpbm5lZEluZGV4ID0gdGhpcy5nZXRDb2x1bW5VbnBpbm5lZEluZGV4KHZpc2libGVDb2x1bW5JbmRleCk7XG4gICAgICAgdGhpcy5nZXRGb2N1c2FibGVHcmlkKCkubmF0aXZlRWxlbWVudC5mb2N1cyh7IHByZXZlbnRTY3JvbGw6IHRydWUgfSk7XG4gICAgICAgIHRoaXMuZ3JpZC5wYXJlbnRWaXJ0RGlyLm9uQ2h1bmtMb2FkXG4gICAgICAgICAgICAucGlwZShmaXJzdCgpKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRDZWxsRWxlbWVudEJ5VmlzaWJsZUluZGV4KHJvd0luZGV4LCB2aXNpYmxlQ29sdW1uSW5kZXgsIGlzU3VtbWFyeSkuZm9jdXMoeyBwcmV2ZW50U2Nyb2xsOiB0cnVlIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaG9yaXpvbnRhbFNjcm9sbChyb3dJbmRleCkuc2Nyb2xsVG8odW5waW5uZWRJbmRleCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldEZvY3VzYWJsZUdyaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWQ7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGdldFJvd0J5SW5kZXgoaW5kZXgsIHNlbGVjdG9yID0gdGhpcy5nZXRSb3dTZWxlY3RvcigpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWQubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgICAgIGAke3NlbGVjdG9yfVtkYXRhLXJvd2luZGV4PVwiJHtpbmRleH1cIl1gKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0TmV4dFJvd0J5SW5kZXgobmV4dEluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWQudGJvZHkubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgYFtkYXRhLXJvd2luZGV4PVwiJHtuZXh0SW5kZXh9XCJdYCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRBbGxSb3dzKCkge1xuICAgICAgICBjb25zdCBzZWxlY3RvciA9IHRoaXMuZ2V0Um93U2VsZWN0b3IoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRDZWxsU2VsZWN0b3IodmlzaWJsZUluZGV4PzogbnVtYmVyLCBpc1N1bW1hcnkgPSBmYWxzZSk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBpc1N1bW1hcnkgPyAnaWd4LWdyaWQtc3VtbWFyeS1jZWxsJyA6ICdpZ3gtZ3JpZC1jZWxsJztcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0Um93U2VsZWN0b3IoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICdpZ3gtZ3JpZC1yb3cnO1xuICAgIH1cbn1cbiJdfQ==