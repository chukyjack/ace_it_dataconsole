/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone } from '@angular/core';
/**
 * @hidden
 */
var IgxColumnResizingService = /** @class */ (function () {
    function IgxColumnResizingService(zone) {
        this.zone = zone;
        /**
         * @hidden
         */
        this.resizeCursor = null;
        /**
         * @hidden
         */
        this.showResizer = false;
    }
    Object.defineProperty(IgxColumnResizingService.prototype, "resizerHeight", {
        /**
         *@hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            /** @type {?} */
            var height = this.column.grid.getVisibleContentHeight();
            if (this.column.level !== 0) {
                height -= this.column.topLevelParent.headerGroup.height - this.column.headerGroup.height;
            }
            return height;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnResizingService.prototype, "restrictResizeMin", {
        /**
         * Returns the minimal possible width to which the column can be resized.
         */
        get: /**
         * Returns the minimal possible width to which the column can be resized.
         * @return {?}
         */
        function () {
            /** @type {?} */
            var actualMinWidth = parseFloat(this.column.minWidth);
            /** @type {?} */
            var defaultMinWidth = parseFloat(this.column.defaultMinWidth);
            /** @type {?} */
            var minWidth = Number.isNaN(actualMinWidth) || actualMinWidth < defaultMinWidth ? defaultMinWidth : actualMinWidth;
            minWidth = minWidth < parseFloat(this.column.width) ? minWidth : parseFloat(this.column.width);
            return this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width - minWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxColumnResizingService.prototype, "restrictResizeMax", {
        /**
         * Returns the maximal possible width to which the column can be resized.
         */
        get: /**
         * Returns the maximal possible width to which the column can be resized.
         * @return {?}
         */
        function () {
            /** @type {?} */
            var actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;
            if (this.column.pinned) {
                /** @type {?} */
                var pinnedMaxWidth = this.pinnedMaxWidth =
                    this.column.grid.calcPinnedContainerMaxWidth - this.column.grid.getPinnedWidth(true) + actualWidth;
                if (this.column.maxWidth && parseFloat(this.column.maxWidth) < pinnedMaxWidth) {
                    this.pinnedMaxWidth = this.column.maxWidth;
                    return parseFloat(this.column.maxWidth) - actualWidth;
                }
                else {
                    return pinnedMaxWidth - actualWidth;
                }
            }
            else {
                if (this.column.maxWidth) {
                    return parseFloat(this.column.maxWidth) - actualWidth;
                }
                else {
                    return Number.MAX_SAFE_INTEGER;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Autosizes the column to the longest currently visible cell value, including the header cell.
     * If the column has a predifined maxWidth and the autosized column width will become bigger than it,
     * then the column is sized to its maxWidth.
     * If the column is pinned and the autosized column width will cause the pinned area to become bigger
     * than the maximum allowed pinned area width (80% of the total grid width), autosizing will be deismissed.
     */
    /**
     * Autosizes the column to the longest currently visible cell value, including the header cell.
     * If the column has a predifined maxWidth and the autosized column width will become bigger than it,
     * then the column is sized to its maxWidth.
     * If the column is pinned and the autosized column width will cause the pinned area to become bigger
     * than the maximum allowed pinned area width (80% of the total grid width), autosizing will be deismissed.
     * @return {?}
     */
    IgxColumnResizingService.prototype.autosizeColumnOnDblClick = /**
     * Autosizes the column to the longest currently visible cell value, including the header cell.
     * If the column has a predifined maxWidth and the autosized column width will become bigger than it,
     * then the column is sized to its maxWidth.
     * If the column is pinned and the autosized column width will cause the pinned area to become bigger
     * than the maximum allowed pinned area width (80% of the total grid width), autosizing will be deismissed.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var currentColWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;
        /** @type {?} */
        var size = this.column.getLargestCellWidth();
        if (this.column.pinned) {
            /** @type {?} */
            var newPinnedWidth = this.column.grid.getPinnedWidth(true) - currentColWidth + parseFloat(size);
            if (newPinnedWidth <= this.column.grid.calcPinnedContainerMaxWidth) {
                this.column.width = size;
            }
        }
        else if (this.column.maxWidth && (parseFloat(size) > parseFloat(this.column.maxWidth))) {
            this.column.width = parseFloat(this.column.maxWidth) + 'px';
        }
        else if (parseFloat(size) < parseFloat(this.column.defaultMinWidth)) {
            this.column.width = this.column.defaultMinWidth + 'px';
        }
        else {
            this.column.width = size;
        }
        this.zone.run(function () { });
        this.column.grid.reflow();
        this.column.grid.onColumnResized.emit({
            column: this.column,
            prevWidth: currentColWidth.toString(),
            newWidth: this.column.width
        });
    };
    /**
     * Resizes the column regaridng to the column minWidth and maxWidth.
     */
    /**
     * Resizes the column regaridng to the column minWidth and maxWidth.
     * @param {?} event
     * @return {?}
     */
    IgxColumnResizingService.prototype.resizeColumn = /**
     * Resizes the column regaridng to the column minWidth and maxWidth.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.showResizer = false;
        /** @type {?} */
        var diff = event.clientX - this.startResizePos;
        /** @type {?} */
        var currentColWidth = parseFloat(this.column.width);
        /** @type {?} */
        var actualMinWidth = parseFloat(this.column.minWidth);
        /** @type {?} */
        var defaultMinWidth = parseFloat(this.column.defaultMinWidth);
        /** @type {?} */
        var colMinWidth = Number.isNaN(actualMinWidth) || actualMinWidth < defaultMinWidth ? defaultMinWidth : actualMinWidth;
        /** @type {?} */
        var colMaxWidth = this.column.pinned ? parseFloat(this.pinnedMaxWidth) : parseFloat(this.column.maxWidth);
        /** @type {?} */
        var actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;
        currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;
        colMinWidth = colMinWidth < currentColWidth ? colMinWidth : currentColWidth;
        if (currentColWidth + diff < colMinWidth) {
            this.column.width = colMinWidth + 'px';
        }
        else if (colMaxWidth && (currentColWidth + diff > colMaxWidth)) {
            this.column.width = colMaxWidth + 'px';
        }
        else {
            this.column.width = (currentColWidth + diff) + 'px';
        }
        this.zone.run(function () { });
        this.column.grid.reflow();
        if (currentColWidth !== parseFloat(this.column.width)) {
            this.column.grid.onColumnResized.emit({
                column: this.column,
                prevWidth: currentColWidth.toString(),
                newWidth: this.column.width
            });
        }
        this.isColumnResizing = false;
    };
    IgxColumnResizingService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    IgxColumnResizingService.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    return IgxColumnResizingService;
}());
export { IgxColumnResizingService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxColumnResizingService.prototype.pinnedMaxWidth;
    /**
     * @hidden
     * @type {?}
     */
    IgxColumnResizingService.prototype.startResizePos;
    /**
     * Indicates that a column is currently being resized.
     * @type {?}
     */
    IgxColumnResizingService.prototype.isColumnResizing;
    /**
     * @hidden
     * @type {?}
     */
    IgxColumnResizingService.prototype.resizeCursor;
    /**
     * @hidden
     * @type {?}
     */
    IgxColumnResizingService.prototype.showResizer;
    /**
     * The column being resized.
     * @type {?}
     */
    IgxColumnResizingService.prototype.column;
    /**
     * @type {?}
     * @private
     */
    IgxColumnResizingService.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,