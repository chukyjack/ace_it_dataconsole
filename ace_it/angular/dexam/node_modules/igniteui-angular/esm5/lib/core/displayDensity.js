/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken, Input, Output, EventEmitter } from '@angular/core';
/** @enum {string} */
var DisplayDensity = {
    comfortable: 'comfortable',
    cosy: 'cosy',
    compact: 'compact',
};
export { DisplayDensity };
/**
 * Describes the object used to configure the DisplayDensity in Angular DI.
 * @record
 */
export function IDisplayDensityOptions() { }
if (false) {
    /** @type {?} */
    IDisplayDensityOptions.prototype.displayDensity;
}
/**
 * @record
 */
export function IDensityChangedEventArgs() { }
if (false) {
    /** @type {?} */
    IDensityChangedEventArgs.prototype.oldDensity;
    /** @type {?} */
    IDensityChangedEventArgs.prototype.newDensity;
}
/**
 * Defines the DisplayDensity DI token.
 * @type {?}
 */
export var DisplayDensityToken = new InjectionToken('DisplayDensity');
/**
 * Base class containing all logic required for implementing DisplayDensity.
 */
var DisplayDensityBase = /** @class */ (function () {
    function DisplayDensityBase(displayDensityOptions) {
        this.displayDensityOptions = displayDensityOptions;
        this.onDensityChanged = new EventEmitter();
        this.oldDisplayDensityOptions = { displayDensity: DisplayDensity.comfortable };
        Object.assign(this.oldDisplayDensityOptions, displayDensityOptions);
    }
    Object.defineProperty(DisplayDensityBase.prototype, "displayDensity", {
        /**
         * Returns the theme of the component.
         * The default theme is `comfortable`.
         * Available options are `comfortable`, `cosy`, `compact`.
         * ```typescript
         * let componentTheme = this.component.displayDensity;
         * ```
         */
        get: /**
         * Returns the theme of the component.
         * The default theme is `comfortable`.
         * Available options are `comfortable`, `cosy`, `compact`.
         * ```typescript
         * let componentTheme = this.component.displayDensity;
         * ```
         * @return {?}
         */
        function () {
            return this._displayDensity ||
                ((this.displayDensityOptions && this.displayDensityOptions.displayDensity) || DisplayDensity.comfortable);
        },
        /**
         * Sets the theme of the component.
         */
        set: /**
         * Sets the theme of the component.
         * @param {?} val
         * @return {?}
         */
        function (val) {
            /** @type {?} */
            var currentDisplayDensity = this._displayDensity;
            this._displayDensity = (/** @type {?} */ (val));
            if (currentDisplayDensity !== this._displayDensity) {
                /** @type {?} */
                var densityChangedArgs = {
                    oldDensity: currentDisplayDensity,
                    newDensity: this._displayDensity
                };
                this.onDensityChanged.emit(densityChangedArgs);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DisplayDensityBase.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (!this._displayDensity && this.displayDensityOptions &&
            this.oldDisplayDensityOptions.displayDensity !== this.displayDensityOptions.displayDensity) {
            /** @type {?} */
            var densityChangedArgs = {
                oldDensity: this.oldDisplayDensityOptions.displayDensity,
                newDensity: this.displayDensityOptions.displayDensity
            };
            this.onDensityChanged.emit(densityChangedArgs);
            this.oldDisplayDensityOptions = Object.assign(this.oldDisplayDensityOptions, this.displayDensityOptions);
        }
    };
    /**
     * Given a style class of a component/element returns the modified version of it based
     * on the current display density.
     */
    /**
     * Given a style class of a component/element returns the modified version of it based
     * on the current display density.
     * @protected
     * @param {?} baseStyleClass
     * @return {?}
     */
    DisplayDensityBase.prototype.getComponentDensityClass = /**
     * Given a style class of a component/element returns the modified version of it based
     * on the current display density.
     * @protected
     * @param {?} baseStyleClass
     * @return {?}
     */
    function (baseStyleClass) {
        switch (this.displayDensity) {
            case DisplayDensity.cosy:
                return baseStyleClass + "--" + DisplayDensity.cosy;
            case DisplayDensity.compact:
                return baseStyleClass + "--" + DisplayDensity.compact;
            default:
                return baseStyleClass;
        }
    };
    DisplayDensityBase.propDecorators = {
        displayDensity: [{ type: Input }],
        onDensityChanged: [{ type: Output }]
    };
    return DisplayDensityBase;
}());
export { DisplayDensityBase };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    DisplayDensityBase.prototype._displayDensity;
    /** @type {?} */
    DisplayDensityBase.prototype.onDensityChanged;
    /**
     * @type {?}
     * @protected
     */
    DisplayDensityBase.prototype.oldDisplayDensityOptions;
    /**
     * @type {?}
     * @protected
     */
    DisplayDensityBase.prototype.displayDensityOptions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcGxheURlbnNpdHkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2NvcmUvZGlzcGxheURlbnNpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQVcsTUFBTSxlQUFlLENBQUM7OztJQU9qRixhQUFjLGFBQWE7SUFDM0IsTUFBTyxNQUFNO0lBQ2IsU0FBVSxTQUFTOzs7Ozs7O0FBTXZCLDRDQUVDOzs7SUFERyxnREFBK0I7Ozs7O0FBR25DLDhDQUdDOzs7SUFGRyw4Q0FBMkI7O0lBQzNCLDhDQUEyQjs7Ozs7O0FBTS9CLE1BQU0sS0FBTyxtQkFBbUIsR0FBRyxJQUFJLGNBQWMsQ0FBeUIsZ0JBQWdCLENBQUM7Ozs7QUFLL0Y7SUF3Q0ksNEJBQXNCLHFCQUE2QztRQUE3QywwQkFBcUIsR0FBckIscUJBQXFCLENBQXdCO1FBTDVELHFCQUFnQixHQUFHLElBQUksWUFBWSxFQUE0QixDQUFDO1FBRTdELDZCQUF3QixHQUEyQixFQUFFLGNBQWMsRUFBRSxjQUFjLENBQUMsV0FBVyxFQUFFLENBQUM7UUFJeEcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUscUJBQXFCLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBL0JELHNCQUNXLDhDQUFjO1FBVHpCOzs7Ozs7O1dBT0c7Ozs7Ozs7Ozs7UUFDSDtZQUVJLE9BQU8sSUFBSSxDQUFDLGVBQWU7Z0JBQ3ZCLENBQUMsQ0FBQyxJQUFJLENBQUMscUJBQXFCLElBQUksSUFBSSxDQUFDLHFCQUFxQixDQUFDLGNBQWMsQ0FBQyxJQUFJLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNsSCxDQUFDO1FBRUQ7O1dBRUc7Ozs7OztRQUNILFVBQTBCLEdBQTRCOztnQkFDNUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDLGVBQWU7WUFDbEQsSUFBSSxDQUFDLGVBQWUsR0FBRyxtQkFBQSxHQUFHLEVBQWtCLENBQUM7WUFFN0MsSUFBSSxxQkFBcUIsS0FBSyxJQUFJLENBQUMsZUFBZSxFQUFFOztvQkFDMUMsa0JBQWtCLEdBQTZCO29CQUNqRCxVQUFVLEVBQUUscUJBQXFCO29CQUNqQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGVBQWU7aUJBQ25DO2dCQUVELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQzthQUNsRDtRQUNMLENBQUM7OztPQWpCQTs7OztJQTZCTSxzQ0FBUzs7O0lBQWhCO1FBQ0ksSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLHFCQUFxQjtZQUMvQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsY0FBYyxLQUFLLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjLEVBQUU7O2dCQUMxRixrQkFBa0IsR0FBNkI7Z0JBQ2pELFVBQVUsRUFBRSxJQUFJLENBQUMsd0JBQXdCLENBQUMsY0FBYztnQkFDeEQsVUFBVSxFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjO2FBQ3hEO1lBRUQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQy9DLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztTQUM1RztJQUNMLENBQUM7SUFFRDs7O09BR0c7Ozs7Ozs7O0lBQ08scURBQXdCOzs7Ozs7O0lBQWxDLFVBQW1DLGNBQXNCO1FBQ3JELFFBQVEsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUN6QixLQUFLLGNBQWMsQ0FBQyxJQUFJO2dCQUNwQixPQUFVLGNBQWMsVUFBSyxjQUFjLENBQUMsSUFBTSxDQUFDO1lBQ3ZELEtBQUssY0FBYyxDQUFDLE9BQU87Z0JBQ3ZCLE9BQVUsY0FBYyxVQUFLLGNBQWMsQ0FBQyxPQUFTLENBQUM7WUFDMUQ7Z0JBQ0ksT0FBTyxjQUFjLENBQUM7U0FDN0I7SUFDTCxDQUFDOztpQ0EzREEsS0FBSzttQ0F1QkwsTUFBTTs7SUFxQ1gseUJBQUM7Q0FBQSxBQXZFRCxJQXVFQztTQXZFWSxrQkFBa0I7Ozs7OztJQUMzQiw2Q0FBMEM7O0lBaUMxQyw4Q0FDdUU7Ozs7O0lBRXZFLHNEQUE0Rzs7Ozs7SUFHaEcsbURBQXVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgRG9DaGVjayB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5cbi8qKlxuICogRGVmaW5lcyB0aGUgcG9zaWJsZSB2YWx1ZXMgb2YgdGhlIGNvbXBvbmVudHMnIGRpc3BsYXkgZGVuc2l0eS5cbiAqL1xuZXhwb3J0IGVudW0gRGlzcGxheURlbnNpdHkge1xuICAgIGNvbWZvcnRhYmxlID0gJ2NvbWZvcnRhYmxlJyxcbiAgICBjb3N5ID0gJ2Nvc3knLFxuICAgIGNvbXBhY3QgPSAnY29tcGFjdCdcbn1cblxuLyoqXG4gKiBEZXNjcmliZXMgdGhlIG9iamVjdCB1c2VkIHRvIGNvbmZpZ3VyZSB0aGUgRGlzcGxheURlbnNpdHkgaW4gQW5ndWxhciBESS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRGlzcGxheURlbnNpdHlPcHRpb25zIHtcbiAgICBkaXNwbGF5RGVuc2l0eTogRGlzcGxheURlbnNpdHk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSURlbnNpdHlDaGFuZ2VkRXZlbnRBcmdzIHtcbiAgICBvbGREZW5zaXR5OiBEaXNwbGF5RGVuc2l0eTtcbiAgICBuZXdEZW5zaXR5OiBEaXNwbGF5RGVuc2l0eTtcbn1cblxuLyoqXG4gKiBEZWZpbmVzIHRoZSBEaXNwbGF5RGVuc2l0eSBESSB0b2tlbi5cbiAqL1xuZXhwb3J0IGNvbnN0IERpc3BsYXlEZW5zaXR5VG9rZW4gPSBuZXcgSW5qZWN0aW9uVG9rZW48SURpc3BsYXlEZW5zaXR5T3B0aW9ucz4oJ0Rpc3BsYXlEZW5zaXR5Jyk7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBjb250YWluaW5nIGFsbCBsb2dpYyByZXF1aXJlZCBmb3IgaW1wbGVtZW50aW5nIERpc3BsYXlEZW5zaXR5LlxuICovXG5leHBvcnQgY2xhc3MgRGlzcGxheURlbnNpdHlCYXNlIGltcGxlbWVudHMgRG9DaGVjayB7XG4gICAgcHJvdGVjdGVkIF9kaXNwbGF5RGVuc2l0eTogRGlzcGxheURlbnNpdHk7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0aGVtZSBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqIFRoZSBkZWZhdWx0IHRoZW1lIGlzIGBjb21mb3J0YWJsZWAuXG4gICAgICogQXZhaWxhYmxlIG9wdGlvbnMgYXJlIGBjb21mb3J0YWJsZWAsIGBjb3N5YCwgYGNvbXBhY3RgLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgY29tcG9uZW50VGhlbWUgPSB0aGlzLmNvbXBvbmVudC5kaXNwbGF5RGVuc2l0eTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBnZXQgZGlzcGxheURlbnNpdHkoKTogRGlzcGxheURlbnNpdHkgfCBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGlzcGxheURlbnNpdHkgfHxcbiAgICAgICAgICAgICgodGhpcy5kaXNwbGF5RGVuc2l0eU9wdGlvbnMgJiYgdGhpcy5kaXNwbGF5RGVuc2l0eU9wdGlvbnMuZGlzcGxheURlbnNpdHkpIHx8IERpc3BsYXlEZW5zaXR5LmNvbWZvcnRhYmxlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0aGVtZSBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgZGlzcGxheURlbnNpdHkodmFsOiBEaXNwbGF5RGVuc2l0eSB8IHN0cmluZykge1xuICAgICAgICBjb25zdCBjdXJyZW50RGlzcGxheURlbnNpdHkgPSB0aGlzLl9kaXNwbGF5RGVuc2l0eTtcbiAgICAgICAgdGhpcy5fZGlzcGxheURlbnNpdHkgPSB2YWwgYXMgRGlzcGxheURlbnNpdHk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnREaXNwbGF5RGVuc2l0eSAhPT0gdGhpcy5fZGlzcGxheURlbnNpdHkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlbnNpdHlDaGFuZ2VkQXJnczogSURlbnNpdHlDaGFuZ2VkRXZlbnRBcmdzID0ge1xuICAgICAgICAgICAgICAgIG9sZERlbnNpdHk6IGN1cnJlbnREaXNwbGF5RGVuc2l0eSxcbiAgICAgICAgICAgICAgICBuZXdEZW5zaXR5OiB0aGlzLl9kaXNwbGF5RGVuc2l0eVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5vbkRlbnNpdHlDaGFuZ2VkLmVtaXQoZGVuc2l0eUNoYW5nZWRBcmdzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyBvbkRlbnNpdHlDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcjxJRGVuc2l0eUNoYW5nZWRFdmVudEFyZ3M+KCk7XG5cbiAgICBwcm90ZWN0ZWQgb2xkRGlzcGxheURlbnNpdHlPcHRpb25zOiBJRGlzcGxheURlbnNpdHlPcHRpb25zID0geyBkaXNwbGF5RGVuc2l0eTogRGlzcGxheURlbnNpdHkuY29tZm9ydGFibGUgfTtcblxuXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGRpc3BsYXlEZW5zaXR5T3B0aW9uczogSURpc3BsYXlEZW5zaXR5T3B0aW9ucykge1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMub2xkRGlzcGxheURlbnNpdHlPcHRpb25zLCBkaXNwbGF5RGVuc2l0eU9wdGlvbnMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBuZ0RvQ2hlY2soKSB7XG4gICAgICAgIGlmICghdGhpcy5fZGlzcGxheURlbnNpdHkgJiYgdGhpcy5kaXNwbGF5RGVuc2l0eU9wdGlvbnMgJiZcbiAgICAgICAgICAgICAgICB0aGlzLm9sZERpc3BsYXlEZW5zaXR5T3B0aW9ucy5kaXNwbGF5RGVuc2l0eSAhPT0gdGhpcy5kaXNwbGF5RGVuc2l0eU9wdGlvbnMuZGlzcGxheURlbnNpdHkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlbnNpdHlDaGFuZ2VkQXJnczogSURlbnNpdHlDaGFuZ2VkRXZlbnRBcmdzID0ge1xuICAgICAgICAgICAgICAgIG9sZERlbnNpdHk6IHRoaXMub2xkRGlzcGxheURlbnNpdHlPcHRpb25zLmRpc3BsYXlEZW5zaXR5LFxuICAgICAgICAgICAgICAgIG5ld0RlbnNpdHk6IHRoaXMuZGlzcGxheURlbnNpdHlPcHRpb25zLmRpc3BsYXlEZW5zaXR5XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLm9uRGVuc2l0eUNoYW5nZWQuZW1pdChkZW5zaXR5Q2hhbmdlZEFyZ3MpO1xuICAgICAgICAgICAgdGhpcy5vbGREaXNwbGF5RGVuc2l0eU9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHRoaXMub2xkRGlzcGxheURlbnNpdHlPcHRpb25zLCB0aGlzLmRpc3BsYXlEZW5zaXR5T3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIHN0eWxlIGNsYXNzIG9mIGEgY29tcG9uZW50L2VsZW1lbnQgcmV0dXJucyB0aGUgbW9kaWZpZWQgdmVyc2lvbiBvZiBpdCBiYXNlZFxuICAgICAqIG9uIHRoZSBjdXJyZW50IGRpc3BsYXkgZGVuc2l0eS5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgZ2V0Q29tcG9uZW50RGVuc2l0eUNsYXNzKGJhc2VTdHlsZUNsYXNzOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuZGlzcGxheURlbnNpdHkpIHtcbiAgICAgICAgICAgIGNhc2UgRGlzcGxheURlbnNpdHkuY29zeTpcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7YmFzZVN0eWxlQ2xhc3N9LS0ke0Rpc3BsYXlEZW5zaXR5LmNvc3l9YDtcbiAgICAgICAgICAgIGNhc2UgRGlzcGxheURlbnNpdHkuY29tcGFjdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7YmFzZVN0eWxlQ2xhc3N9LS0ke0Rpc3BsYXlEZW5zaXR5LmNvbXBhY3R9YDtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJhc2VTdHlsZUNsYXNzO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19