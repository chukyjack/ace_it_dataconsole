/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ContentChildren, ElementRef, forwardRef, QueryList, Input, ViewChild, EventEmitter, Output, Optional, Inject } from '@angular/core';
import { IgxToggleDirective } from '../directives/toggle/toggle.directive';
import { IgxDropDownItemComponent } from './drop-down-item.component';
import { IgxDropDownBase } from './drop-down.base';
import { IGX_DROPDOWN_BASE } from './drop-down.common';
import { isIE } from '../core/utils';
import { IgxSelectionAPIService } from '../core/selection';
import { Subject } from 'rxjs';
import { DisplayDensityToken } from '../core/density';
/**
 * **Ignite UI for Angular DropDown** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/drop_down.html)
 *
 * The Ignite UI for Angular Drop Down displays a scrollable list of items which may be visually grouped and
 * supports selection of a single item. Clicking or tapping an item selects it and closes the Drop Down
 *
 * Example:
 * ```html
 * <igx-drop-down>
 *   <igx-drop-down-item *ngFor="let item of items" disabled={{item.disabled}} isHeader={{item.header}}>
 *     {{ item.value }}
 *   </igx-drop-down-item>
 * </igx-drop-down>
 * ```
 */
var IgxDropDownComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxDropDownComponent, _super);
    function IgxDropDownComponent(elementRef, cdr, selection, _displayDensityOptions) {
        var _this = _super.call(this, elementRef, cdr, _displayDensityOptions) || this;
        _this.elementRef = elementRef;
        _this.cdr = cdr;
        _this.selection = selection;
        _this._displayDensityOptions = _displayDensityOptions;
        _this.destroy$ = new Subject();
        /**
         * Gets/sets whether items take focus. Disabled by default.
         * When enabled, drop down items gain tab index and are focused when active -
         * this includes activating the selected item when opening the drop down and moving with keyboard navigation.
         *
         * Note: Keep that focus shift in mind when using the igxDropDownItemNavigation directive
         * and ensure it's placed either on each focusable item or a common ancestor to allow it to handle keyboard events.
         *
         * ```typescript
         * // get
         * let dropDownAllowsItemFocus = this.dropdown.allowItemsFocus;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-drop-down [allowItemsFocus]='true'></igx-drop-down>
         * ```
         */
        _this.allowItemsFocus = false;
        /**
         * Emitted before the dropdown is opened
         *
         * ```html
         * <igx-drop-down (onOpening)='handleOpening()'></igx-drop-down>
         * ```
         */
        _this.onOpening = new EventEmitter();
        /**
         * Emitted after the dropdown is opened
         *
         * ```html
         * <igx-drop-down (onOpened)='handleOpened()'></igx-drop-down>
         * ```
         */
        _this.onOpened = new EventEmitter();
        /**
         * Emitted before the dropdown is closed
         *
         * ```html
         * <igx-drop-down (onClosing)='handleClosing()'></igx-drop-down>
         * ```
         */
        _this.onClosing = new EventEmitter();
        /**
         * Emitted after the dropdown is closed
         *
         * ```html
         * <igx-drop-down (onClosed)='handleClosed()'></igx-drop-down>
         * ```
         */
        _this.onClosed = new EventEmitter();
        return _this;
    }
    Object.defineProperty(IgxDropDownComponent.prototype, "id", {
        get: /**
         * @return {?}
         */
        function () {
            return this._id;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.toggleDirective.id = value;
            this.selection.set(value, this.selection.get(this.id));
            this.selection.clear(this.id);
            this._id = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownComponent.prototype, "listId", {
        /** Id of the internal listbox of the drop down */
        get: /**
         * Id of the internal listbox of the drop down
         * @return {?}
         */
        function () {
            return this.id + '-list';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownComponent.prototype, "selectedItem", {
        /**
         * Get currently selected item
         *
         * ```typescript
         * let currentItem = this.dropdown.selectedItem;
         * ```
         */
        get: /**
         * Get currently selected item
         *
         * ```typescript
         * let currentItem = this.dropdown.selectedItem;
         * ```
         * @return {?}
         */
        function () {
            /** @type {?} */
            var selectedItem = this.selection.first_item(this.id);
            if (selectedItem) {
                if (selectedItem.selected) {
                    return selectedItem;
                }
                this.selection.clear(this.id);
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownComponent.prototype, "collapsed", {
        /**
         * Gets if the dropdown is collapsed
         *
         * ```typescript
         * let isCollapsed = this.dropdown.collapsed;
         * ```
         */
        get: /**
         * Gets if the dropdown is collapsed
         *
         * ```typescript
         * let isCollapsed = this.dropdown.collapsed;
         * ```
         * @return {?}
         */
        function () {
            return this.toggleDirective.collapsed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownComponent.prototype, "scrollContainer", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            return this.toggleDirective.element;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Opens the dropdown
     *
     * ```typescript
     * this.dropdown.open();
     * ```
     */
    /**
     * Opens the dropdown
     *
     * ```typescript
     * this.dropdown.open();
     * ```
     * @param {?=} overlaySettings
     * @return {?}
     */
    IgxDropDownComponent.prototype.open = /**
     * Opens the dropdown
     *
     * ```typescript
     * this.dropdown.open();
     * ```
     * @param {?=} overlaySettings
     * @return {?}
     */
    function (overlaySettings) {
        this.toggleDirective.open(overlaySettings);
    };
    /**
     * Closes the dropdown
     *
     * ```typescript
     * this.dropdown.close();
     * ```
     */
    /**
     * Closes the dropdown
     *
     * ```typescript
     * this.dropdown.close();
     * ```
     * @return {?}
     */
    IgxDropDownComponent.prototype.close = /**
     * Closes the dropdown
     *
     * ```typescript
     * this.dropdown.close();
     * ```
     * @return {?}
     */
    function () {
        this.toggleDirective.close();
    };
    /**
     * Toggles the dropdown
     *
     * ```typescript
     * this.dropdown.toggle();
     * ```
     */
    /**
     * Toggles the dropdown
     *
     * ```typescript
     * this.dropdown.toggle();
     * ```
     * @param {?=} overlaySettings
     * @return {?}
     */
    IgxDropDownComponent.prototype.toggle = /**
     * Toggles the dropdown
     *
     * ```typescript
     * this.dropdown.toggle();
     * ```
     * @param {?=} overlaySettings
     * @return {?}
     */
    function (overlaySettings) {
        if (this.collapsed || this.toggleDirective.isClosing) {
            this.open(overlaySettings);
        }
        else {
            this.close();
        }
    };
    /**
     * Select an item by index
     * @param index of the item to select
     */
    /**
     * Select an item by index
     * @param {?} index of the item to select
     * @return {?}
     */
    IgxDropDownComponent.prototype.setSelectedItem = /**
     * Select an item by index
     * @param {?} index of the item to select
     * @return {?}
     */
    function (index) {
        if (index < 0 || index >= this.items.length) {
            return;
        }
        /** @type {?} */
        var newSelection = this.items[index];
        this.selectItem(newSelection);
    };
    /**
     * Navigates to the item on the specified index
     * @param newIndex number
     */
    /**
     * Navigates to the item on the specified index
     * @param {?} index
     * @return {?}
     */
    IgxDropDownComponent.prototype.navigateItem = /**
     * Navigates to the item on the specified index
     * @param {?} index
     * @return {?}
     */
    function (index) {
        _super.prototype.navigateItem.call(this, index);
        if (this.allowItemsFocus && this.focusedItem) {
            this.focusedItem.element.nativeElement.focus();
            this.cdr.markForCheck();
        }
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @param {?} e
     * @return {?}
     */
    IgxDropDownComponent.prototype.onToggleOpening = /**
     * @hidden \@internal
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.onOpening.emit(e);
        if (e.cancel) {
            return;
        }
        this.scrollToItem(this.selectedItem);
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxDropDownComponent.prototype.onToggleOpened = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        if (this.selectedItem) {
            this._focusedItem = this.selectedItem;
            this._focusedItem.focused = true;
        }
        else if (this.allowItemsFocus) {
            this.navigateFirst();
        }
        this.onOpened.emit();
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @param {?} e
     * @return {?}
     */
    IgxDropDownComponent.prototype.onToggleClosing = /**
     * @hidden \@internal
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.onClosing.emit(e);
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxDropDownComponent.prototype.onToggleClosed = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        if (this._focusedItem) {
            this._focusedItem.focused = false;
        }
        this.onClosed.emit();
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxDropDownComponent.prototype.ngOnDestroy = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        this.destroy$.next(true);
        this.destroy$.complete();
        this.selection.clear(this.id);
    };
    /**
     * @protected
     * @param {?} item
     * @return {?}
     */
    IgxDropDownComponent.prototype.scrollToItem = /**
     * @protected
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var _this = this;
        /** @type {?} */
        var itemPosition = this.calculateScrollPosition(item);
        //  in IE11 setting sctrollTop is somehow slow and forces dropdown
        //  to appear on screen before animation start. As a result dropdown
        //  flickers badly. This is why we set scrollTop just a little later
        //  allowing animation to start and prevent dropdown flickering
        if (isIE()) {
            setTimeout(function () {
                _this.scrollContainer.scrollTop = (itemPosition);
            }, 1);
        }
        else {
            this.scrollContainer.scrollTop = (itemPosition);
        }
    };
    /** @hidden @internal */
    /**
     * @hidden \@internal
     * @param {?} item
     * @return {?}
     */
    IgxDropDownComponent.prototype.calculateScrollPosition = /**
     * @hidden \@internal
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (!item) {
            return 0;
        }
        /** @type {?} */
        var elementRect = item.element.nativeElement.getBoundingClientRect();
        /** @type {?} */
        var parentRect = this.scrollContainer.getBoundingClientRect();
        /** @type {?} */
        var scrollDelta = parentRect.top - elementRect.top;
        /** @type {?} */
        var scrollPosition = this.scrollContainer.scrollTop - scrollDelta;
        /** @type {?} */
        var dropDownHeight = this.scrollContainer.clientHeight;
        scrollPosition -= dropDownHeight / 2;
        scrollPosition += item.elementHeight / 2;
        return Math.floor(scrollPosition);
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxDropDownComponent.prototype.ngOnInit = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        this.toggleDirective.id = this.id;
    };
    /** Keydown Handler */
    /**
     * Keydown Handler
     * @param {?} key
     * @param {?=} event
     * @return {?}
     */
    IgxDropDownComponent.prototype.onItemActionKey = /**
     * Keydown Handler
     * @param {?} key
     * @param {?=} event
     * @return {?}
     */
    function (key, event) {
        _super.prototype.onItemActionKey.call(this, key, event);
        this.close();
    };
    /**
     * Handles the `onSelection` emit and the drop down toggle when selection changes
     * @hidden
     * @internal
     * @param newSelection
     * @param event
     */
    /**
     * Handles the `onSelection` emit and the drop down toggle when selection changes
     * @hidden
     * \@internal
     * @param {?=} newSelection
     * @param {?=} event
     * @return {?}
     */
    IgxDropDownComponent.prototype.selectItem = /**
     * Handles the `onSelection` emit and the drop down toggle when selection changes
     * @hidden
     * \@internal
     * @param {?=} newSelection
     * @param {?=} event
     * @return {?}
     */
    function (newSelection, event) {
        /** @type {?} */
        var oldSelection = this.selectedItem;
        if (!newSelection) {
            newSelection = this._focusedItem;
        }
        if (newSelection === null) {
            return;
        }
        if (newSelection.isHeader) {
            return;
        }
        /** @type {?} */
        var args = { oldSelection: oldSelection, newSelection: newSelection, cancel: false };
        this.onSelection.emit(args);
        if (!args.cancel) {
            this.selection.set(this.id, new Set([newSelection]));
            if (oldSelection) {
                oldSelection.selected = false;
            }
            if (newSelection) {
                newSelection.selected = true;
            }
            if (event) {
                this.toggleDirective.close();
            }
        }
    };
    IgxDropDownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'igx-drop-down',
                    template: "<div class=\"igx-drop-down__list\" igxToggle [style.width]=\"width\" [style.height]=\"height\"\n[style.maxHeight]=\"maxHeight\" [attr.id]=\"this.listId\" role=\"listbox\"\n    (onOpening)=\"onToggleOpening($event)\" (onOpened)=\"onToggleOpened()\"\n    (onClosing)=\"onToggleClosing($event)\" (onClosed)=\"onToggleClosed()\">\n    <ng-container *ngIf=\"!collapsed\">\n        <ng-content></ng-content>\n    </ng-container>\n</div>\n",
                    providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxDropDownComponent }]
                }] }
    ];
    /** @nocollapse */
    IgxDropDownComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: IgxSelectionAPIService },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
    ]; };
    IgxDropDownComponent.propDecorators = {
        toggleDirective: [{ type: ViewChild, args: [IgxToggleDirective,] }],
        children: [{ type: ContentChildren, args: [forwardRef(function () { return IgxDropDownItemComponent; }), { descendants: true },] }],
        allowItemsFocus: [{ type: Input }],
        id: [{ type: Input }],
        onOpening: [{ type: Output }],
        onOpened: [{ type: Output }],
        onClosing: [{ type: Output }],
        onClosed: [{ type: Output }]
    };
    return IgxDropDownComponent;
}(IgxDropDownBase));
export { IgxDropDownComponent };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    IgxDropDownComponent.prototype.destroy$;
    /**
     * @type {?}
     * @protected
     */
    IgxDropDownComponent.prototype.toggleDirective;
    /**
     * @hidden
     * \@internal
     * @type {?}
     */
    IgxDropDownComponent.prototype.children;
    /**
     * Gets/sets whether items take focus. Disabled by default.
     * When enabled, drop down items gain tab index and are focused when active -
     * this includes activating the selected item when opening the drop down and moving with keyboard navigation.
     *
     * Note: Keep that focus shift in mind when using the igxDropDownItemNavigation directive
     * and ensure it's placed either on each focusable item or a common ancestor to allow it to handle keyboard events.
     *
     * ```typescript
     * // get
     * let dropDownAllowsItemFocus = this.dropdown.allowItemsFocus;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-drop-down [allowItemsFocus]='true'></igx-drop-down>
     * ```
     * @type {?}
     */
    IgxDropDownComponent.prototype.allowItemsFocus;
    /**
     * Emitted before the dropdown is opened
     *
     * ```html
     * <igx-drop-down (onOpening)='handleOpening()'></igx-drop-down>
     * ```
     * @type {?}
     */
    IgxDropDownComponent.prototype.onOpening;
    /**
     * Emitted after the dropdown is opened
     *
     * ```html
     * <igx-drop-down (onOpened)='handleOpened()'></igx-drop-down>
     * ```
     * @type {?}
     */
    IgxDropDownComponent.prototype.onOpened;
    /**
     * Emitted before the dropdown is closed
     *
     * ```html
     * <igx-drop-down (onClosing)='handleClosing()'></igx-drop-down>
     * ```
     * @type {?}
     */
    IgxDropDownComponent.prototype.onClosing;
    /**
     * Emitted after the dropdown is closed
     *
     * ```html
     * <igx-drop-down (onClosed)='handleClosed()'></igx-drop-down>
     * ```
     * @type {?}
     */
    IgxDropDownComponent.prototype.onClosed;
    /**
     * @type {?}
     * @protected
     */
    IgxDropDownComponent.prototype.elementRef;
    /**
     * @type {?}
     * @protected
     */
    IgxDropDownComponent.prototype.cdr;
    /**
     * @type {?}
     * @protected
     */
    IgxDropDownComponent.prototype.selection;
    /**
     * @type {?}
     * @protected
     */
    IgxDropDownComponent.prototype._displayDensityOptions;
}
//# sourceMappingURL=data:application/json;base64,