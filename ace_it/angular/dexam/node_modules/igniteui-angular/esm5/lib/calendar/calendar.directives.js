/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * This file contains all the directives used by the @link IgxCalendarComponent.
 * Except for the directives which are used for templating the calendar itself
 * you should generally not use them directly.
 * @preferred
 */
import { Directive, EventEmitter, HostBinding, HostListener, Input, Output, TemplateRef, ElementRef } from '@angular/core';
/**
 * @hidden
 */
var IgxCalendarYearDirective = /** @class */ (function () {
    function IgxCalendarYearDirective() {
        this.onYearSelection = new EventEmitter();
    }
    Object.defineProperty(IgxCalendarYearDirective.prototype, "defaultCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.isCurrentYear;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarYearDirective.prototype, "currentCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isCurrentYear;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarYearDirective.prototype, "isCurrentYear", {
        get: /**
         * @return {?}
         */
        function () {
            return this.date.getFullYear() === this.value.getFullYear();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgxCalendarYearDirective.prototype.onClick = /**
     * @return {?}
     */
    function () {
        this.onYearSelection.emit(this.value);
    };
    IgxCalendarYearDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxCalendarYear]'
                },] }
    ];
    IgxCalendarYearDirective.propDecorators = {
        value: [{ type: Input, args: ['igxCalendarYear',] }],
        date: [{ type: Input }],
        onYearSelection: [{ type: Output }],
        defaultCSS: [{ type: HostBinding, args: ['class.igx-calendar__year',] }],
        currentCSS: [{ type: HostBinding, args: ['class.igx-calendar__year--current',] }],
        onClick: [{ type: HostListener, args: ['click',] }]
    };
    return IgxCalendarYearDirective;
}());
export { IgxCalendarYearDirective };
if (false) {
    /** @type {?} */
    IgxCalendarYearDirective.prototype.value;
    /** @type {?} */
    IgxCalendarYearDirective.prototype.date;
    /** @type {?} */
    IgxCalendarYearDirective.prototype.onYearSelection;
}
var IgxCalendarMonthDirective = /** @class */ (function () {
    function IgxCalendarMonthDirective(elementRef) {
        this.elementRef = elementRef;
        this.onMonthSelection = new EventEmitter();
        this.tabindex = 0;
    }
    Object.defineProperty(IgxCalendarMonthDirective.prototype, "defaultCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.isCurrentMonth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarMonthDirective.prototype, "currentCSS", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isCurrentMonth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarMonthDirective.prototype, "isCurrentMonth", {
        get: /**
         * @return {?}
         */
        function () {
            return this.date.getMonth() === this.value.getMonth();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxCalendarMonthDirective.prototype, "nativeElement", {
        get: /**
         * @return {?}
         */
        function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgxCalendarMonthDirective.prototype.onClick = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var date = new Date(this.value.getFullYear(), this.value.getMonth(), this.date.getDate());
        this.onMonthSelection.emit(date);
    };
    IgxCalendarMonthDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxCalendarMonth]'
                },] }
    ];
    /** @nocollapse */
    IgxCalendarMonthDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    IgxCalendarMonthDirective.propDecorators = {
        value: [{ type: Input, args: ['igxCalendarMonth',] }],
        date: [{ type: Input }],
        index: [{ type: Input }],
        onMonthSelection: [{ type: Output }],
        tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
        defaultCSS: [{ type: HostBinding, args: ['class.igx-calendar__month',] }],
        currentCSS: [{ type: HostBinding, args: ['class.igx-calendar__month--current',] }],
        onClick: [{ type: HostListener, args: ['click',] }]
    };
    return IgxCalendarMonthDirective;
}());
export { IgxCalendarMonthDirective };
if (false) {
    /** @type {?} */
    IgxCalendarMonthDirective.prototype.value;
    /** @type {?} */
    IgxCalendarMonthDirective.prototype.date;
    /** @type {?} */
    IgxCalendarMonthDirective.prototype.index;
    /** @type {?} */
    IgxCalendarMonthDirective.prototype.onMonthSelection;
    /** @type {?} */
    IgxCalendarMonthDirective.prototype.tabindex;
    /** @type {?} */
    IgxCalendarMonthDirective.prototype.elementRef;
}
/**
 * @hidden
 */
var IgxCalendarHeaderTemplateDirective = /** @class */ (function () {
    function IgxCalendarHeaderTemplateDirective(template) {
        this.template = template;
    }
    IgxCalendarHeaderTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxCalendarHeader]'
                },] }
    ];
    /** @nocollapse */
    IgxCalendarHeaderTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxCalendarHeaderTemplateDirective;
}());
export { IgxCalendarHeaderTemplateDirective };
if (false) {
    /** @type {?} */
    IgxCalendarHeaderTemplateDirective.prototype.template;
}
/**
 * @hidden
 */
var IgxCalendarSubheaderTemplateDirective = /** @class */ (function () {
    function IgxCalendarSubheaderTemplateDirective(template) {
        this.template = template;
    }
    IgxCalendarSubheaderTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxCalendarSubheader]'
                },] }
    ];
    /** @nocollapse */
    IgxCalendarSubheaderTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxCalendarSubheaderTemplateDirective;
}());
export { IgxCalendarSubheaderTemplateDirective };
if (false) {
    /** @type {?} */
    IgxCalendarSubheaderTemplateDirective.prototype.template;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXIuZGlyZWN0aXZlcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvY2FsZW5kYXIvY2FsZW5kYXIuZGlyZWN0aXZlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBTUEsT0FBTyxFQUNILFNBQVMsRUFDVCxZQUFZLEVBQ1osV0FBVyxFQUNYLFlBQVksRUFDWixLQUFLLEVBQ0wsTUFBTSxFQUNOLFdBQVcsRUFDWCxVQUFVLEVBQ2IsTUFBTSxlQUFlLENBQUM7Ozs7QUFLdkI7SUFBQTtRQVlXLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztJQW9CdEQsQ0FBQztJQWxCRyxzQkFDVyxnREFBVTs7OztRQURyQjtZQUVJLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQy9CLENBQUM7OztPQUFBO0lBRUQsc0JBQ1csZ0RBQVU7Ozs7UUFEckI7WUFFSSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDOUIsQ0FBQzs7O09BQUE7SUFFRCxzQkFBVyxtREFBYTs7OztRQUF4QjtZQUNJLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2hFLENBQUM7OztPQUFBOzs7O0lBR00sMENBQU87OztJQURkO1FBRUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFDLENBQUM7O2dCQS9CSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLG1CQUFtQjtpQkFDaEM7Ozt3QkFHSSxLQUFLLFNBQUMsaUJBQWlCO3VCQUd2QixLQUFLO2tDQUdMLE1BQU07NkJBR04sV0FBVyxTQUFDLDBCQUEwQjs2QkFLdEMsV0FBVyxTQUFDLG1DQUFtQzswQkFTL0MsWUFBWSxTQUFDLE9BQU87O0lBSXpCLCtCQUFDO0NBQUEsQUFoQ0QsSUFnQ0M7U0E3Qlksd0JBQXdCOzs7SUFFakMseUNBQ21COztJQUVuQix3Q0FDa0I7O0lBRWxCLG1EQUNrRDs7QUFzQnREO0lBc0NJLG1DQUFtQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBdkJsQyxxQkFBZ0IsR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBRzVDLGFBQVEsR0FBRyxDQUFDLENBQUM7SUFvQndCLENBQUM7SUFsQjdDLHNCQUNXLGlEQUFVOzs7O1FBRHJCO1lBRUksT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUM7UUFDaEMsQ0FBQzs7O09BQUE7SUFFRCxzQkFDVyxpREFBVTs7OztRQURyQjtZQUVJLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztRQUMvQixDQUFDOzs7T0FBQTtJQUVELHNCQUFXLHFEQUFjOzs7O1FBQXpCO1lBQ0ksT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDMUQsQ0FBQzs7O09BQUE7SUFFRCxzQkFBVyxvREFBYTs7OztRQUF4QjtZQUNJLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFDekMsQ0FBQzs7O09BQUE7Ozs7SUFLTSwyQ0FBTzs7O0lBRGQ7O1lBRVUsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzNGLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckMsQ0FBQzs7Z0JBNUNKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsb0JBQW9CO2lCQUNqQzs7OztnQkExQ0csVUFBVTs7O3dCQTZDVCxLQUFLLFNBQUMsa0JBQWtCO3VCQUd4QixLQUFLO3dCQUdMLEtBQUs7bUNBR0wsTUFBTTsyQkFHTixXQUFXLFNBQUMsZUFBZTs2QkFHM0IsV0FBVyxTQUFDLDJCQUEyQjs2QkFLdkMsV0FBVyxTQUFDLG9DQUFvQzswQkFlaEQsWUFBWSxTQUFDLE9BQU87O0lBS3pCLGdDQUFDO0NBQUEsQUE3Q0QsSUE2Q0M7U0ExQ1kseUJBQXlCOzs7SUFFbEMsMENBQ21COztJQUVuQix5Q0FDa0I7O0lBRWxCLDBDQUNhOztJQUViLHFEQUNtRDs7SUFFbkQsNkNBQ29COztJQW9CUiwrQ0FBNkI7Ozs7O0FBWTdDO0lBS0ksNENBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUcsQ0FBQzs7Z0JBTHBELFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUscUJBQXFCO2lCQUNsQzs7OztnQkE3RkcsV0FBVzs7SUFpR2YseUNBQUM7Q0FBQSxBQU5ELElBTUM7U0FIWSxrQ0FBa0M7OztJQUUvQixzREFBaUM7Ozs7O0FBTWpEO0lBSUksK0NBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUcsQ0FBQzs7Z0JBSnBELFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsd0JBQXdCO2lCQUNyQzs7OztnQkF4R0csV0FBVzs7SUEyR2YsNENBQUM7Q0FBQSxBQUxELElBS0M7U0FGWSxxQ0FBcUM7OztJQUNsQyx5REFBaUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgZmlsZSBjb250YWlucyBhbGwgdGhlIGRpcmVjdGl2ZXMgdXNlZCBieSB0aGUgQGxpbmsgSWd4Q2FsZW5kYXJDb21wb25lbnQuXG4gKiBFeGNlcHQgZm9yIHRoZSBkaXJlY3RpdmVzIHdoaWNoIGFyZSB1c2VkIGZvciB0ZW1wbGF0aW5nIHRoZSBjYWxlbmRhciBpdHNlbGZcbiAqIHlvdSBzaG91bGQgZ2VuZXJhbGx5IG5vdCB1c2UgdGhlbSBkaXJlY3RseS5cbiAqIEBwcmVmZXJyZWRcbiAqL1xuaW1wb3J0IHtcbiAgICBEaXJlY3RpdmUsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBJbnB1dCxcbiAgICBPdXRwdXQsXG4gICAgVGVtcGxhdGVSZWYsXG4gICAgRWxlbWVudFJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneENhbGVuZGFyWWVhcl0nXG59KVxuZXhwb3J0IGNsYXNzIElneENhbGVuZGFyWWVhckRpcmVjdGl2ZSB7XG5cbiAgICBASW5wdXQoJ2lneENhbGVuZGFyWWVhcicpXG4gICAgcHVibGljIHZhbHVlOiBEYXRlO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZGF0ZTogRGF0ZTtcblxuICAgIEBPdXRwdXQoKVxuICAgIHB1YmxpYyBvblllYXJTZWxlY3Rpb24gPSBuZXcgRXZlbnRFbWl0dGVyPERhdGU+KCk7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1jYWxlbmRhcl9feWVhcicpXG4gICAgcHVibGljIGdldCBkZWZhdWx0Q1NTKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIXRoaXMuaXNDdXJyZW50WWVhcjtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1jYWxlbmRhcl9feWVhci0tY3VycmVudCcpXG4gICAgcHVibGljIGdldCBjdXJyZW50Q1NTKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0N1cnJlbnRZZWFyO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgaXNDdXJyZW50WWVhcigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZS5nZXRGdWxsWWVhcigpID09PSB0aGlzLnZhbHVlLmdldEZ1bGxZZWFyKCk7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICAgIHB1YmxpYyBvbkNsaWNrKCkge1xuICAgICAgICB0aGlzLm9uWWVhclNlbGVjdGlvbi5lbWl0KHRoaXMudmFsdWUpO1xuICAgIH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4Q2FsZW5kYXJNb250aF0nXG59KVxuZXhwb3J0IGNsYXNzIElneENhbGVuZGFyTW9udGhEaXJlY3RpdmUge1xuXG4gICAgQElucHV0KCdpZ3hDYWxlbmRhck1vbnRoJylcbiAgICBwdWJsaWMgdmFsdWU6IERhdGU7XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBkYXRlOiBEYXRlO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgaW5kZXg7XG5cbiAgICBAT3V0cHV0KClcbiAgICBwdWJsaWMgb25Nb250aFNlbGVjdGlvbiA9IG5ldyBFdmVudEVtaXR0ZXI8RGF0ZT4oKTtcblxuICAgIEBIb3N0QmluZGluZygnYXR0ci50YWJpbmRleCcpXG4gICAgcHVibGljIHRhYmluZGV4ID0gMDtcblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LWNhbGVuZGFyX19tb250aCcpXG4gICAgcHVibGljIGdldCBkZWZhdWx0Q1NTKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIXRoaXMuaXNDdXJyZW50TW9udGg7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtY2FsZW5kYXJfX21vbnRoLS1jdXJyZW50JylcbiAgICBwdWJsaWMgZ2V0IGN1cnJlbnRDU1MoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzQ3VycmVudE1vbnRoO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgaXNDdXJyZW50TW9udGgoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGUuZ2V0TW9udGgoKSA9PT0gdGhpcy52YWx1ZS5nZXRNb250aCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgbmF0aXZlRWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7fVxuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICAgIHB1YmxpYyBvbkNsaWNrKCkge1xuICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUodGhpcy52YWx1ZS5nZXRGdWxsWWVhcigpLCB0aGlzLnZhbHVlLmdldE1vbnRoKCksIHRoaXMuZGF0ZS5nZXREYXRlKCkpO1xuICAgICAgICB0aGlzLm9uTW9udGhTZWxlY3Rpb24uZW1pdChkYXRlKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hDYWxlbmRhckhlYWRlcl0nXG59KVxuZXhwb3J0IGNsYXNzIElneENhbGVuZGFySGVhZGVyVGVtcGxhdGVEaXJlY3RpdmUge1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7fVxufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4Q2FsZW5kYXJTdWJoZWFkZXJdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hDYWxlbmRhclN1YmhlYWRlclRlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHt9XG59XG4iXX0=