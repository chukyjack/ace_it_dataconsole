/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, Component, Input, HostListener, ElementRef, HostBinding, Output, EventEmitter, TemplateRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { SliderHandle } from '../slider.component';
/**
 * @hidden
 */
var IgxSliderThumbComponent = /** @class */ (function () {
    function IgxSliderThumbComponent(_elementRef) {
        this._elementRef = _elementRef;
        this._isActiveLabel = false;
        this._destroy$ = new Subject();
        this.isActive = false;
        this.onThumbValueChange = new EventEmitter();
        this.onChange = new EventEmitter();
        this.tabindex = 0;
    }
    Object.defineProperty(IgxSliderThumbComponent.prototype, "thumbFromClass", {
        get: /**
         * @return {?}
         */
        function () {
            return this.fromHandler;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderThumbComponent.prototype, "thumbToClass", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.fromHandler;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderThumbComponent.prototype, "thumbFromActiveClass", {
        get: /**
         * @return {?}
         */
        function () {
            return this.fromHandler && this._isActiveLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderThumbComponent.prototype, "thumbToActiveClass", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.fromHandler && this._isActiveLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderThumbComponent.prototype, "nativeElement", {
        get: /**
         * @return {?}
         */
        function () {
            return this._elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderThumbComponent.prototype, "thumbPositionX", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var thumbBounderies = this.nativeElement.getBoundingClientRect();
            /** @type {?} */
            var thumbCenter = (thumbBounderies.right - thumbBounderies.left) / 2;
            return thumbBounderies.left + thumbCenter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSliderThumbComponent.prototype, "destroy", {
        get: /**
         * @return {?}
         */
        function () {
            return this._destroy$;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxSliderThumbComponent.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        this.onPan
            .pipe(takeUntil(this._destroy$))
            .subscribe(function (mouseX) {
            return _this.updateThumbValue(mouseX);
        });
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxSliderThumbComponent.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        this._destroy$.next(true);
        this._destroy$.complete();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxSliderThumbComponent.prototype.onKeyDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.disabled) {
            return;
        }
        /** @type {?} */
        var increment = 0;
        if (event.key.endsWith('Left')) {
            increment = this.step * -1;
        }
        else if (event.key.endsWith('Right')) {
            increment = this.step;
        }
        else {
            return;
        }
        this.onChange.emit();
        this.onThumbValueChange.emit(increment);
    };
    /**
     * @return {?}
     */
    IgxSliderThumbComponent.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        this.isActive = false;
    };
    /**
     * @return {?}
     */
    IgxSliderThumbComponent.prototype.onFocusListener = /**
     * @return {?}
     */
    function () {
        this.isActive = true;
    };
    /**
     * @return {?}
     */
    IgxSliderThumbComponent.prototype.showThumbLabel = /**
     * @return {?}
     */
    function () {
        if (this.disabled) {
            return;
        }
        if (this.continuous) {
            return;
        }
        if (this._timer !== null) {
            clearTimeout(this._timer);
        }
        this._isActiveLabel = true;
    };
    /**
     * @return {?}
     */
    IgxSliderThumbComponent.prototype.hideThumbLabel = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.disabled) {
            return;
        }
        if (this.continuous) {
            return;
        }
        this._timer = setTimeout(function () { return _this._isActiveLabel = false; }, this.thumbLabelVisibilityDuration);
    };
    /**
     * @private
     * @param {?} mouseX
     * @return {?}
     */
    IgxSliderThumbComponent.prototype.updateThumbValue = /**
     * @private
     * @param {?} mouseX
     * @return {?}
     */
    function (mouseX) {
        /** @type {?} */
        var updateValue = this.calculateTrackUpdate(mouseX);
        if (this.isActive && updateValue !== 0) {
            this.onThumbValueChange.emit(updateValue);
        }
    };
    /**
     * @private
     * @param {?} mouseX
     * @return {?}
     */
    IgxSliderThumbComponent.prototype.calculateTrackUpdate = /**
     * @private
     * @param {?} mouseX
     * @return {?}
     */
    function (mouseX) {
        /** @type {?} */
        var scaleX = mouseX - this.thumbPositionX;
        /** @type {?} */
        var stepDistanceCenter = this.stepDistance / 2;
        // If the thumb scale range (slider update) is less th√†n a half step,
        // the position stays the same.
        /** @type {?} */
        var scaleXPositive = Math.abs(scaleX);
        if (scaleXPositive < stepDistanceCenter) {
            return 0;
        }
        return this.stepToProceed(scaleX, this.stepDistance);
    };
    /**
     * @private
     * @param {?} scaleX
     * @param {?} stepDist
     * @return {?}
     */
    IgxSliderThumbComponent.prototype.stepToProceed = /**
     * @private
     * @param {?} scaleX
     * @param {?} stepDist
     * @return {?}
     */
    function (scaleX, stepDist) {
        return Math.round(scaleX / stepDist) * this.step;
    };
    IgxSliderThumbComponent.decorators = [
        { type: Component, args: [{
                    selector: 'igx-thumb',
                    template: "<span class=\"label\">\n    <ng-container *ngTemplateOutlet=\"templateRef ? templateRef : thumbFromDefaultTemplate; context: context\"></ng-container>\n</span>\n<span class=\"dot\"></span>\n\n\n<ng-template #thumbFromDefaultTemplate>\n    {{ value }}\n</ng-template>\n"
                }] }
    ];
    /** @nocollapse */
    IgxSliderThumbComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    IgxSliderThumbComponent.propDecorators = {
        value: [{ type: Input }],
        continuous: [{ type: Input }],
        thumbLabelVisibilityDuration: [{ type: Input }],
        disabled: [{ type: Input }],
        onPan: [{ type: Input }],
        stepDistance: [{ type: Input }],
        step: [{ type: Input }],
        fromHandler: [{ type: Input }],
        templateRef: [{ type: Input }],
        context: [{ type: Input }],
        type: [{ type: Input }],
        onThumbValueChange: [{ type: Output }],
        onChange: [{ type: Output }],
        tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
        thumbFromClass: [{ type: HostBinding, args: ['class.igx-slider__thumb-from',] }],
        thumbToClass: [{ type: HostBinding, args: ['class.igx-slider__thumb-to',] }],
        thumbFromActiveClass: [{ type: HostBinding, args: ['class.igx-slider__thumb-from--active',] }],
        thumbToActiveClass: [{ type: HostBinding, args: ['class.igx-slider__thumb-to--active',] }],
        onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
        onBlur: [{ type: HostListener, args: ['blur',] }],
        onFocusListener: [{ type: HostListener, args: ['focus',] }]
    };
    return IgxSliderThumbComponent;
}());
export { IgxSliderThumbComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxSliderThumbComponent.prototype._timer;
    /**
     * @type {?}
     * @private
     */
    IgxSliderThumbComponent.prototype._isActiveLabel;
    /**
     * @type {?}
     * @private
     */
    IgxSliderThumbComponent.prototype._destroy$;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.isActive;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.value;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.continuous;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.thumbLabelVisibilityDuration;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.disabled;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.onPan;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.stepDistance;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.step;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.fromHandler;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.templateRef;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.context;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.type;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.onThumbValueChange;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.onChange;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.tabindex;
    /**
     * @type {?}
     * @private
     */
    IgxSliderThumbComponent.prototype._elementRef;
}
var IgxSliderThumbModule = /** @class */ (function () {
    function IgxSliderThumbModule() {
    }
    IgxSliderThumbModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IgxSliderThumbComponent],
                    imports: [CommonModule],
                    exports: [IgxSliderThumbComponent]
                },] }
    ];
    return IgxSliderThumbModule;
}());
export { IgxSliderThumbModule };
//# sourceMappingURL=data:application/json;base64,