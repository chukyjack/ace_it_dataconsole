/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ElementRef, Inject, QueryList, ContentChild, ContentChildren, Optional, forwardRef } from '@angular/core';
import { takeUntil, take } from 'rxjs/operators';
import { IgxForOfDirective } from '../directives/for-of/for_of.directive';
import { IGX_COMBO_COMPONENT } from './combo.common';
import { Navigate } from '../drop-down/drop-down.common';
import { IGX_DROPDOWN_BASE } from '../drop-down/drop-down.common';
import { IgxDropDownComponent } from '../drop-down/drop-down.component';
import { DropDownActionKey } from '../drop-down/drop-down.common';
import { IgxComboAddItemComponent } from './combo-add-item.component';
import { IgxComboAPIService } from './combo.api';
import { IgxSelectionAPIService } from '../core/selection';
import { IgxComboItemComponent } from './combo-item.component';
import { DisplayDensityToken } from '../core/density';
/**
 * @hidden
 */
var IgxComboDropDownComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxComboDropDownComponent, _super);
    function IgxComboDropDownComponent(elementRef, cdr, selection, combo, comboAPI, _displayDensityOptions) {
        var _this = _super.call(this, elementRef, cdr, selection, _displayDensityOptions) || this;
        _this.elementRef = elementRef;
        _this.cdr = cdr;
        _this.selection = selection;
        _this.combo = combo;
        _this.comboAPI = comboAPI;
        _this._displayDensityOptions = _displayDensityOptions;
        _this._scrollPosition = 0;
        /**
         * @hidden
         * \@internal
         */
        _this.children = null;
        _this.scrollHandler = function () {
            _this.comboAPI.disableTransitions = true;
        };
        return _this;
    }
    Object.defineProperty(IgxComboDropDownComponent.prototype, "scrollContainer", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            return this.verticalScrollContainer.dc.location.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboDropDownComponent.prototype, "isScrolledToLast", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            /** @type {?} */
            var scrollTop = this.verticalScrollContainer.getVerticalScroll().scrollTop;
            /** @type {?} */
            var scrollHeight = this.verticalScrollContainer.getVerticalScroll().scrollHeight;
            return Math.floor(scrollTop + this.verticalScrollContainer.igxForContainerSize) === scrollHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboDropDownComponent.prototype, "lastVisibleIndex", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            return this.combo.totalItemCount ?
                Math.floor(this.combo.itemsMaxHeight / this.combo.itemHeight) :
                this.items.length - 1;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.onFocus = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        this._focusedItem = this._focusedItem || this.items[0];
        if (this._focusedItem) {
            this._focusedItem.focused = true;
        }
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @param {?=} evt
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.onBlur = /**
     * @hidden \@internal
     * @param {?=} evt
     * @return {?}
     */
    function (evt) {
        if (this._focusedItem) {
            this._focusedItem.focused = false;
            this._focusedItem = null;
        }
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.onToggleOpened = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        this.onOpened.emit();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.navigatePrev = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this._focusedItem.itemIndex === 0 && this.verticalScrollContainer.state.startIndex === 0) {
            this.combo.focusSearchInput(false);
        }
        else {
            _super.prototype.navigatePrev.call(this);
        }
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.navigateFirst = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var vContainer = this.verticalScrollContainer;
        if (vContainer.state.startIndex === 0) {
            _super.prototype.navigateItem.call(this, 0);
            return;
        }
        vContainer.scrollTo(0);
        this.subscribeNext(vContainer, function () {
            _this.combo.triggerCheck();
            _super.prototype.navigateItem.call(_this, 0);
            _this.combo.triggerCheck();
        });
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.navigateLast = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var vContainer = this.verticalScrollContainer;
        /** @type {?} */
        var scrollTarget = this.combo.totalItemCount ?
            this.combo.totalItemCount - 1 :
            Math.max(this.combo.data.length - 1, vContainer.igxForOf.length - 1);
        if (vContainer.igxForOf.length <= vContainer.state.startIndex + vContainer.state.chunkSize) {
            _super.prototype.navigateItem.call(this, this.items.length - 1);
            return;
        }
        vContainer.scrollTo(scrollTarget);
        this.subscribeNext(vContainer, function () {
            _this.combo.triggerCheck();
            _super.prototype.navigateItem.call(_this, _this.items.length - 1);
            _this.combo.triggerCheck();
        });
    };
    /**
     * @private
     * @param {?} direction
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.navigateRemoteItem = /**
     * @private
     * @param {?} direction
     * @return {?}
     */
    function (direction) {
        var _this = this;
        /** @type {?} */
        var vContainer = this.verticalScrollContainer;
        vContainer.addScrollTop(direction * this.combo.itemHeight);
        this.subscribeNext(vContainer, function () {
            if (direction === Navigate.Up) {
                _super.prototype.navigateItem.call(_this, 0);
            }
            else {
                _super.prototype.navigateItem.call(_this, _this.focusedItem.itemIndex);
            }
        });
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @param {?} item
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.selectItem = /**
     * @hidden \@internal
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item === null || item === undefined) {
            return;
        }
        this.comboAPI.set_selected_item(item.itemID);
        this._focusedItem = item;
    };
    /**
     * @private
     * @param {?=} newIndex
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.navigateDown = /**
     * @private
     * @param {?=} newIndex
     * @return {?}
     */
    function (newIndex) {
        var _this = this;
        /** @type {?} */
        var vContainer = this.verticalScrollContainer;
        /** @type {?} */
        var allData = vContainer.igxForOf;
        /** @type {?} */
        var extraScroll = this.combo.isAddButtonVisible() ? 1 : 0;
        /** @type {?} */
        var focusedItem = this.focusedItem;
        /** @type {?} */
        var items = this.items;
        /** @type {?} */
        var children = this.sortedChildren;
        if (focusedItem) {
            if (this.isAddItemFocused()) {
                return;
            }
            if (focusedItem.value === allData[allData.length - 1]) {
                this.focusAddItemButton();
                return;
            }
        }
        /** @type {?} */
        var targetDataIndex = newIndex === -1 ? this.itemIndexInData(this.focusedItem.itemIndex) + 1 : this.itemIndexInData(newIndex);
        /** @type {?} */
        var lastLoadedIndex = vContainer.state.startIndex + vContainer.state.chunkSize - 1;
        if (targetDataIndex < lastLoadedIndex) { // If no scroll is required
            if (newIndex !== -1 || newIndex === children.length - 1 - extraScroll) { // Use normal nav for visible items
                _super.prototype.navigateItem.call(this, newIndex);
            }
        }
        else if (this.isScrolledToLast && targetDataIndex === lastLoadedIndex) { // If already at bottom and target is last item
            _super.prototype.navigateItem.call(this, items.length - 1 - extraScroll); // Focus the last item (excluding Add Button)
        }
        else { // If scroll is required
            // If scroll is required
            // If item is header, find next non-header index
            /** @type {?} */
            var addedIndex_1 = allData[targetDataIndex].isHeader ? this.findNextFocusableItem(targetDataIndex, Navigate.Down, allData) : 0;
            targetDataIndex += addedIndex_1; // Add steps to the target index
            if (addedIndex_1 === -1) { // If there are no more non-header items & add button is visible
                this.focusAddItemButton();
            }
            else if (targetDataIndex === allData.length - 1 && !this.isScrolledToLast) {
                // If target is very last loaded item, but scroll is not at the bottom (item is in DOM but not visible)
                vContainer.scrollTo(targetDataIndex); // This will not trigger `onChunkLoad`
                _super.prototype.navigateItem.call(this, items.length - 1 - extraScroll); // Target last item (excluding Add Button)
            }
            else { // Perform virtual scroll
                this.subscribeNext(vContainer, function () {
                    // children = all items in the DD (including addItemButton)
                    // length - 2 instead of -1, because we do not want to focus the last loaded item (in DOM, but not visible)
                    // Focus last item (excluding Add Button)
                    _super.prototype.navigateItem.call(_this, !addedIndex_1 ? children[children.length - 1 - extraScroll].itemIndex : _this.items.length - 2);
                });
                vContainer.scrollTo(targetDataIndex); // Perform virtual scroll
            }
        }
    };
    /**
     * @private
     * @param {?=} newIndex
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.navigateUp = /**
     * @private
     * @param {?=} newIndex
     * @return {?}
     */
    function (newIndex) {
        var _this = this;
        /** @type {?} */
        var vContainer = this.verticalScrollContainer;
        /** @type {?} */
        var allData = vContainer.igxForOf;
        /** @type {?} */
        var focusedItem = this.focusedItem;
        if (focusedItem.value === allData.find(function (e) { return !e.isHeader && !e.hidden; })) { // If this is the very first non-header item
            this.focusComboSearch(); // Focus combo search
            return;
        }
        /** @type {?} */
        var targetDataIndex = newIndex === -1 ? this.itemIndexInData(focusedItem.itemIndex) - 1 : this.itemIndexInData(newIndex);
        if (newIndex !== -1) { // If no scroll is required
            if (this.isScrolledToLast && targetDataIndex === vContainer.state.startIndex) {
                // If virt scrollbar is @ bottom, first item is in DOM but not visible
                vContainer.scrollTo(targetDataIndex); // This will not trigger `onChunkLoad`
                _super.prototype.navigateItem.call(this, 0); // Focus first visible item
            }
            else {
                _super.prototype.navigateItem.call(this, newIndex); // Use normal navigation
            }
        }
        else { // Perform virtual scroll
            // Perform virtual scroll
            // If item is header, find next non-header index
            /** @type {?} */
            var addedIndex = allData[targetDataIndex].isHeader ? this.findNextFocusableItem(targetDataIndex, Navigate.Up, allData) : 0;
            targetDataIndex -= addedIndex; // Add steps to targetDataIndex
            if (addedIndex === -1) { // If there is no non-header
                vContainer.scrollTo(0);
                this.focusComboSearch(); // Focus combo search;
            }
            else {
                this.subscribeNext(vContainer, function () {
                    _super.prototype.navigateItem.call(_this, 0); // Focus the first loaded item
                });
                vContainer.scrollTo(targetDataIndex); // Perform virtual scroll
            }
        }
    };
    /**
     * @protected
     * @param {?} direction
     * @param {?=} currentIndex
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.navigate = /**
     * @protected
     * @param {?} direction
     * @param {?=} currentIndex
     * @return {?}
     */
    function (direction, currentIndex) {
        /** @type {?} */
        var index = -1;
        if (this._focusedItem) {
            index = currentIndex ? currentIndex : this._focusedItem.itemIndex;
        }
        /** @type {?} */
        var newIndex = this.getNearestSiblingFocusableItemIndex(index, direction);
        /** @type {?} */
        var vContainer = this.verticalScrollContainer;
        /** @type {?} */
        var notVirtual = vContainer.dc.instance.notVirtual;
        if (notVirtual || !direction) { // If list has no scroll OR no direction is passed
            _super.prototype.navigateItem.call(this, newIndex); // use default scroll
        }
        else if (vContainer && vContainer.totalItemCount && vContainer.totalItemCount !== 0) { // Remote scroll
            if (newIndex !== -1 &&
                this.items[newIndex].isVisible(direction)) {
                this.navigateItem(newIndex);
            }
            else {
                this.navigateRemoteItem(direction);
            }
        }
        else {
            if (direction === Navigate.Up) { // Navigate UP
                this.navigateUp(newIndex);
            }
            else if (direction === Navigate.Down) { // Navigate DOWN
                this.navigateDown(newIndex);
            }
        }
    };
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.itemIndexInData = /**
     * @private
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.sortedChildren.findIndex(function (e) { return e.itemIndex === index; }) + this.verticalScrollContainer.state.startIndex;
    };
    /**
     * @private
     * @param {?} indexInData
     * @param {?} direction
     * @param {?} data
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.findNextFocusableItem = /**
     * @private
     * @param {?} indexInData
     * @param {?} direction
     * @param {?} data
     * @return {?}
     */
    function (indexInData, direction, data) {
        if (direction === Navigate.Up) {
            return tslib_1.__spread(data).splice(0, indexInData + 1).reverse().findIndex(function (e) { return !e.isHeader; });
        }
        return tslib_1.__spread(data).splice(indexInData, data.length - 1).findIndex(function (e) { return !e.isHeader; });
    };
    /**
     * @private
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.focusComboSearch = /**
     * @private
     * @return {?}
     */
    function () {
        this.combo.focusSearchInput(false);
        if (this.focusedItem) {
            this.focusedItem.focused = false;
        }
        this.focusedItem = null;
    };
    /**
     * @private
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.focusAddItemButton = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.combo.isAddButtonVisible()) {
            _super.prototype.navigateItem.call(this, this.items.length - 1);
        }
    };
    /**
     * @private
     * @param {?} virtualContainer
     * @param {?} callback
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.subscribeNext = /**
     * @private
     * @param {?} virtualContainer
     * @param {?} callback
     * @return {?}
     */
    function (virtualContainer, callback) {
        virtualContainer.onChunkLoad.pipe(take(1), takeUntil(this.destroy$)).subscribe({
            next: function (e) {
                callback(e);
            }
        });
    };
    /**
     * @protected
     * @param {?} newItem
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.scrollToHiddenItem = /**
     * @protected
     * @param {?} newItem
     * @return {?}
     */
    function (newItem) { };
    Object.defineProperty(IgxComboDropDownComponent.prototype, "sortedChildren", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            if (this.children !== undefined) {
                return this.children.toArray()
                    .sort(function (a, b) {
                    return a.index - b.index;
                });
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxComboDropDownComponent.prototype, "items", {
        /**
         * Get all non-header items
         *
         * ```typescript
         * let myDropDownItems = this.dropdown.items;
         * ```
         */
        get: /**
         * Get all non-header items
         *
         * ```typescript
         * let myDropDownItems = this.dropdown.items;
         * ```
         * @return {?}
         */
        function () {
            var e_1, _a;
            /** @type {?} */
            var items = [];
            if (this.children !== undefined) {
                /** @type {?} */
                var sortedChildren = (/** @type {?} */ (this.sortedChildren));
                try {
                    for (var sortedChildren_1 = tslib_1.__values(sortedChildren), sortedChildren_1_1 = sortedChildren_1.next(); !sortedChildren_1_1.done; sortedChildren_1_1 = sortedChildren_1.next()) {
                        var child = sortedChildren_1_1.value;
                        if (!child.isHeader) {
                            items.push(child);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (sortedChildren_1_1 && !sortedChildren_1_1.done && (_a = sortedChildren_1.return)) _a.call(sortedChildren_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return items;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @protected
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.scrollToItem = /**
     * @protected
     * @return {?}
     */
    function () {
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @param {?} e
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.onToggleClosing = /**
     * @hidden \@internal
     * @param {?} e
     * @return {?}
     */
    function (e) {
        _super.prototype.onToggleClosing.call(this, e);
        this._scrollPosition = this.verticalScrollContainer.getVerticalScroll().scrollTop;
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.updateScrollPosition = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        this.verticalScrollContainer.getVerticalScroll().scrollTop = this._scrollPosition;
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @param {?} key
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.onItemActionKey = /**
     * @hidden \@internal
     * @param {?} key
     * @return {?}
     */
    function (key) {
        switch (key) {
            case DropDownActionKey.ENTER:
                this.handleEnter();
                break;
            case DropDownActionKey.SPACE:
                this.handleSpace();
                break;
            case DropDownActionKey.ESCAPE:
                this.close();
        }
    };
    /**
     * @private
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.handleEnter = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.isAddItemFocused()) {
            this.combo.addItemToCollection();
        }
        else {
            this.close();
        }
    };
    /**
     * @private
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.handleSpace = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.isAddItemFocused()) {
            return;
        }
        else {
            this.selectItem(this.focusedItem);
        }
    };
    /**
     * @private
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.isAddItemFocused = /**
     * @private
     * @return {?}
     */
    function () {
        return this.focusedItem instanceof IgxComboAddItemComponent;
    };
    /**
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.verticalScrollContainer.getVerticalScroll().addEventListener('scroll', this.scrollHandler);
    };
    /**
     *@hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxComboDropDownComponent.prototype.ngOnDestroy = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        this.verticalScrollContainer.getVerticalScroll().removeEventListener('scroll', this.scrollHandler);
        this.destroy$.next(true);
        this.destroy$.complete();
    };
    IgxComboDropDownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'igx-combo-drop-down',
                    template: "<div class=\"igx-drop-down__list\" igxToggle [style.width]=\"width\" [style.height]=\"height\"\n[style.maxHeight]=\"maxHeight\" [attr.id]=\"this.listId\" role=\"listbox\"\n    (onOpening)=\"onToggleOpening($event)\" (onOpened)=\"onToggleOpened()\"\n    (onClosing)=\"onToggleClosing($event)\" (onClosed)=\"onToggleClosed()\">\n    <ng-container *ngIf=\"!collapsed\">\n        <ng-content></ng-content>\n    </ng-container>\n</div>\n",
                    providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxComboDropDownComponent }]
                }] }
    ];
    /** @nocollapse */
    IgxComboDropDownComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: IgxSelectionAPIService },
        { type: undefined, decorators: [{ type: Inject, args: [IGX_COMBO_COMPONENT,] }] },
        { type: IgxComboAPIService },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
    ]; };
    IgxComboDropDownComponent.propDecorators = {
        children: [{ type: ContentChildren, args: [IgxComboItemComponent, { descendants: true },] }],
        verticalScrollContainer: [{ type: ContentChild, args: [forwardRef(function () { return IgxForOfDirective; }), { read: IgxForOfDirective },] }]
    };
    return IgxComboDropDownComponent;
}(IgxDropDownComponent));
export { IgxComboDropDownComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxComboDropDownComponent.prototype._scrollPosition;
    /**
     * @hidden
     * \@internal
     * @type {?}
     */
    IgxComboDropDownComponent.prototype.children;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxComboDropDownComponent.prototype.verticalScrollContainer;
    /**
     * @type {?}
     * @protected
     */
    IgxComboDropDownComponent.prototype.scrollHandler;
    /**
     * @type {?}
     * @protected
     */
    IgxComboDropDownComponent.prototype.elementRef;
    /**
     * @type {?}
     * @protected
     */
    IgxComboDropDownComponent.prototype.cdr;
    /**
     * @type {?}
     * @protected
     */
    IgxComboDropDownComponent.prototype.selection;
    /** @type {?} */
    IgxComboDropDownComponent.prototype.combo;
    /**
     * @type {?}
     * @protected
     */
    IgxComboDropDownComponent.prototype.comboAPI;
    /**
     * @type {?}
     * @protected
     */
    IgxComboDropDownComponent.prototype._displayDensityOptions;
}
//# sourceMappingURL=data:application/json;base64,