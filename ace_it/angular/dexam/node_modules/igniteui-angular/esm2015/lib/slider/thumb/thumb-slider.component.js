/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, Component, Input, HostListener, ElementRef, HostBinding, Output, EventEmitter, TemplateRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { SliderHandle } from '../slider.component';
/**
 * @hidden
 */
export class IgxSliderThumbComponent {
    /**
     * @param {?} _elementRef
     */
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this._isActiveLabel = false;
        this._destroy$ = new Subject();
        this.isActive = false;
        this.onThumbValueChange = new EventEmitter();
        this.onChange = new EventEmitter();
        this.tabindex = 0;
    }
    /**
     * @return {?}
     */
    get thumbFromClass() {
        return this.fromHandler;
    }
    /**
     * @return {?}
     */
    get thumbToClass() {
        return !this.fromHandler;
    }
    /**
     * @return {?}
     */
    get thumbFromActiveClass() {
        return this.fromHandler && this._isActiveLabel;
    }
    /**
     * @return {?}
     */
    get thumbToActiveClass() {
        return !this.fromHandler && this._isActiveLabel;
    }
    /**
     * @return {?}
     */
    get nativeElement() {
        return this._elementRef.nativeElement;
    }
    /**
     * @private
     * @return {?}
     */
    get thumbPositionX() {
        /** @type {?} */
        const thumbBounderies = this.nativeElement.getBoundingClientRect();
        /** @type {?} */
        const thumbCenter = (thumbBounderies.right - thumbBounderies.left) / 2;
        return thumbBounderies.left + thumbCenter;
    }
    /**
     * @return {?}
     */
    get destroy() {
        return this._destroy$;
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnInit() {
        this.onPan
            .pipe(takeUntil(this._destroy$))
            .subscribe(mouseX => this.updateThumbValue(mouseX));
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnDestroy() {
        this._destroy$.next(true);
        this._destroy$.complete();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyDown(event) {
        if (this.disabled) {
            return;
        }
        /** @type {?} */
        let increment = 0;
        if (event.key.endsWith('Left')) {
            increment = this.step * -1;
        }
        else if (event.key.endsWith('Right')) {
            increment = this.step;
        }
        else {
            return;
        }
        this.onChange.emit();
        this.onThumbValueChange.emit(increment);
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.isActive = false;
    }
    /**
     * @return {?}
     */
    onFocusListener() {
        this.isActive = true;
    }
    /**
     * @return {?}
     */
    showThumbLabel() {
        if (this.disabled) {
            return;
        }
        if (this.continuous) {
            return;
        }
        if (this._timer !== null) {
            clearTimeout(this._timer);
        }
        this._isActiveLabel = true;
    }
    /**
     * @return {?}
     */
    hideThumbLabel() {
        if (this.disabled) {
            return;
        }
        if (this.continuous) {
            return;
        }
        this._timer = setTimeout(() => this._isActiveLabel = false, this.thumbLabelVisibilityDuration);
    }
    /**
     * @private
     * @param {?} mouseX
     * @return {?}
     */
    updateThumbValue(mouseX) {
        /** @type {?} */
        const updateValue = this.calculateTrackUpdate(mouseX);
        if (this.isActive && updateValue !== 0) {
            this.onThumbValueChange.emit(updateValue);
        }
    }
    /**
     * @private
     * @param {?} mouseX
     * @return {?}
     */
    calculateTrackUpdate(mouseX) {
        /** @type {?} */
        const scaleX = mouseX - this.thumbPositionX;
        /** @type {?} */
        const stepDistanceCenter = this.stepDistance / 2;
        // If the thumb scale range (slider update) is less th√†n a half step,
        // the position stays the same.
        /** @type {?} */
        const scaleXPositive = Math.abs(scaleX);
        if (scaleXPositive < stepDistanceCenter) {
            return 0;
        }
        return this.stepToProceed(scaleX, this.stepDistance);
    }
    /**
     * @private
     * @param {?} scaleX
     * @param {?} stepDist
     * @return {?}
     */
    stepToProceed(scaleX, stepDist) {
        return Math.round(scaleX / stepDist) * this.step;
    }
}
IgxSliderThumbComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-thumb',
                template: "<span class=\"label\">\n    <ng-container *ngTemplateOutlet=\"templateRef ? templateRef : thumbFromDefaultTemplate; context: context\"></ng-container>\n</span>\n<span class=\"dot\"></span>\n\n\n<ng-template #thumbFromDefaultTemplate>\n    {{ value }}\n</ng-template>\n"
            }] }
];
/** @nocollapse */
IgxSliderThumbComponent.ctorParameters = () => [
    { type: ElementRef }
];
IgxSliderThumbComponent.propDecorators = {
    value: [{ type: Input }],
    continuous: [{ type: Input }],
    thumbLabelVisibilityDuration: [{ type: Input }],
    disabled: [{ type: Input }],
    onPan: [{ type: Input }],
    stepDistance: [{ type: Input }],
    step: [{ type: Input }],
    fromHandler: [{ type: Input }],
    templateRef: [{ type: Input }],
    context: [{ type: Input }],
    type: [{ type: Input }],
    onThumbValueChange: [{ type: Output }],
    onChange: [{ type: Output }],
    tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    thumbFromClass: [{ type: HostBinding, args: ['class.igx-slider__thumb-from',] }],
    thumbToClass: [{ type: HostBinding, args: ['class.igx-slider__thumb-to',] }],
    thumbFromActiveClass: [{ type: HostBinding, args: ['class.igx-slider__thumb-from--active',] }],
    thumbToActiveClass: [{ type: HostBinding, args: ['class.igx-slider__thumb-to--active',] }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    onBlur: [{ type: HostListener, args: ['blur',] }],
    onFocusListener: [{ type: HostListener, args: ['focus',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxSliderThumbComponent.prototype._timer;
    /**
     * @type {?}
     * @private
     */
    IgxSliderThumbComponent.prototype._isActiveLabel;
    /**
     * @type {?}
     * @private
     */
    IgxSliderThumbComponent.prototype._destroy$;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.isActive;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.value;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.continuous;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.thumbLabelVisibilityDuration;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.disabled;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.onPan;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.stepDistance;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.step;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.fromHandler;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.templateRef;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.context;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.type;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.onThumbValueChange;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.onChange;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.tabindex;
    /**
     * @type {?}
     * @private
     */
    IgxSliderThumbComponent.prototype._elementRef;
}
export class IgxSliderThumbModule {
}
IgxSliderThumbModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxSliderThumbComponent],
                imports: [CommonModule],
                exports: [IgxSliderThumbComponent]
            },] }
];
//# sourceMappingURL=data:application/json;base64,