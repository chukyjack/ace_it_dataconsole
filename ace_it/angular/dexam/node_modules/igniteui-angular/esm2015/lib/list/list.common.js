/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, TemplateRef } from '@angular/core';
/**
 * @record
 */
export function IListChild() { }
if (false) {
    /** @type {?} */
    IListChild.prototype.index;
}
/**
 * @hidden
 * @abstract
 */
export class IgxListBase {
}
if (false) {
    /** @type {?} */
    IgxListBase.prototype.onItemClicked;
    /** @type {?} */
    IgxListBase.prototype.allowLeftPanning;
    /** @type {?} */
    IgxListBase.prototype.allowRightPanning;
    /** @type {?} */
    IgxListBase.prototype.panEndTriggeringThreshold;
    /** @type {?} */
    IgxListBase.prototype.onLeftPan;
    /** @type {?} */
    IgxListBase.prototype.onRightPan;
    /** @type {?} */
    IgxListBase.prototype.onPanStateChange;
    /** @type {?} */
    IgxListBase.prototype.children;
    /** @type {?} */
    IgxListBase.prototype.listItemLeftPanningTemplate;
    /** @type {?} */
    IgxListBase.prototype.listItemRightPanningTemplate;
}
/** @enum {number} */
const IgxListPanState = {
    NONE: 0, LEFT: 1, RIGHT: 2,
};
export { IgxListPanState };
IgxListPanState[IgxListPanState.NONE] = 'NONE';
IgxListPanState[IgxListPanState.LEFT] = 'LEFT';
IgxListPanState[IgxListPanState.RIGHT] = 'RIGHT';
export class IgxEmptyListTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
IgxEmptyListTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxEmptyList]'
            },] }
];
/** @nocollapse */
IgxEmptyListTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    IgxEmptyListTemplateDirective.prototype.template;
}
export class IgxDataLoadingTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
IgxDataLoadingTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxDataLoading]'
            },] }
];
/** @nocollapse */
IgxDataLoadingTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    IgxDataLoadingTemplateDirective.prototype.template;
}
export class IgxListItemLeftPanningTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
IgxListItemLeftPanningTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxListItemLeftPanning]'
            },] }
];
/** @nocollapse */
IgxListItemLeftPanningTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    IgxListItemLeftPanningTemplateDirective.prototype.template;
}
export class IgxListItemRightPanningTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
IgxListItemRightPanningTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxListItemRightPanning]'
            },] }
];
/** @nocollapse */
IgxListItemRightPanningTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    IgxListItemRightPanningTemplateDirective.prototype.template;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5jb21tb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2xpc3QvbGlzdC5jb21tb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUEyQixNQUFNLGVBQWUsQ0FBQzs7OztBQUVoRixnQ0FFQzs7O0lBREcsMkJBQWM7Ozs7OztBQUlsQixNQUFNLE9BQWdCLFdBQVc7Q0FXaEM7OztJQVZHLG9DQUFpQzs7SUFDakMsdUNBQTBCOztJQUMxQix3Q0FBMkI7O0lBQzNCLGdEQUFrQzs7SUFDbEMsZ0NBQTZCOztJQUM3QixpQ0FBOEI7O0lBQzlCLHVDQUFvQzs7SUFDcEMsK0JBQXlCOztJQUN6QixrREFBcUU7O0lBQ3JFLG1EQUF1RTs7OztJQUc3QyxPQUFJLEVBQUUsT0FBSSxFQUFFLFFBQUs7Ozs7OztBQUsvQyxNQUFNLE9BQU8sNkJBQTZCOzs7O0lBQ3RDLFlBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUksQ0FBQzs7O1lBSnJELFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsZ0JBQWdCO2FBQzdCOzs7O1lBeEJtQixXQUFXOzs7O0lBMEJmLGlEQUFpQzs7QUFNakQsTUFBTSxPQUFPLCtCQUErQjs7OztJQUN4QyxZQUFtQixRQUEwQjtRQUExQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUFJLENBQUM7OztZQUpyRCxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjthQUMvQjs7OztZQS9CbUIsV0FBVzs7OztJQWlDZixtREFBaUM7O0FBTWpELE1BQU0sT0FBTyx1Q0FBdUM7Ozs7SUFDaEQsWUFBbUIsUUFBMEI7UUFBMUIsYUFBUSxHQUFSLFFBQVEsQ0FBa0I7SUFBSSxDQUFDOzs7WUFKckQsU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSwwQkFBMEI7YUFDdkM7Ozs7WUF0Q21CLFdBQVc7Ozs7SUF3Q2YsMkRBQWlDOztBQU1qRCxNQUFNLE9BQU8sd0NBQXdDOzs7O0lBQ2pELFlBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUksQ0FBQzs7O1lBSnJELFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsMkJBQTJCO2FBQ3hDOzs7O1lBN0NtQixXQUFXOzs7O0lBK0NmLDREQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgVGVtcGxhdGVSZWYsIEV2ZW50RW1pdHRlciwgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUxpc3RDaGlsZCB7XG4gICAgaW5kZXg6IG51bWJlcjtcbn1cblxuLyoqIEBoaWRkZW4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBJZ3hMaXN0QmFzZSB7XG4gICAgb25JdGVtQ2xpY2tlZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgYWxsb3dMZWZ0UGFubmluZzogYm9vbGVhbjtcbiAgICBhbGxvd1JpZ2h0UGFubmluZzogYm9vbGVhbjtcbiAgICBwYW5FbmRUcmlnZ2VyaW5nVGhyZXNob2xkOiBudW1iZXI7XG4gICAgb25MZWZ0UGFuOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvblJpZ2h0UGFuOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvblBhblN0YXRlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjaGlsZHJlbjogUXVlcnlMaXN0PGFueT47XG4gICAgbGlzdEl0ZW1MZWZ0UGFubmluZ1RlbXBsYXRlOiBJZ3hMaXN0SXRlbUxlZnRQYW5uaW5nVGVtcGxhdGVEaXJlY3RpdmU7XG4gICAgbGlzdEl0ZW1SaWdodFBhbm5pbmdUZW1wbGF0ZTogSWd4TGlzdEl0ZW1SaWdodFBhbm5pbmdUZW1wbGF0ZURpcmVjdGl2ZTtcbn1cblxuZXhwb3J0IGVudW0gSWd4TGlzdFBhblN0YXRlIHsgTk9ORSwgTEVGVCwgUklHSFQgfVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hFbXB0eUxpc3RdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hFbXB0eUxpc3RUZW1wbGF0ZURpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7IH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4RGF0YUxvYWRpbmddJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hEYXRhTG9hZGluZ1RlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hMaXN0SXRlbUxlZnRQYW5uaW5nXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4TGlzdEl0ZW1MZWZ0UGFubmluZ1RlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hMaXN0SXRlbVJpZ2h0UGFubmluZ10nXG59KVxuZXhwb3J0IGNsYXNzIElneExpc3RJdGVtUmlnaHRQYW5uaW5nVGVtcGxhdGVEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PikgeyB9XG59XG4iXX0=