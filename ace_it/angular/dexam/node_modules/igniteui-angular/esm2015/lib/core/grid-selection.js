/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone } from '@angular/core';
/**
 * @record
 */
export function GridSelectionRange() { }
if (false) {
    /** @type {?} */
    GridSelectionRange.prototype.rowStart;
    /** @type {?} */
    GridSelectionRange.prototype.rowEnd;
    /** @type {?} */
    GridSelectionRange.prototype.columnStart;
    /** @type {?} */
    GridSelectionRange.prototype.columnEnd;
}
/**
 * @record
 */
export function ISelectionNode() { }
if (false) {
    /** @type {?} */
    ISelectionNode.prototype.row;
    /** @type {?} */
    ISelectionNode.prototype.column;
}
/**
 * @record
 */
function ISelectionKeyboardState() { }
if (false) {
    /** @type {?} */
    ISelectionKeyboardState.prototype.node;
    /** @type {?} */
    ISelectionKeyboardState.prototype.shift;
    /** @type {?} */
    ISelectionKeyboardState.prototype.range;
    /** @type {?} */
    ISelectionKeyboardState.prototype.active;
}
/**
 * @record
 */
function ISelectionPointerState() { }
if (false) {
    /** @type {?} */
    ISelectionPointerState.prototype.ctrl;
    /** @type {?} */
    ISelectionPointerState.prototype.primaryButton;
}
// TODO: Refactor - export in a separate file
export class IgxRow {
    /**
     * @param {?} id
     * @param {?} index
     * @param {?} data
     */
    constructor(id, index, data) {
        this.id = id;
        this.index = index;
        this.data = data;
    }
    /**
     * @return {?}
     */
    createEditEventArgs() {
        return {
            rowID: this.id,
            oldValue: Object.assign({}, this.data),
            newValue: this.newData,
            cancel: false
        };
    }
}
if (false) {
    /** @type {?} */
    IgxRow.prototype.transactionState;
    /** @type {?} */
    IgxRow.prototype.state;
    /** @type {?} */
    IgxRow.prototype.newData;
    /** @type {?} */
    IgxRow.prototype.id;
    /** @type {?} */
    IgxRow.prototype.index;
    /** @type {?} */
    IgxRow.prototype.data;
}
export class IgxCell {
    /**
     * @param {?} id
     * @param {?} rowIndex
     * @param {?} column
     * @param {?} value
     * @param {?} editValue
     * @param {?} rowData
     */
    constructor(id, rowIndex, column, value, editValue, rowData) {
        this.id = id;
        this.rowIndex = rowIndex;
        this.column = column;
        this.value = value;
        this.editValue = editValue;
        this.rowData = rowData;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    castToNumber(value) {
        if (this.column.dataType === 'number' && !this.column.inlineEditorTemplate) {
            /** @type {?} */
            const v = parseFloat(value);
            return !isNaN(v) && isFinite(v) ? v : 0;
        }
        return value;
    }
    /**
     * @return {?}
     */
    createEditEventArgs() {
        return {
            rowID: this.id.rowID,
            cellID: this.id,
            oldValue: this.value,
            newValue: this.editValue,
            cancel: false
        };
    }
}
if (false) {
    /** @type {?} */
    IgxCell.prototype.primaryKey;
    /** @type {?} */
    IgxCell.prototype.state;
    /** @type {?} */
    IgxCell.prototype.id;
    /** @type {?} */
    IgxCell.prototype.rowIndex;
    /** @type {?} */
    IgxCell.prototype.column;
    /** @type {?} */
    IgxCell.prototype.value;
    /** @type {?} */
    IgxCell.prototype.editValue;
    /** @type {?} */
    IgxCell.prototype.rowData;
}
export class IgxGridCRUDService {
    constructor() {
        this.cell = null;
        this.row = null;
    }
    /**
     * @param {?} cell
     * @return {?}
     */
    createCell(cell) {
        return new IgxCell(cell.cellID, cell.rowIndex, cell.column, cell.value, cell.value, cell.row.rowData);
    }
    /**
     * @param {?} cell
     * @return {?}
     */
    createRow(cell) {
        return new IgxRow(cell.id.rowID, cell.rowIndex, cell.rowData);
    }
    /**
     * @param {?} rowID
     * @return {?}
     */
    sameRow(rowID) {
        return this.row && this.row.id === rowID;
    }
    /**
     * @param {?} cell
     * @return {?}
     */
    sameCell(cell) {
        return (this.cell.id.rowID === cell.id.rowID &&
            this.cell.id.columnID === cell.id.columnID);
    }
    /**
     * @return {?}
     */
    get inEditMode() {
        return !!this.cell;
    }
    /**
     * @return {?}
     */
    get rowEditing() {
        return this.grid.rowEditable;
    }
    /**
     * @return {?}
     */
    get primaryKey() {
        return this.grid.primaryKey;
    }
    /**
     * @return {?}
     */
    beginRowEdit() {
        this.row = this.createRow(this.cell);
        /** @type {?} */
        const args = {
            rowID: this.row.id,
            oldValue: this.row.data,
            cancel: false
        };
        this.grid.onRowEditEnter.emit(args);
        if (args.cancel) {
            this.endRowEdit();
            return;
        }
        this.row.transactionState = this.grid.transactions.getAggregatedValue(this.row.id, true);
        this.grid.transactions.startPending();
        this.grid.openRowOverlay(this.row.id);
    }
    /**
     * @return {?}
     */
    endRowEdit() {
        this.row = null;
    }
    /**
     * @param {?} cell
     * @return {?}
     */
    begin(cell) {
        this.cell = this.createCell(cell);
        this.cell.primaryKey = this.primaryKey;
        /** @type {?} */
        const args = {
            cellID: this.cell.id,
            rowID: this.cell.id.rowID,
            oldValue: this.cell.value,
            cancel: false
        };
        this.grid.onCellEditEnter.emit(args);
        if (args.cancel) {
            this.end();
            return;
        }
        if (this.rowEditing) {
            if (!this.row) {
                this.beginRowEdit();
                return;
            }
            if (this.row && !this.sameRow(this.cell.id.rowID)) {
                this.grid.endEdit(true);
                this.cell = this.createCell(cell);
                this.beginRowEdit();
                return;
            }
        }
    }
    /**
     * @return {?}
     */
    end() {
        this.cell = null;
    }
    /**
     * @param {?} rowIndex
     * @param {?} columnIndex
     * @return {?}
     */
    isInEditMode(rowIndex, columnIndex) {
        if (!this.cell) {
            return false;
        }
        return this.cell.column.index === columnIndex && this.cell.rowIndex === rowIndex;
    }
}
IgxGridCRUDService.decorators = [
    { type: Injectable }
];
if (false) {
    /** @type {?} */
    IgxGridCRUDService.prototype.grid;
    /** @type {?} */
    IgxGridCRUDService.prototype.cell;
    /** @type {?} */
    IgxGridCRUDService.prototype.row;
}
export class IgxGridSelectionService {
    /**
     * @param {?} zone
     */
    constructor(zone) {
        this.zone = zone;
        this.dragMode = false;
        this.keyboardState = (/** @type {?} */ ({}));
        this.pointerState = (/** @type {?} */ ({}));
        this.selection = new Map();
        this.temp = new Map();
        this._ranges = new Set();
        this.initPointerState();
        this.initKeyboardState();
    }
    /**
     * Returns the current selected ranges in the grid from both
     * keyboard and pointer interactions
     * @return {?}
     */
    get ranges() {
        // The last action was keyboard + shift selection -> add it
        this.addKeyboardRange();
        /** @type {?} */
        const ranges = Array.from(this._ranges).map(range => JSON.parse(range));
        // No ranges but we have a focused cell -> add it
        if (!ranges.length && this.activeElement) {
            ranges.push(this.generateRange(this.activeElement));
        }
        return ranges;
    }
    /**
     * @return {?}
     */
    get primaryButton() {
        return this.pointerState.primaryButton;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set primaryButton(value) {
        this.pointerState.primaryButton = value;
    }
    /**
     * Resets the keyboard state
     * @return {?}
     */
    initKeyboardState() {
        this.keyboardState.node = null;
        this.keyboardState.shift = false;
        this.keyboardState.range = null;
        this.keyboardState.active = false;
    }
    /**
     * Resets the pointer state
     * @return {?}
     */
    initPointerState() {
        this.pointerState.node = null;
        this.pointerState.ctrl = false;
        this.pointerState.shift = false;
        this.pointerState.range = null;
        this.pointerState.primaryButton = true;
    }
    /**
     * Adds a single node.
     * Single clicks | Ctrl + single clicks on cells is the usual case.
     * @param {?} node
     * @return {?}
     */
    add(node) {
        this.selection.has(node.row) ? this.selection.get(node.row).add(node.column) :
            this.selection.set(node.row, new Set()).get(node.row).add(node.column);
        this._ranges.add(JSON.stringify(this.generateRange(node)));
    }
    /**
     * Adds the active keyboard range selection (if any) to the `ranges` meta.
     * @return {?}
     */
    addKeyboardRange() {
        if (this.keyboardState.range) {
            this._ranges.add(JSON.stringify(this.keyboardState.range));
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    remove(node) {
        if (this.selection.has(node.row)) {
            this.selection.get(node.row).delete(node.column);
        }
        if (this.isActiveNode(node)) {
            this.activeElement = null;
        }
        this._ranges.delete(JSON.stringify(this.generateRange(node)));
    }
    /**
     * @param {?} node
     * @return {?}
     */
    isInMap(node) {
        return (this.selection.has(node.row) && this.selection.get(node.row).has(node.column)) ||
            (this.temp.has(node.row) && this.temp.get(node.row).has(node.column));
    }
    /**
     * @param {?} node
     * @return {?}
     */
    selected(node) {
        return this.isActiveNode(node) || this.isInMap(node);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    isActiveNode(node) {
        if (this.activeElement) {
            return this.activeElement.column === node.column && this.activeElement.row === node.row;
        }
        return false;
    }
    /**
     * @param {?} node
     * @param {?=} state
     * @return {?}
     */
    addRangeMeta(node, state) {
        this._ranges.add(JSON.stringify(this.generateRange(node, state)));
    }
    /**
     * @param {?} node
     * @param {?=} state
     * @return {?}
     */
    removeRangeMeta(node, state) {
        this._ranges.delete(JSON.stringify(this.generateRange(node, state)));
    }
    /**
     * Generates a new selection range from the given `node`.
     * If `state` is passed instead it will generate the range based on the passed `node`
     * and the start node of the `state`.
     * @param {?} node
     * @param {?=} state
     * @return {?}
     */
    generateRange(node, state) {
        if (!state) {
            return {
                rowStart: node.row,
                rowEnd: node.row,
                columnStart: node.column,
                columnEnd: node.column
            };
        }
        const { row, column } = state.node;
        /** @type {?} */
        const rowStart = Math.min(node.row, row);
        /** @type {?} */
        const rowEnd = Math.max(node.row, row);
        /** @type {?} */
        const columnStart = Math.min(node.column, column);
        /** @type {?} */
        const columnEnd = Math.max(node.column, column);
        return { rowStart, rowEnd, columnStart, columnEnd };
    }
    /**
     *
     * @param {?} node
     * @param {?} shift
     * @param {?} shiftTab
     * @return {?}
     */
    keyboardStateOnKeydown(node, shift, shiftTab) {
        this.keyboardState.active = true;
        this.initPointerState();
        this.keyboardState.shift = shift && !shiftTab;
        // Kb navigation with shift and no previous node.
        // Clear the current selection init the start node.
        if (this.keyboardState.shift && !this.keyboardState.node) {
            this.clear();
            this.keyboardState.node = node;
        }
    }
    /**
     * @param {?} node
     * @param {?} emitter
     * @return {?}
     */
    keyboardStateOnFocus(node, emitter) {
        /** @type {?} */
        const kbState = this.keyboardState;
        // Focus triggered by keyboard navigation
        if (kbState.active) {
            // Start generating a range if shift is hold
            if (kbState.shift) {
                this.dragSelect(node, kbState);
                kbState.range = this.generateRange(node, kbState);
                emitter.emit(this.generateRange(node, kbState));
                return;
            }
            this.initKeyboardState();
            this.clear();
            this.add(node);
        }
    }
    /**
     * @param {?} node
     * @param {?} shift
     * @param {?} ctrl
     * @return {?}
     */
    pointerDown(node, shift, ctrl) {
        this.addKeyboardRange();
        this.initKeyboardState();
        this.pointerState.ctrl = ctrl;
        this.pointerState.shift = shift;
        // No ctrl key pressed - no multiple selection
        if (!ctrl) {
            this.clear();
        }
        if (shift) {
            // No previously 'clicked' node. Use the last active node.
            if (!this.pointerState.node) {
                this.pointerState.node = this.activeElement || node;
            }
            this.pointerDownShiftKey(node);
            this.clearTextSelection();
            return;
        }
        this.removeRangeMeta(node);
        this.pointerState.node = node;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    pointerDownShiftKey(node) {
        this.clear();
        this.selectRange(node, this.pointerState);
    }
    /**
     * @param {?} target
     * @param {?} source
     * @return {?}
     */
    mergeMap(target, source) {
        /** @type {?} */
        const iterator = source.entries();
        /** @type {?} */
        let pair = iterator.next();
        /** @type {?} */
        let key;
        /** @type {?} */
        let value;
        while (!pair.done) {
            [key, value] = pair.value;
            if (target.has(key)) {
                /** @type {?} */
                const newValue = target.get(key);
                value.forEach(record => newValue.add(record));
                target.set(key, newValue);
            }
            else {
                target.set(key, value);
            }
            pair = iterator.next();
        }
    }
    /**
     * @param {?} node
     * @param {?} event
     * @return {?}
     */
    pointerEnter(node, event) {
        // https://www.w3.org/TR/pointerevents/#the-button-property
        this.dragMode = event.buttons === 1 && event.button === -1;
        if (!this.dragMode) {
            return false;
        }
        this.clearTextSelection();
        // If the users triggers a drag-like event by first clicking outside the grid cells
        // and then enters in the grid body we may not have a initial pointer starting node.
        // Assume the first pointerenter node is where we start.
        if (!this.pointerState.node) {
            this.pointerState.node = node;
        }
        this.pointerState.ctrl ? this.selectRange(node, this.pointerState, this.temp) :
            this.dragSelect(node, this.pointerState);
        return true;
    }
    /**
     * @param {?} node
     * @param {?} emitter
     * @return {?}
     */
    pointerUp(node, emitter) {
        if (this.dragMode) {
            this.restoreTextSelection();
            this.addRangeMeta(node, this.pointerState);
            this.mergeMap(this.selection, this.temp);
            this.zone.runTask(() => emitter.emit(this.generateRange(node, this.pointerState)));
            this.temp.clear();
            this.dragMode = false;
            return true;
        }
        if (this.pointerState.shift) {
            this.clearTextSelection();
            this.restoreTextSelection();
            this.addRangeMeta(node, this.pointerState);
            emitter.emit(this.generateRange(node, this.pointerState));
            return true;
        }
        this.add(node);
        return false;
    }
    /**
     * @param {?} node
     * @param {?} state
     * @param {?=} collection
     * @return {?}
     */
    selectRange(node, state, collection = this.selection) {
        if (collection === this.temp) {
            collection.clear();
        }
        const { rowStart, rowEnd, columnStart, columnEnd } = this.generateRange(node, state);
        for (let i = rowStart; i <= rowEnd; i++) {
            for (let j = (/** @type {?} */ (columnStart)); j <= columnEnd; j++) {
                collection.has(i) ? collection.get(i).add(j) :
                    collection.set(i, new Set()).get(i).add(j);
            }
        }
    }
    /**
     * @param {?} node
     * @param {?} state
     * @return {?}
     */
    dragSelect(node, state) {
        if (!this.pointerState.ctrl) {
            this.selection.clear();
        }
        this.selectRange(node, state);
    }
    /**
     * @return {?}
     */
    clear() {
        this.selection.clear();
        this.temp.clear();
        this._ranges.clear();
    }
    /**
     * @return {?}
     */
    clearTextSelection() {
        /** @type {?} */
        const selection = window.getSelection();
        if (selection.rangeCount) {
            this._selectionRange = selection.getRangeAt(0);
            this._selectionRange.collapse(true);
            selection.removeAllRanges();
        }
    }
    /**
     * @return {?}
     */
    restoreTextSelection() {
        /** @type {?} */
        const selection = window.getSelection();
        if (!selection.rangeCount) {
            selection.addRange(this._selectionRange || document.createRange());
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    _moveSelectionChrome(node) {
        /** @type {?} */
        const selection = window.getSelection();
        selection.removeAllRanges();
        /** @type {?} */
        const range = new Range();
        range.selectNode(node);
        range.collapse(true);
        selection.addRange(range);
    }
}
IgxGridSelectionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
IgxGridSelectionService.ctorParameters = () => [
    { type: NgZone }
];
if (false) {
    /** @type {?} */
    IgxGridSelectionService.prototype.dragMode;
    /** @type {?} */
    IgxGridSelectionService.prototype.activeElement;
    /** @type {?} */
    IgxGridSelectionService.prototype.keyboardState;
    /** @type {?} */
    IgxGridSelectionService.prototype.pointerState;
    /** @type {?} */
    IgxGridSelectionService.prototype.selection;
    /** @type {?} */
    IgxGridSelectionService.prototype.temp;
    /** @type {?} */
    IgxGridSelectionService.prototype._ranges;
    /** @type {?} */
    IgxGridSelectionService.prototype._selectionRange;
    /**
     * @type {?}
     * @private
     */
    IgxGridSelectionService.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,