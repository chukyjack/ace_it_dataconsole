/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, Inject, QueryList, ContentChild, ContentChildren, Optional, forwardRef } from '@angular/core';
import { takeUntil, take } from 'rxjs/operators';
import { IgxForOfDirective } from '../directives/for-of/for_of.directive';
import { IGX_COMBO_COMPONENT } from './combo.common';
import { Navigate } from '../drop-down/drop-down.common';
import { IGX_DROPDOWN_BASE } from '../drop-down/drop-down.common';
import { IgxDropDownComponent } from '../drop-down/drop-down.component';
import { DropDownActionKey } from '../drop-down/drop-down.common';
import { IgxComboAddItemComponent } from './combo-add-item.component';
import { IgxComboAPIService } from './combo.api';
import { IgxSelectionAPIService } from '../core/selection';
import { IgxComboItemComponent } from './combo-item.component';
import { DisplayDensityToken } from '../core/density';
/**
 * @hidden
 */
export class IgxComboDropDownComponent extends IgxDropDownComponent {
    /**
     * @param {?} elementRef
     * @param {?} cdr
     * @param {?} selection
     * @param {?} combo
     * @param {?} comboAPI
     * @param {?} _displayDensityOptions
     */
    constructor(elementRef, cdr, selection, combo, comboAPI, _displayDensityOptions) {
        super(elementRef, cdr, selection, _displayDensityOptions);
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.selection = selection;
        this.combo = combo;
        this.comboAPI = comboAPI;
        this._displayDensityOptions = _displayDensityOptions;
        this._scrollPosition = 0;
        /**
         * @hidden
         * \@internal
         */
        this.children = null;
        this.scrollHandler = () => {
            this.comboAPI.disableTransitions = true;
        };
    }
    /**
     * @protected
     * @return {?}
     */
    get scrollContainer() {
        return this.verticalScrollContainer.dc.location.nativeElement;
    }
    /**
     * @protected
     * @return {?}
     */
    get isScrolledToLast() {
        /** @type {?} */
        const scrollTop = this.verticalScrollContainer.getVerticalScroll().scrollTop;
        /** @type {?} */
        const scrollHeight = this.verticalScrollContainer.getVerticalScroll().scrollHeight;
        return Math.floor(scrollTop + this.verticalScrollContainer.igxForContainerSize) === scrollHeight;
    }
    /**
     * @protected
     * @return {?}
     */
    get lastVisibleIndex() {
        return this.combo.totalItemCount ?
            Math.floor(this.combo.itemsMaxHeight / this.combo.itemHeight) :
            this.items.length - 1;
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    onFocus() {
        this._focusedItem = this._focusedItem || this.items[0];
        if (this._focusedItem) {
            this._focusedItem.focused = true;
        }
    }
    /**
     * @hidden \@internal
     * @param {?=} evt
     * @return {?}
     */
    onBlur(evt) {
        if (this._focusedItem) {
            this._focusedItem.focused = false;
            this._focusedItem = null;
        }
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    onToggleOpened() {
        this.onOpened.emit();
    }
    /**
     * @hidden
     * @return {?}
     */
    navigatePrev() {
        if (this._focusedItem.itemIndex === 0 && this.verticalScrollContainer.state.startIndex === 0) {
            this.combo.focusSearchInput(false);
        }
        else {
            super.navigatePrev();
        }
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    navigateFirst() {
        /** @type {?} */
        const vContainer = this.verticalScrollContainer;
        if (vContainer.state.startIndex === 0) {
            super.navigateItem(0);
            return;
        }
        vContainer.scrollTo(0);
        this.subscribeNext(vContainer, () => {
            this.combo.triggerCheck();
            super.navigateItem(0);
            this.combo.triggerCheck();
        });
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    navigateLast() {
        /** @type {?} */
        const vContainer = this.verticalScrollContainer;
        /** @type {?} */
        const scrollTarget = this.combo.totalItemCount ?
            this.combo.totalItemCount - 1 :
            Math.max(this.combo.data.length - 1, vContainer.igxForOf.length - 1);
        if (vContainer.igxForOf.length <= vContainer.state.startIndex + vContainer.state.chunkSize) {
            super.navigateItem(this.items.length - 1);
            return;
        }
        vContainer.scrollTo(scrollTarget);
        this.subscribeNext(vContainer, () => {
            this.combo.triggerCheck();
            super.navigateItem(this.items.length - 1);
            this.combo.triggerCheck();
        });
    }
    /**
     * @private
     * @param {?} direction
     * @return {?}
     */
    navigateRemoteItem(direction) {
        /** @type {?} */
        const vContainer = this.verticalScrollContainer;
        vContainer.addScrollTop(direction * this.combo.itemHeight);
        this.subscribeNext(vContainer, () => {
            if (direction === Navigate.Up) {
                super.navigateItem(0);
            }
            else {
                super.navigateItem(this.focusedItem.itemIndex);
            }
        });
    }
    /**
     * @hidden \@internal
     * @param {?} item
     * @return {?}
     */
    selectItem(item) {
        if (item === null || item === undefined) {
            return;
        }
        this.comboAPI.set_selected_item(item.itemID);
        this._focusedItem = item;
    }
    /**
     * @private
     * @param {?=} newIndex
     * @return {?}
     */
    navigateDown(newIndex) {
        /** @type {?} */
        const vContainer = this.verticalScrollContainer;
        /** @type {?} */
        const allData = vContainer.igxForOf;
        /** @type {?} */
        const extraScroll = this.combo.isAddButtonVisible() ? 1 : 0;
        /** @type {?} */
        const focusedItem = this.focusedItem;
        /** @type {?} */
        const items = this.items;
        /** @type {?} */
        const children = this.sortedChildren;
        if (focusedItem) {
            if (this.isAddItemFocused()) {
                return;
            }
            if (focusedItem.value === allData[allData.length - 1]) {
                this.focusAddItemButton();
                return;
            }
        }
        /** @type {?} */
        let targetDataIndex = newIndex === -1 ? this.itemIndexInData(this.focusedItem.itemIndex) + 1 : this.itemIndexInData(newIndex);
        /** @type {?} */
        const lastLoadedIndex = vContainer.state.startIndex + vContainer.state.chunkSize - 1;
        if (targetDataIndex < lastLoadedIndex) { // If no scroll is required
            if (newIndex !== -1 || newIndex === children.length - 1 - extraScroll) { // Use normal nav for visible items
                super.navigateItem(newIndex);
            }
        }
        else if (this.isScrolledToLast && targetDataIndex === lastLoadedIndex) { // If already at bottom and target is last item
            super.navigateItem(items.length - 1 - extraScroll); // Focus the last item (excluding Add Button)
        }
        else { // If scroll is required
            // If scroll is required
            // If item is header, find next non-header index
            /** @type {?} */
            const addedIndex = allData[targetDataIndex].isHeader ? this.findNextFocusableItem(targetDataIndex, Navigate.Down, allData) : 0;
            targetDataIndex += addedIndex; // Add steps to the target index
            if (addedIndex === -1) { // If there are no more non-header items & add button is visible
                this.focusAddItemButton();
            }
            else if (targetDataIndex === allData.length - 1 && !this.isScrolledToLast) {
                // If target is very last loaded item, but scroll is not at the bottom (item is in DOM but not visible)
                vContainer.scrollTo(targetDataIndex); // This will not trigger `onChunkLoad`
                super.navigateItem(items.length - 1 - extraScroll); // Target last item (excluding Add Button)
            }
            else { // Perform virtual scroll
                this.subscribeNext(vContainer, () => {
                    // children = all items in the DD (including addItemButton)
                    // length - 2 instead of -1, because we do not want to focus the last loaded item (in DOM, but not visible)
                    // Focus last item (excluding Add Button)
                    super.navigateItem(!addedIndex ? children[children.length - 1 - extraScroll].itemIndex : this.items.length - 2);
                });
                vContainer.scrollTo(targetDataIndex); // Perform virtual scroll
            }
        }
    }
    /**
     * @private
     * @param {?=} newIndex
     * @return {?}
     */
    navigateUp(newIndex) {
        /** @type {?} */
        const vContainer = this.verticalScrollContainer;
        /** @type {?} */
        const allData = vContainer.igxForOf;
        /** @type {?} */
        const focusedItem = this.focusedItem;
        if (focusedItem.value === allData.find(e => !e.isHeader && !e.hidden)) { // If this is the very first non-header item
            this.focusComboSearch(); // Focus combo search
            return;
        }
        /** @type {?} */
        let targetDataIndex = newIndex === -1 ? this.itemIndexInData(focusedItem.itemIndex) - 1 : this.itemIndexInData(newIndex);
        if (newIndex !== -1) { // If no scroll is required
            if (this.isScrolledToLast && targetDataIndex === vContainer.state.startIndex) {
                // If virt scrollbar is @ bottom, first item is in DOM but not visible
                vContainer.scrollTo(targetDataIndex); // This will not trigger `onChunkLoad`
                super.navigateItem(0); // Focus first visible item
            }
            else {
                super.navigateItem(newIndex); // Use normal navigation
            }
        }
        else { // Perform virtual scroll
            // Perform virtual scroll
            // If item is header, find next non-header index
            /** @type {?} */
            const addedIndex = allData[targetDataIndex].isHeader ? this.findNextFocusableItem(targetDataIndex, Navigate.Up, allData) : 0;
            targetDataIndex -= addedIndex; // Add steps to targetDataIndex
            if (addedIndex === -1) { // If there is no non-header
                vContainer.scrollTo(0);
                this.focusComboSearch(); // Focus combo search;
            }
            else {
                this.subscribeNext(vContainer, () => {
                    super.navigateItem(0); // Focus the first loaded item
                });
                vContainer.scrollTo(targetDataIndex); // Perform virtual scroll
            }
        }
    }
    /**
     * @protected
     * @param {?} direction
     * @param {?=} currentIndex
     * @return {?}
     */
    navigate(direction, currentIndex) {
        /** @type {?} */
        let index = -1;
        if (this._focusedItem) {
            index = currentIndex ? currentIndex : this._focusedItem.itemIndex;
        }
        /** @type {?} */
        const newIndex = this.getNearestSiblingFocusableItemIndex(index, direction);
        /** @type {?} */
        const vContainer = this.verticalScrollContainer;
        /** @type {?} */
        const notVirtual = vContainer.dc.instance.notVirtual;
        if (notVirtual || !direction) { // If list has no scroll OR no direction is passed
            super.navigateItem(newIndex); // use default scroll
        }
        else if (vContainer && vContainer.totalItemCount && vContainer.totalItemCount !== 0) { // Remote scroll
            if (newIndex !== -1 &&
                this.items[newIndex].isVisible(direction)) {
                this.navigateItem(newIndex);
            }
            else {
                this.navigateRemoteItem(direction);
            }
        }
        else {
            if (direction === Navigate.Up) { // Navigate UP
                this.navigateUp(newIndex);
            }
            else if (direction === Navigate.Down) { // Navigate DOWN
                this.navigateDown(newIndex);
            }
        }
    }
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    itemIndexInData(index) {
        return this.sortedChildren.findIndex(e => e.itemIndex === index) + this.verticalScrollContainer.state.startIndex;
    }
    /**
     * @private
     * @param {?} indexInData
     * @param {?} direction
     * @param {?} data
     * @return {?}
     */
    findNextFocusableItem(indexInData, direction, data) {
        if (direction === Navigate.Up) {
            return [...data].splice(0, indexInData + 1).reverse().findIndex(e => !e.isHeader);
        }
        return [...data].splice(indexInData, data.length - 1).findIndex(e => !e.isHeader);
    }
    /**
     * @private
     * @return {?}
     */
    focusComboSearch() {
        this.combo.focusSearchInput(false);
        if (this.focusedItem) {
            this.focusedItem.focused = false;
        }
        this.focusedItem = null;
    }
    /**
     * @private
     * @return {?}
     */
    focusAddItemButton() {
        if (this.combo.isAddButtonVisible()) {
            super.navigateItem(this.items.length - 1);
        }
    }
    /**
     * @private
     * @param {?} virtualContainer
     * @param {?} callback
     * @return {?}
     */
    subscribeNext(virtualContainer, callback) {
        virtualContainer.onChunkLoad.pipe(take(1), takeUntil(this.destroy$)).subscribe({
            next: (e) => {
                callback(e);
            }
        });
    }
    /**
     * @protected
     * @param {?} newItem
     * @return {?}
     */
    scrollToHiddenItem(newItem) { }
    /**
     * @protected
     * @return {?}
     */
    get sortedChildren() {
        if (this.children !== undefined) {
            return this.children.toArray()
                .sort((a, b) => {
                return a.index - b.index;
            });
        }
        return null;
    }
    /**
     * Get all non-header items
     *
     * ```typescript
     * let myDropDownItems = this.dropdown.items;
     * ```
     * @return {?}
     */
    get items() {
        /** @type {?} */
        const items = [];
        if (this.children !== undefined) {
            /** @type {?} */
            const sortedChildren = (/** @type {?} */ (this.sortedChildren));
            for (const child of sortedChildren) {
                if (!child.isHeader) {
                    items.push(child);
                }
            }
        }
        return items;
    }
    /**
     * @protected
     * @return {?}
     */
    scrollToItem() {
    }
    /**
     * @hidden \@internal
     * @param {?} e
     * @return {?}
     */
    onToggleClosing(e) {
        super.onToggleClosing(e);
        this._scrollPosition = this.verticalScrollContainer.getVerticalScroll().scrollTop;
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    updateScrollPosition() {
        this.verticalScrollContainer.getVerticalScroll().scrollTop = this._scrollPosition;
    }
    /**
     * @hidden \@internal
     * @param {?} key
     * @return {?}
     */
    onItemActionKey(key) {
        switch (key) {
            case DropDownActionKey.ENTER:
                this.handleEnter();
                break;
            case DropDownActionKey.SPACE:
                this.handleSpace();
                break;
            case DropDownActionKey.ESCAPE:
                this.close();
        }
    }
    /**
     * @private
     * @return {?}
     */
    handleEnter() {
        if (this.isAddItemFocused()) {
            this.combo.addItemToCollection();
        }
        else {
            this.close();
        }
    }
    /**
     * @private
     * @return {?}
     */
    handleSpace() {
        if (this.isAddItemFocused()) {
            return;
        }
        else {
            this.selectItem(this.focusedItem);
        }
    }
    /**
     * @private
     * @return {?}
     */
    isAddItemFocused() {
        return this.focusedItem instanceof IgxComboAddItemComponent;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.verticalScrollContainer.getVerticalScroll().addEventListener('scroll', this.scrollHandler);
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    ngOnDestroy() {
        this.verticalScrollContainer.getVerticalScroll().removeEventListener('scroll', this.scrollHandler);
        this.destroy$.next(true);
        this.destroy$.complete();
    }
}
IgxComboDropDownComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-combo-drop-down',
                template: "<div class=\"igx-drop-down__list\" igxToggle [style.width]=\"width\" [style.height]=\"height\"\n[style.maxHeight]=\"maxHeight\" [attr.id]=\"this.listId\" role=\"listbox\"\n    (onOpening)=\"onToggleOpening($event)\" (onOpened)=\"onToggleOpened()\"\n    (onClosing)=\"onToggleClosing($event)\" (onClosed)=\"onToggleClosed()\">\n    <ng-container *ngIf=\"!collapsed\">\n        <ng-content></ng-content>\n    </ng-container>\n</div>\n",
                providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxComboDropDownComponent }]
            }] }
];
/** @nocollapse */
IgxComboDropDownComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: IgxSelectionAPIService },
    { type: undefined, decorators: [{ type: Inject, args: [IGX_COMBO_COMPONENT,] }] },
    { type: IgxComboAPIService },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
];
IgxComboDropDownComponent.propDecorators = {
    children: [{ type: ContentChildren, args: [IgxComboItemComponent, { descendants: true },] }],
    verticalScrollContainer: [{ type: ContentChild, args: [forwardRef(() => IgxForOfDirective), { read: IgxForOfDirective },] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxComboDropDownComponent.prototype._scrollPosition;
    /**
     * @hidden
     * \@internal
     * @type {?}
     */
    IgxComboDropDownComponent.prototype.children;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxComboDropDownComponent.prototype.verticalScrollContainer;
    /**
     * @type {?}
     * @protected
     */
    IgxComboDropDownComponent.prototype.scrollHandler;
    /**
     * @type {?}
     * @protected
     */
    IgxComboDropDownComponent.prototype.elementRef;
    /**
     * @type {?}
     * @protected
     */
    IgxComboDropDownComponent.prototype.cdr;
    /**
     * @type {?}
     * @protected
     */
    IgxComboDropDownComponent.prototype.selection;
    /** @type {?} */
    IgxComboDropDownComponent.prototype.combo;
    /**
     * @type {?}
     * @protected
     */
    IgxComboDropDownComponent.prototype.comboAPI;
    /**
     * @type {?}
     * @protected
     */
    IgxComboDropDownComponent.prototype._displayDensityOptions;
}
//# sourceMappingURL=data:application/json;base64,