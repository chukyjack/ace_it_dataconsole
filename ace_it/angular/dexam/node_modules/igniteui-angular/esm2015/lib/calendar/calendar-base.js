/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, Output, EventEmitter } from '@angular/core';
import { Calendar, isDateInRanges } from './calendar';
/** @enum {string} */
const CalendarSelection = {
    SINGLE: 'single',
    MULTI: 'multi',
    RANGE: 'range',
};
export { CalendarSelection };
export class IgxCalendarBase {
    /**
     * @hidden
     */
    constructor() {
        /**
         * Emits an event when a date is selected.
         * Provides reference the `selectedDates` property.
         */
        this.onSelection = new EventEmitter();
        /**
         * @hidden
         */
        this._selection = CalendarSelection.SINGLE;
        /**
         * @hidden
         */
        this.rangeStarted = false;
        /**
         * @hidden
         */
        this._locale = 'en';
        /**
         * @hidden
         */
        this._disabledDates = null;
        /**
         * @hidden
         */
        this._specialDates = null;
        /**
         * @hidden
         */
        this._formatOptions = {
            day: 'numeric',
            month: 'short',
            weekday: 'short',
            year: 'numeric'
        };
        /**
         * @hidden
         */
        this._formatViews = {
            day: false,
            month: true,
            year: false
        };
        /**
         * @hidden
         */
        this._onTouchedCallback = () => { };
        /**
         * @hidden
         */
        this._onChangeCallback = () => { };
        this.calendarModel = new Calendar();
        this.viewDate = this.viewDate ? this.viewDate : new Date();
        this.calendarModel.firstWeekDay = this.weekStart;
        this.initFormatters();
    }
    /**
     * Gets the start day of the week.
     * Can return a numeric or an enum representation of the week day.
     * Defaults to `Sunday` / `0`.
     * @return {?}
     */
    get weekStart() {
        return this.calendarModel.firstWeekDay;
    }
    /**
     * Sets the start day of the week.
     * Can be assigned to a numeric value or to `WEEKDAYS` enum value.
     * @param {?} value
     * @return {?}
     */
    set weekStart(value) {
        this.calendarModel.firstWeekDay = value;
    }
    /**
     * Gets the `locale` of the calendar.
     * Default value is `"en"`.
     * @return {?}
     */
    get locale() {
        return this._locale;
    }
    /**
     * Sets the `locale` of the calendar.
     * Expects a valid BCP 47 language tag.
     * Default value is `"en"`.
     * @param {?} value
     * @return {?}
     */
    set locale(value) {
        this._locale = value;
        this.initFormatters();
    }
    /**
     * Gets the date format options of the days view.
     * @return {?}
     */
    get formatOptions() {
        return this._formatOptions;
    }
    /**
     * Sets the date format options of the days view.
     * Default is { day: 'numeric', month: 'short', weekday: 'short', year: 'numeric' }
     * @param {?} formatOptions
     * @return {?}
     */
    set formatOptions(formatOptions) {
        this._formatOptions = Object.assign(this._formatOptions, formatOptions);
        this.initFormatters();
    }
    /**
     * Gets whether the `day`, `month` and `year` should be rendered
     * according to the locale and formatOptions, if any.
     * @return {?}
     */
    get formatViews() {
        return this._formatViews;
    }
    /**
     * Gets whether the `day`, `month` and `year` should be rendered
     * according to the locale and formatOptions, if any.
     * @param {?} formatViews
     * @return {?}
     */
    set formatViews(formatViews) {
        this._formatViews = Object.assign(this._formatViews, formatViews);
    }
    /**
     *
     * Gets the selection type.
     * Default value is `"single"`.
     * Changing the type of selection resets the currently
     * selected values if any.
     * @return {?}
     */
    get selection() {
        return this._selection;
    }
    /**
     * Sets the selection.
     * @param {?} value
     * @return {?}
     */
    set selection(value) {
        switch (value) {
            case CalendarSelection.SINGLE:
                this.selectedDates = null;
                break;
            case CalendarSelection.MULTI:
            case CalendarSelection.RANGE:
                this.selectedDates = [];
                break;
            default:
                throw new Error('Invalid selection value');
        }
        this._onChangeCallback(this.selectedDates);
        this.rangeStarted = false;
        this._selection = value;
    }
    /**
     * Gets the selected date(s).
     *
     * When selection is set to `single`, it returns
     * a single `Date` object.
     * Otherwise it is an array of `Date` objects.
     * @return {?}
     */
    get value() {
        return this.selectedDates;
    }
    /**
     * Sets the selected date(s).
     *
     * When selection is set to `single`, it accepts
     * a single `Date` object.
     * Otherwise it is an array of `Date` objects.
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this.selectDate(value);
    }
    /**
     * Gets the date that is presented.
     * By default it is the current date.
     * @return {?}
     */
    get viewDate() {
        return this._viewDate;
    }
    /**
     * Sets the date that will be presented in the default view when the component renders.
     * @param {?} value
     * @return {?}
     */
    set viewDate(value) {
        this._viewDate = this.getDateOnly(value);
    }
    /**
     * Gets the disabled dates descriptors.
     * @return {?}
     */
    get disabledDates() {
        return this._disabledDates;
    }
    /**
     * Sets the disabled dates' descriptors.
     * ```typescript
     * \@ViewChild("MyCalendar")
     * public calendar: IgxCalendarComponent;
     * ngOnInit(){
     *    this.calendar.disabledDates = [
     *     {type: DateRangeType.Between, dateRange: [new Date("2020-1-1"), new Date("2020-1-15")]},
     *     {type: DateRangeType.Weekends}];
     * }
     * ```
     * @param {?} value
     * @return {?}
     */
    set disabledDates(value) {
        this._disabledDates = value;
    }
    /**
     * Gets the special dates descriptors.
     * @return {?}
     */
    get specialDates() {
        return this._specialDates;
    }
    /**
     * Sets the special dates' descriptors.
     * ```typescript
     * \@ViewChild("MyCalendar")
     * public calendar: IgxCalendarComponent;
     * ngOnInit(){
     *    this.calendar.specialDates = [
     *     {type: DateRangeType.Between, dateRange: [new Date("2020-1-1"), new Date("2020-1-15")]},
     *     {type: DateRangeType.Weekends}];
     * }
     * ```
     * @param {?} value
     * @return {?}
     */
    set specialDates(value) {
        this._specialDates = value;
    }
    /**
     * @hidden
     * @private
     * @param {?} date
     * @return {?}
     */
    getDateOnlyInMs(date) {
        return this.getDateOnly(date).getTime();
    }
    /**
     * @hidden
     * @private
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    generateDateRange(start, end) {
        /** @type {?} */
        const result = [];
        start = this.getDateOnly(start);
        end = this.getDateOnly(end);
        while (start.getTime() !== end.getTime()) {
            start = this.calendarModel.timedelta(start, 'day', 1);
            result.push(start);
        }
        return result;
    }
    /**
     * Performs a single selection.
     * @hidden
     * @private
     * @param {?} value
     * @return {?}
     */
    selectSingle(value) {
        this.selectedDates = this.getDateOnly(value);
        this._onChangeCallback(this.selectedDates);
    }
    /**
     * Performs a multiple selection
     * @hidden
     * @private
     * @param {?} value
     * @return {?}
     */
    selectMultiple(value) {
        if (Array.isArray(value)) {
            this.selectedDates = this.selectedDates.concat(value.map(v => this.getDateOnly(v)));
        }
        else {
            /** @type {?} */
            const valueDateOnly = this.getDateOnly(value);
            /** @type {?} */
            const newSelection = [];
            if (this.selectedDates.every((date) => date.getTime() !== valueDateOnly.getTime())) {
                newSelection.push(valueDateOnly);
            }
            else {
                this.selectedDates = this.selectedDates.filter((date) => date.getTime() !== valueDateOnly.getTime());
            }
            if (newSelection.length > 0) {
                this.selectedDates = this.selectedDates.concat(newSelection);
            }
        }
        this._onChangeCallback(this.selectedDates);
    }
    /**
     * @hidden
     * @private
     * @param {?} value
     * @param {?=} excludeDisabledDates
     * @return {?}
     */
    selectRange(value, excludeDisabledDates = false) {
        /** @type {?} */
        let start;
        /** @type {?} */
        let end;
        if (Array.isArray(value)) {
            // this.rangeStarted = false;
            value.sort((a, b) => a.valueOf() - b.valueOf());
            start = this.getDateOnly(value[0]);
            end = this.getDateOnly(value[value.length - 1]);
            this.selectedDates = [start, ...this.generateDateRange(start, end)];
        }
        else {
            if (!this.rangeStarted) {
                this.rangeStarted = true;
                this.selectedDates = [value];
            }
            else {
                this.rangeStarted = false;
                if (this.selectedDates[0].getTime() === value.getTime()) {
                    this.selectedDates = [];
                    this._onChangeCallback(this.selectedDates);
                    return;
                }
                this.selectedDates.push(value);
                this.selectedDates.sort((a, b) => a.valueOf() - b.valueOf());
                start = this.selectedDates.shift();
                end = this.selectedDates.pop();
                this.selectedDates = [start, ...this.generateDateRange(start, end)];
            }
        }
        if (excludeDisabledDates) {
            this.selectedDates = this.selectedDates.filter(d => !this.isDateDisabled(d));
        }
        this._onChangeCallback(this.selectedDates);
    }
    /**
     * Performs a single deselection.
     * @hidden
     * @private
     * @param {?} value
     * @return {?}
     */
    deselectSingle(value) {
        if (this.selectedDates !== null &&
            this.getDateOnlyInMs((/** @type {?} */ (value))) === this.getDateOnlyInMs(this.selectedDates)) {
            this.selectedDates = null;
            this._onChangeCallback(this.selectedDates);
        }
    }
    /**
     * Performs a multiple deselection.
     * @hidden
     * @private
     * @param {?} value
     * @return {?}
     */
    deselectMultiple(value) {
        value = value.filter(v => v !== null);
        /** @type {?} */
        const selectedDatesCount = this.selectedDates.length;
        /** @type {?} */
        const datesInMsToDeselect = new Set(value.map(v => this.getDateOnlyInMs(v)));
        for (let i = this.selectedDates.length - 1; i >= 0; i--) {
            if (datesInMsToDeselect.has(this.getDateOnlyInMs(this.selectedDates[i]))) {
                this.selectedDates.splice(i, 1);
            }
        }
        if (this.selectedDates.length !== selectedDatesCount) {
            this._onChangeCallback(this.selectedDates);
        }
    }
    /**
     * Performs a range deselection.
     * @hidden
     * @private
     * @param {?} value
     * @return {?}
     */
    deselectRange(value) {
        value = value.filter(v => v !== null);
        if (value.length < 1) {
            return;
        }
        value.sort((a, b) => a.valueOf() - b.valueOf());
        /** @type {?} */
        const valueStart = this.getDateOnlyInMs(value[0]);
        /** @type {?} */
        const valueEnd = this.getDateOnlyInMs(value[value.length - 1]);
        this.selectedDates.sort((a, b) => a.valueOf() - b.valueOf());
        /** @type {?} */
        const selectedDatesStart = this.getDateOnlyInMs(this.selectedDates[0]);
        /** @type {?} */
        const selectedDatesEnd = this.getDateOnlyInMs(this.selectedDates[this.selectedDates.length - 1]);
        if (!(valueEnd < selectedDatesStart) && !(valueStart > selectedDatesEnd)) {
            this.selectedDates = [];
            this.rangeStarted = false;
            this._onChangeCallback(this.selectedDates);
        }
    }
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    initFormatters() {
        this.formatterDay = new Intl.DateTimeFormat(this._locale, { day: this._formatOptions.day });
        this.formatterWeekday = new Intl.DateTimeFormat(this._locale, { weekday: this._formatOptions.weekday });
        this.formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month });
        this.formatterYear = new Intl.DateTimeFormat(this._locale, { year: this._formatOptions.year });
        this.formatterMonthday = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month, day: this._formatOptions.day });
    }
    /**
     * @hidden
     * @protected
     * @param {?} date
     * @return {?}
     */
    getDateOnly(date) {
        return new Date(date.getFullYear(), date.getMonth(), date.getDate());
    }
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChangeCallback = fn;
    }
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouchedCallback = fn;
    }
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.selectedDates = value;
    }
    /**
     * Checks whether a date is disabled.
     * @hidden
     * @param {?} date
     * @return {?}
     */
    isDateDisabled(date) {
        if (this.disabledDates === null) {
            return false;
        }
        return isDateInRanges(date, this.disabledDates);
    }
    /**
     * Selects date(s) (based on the selection type).
     * @param {?} value
     * @return {?}
     */
    selectDate(value) {
        if (value === null || value === undefined || (Array.isArray(value) && value.length === 0)) {
            return new Date();
        }
        switch (this.selection) {
            case CalendarSelection.SINGLE:
                this.selectSingle((/** @type {?} */ (value)));
                break;
            case CalendarSelection.MULTI:
                this.selectMultiple(value);
                break;
            case CalendarSelection.RANGE:
                this.selectRange(value, true);
                break;
        }
    }
    /**
     * Deselects date(s) (based on the selection type).
     * @param {?=} value
     * @return {?}
     */
    deselectDate(value) {
        if (this.selectedDates === null || this.selectedDates === []) {
            return;
        }
        if (value === null || value === undefined) {
            this.selectedDates = this.selection === CalendarSelection.SINGLE ? null : [];
            this.rangeStarted = false;
            this._onChangeCallback(this.selectedDates);
            return;
        }
        switch (this.selection) {
            case CalendarSelection.SINGLE:
                this.deselectSingle((/** @type {?} */ (value)));
                break;
            case CalendarSelection.MULTI:
                this.deselectMultiple((/** @type {?} */ (value)));
                break;
            case CalendarSelection.RANGE:
                this.deselectRange((/** @type {?} */ (value)));
                break;
        }
    }
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    selectDateFromClient(value) {
        switch (this.selection) {
            case CalendarSelection.SINGLE:
            case CalendarSelection.MULTI:
                if (!this.isDateDisabled(value)) {
                    this.selectDate(value);
                }
                break;
            case CalendarSelection.RANGE:
                this.selectRange(value, true);
                break;
        }
    }
}
IgxCalendarBase.propDecorators = {
    weekStart: [{ type: Input }],
    locale: [{ type: Input }],
    formatOptions: [{ type: Input }],
    formatViews: [{ type: Input }],
    selection: [{ type: Input }],
    value: [{ type: Input }],
    viewDate: [{ type: Input }],
    disabledDates: [{ type: Input }],
    specialDates: [{ type: Input }],
    onSelection: [{ type: Output }]
};
if (false) {
    /**
     * Emits an event when a date is selected.
     * Provides reference the `selectedDates` property.
     * @type {?}
     */
    IgxCalendarBase.prototype.onSelection;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxCalendarBase.prototype._selection;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxCalendarBase.prototype.rangeStarted;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxCalendarBase.prototype._locale;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxCalendarBase.prototype._viewDate;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxCalendarBase.prototype._disabledDates;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxCalendarBase.prototype._specialDates;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxCalendarBase.prototype._formatOptions;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxCalendarBase.prototype._formatViews;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxCalendarBase.prototype.formatterWeekday;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxCalendarBase.prototype.formatterDay;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxCalendarBase.prototype.formatterMonth;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxCalendarBase.prototype.formatterYear;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxCalendarBase.prototype.formatterMonthday;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarBase.prototype.calendarModel;
    /**
     * @hidden
     * @type {?}
     */
    IgxCalendarBase.prototype.selectedDates;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxCalendarBase.prototype._onTouchedCallback;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxCalendarBase.prototype._onChangeCallback;
}
//# sourceMappingURL=data:application/json;base64,