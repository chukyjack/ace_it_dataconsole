/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, NgZone, ChangeDetectorRef, IterableDiffers, ViewContainerRef, Inject, ComponentFactoryResolver, Optional, Input } from '@angular/core';
import { IgxGridBaseComponent, IgxGridTransaction } from '../grid-base.component';
import { GridBaseAPIService } from '../api.service';
import { IgxFilteringService } from '../filtering/grid-filtering.service';
import { DisplayDensityToken } from '../../core/displayDensity';
import { IgxColumnComponent, IgxColumnGroupComponent } from '../column.component';
import { IgxSummaryOperand } from '../summaries/grid-summary';
import { IgxHierarchicalTransactionService, IgxOverlayService } from '../../services/index';
import { DOCUMENT } from '@angular/common';
import { IgxHierarchicalSelectionAPIService } from './selection';
import { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';
import { IgxGridSummaryService } from '../summaries/grid-summary.service';
import { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';
/** @type {?} */
export const IgxHierarchicalTransactionServiceFactory = {
    provide: IgxGridTransaction,
    useFactory: hierarchicalTransactionServiceFactory
};
/**
 * @return {?}
 */
export function hierarchicalTransactionServiceFactory() {
    return () => new IgxHierarchicalTransactionService();
}
/**
 * @record
 */
export function IPathSegment() { }
if (false) {
    /** @type {?} */
    IPathSegment.prototype.rowID;
    /** @type {?} */
    IPathSegment.prototype.rowIslandKey;
}
/**
 * @abstract
 */
export class IgxHierarchicalGridBaseComponent extends IgxGridBaseComponent {
    /**
     * @param {?} selectionService
     * @param {?} crudService
     * @param {?} gridAPI
     * @param {?} selection
     * @param {?} transactionFactory
     * @param {?} elementRef
     * @param {?} zone
     * @param {?} document
     * @param {?} cdr
     * @param {?} resolver
     * @param {?} differs
     * @param {?} viewRef
     * @param {?} navigation
     * @param {?} filteringService
     * @param {?} overlayService
     * @param {?} summaryService
     * @param {?} _displayDensityOptions
     */
    constructor(selectionService, crudService, gridAPI, selection, transactionFactory, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation, filteringService, overlayService, summaryService, _displayDensityOptions) {
        super(selectionService, crudService, gridAPI, selection, typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation, filteringService, overlayService, summaryService, _displayDensityOptions);
        this.selectionService = selectionService;
        this.transactionFactory = transactionFactory;
        this.document = document;
        this.overlayService = overlayService;
        this.summaryService = summaryService;
        this._displayDensityOptions = _displayDensityOptions;
        this._expandChildren = false;
        this.hgridAPI = (/** @type {?} */ (gridAPI));
    }
    /**
     * @hidden
     * @return {?}
     */
    get maxLevelHeaderDepth() {
        if (this._maxLevelHeaderDepth === null) {
            this._maxLevelHeaderDepth = this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);
        }
        return this._maxLevelHeaderDepth;
    }
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    get outlet() {
        return this.rootGrid ? this.rootGrid.outletDirective : this.outletDirective;
    }
    /**
     * @hidden
     * @param {?} cols
     * @return {?}
     */
    createColumnsList(cols) {
        /** @type {?} */
        const columns = [];
        /** @type {?} */
        const topLevelCols = this.onlyTopLevel(cols);
        topLevelCols.forEach((col) => {
            /** @type {?} */
            const ref = this._createColumn(col);
            ref.changeDetectorRef.detectChanges();
            columns.push(ref.instance);
        });
        /** @type {?} */
        const result = flatten(columns);
        this.columnList.reset(result);
        this.columnList.notifyOnChanges();
    }
    /**
     * @protected
     * @param {?} col
     * @return {?}
     */
    _createColumn(col) {
        /** @type {?} */
        let ref;
        if (col instanceof IgxColumnGroupComponent) {
            ref = this._createColGroupComponent(col);
        }
        else {
            ref = this._createColComponent(col);
        }
        return ref;
    }
    /**
     * @protected
     * @param {?} col
     * @return {?}
     */
    _createColGroupComponent(col) {
        /** @type {?} */
        const factoryGroup = this.resolver.resolveComponentFactory(IgxColumnGroupComponent);
        /** @type {?} */
        const ref = this.viewRef.createComponent(factoryGroup, null, this.viewRef.injector);
        ref.changeDetectorRef.detectChanges();
        factoryGroup.inputs.forEach((input) => {
            /** @type {?} */
            const propName = input.propName;
            ((/** @type {?} */ (ref.instance)))[propName] = ((/** @type {?} */ (col)))[propName];
        });
        if (col.children.length > 0) {
            /** @type {?} */
            const newChildren = [];
            col.children.forEach(child => {
                /** @type {?} */
                const newCol = this._createColumn(child).instance;
                newCol.parent = ref.instance;
                newChildren.push(newCol);
            });
            ((/** @type {?} */ (ref.instance))).children.reset(newChildren);
            ((/** @type {?} */ (ref.instance))).children.notifyOnChanges();
        }
        ((/** @type {?} */ (ref.instance))).grid = this;
        return ref;
    }
    /**
     * @protected
     * @param {?} col
     * @return {?}
     */
    _createColComponent(col) {
        /** @type {?} */
        const factoryColumn = this.resolver.resolveComponentFactory(IgxColumnComponent);
        /** @type {?} */
        const ref = this.viewRef.createComponent(factoryColumn, null, this.viewRef.injector);
        factoryColumn.inputs.forEach((input) => {
            /** @type {?} */
            const propName = input.propName;
            if (!(((/** @type {?} */ (col)))[propName] instanceof IgxSummaryOperand)) {
                ((/** @type {?} */ (ref.instance)))[propName] = ((/** @type {?} */ (col)))[propName];
            }
            else {
                ((/** @type {?} */ (ref.instance)))[propName] = col[propName].constructor;
            }
        });
        ((/** @type {?} */ (ref.instance))).grid = this;
        return ref;
    }
    /**
     * @protected
     * @param {?} rowIslandID
     * @return {?}
     */
    getGridsForIsland(rowIslandID) {
        return this.hgridAPI.getChildGridsForRowIsland(rowIslandID);
    }
    /**
     * @protected
     * @param {?} path
     * @return {?}
     */
    getChildGrid(path) {
        if (!path) {
            return;
        }
        return this.hgridAPI.getChildGrid(path);
    }
}
/** @nocollapse */
IgxHierarchicalGridBaseComponent.ctorParameters = () => [
    { type: IgxGridSelectionService },
    { type: IgxGridCRUDService },
    { type: GridBaseAPIService },
    { type: IgxHierarchicalSelectionAPIService },
    { type: undefined, decorators: [{ type: Inject, args: [IgxGridTransaction,] }] },
    { type: ElementRef },
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ChangeDetectorRef },
    { type: ComponentFactoryResolver },
    { type: IterableDiffers },
    { type: ViewContainerRef },
    { type: IgxHierarchicalGridNavigationService },
    { type: IgxFilteringService },
    { type: IgxOverlayService, decorators: [{ type: Inject, args: [IgxOverlayService,] }] },
    { type: IgxGridSummaryService },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
];
IgxHierarchicalGridBaseComponent.propDecorators = {
    expandChildren: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    IgxHierarchicalGridBaseComponent.prototype.rootGrid;
    /** @type {?} */
    IgxHierarchicalGridBaseComponent.prototype.expandChildren;
    /**
     * @hidden
     * @type {?}
     */
    IgxHierarchicalGridBaseComponent.prototype.hgridAPI;
    /**
     * @hidden
     * @type {?}
     */
    IgxHierarchicalGridBaseComponent.prototype.parentIsland;
    /**
     * @hidden
     * @type {?}
     */
    IgxHierarchicalGridBaseComponent.prototype.childRow;
    /**
     * @type {?}
     * @protected
     */
    IgxHierarchicalGridBaseComponent.prototype._expandChildren;
    /** @type {?} */
    IgxHierarchicalGridBaseComponent.prototype.selectionService;
    /**
     * @type {?}
     * @protected
     */
    IgxHierarchicalGridBaseComponent.prototype.transactionFactory;
    /** @type {?} */
    IgxHierarchicalGridBaseComponent.prototype.document;
    /**
     * @type {?}
     * @protected
     */
    IgxHierarchicalGridBaseComponent.prototype.overlayService;
    /** @type {?} */
    IgxHierarchicalGridBaseComponent.prototype.summaryService;
    /**
     * @type {?}
     * @protected
     */
    IgxHierarchicalGridBaseComponent.prototype._displayDensityOptions;
}
/**
 * @param {?} arr
 * @return {?}
 */
function flatten(arr) {
    /** @type {?} */
    let result = [];
    arr.forEach(el => {
        result.push(el);
        if (el.children) {
            result = result.concat(flatten(el.children.toArray()));
        }
    });
    return result;
}
//# sourceMappingURL=data:application/json;base64,