/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { IgxColumnComponent, IgxColumnGroupComponent } from '../../column.component';
import { IgxGridBaseComponent } from '../../grid-base.component';
/**
 * @hidden
 */
export class IgxExcelStyleColumnMovingComponent {
    constructor() { }
    /**
     * @private
     * @return {?}
     */
    get visibleColumns() {
        return this.grid.visibleColumns.filter(col => !(col instanceof IgxColumnGroupComponent));
    }
    /**
     * @return {?}
     */
    get canNotMoveLeft() {
        return this.column.visibleIndex === 0 ||
            (this.grid.unpinnedColumns.indexOf(this.column) === 0 && this.column.disablePinning) ||
            (this.column.level !== 0 && !this.findColumn(0, this.visibleColumns));
    }
    /**
     * @return {?}
     */
    get canNotMoveRight() {
        return this.column.visibleIndex === this.visibleColumns.length - 1 ||
            (this.column.level !== 0 && !this.findColumn(1, this.visibleColumns));
    }
    /**
     * @param {?} moveDirection
     * @return {?}
     */
    onMoveButtonClicked(moveDirection) {
        /** @type {?} */
        let targetColumn;
        if (this.column.pinned) {
            if (this.column.isLastPinned && moveDirection === 1) {
                targetColumn = this.grid.unpinnedColumns[0];
                moveDirection = 0;
            }
            else {
                targetColumn = this.findColumn(moveDirection, this.grid.pinnedColumns);
            }
        }
        else if (this.grid.unpinnedColumns.indexOf(this.column) === 0 && moveDirection === 0) {
            targetColumn = this.grid.pinnedColumns[this.grid.pinnedColumns.length - 1];
            moveDirection = 1;
        }
        else {
            targetColumn = this.findColumn(moveDirection, this.grid.unpinnedColumns);
        }
        this.grid.moveColumn(this.column, targetColumn, moveDirection);
    }
    /**
     * @private
     * @param {?} moveDirection
     * @param {?} columns
     * @return {?}
     */
    findColumn(moveDirection, columns) {
        /** @type {?} */
        let index = columns.indexOf(this.column);
        if (moveDirection === 0) {
            while (index > 0) {
                index--;
                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {
                    return columns[index];
                }
            }
        }
        else {
            while (index < columns.length - 1) {
                index++;
                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {
                    return columns[index];
                }
            }
        }
    }
}
IgxExcelStyleColumnMovingComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                selector: 'igx-excel-style-column-moving',
                template: "<header class=\"igx-typography__overline\">{{ grid.resourceStrings.igx_grid_excel_filter_moving_header }}</header>\n<section class=\"igx-excel-filter__move-buttons\">\n    <button\n        igxButton\n        [disabled]=\"canNotMoveLeft\"\n        (click)=\"onMoveButtonClicked(0)\">\n        <igx-icon>arrow_back</igx-icon>\n        <span>{{ grid.resourceStrings.igx_grid_excel_filter_moving_left }}</span>\n    </button>\n    <button\n        igxButton\n        [disabled]=\"canNotMoveRight\"\n        (click)=\"onMoveButtonClicked(1)\">\n        <span>{{ grid.resourceStrings.igx_grid_excel_filter_moving_right }}</span>\n        <igx-icon>arrow_forwards</igx-icon>\n    </button>\n</section>\n"
            }] }
];
/** @nocollapse */
IgxExcelStyleColumnMovingComponent.ctorParameters = () => [];
IgxExcelStyleColumnMovingComponent.propDecorators = {
    column: [{ type: Input }],
    grid: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    IgxExcelStyleColumnMovingComponent.prototype.column;
    /** @type {?} */
    IgxExcelStyleColumnMovingComponent.prototype.grid;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZWwtc3R5bGUtY29sdW1uLW1vdmluZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2dyaWRzL2ZpbHRlcmluZy9leGNlbC1zdHlsZS9leGNlbC1zdHlsZS1jb2x1bW4tbW92aW5nLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSx1QkFBdUIsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLHVCQUF1QixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDckYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7Ozs7QUFXakUsTUFBTSxPQUFPLGtDQUFrQztJQVEzQyxnQkFBZSxDQUFDOzs7OztJQUVoQixJQUFZLGNBQWM7UUFDdEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxZQUFZLHVCQUF1QixDQUFDLENBQUMsQ0FBQztJQUM3RixDQUFDOzs7O0lBRUQsSUFBSSxjQUFjO1FBQ2QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksS0FBSyxDQUFDO1lBQ2pDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUM7WUFDcEYsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUM5RSxDQUFDOzs7O0lBRUQsSUFBSSxlQUFlO1FBQ2YsT0FBTyxJQUFJ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Q29tcG9uZW50LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneENvbHVtbkNvbXBvbmVudCwgSWd4Q29sdW1uR3JvdXBDb21wb25lbnQgfSBmcm9tICcuLi8uLi9jb2x1bW4uY29tcG9uZW50JztcbmltcG9ydCB7IElneEdyaWRCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vZ3JpZC1iYXNlLmNvbXBvbmVudCc7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5AQ29tcG9uZW50KHtcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBmYWxzZSxcbiAgICBzZWxlY3RvcjogJ2lneC1leGNlbC1zdHlsZS1jb2x1bW4tbW92aW5nJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZXhjZWwtc3R5bGUtY29sdW1uLW1vdmluZy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgSWd4RXhjZWxTdHlsZUNvbHVtbk1vdmluZ0NvbXBvbmVudCB7XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBjb2x1bW46IElneENvbHVtbkNvbXBvbmVudDtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGdyaWQ6IElneEdyaWRCYXNlQ29tcG9uZW50O1xuXG4gICAgY29uc3RydWN0b3IoKSB7fVxuXG4gICAgcHJpdmF0ZSBnZXQgdmlzaWJsZUNvbHVtbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWQudmlzaWJsZUNvbHVtbnMuZmlsdGVyKGNvbCA9PiAhKGNvbCBpbnN0YW5jZW9mIElneENvbHVtbkdyb3VwQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgZ2V0IGNhbk5vdE1vdmVMZWZ0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW4udmlzaWJsZUluZGV4ID09PSAwIHx8XG4gICAgICAgICAgICAodGhpcy5ncmlkLnVucGlubmVkQ29sdW1ucy5pbmRleE9mKHRoaXMuY29sdW1uKSA9PT0gMCAmJiB0aGlzLmNvbHVtbi5kaXNhYmxlUGlubmluZykgfHxcbiAgICAgICAgICAgICh0aGlzLmNvbHVtbi5sZXZlbCAhPT0gMCAmJiAhdGhpcy5maW5kQ29sdW1uKDAsIHRoaXMudmlzaWJsZUNvbHVtbnMpKTtcbiAgICB9XG5cbiAgICBnZXQgY2FuTm90TW92ZVJpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW4udmlzaWJsZUluZGV4ID09PSB0aGlzLnZpc2libGVDb2x1bW5zLmxlbmd0aCAtIDEgfHxcbiAgICAgICAgICAgICh0aGlzLmNvbHVtbi5sZXZlbCAhPT0gMCAmJiAhdGhpcy5maW5kQ29sdW1uKDEsIHRoaXMudmlzaWJsZUNvbHVtbnMpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25Nb3ZlQnV0dG9uQ2xpY2tlZChtb3ZlRGlyZWN0aW9uKSB7XG4gICAgICAgIGxldCB0YXJnZXRDb2x1bW47XG4gICAgICAgIGlmICh0aGlzLmNvbHVtbi5waW5uZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbHVtbi5pc0xhc3RQaW5uZWQgJiYgbW92ZURpcmVjdGlvbiA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHRhcmdldENvbHVtbiA9IHRoaXMuZ3JpZC51bnBpbm5lZENvbHVtbnNbMF07XG4gICAgICAgICAgICAgICAgbW92ZURpcmVjdGlvbiA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldENvbHVtbiA9IHRoaXMuZmluZENvbHVtbihtb3ZlRGlyZWN0aW9uLCB0aGlzLmdyaWQucGlubmVkQ29sdW1ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5ncmlkLnVucGlubmVkQ29sdW1ucy5pbmRleE9mKHRoaXMuY29sdW1uKSA9PT0gMCAmJiBtb3ZlRGlyZWN0aW9uID09PSAwKSB7XG4gICAgICAgICAgICB0YXJnZXRDb2x1bW4gPSB0aGlzLmdyaWQucGlubmVkQ29sdW1uc1t0aGlzLmdyaWQucGlubmVkQ29sdW1ucy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIG1vdmVEaXJlY3Rpb24gPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0Q29sdW1uID0gdGhpcy5maW5kQ29sdW1uKG1vdmVEaXJlY3Rpb24sIHRoaXMuZ3JpZC51bnBpbm5lZENvbHVtbnMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ3JpZC5tb3ZlQ29sdW1uKHRoaXMuY29sdW1uLCB0YXJnZXRDb2x1bW4sIG1vdmVEaXJlY3Rpb24pO1xuICAgIH1cblxuICAgIHByaXZhdGUgZmluZENvbHVtbihtb3ZlRGlyZWN0aW9uOiBudW1iZXIsIGNvbHVtbnM6IElneENvbHVtbkNvbXBvbmVudFtdKSB7XG4gICAgICAgIGxldCBpbmRleCA9IGNvbHVtbnMuaW5kZXhPZih0aGlzLmNvbHVtbik7XG4gICAgICAgIGlmIChtb3ZlRGlyZWN0aW9uID09PSAwKSB7XG4gICAgICAgICAgICB3aGlsZSAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgaW5kZXgtLTtcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uc1tpbmRleF0ubGV2ZWwgPT09IHRoaXMuY29sdW1uLmxldmVsICYmIGNvbHVtbnNbaW5kZXhdLnBhcmVudCA9PT0gdGhpcy5jb2x1bW4ucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2x1bW5zW2luZGV4XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3aGlsZSAoaW5kZXggPCBjb2x1bW5zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgICAgIGlmIChjb2x1bW5zW2luZGV4XS5sZXZlbCA9PT0gdGhpcy5jb2x1bW4ubGV2ZWwgJiYgY29sdW1uc1tpbmRleF0ucGFyZW50ID09PSB0aGlzLmNvbHVtbi5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbHVtbnNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==