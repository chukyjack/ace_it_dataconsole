{"version":3,"sources":["ng://igniteui-angular/lib/animations/easings.ts","ng://igniteui-angular/lib/animations/fade/index.ts","node_modules/tslib/tslib.es6.js","ng://igniteui-angular/lib/animations/flip/index.ts","ng://igniteui-angular/lib/animations/rotate/index.ts","ng://igniteui-angular/lib/animations/misc/shake.ts","ng://igniteui-angular/lib/animations/misc/pulsate.ts","ng://igniteui-angular/lib/animations/scale/index.ts","ng://igniteui-angular/lib/animations/slide/index.ts","ng://igniteui-angular/lib/animations/swing/index.ts","ng://igniteui-angular/lib/animations/grow/index.ts","ng://igniteui-angular/lib/core/navigation/nav.service.ts","ng://igniteui-angular/lib/core/navigation/directives.ts","ng://igniteui-angular/lib/core/utils.ts","ng://igniteui-angular/lib/data-operations/sorting-expression.interface.ts","ng://igniteui-angular/lib/data-operations/sorting-strategy.ts","ng://igniteui-angular/lib/data-operations/grouping-strategy.ts","ng://igniteui-angular/lib/data-operations/paging-state.interface.ts","ng://igniteui-angular/lib/data-operations/filtering-expressions-tree.ts","ng://igniteui-angular/lib/services/transaction/transaction.ts","ng://igniteui-angular/lib/grids/api.service.ts","ng://igniteui-angular/lib/data-operations/filtering-expression.interface.ts","ng://igniteui-angular/lib/data-operations/filtering-strategy.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.filtering.pipe.ts","ng://igniteui-angular/lib/data-operations/data-util.ts","ng://igniteui-angular/lib/services/exporter-common/export-utilities.ts","ng://igniteui-angular/lib/services/exporter-common/base-export-service.ts","ng://igniteui-angular/lib/services/csv/char-separated-value-data.ts","ng://igniteui-angular/lib/services/exporter-common/exporter-options-base.ts","ng://igniteui-angular/lib/services/csv/csv-exporter-options.ts","ng://igniteui-angular/lib/services/csv/csv-exporter.ts","ng://igniteui-angular/lib/services/excel/excel-enums.ts","ng://igniteui-angular/lib/services/excel/excel-strings.ts","ng://igniteui-angular/lib/services/excel/excel-files.ts","ng://igniteui-angular/lib/services/excel/excel-folders.ts","ng://igniteui-angular/lib/services/excel/excel-elements-factory.ts","ng://igniteui-angular/lib/services/excel/worksheet-data-dictionary.ts","ng://igniteui-angular/lib/services/excel/worksheet-data.ts","ng://igniteui-angular/lib/services/excel/excel-exporter.ts","ng://igniteui-angular/lib/services/excel/excel-exporter-options.ts","ng://igniteui-angular/lib/services/overlay/utilities.ts","ng://igniteui-angular/lib/services/overlay/position/global-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/NoOpScrollStrategy.ts","ng://igniteui-angular/lib/core/deprecateDecorators.ts","ng://igniteui-angular/lib/services/overlay/overlay.ts","ng://igniteui-angular/lib/services/overlay/position/connected-positioning-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/base-fit-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/auto-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/elastic-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/absolute-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/block-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/close-scroll-strategy.ts","ng://igniteui-angular/lib/services/transaction/base-transaction.ts","ng://igniteui-angular/lib/services/transaction/igx-transaction.ts","ng://igniteui-angular/lib/services/transaction/igx-hierarchical-transaction.ts","ng://igniteui-angular/lib/directives/toggle/toggle.directive.ts","ng://igniteui-angular/lib/drop-down/drop-down.common.ts","ng://igniteui-angular/lib/core/selection.ts","ng://igniteui-angular/lib/drop-down/drop-down-group.component.ts","ng://igniteui-angular/lib/drop-down/drop-down-item.base.ts","ng://igniteui-angular/lib/drop-down/drop-down-item.component.ts","ng://igniteui-angular/lib/core/displayDensity.ts","ng://igniteui-angular/lib/drop-down/drop-down.base.ts","ng://igniteui-angular/lib/drop-down/drop-down.component.ts","ng://igniteui-angular/lib/drop-down/drop-down-navigation.directive.ts","ng://igniteui-angular/lib/drop-down/index.ts","ng://igniteui-angular/lib/directives/hint/hint.directive.ts","ng://igniteui-angular/lib/input-group/input-group.common.ts","ng://igniteui-angular/lib/directives/input/input.directive.ts","ng://igniteui-angular/lib/directives/label/label.directive.ts","ng://igniteui-angular/lib/directives/prefix/prefix.directive.ts","ng://igniteui-angular/lib/directives/suffix/suffix.directive.ts","ng://igniteui-angular/lib/input-group/input-group.component.ts","ng://igniteui-angular/lib/directives/autocomplete/autocomplete.directive.ts","ng://igniteui-angular/lib/directives/button/button.directive.ts","ng://igniteui-angular/lib/directives/divider/divider.directive.ts","ng://igniteui-angular/lib/directives/dragdrop/dragdrop.directive.ts","ng://igniteui-angular/lib/directives/filter/filter.directive.ts","ng://igniteui-angular/lib/directives/focus/focus.directive.ts","ng://igniteui-angular/lib/directives/for-of/display.container.ts","ng://igniteui-angular/lib/directives/for-of/horizontal.virtual.helper.component.ts","ng://igniteui-angular/lib/directives/for-of/virtual.helper.component.ts","ng://igniteui-angular/lib/directives/scroll-inertia/scroll_inertia.directive.ts","ng://igniteui-angular/lib/directives/for-of/for_of.sync.service.ts","ng://igniteui-angular/lib/directives/for-of/for_of.directive.ts","ng://igniteui-angular/lib/directives/layout/layout.directive.ts","ng://igniteui-angular/lib/directives/mask/mask-helper.ts","ng://igniteui-angular/lib/directives/mask/mask.directive.ts","ng://igniteui-angular/lib/radio/radio.component.ts","ng://igniteui-angular/lib/directives/ripple/ripple.directive.ts","ng://igniteui-angular/lib/directives/radio/radio-group.directive.ts","ng://igniteui-angular/lib/directives/text-highlight/text-highlight.directive.ts","ng://igniteui-angular/lib/directives/text-selection/text-selection.directive.ts","ng://igniteui-angular/lib/directives/tooltip/tooltip.directive.ts","ng://igniteui-angular/lib/data-operations/filtering-condition.ts","ng://igniteui-angular/lib/data-operations/filtering-state.interface.ts","ng://igniteui-angular/lib/data-operations/groupby-record.interface.ts","ng://igniteui-angular/lib/icon/icon.service.ts","ng://igniteui-angular/lib/icon/icon.component.ts","ng://igniteui-angular/lib/icon/index.ts","ng://igniteui-angular/lib/avatar/avatar.component.ts","ng://igniteui-angular/lib/badge/badge.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.common.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel-body.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.directives.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel-header.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.module.ts","ng://igniteui-angular/lib/banner/banner.directives.ts","ng://igniteui-angular/lib/banner/banner.component.ts","ng://igniteui-angular/lib/buttonGroup/buttonGroup.component.ts","ng://igniteui-angular/lib/core/dates/dateRange.ts","ng://igniteui-angular/lib/calendar/calendar.ts","ng://igniteui-angular/lib/calendar/calendar.directives.ts","ng://igniteui-angular/lib/calendar/calendar-base.ts","ng://igniteui-angular/lib/calendar/month-picker-base.ts","ng://igniteui-angular/lib/calendar/months-view/months-view.component.ts","ng://igniteui-angular/lib/calendar/years-view/years-view.component.ts","ng://igniteui-angular/lib/calendar/days-view/day-item.component.ts","ng://igniteui-angular/lib/calendar/days-view/days-view.component.ts","ng://igniteui-angular/lib/calendar/calendar.component.ts","ng://igniteui-angular/lib/calendar/month-picker/month-picker.component.ts","ng://igniteui-angular/lib/calendar/calendar.module.ts","ng://igniteui-angular/lib/card/card.component.ts","ng://igniteui-angular/lib/carousel/carousel.component.ts","ng://igniteui-angular/lib/checkbox/checkbox.component.ts","ng://igniteui-angular/lib/chips/chip.component.ts","ng://igniteui-angular/lib/chips/chips-area.component.ts","ng://igniteui-angular/lib/chips/chips.module.ts","ng://igniteui-angular/lib/combo/combo.directives.ts","ng://igniteui-angular/lib/combo/combo.api.ts","ng://igniteui-angular/lib/combo/combo-item.component.ts","ng://igniteui-angular/lib/combo/combo.common.ts","ng://igniteui-angular/lib/combo/combo-add-item.component.ts","ng://igniteui-angular/lib/combo/combo-dropdown.component.ts","ng://igniteui-angular/lib/combo/combo.pipes.ts","ng://igniteui-angular/lib/combo/combo.component.ts","ng://igniteui-angular/lib/date-picker/date-picker.utils.ts","ng://igniteui-angular/lib/date-picker/date-picker.common.ts","ng://igniteui-angular/lib/date-picker/date-picker.pipes.ts","ng://igniteui-angular/lib/date-picker/date-picker.directives.ts","ng://igniteui-angular/lib/core/enums.ts","ng://igniteui-angular/lib/date-picker/calendar-container.component.ts","ng://igniteui-angular/lib/date-picker/date-picker.component.ts","ng://igniteui-angular/lib/dialog/dialog.directives.ts","ng://igniteui-angular/lib/dialog/dialog.component.ts","ng://igniteui-angular/lib/core/grid-selection.ts","ng://igniteui-angular/lib/core/touch.ts","ng://igniteui-angular/lib/grids/cell.component.ts","ng://igniteui-angular/lib/grids/row.component.ts","ng://igniteui-angular/lib/grids/summaries/grid-summary.ts","ng://igniteui-angular/lib/grids/grid-column-resizing.service.ts","ng://igniteui-angular/lib/grids/grid.common.ts","ng://igniteui-angular/lib/grids/column.component.ts","ng://igniteui-angular/lib/grids/column-chooser-item-base.ts","ng://igniteui-angular/lib/grids/column-hiding-item.directive.ts","ng://igniteui-angular/lib/grids/column-chooser-base.ts","ng://igniteui-angular/lib/grids/column-hiding.component.ts","ng://igniteui-angular/lib/grids/column-pinning.component.ts","ng://igniteui-angular/lib/grids/grid-toolbar.component.ts","ng://igniteui-angular/lib/grids/grid.rowEdit.directive.ts","ng://igniteui-angular/lib/grids/grid/groupby-row.component.ts","ng://igniteui-angular/lib/grids/grid-navigation.service.ts","ng://igniteui-angular/lib/grids/filtering/svgIcons.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering.service.ts","ng://igniteui-angular/lib/grids/watch-changes.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-search.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-default-expression.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-date-expression.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-custom-dialog.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-sorting.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/grid.excel-style-filtering.component.ts","ng://igniteui-angular/lib/grids/grid-header.component.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering-cell.component.ts","ng://igniteui-angular/lib/grids/grid-header-group.component.ts","ng://igniteui-angular/lib/core/i18n/resources.ts","ng://igniteui-angular/lib/core/i18n/grid-resources.ts","ng://igniteui-angular/lib/core/i18n/time-picker-resources.ts","ng://igniteui-angular/lib/grids/summaries/grid-summary.service.ts","ng://igniteui-angular/lib/grids/summaries/summary-cell.component.ts","ng://igniteui-angular/lib/grids/summaries/summary-row.component.ts","ng://igniteui-angular/lib/grids/drag-select.directive.ts","ng://igniteui-angular/lib/directives/template-outlet/template_outlet.directive.ts","ng://igniteui-angular/lib/grids/grid-column-resizer.component.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering-row.component.ts","ng://igniteui-angular/lib/grids/grid-base.component.ts","ng://igniteui-angular/lib/grids/summaries/grid-root-summary.pipe.ts","ng://igniteui-angular/lib/progressbar/progressbar.common.ts","ng://igniteui-angular/lib/progressbar/progressbar.component.ts","ng://igniteui-angular/lib/grids/grid-common.pipes.ts","ng://igniteui-angular/lib/grids/grid-pipes.module.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-column-moving.component.ts","ng://igniteui-angular/lib/list/list.common.ts","ng://igniteui-angular/lib/list/list-item.component.ts","ng://igniteui-angular/lib/list/list.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-search.pipe.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/grid.excel-style-filtering.module.ts","ng://igniteui-angular/lib/grids/grid-common.module.ts","ng://igniteui-angular/lib/grids/grid/grid-api.service.ts","ng://igniteui-angular/lib/grids/grid/grid.directives.ts","ng://igniteui-angular/lib/grids/grid/grid.component.ts","ng://igniteui-angular/lib/grids/grid/grid.pipes.ts","ng://igniteui-angular/lib/grids/grid/grid-row.component.ts","ng://igniteui-angular/lib/grids/grid/grid.summary.pipe.ts","ng://igniteui-angular/lib/grids/grid/grid.module.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-api.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-navigation.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-row.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.pipes.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-cell.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.summary.pipe.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.module.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/selection.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-navigation.service.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-base.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-api.service.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/row-island-api.service.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/row-island.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/child-grid-row.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-cell.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-row.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.pipes.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.module.ts","ng://igniteui-angular/lib/navbar/navbar.component.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.directives.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.component.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.module.ts","ng://igniteui-angular/lib/slider/thumb/thumb-slider.component.ts","ng://igniteui-angular/lib/slider/slider.component.ts","ng://igniteui-angular/lib/snackbar/snackbar.component.ts","ng://igniteui-angular/lib/switch/switch.component.ts","ng://igniteui-angular/lib/tabbar/tabbar.component.ts","ng://igniteui-angular/lib/tabs/tabs.common.ts","ng://igniteui-angular/lib/tabs/tab-item.component.ts","ng://igniteui-angular/lib/tabs/tabs.directives.ts","ng://igniteui-angular/lib/tabs/tabs-group.component.ts","ng://igniteui-angular/lib/tabs/tabs.component.ts","ng://igniteui-angular/lib/time-picker/time-picker.common.ts","ng://igniteui-angular/lib/time-picker/time-picker.directives.ts","ng://igniteui-angular/lib/time-picker/time-picker.pipes.ts","ng://igniteui-angular/lib/time-picker/time-picker.component.ts","ng://igniteui-angular/lib/toast/toast.component.ts","ng://igniteui-angular/lib/select/select-group.component.ts","ng://igniteui-angular/lib/select/select-item.component.ts","ng://igniteui-angular/lib/select/select-positioning-strategy.ts","ng://igniteui-angular/lib/select/select.component.ts","ng://igniteui-angular/lib/select/select-navigation.directive.ts","ng://igniteui-angular/lib/select/select.module.ts"],"names":["quad","cubic","quart","quint","sine","expo","circ","back","base","style","opacity","animate","baseParams","delay","duration","easing","EaseOut","endOpacity","startOpacity","fadeIn","animation","params","fadeOut","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","baseRecipe","backfaceVisibility","transformStyle","keyframes","offset","transform","endAngle","endDistance","rotateX","rotateY","rotateZ","startAngle","startDistance","flipTop","flipBottom","flipLeft","flipRight","flipHorFwd","flipHorBck","flipVerFwd","flipVerBck","transformOrigin","baseInParams","xPos","yPos","baseOutParams","EaseIn","rotateInCenter","rotateOutCenter","rotateInTop","rotateOutTop","rotateInRight","rotateOutRight","rotateInBottom","rotateOutBottom","rotateInLeft","rotateOutLeft","rotateInTr","rotateOutTr","rotateInBr","rotateOutBr","rotateInBl","rotateOutBl","rotateInTl","rotateOutTl","rotateInDiagonal1","rotateOutDiagonal1","rotateInDiagonal2","rotateOutDiagonal2","rotateInHor","rotateOutHor","rotateInVer","rotateOutVer","direction","shakeHor","shakeVer","shakeTop","shakeBottom","shakeRight","shakeLeft","shakeCenter","shakeTr","shakeBr","shakeBl","shakeTl","heartbeatBase","animationTimingFunction","pulsateBase","pulsateParams","fromScale","toScale","blinkBase","pulsateFwd","pulsateBck","heartbeat","blink","midScale","scaleInCenter","scaleInBl","scaleInVerCenter","scaleInTop","scaleInLeft","scaleInVerTop","scaleInTr","scaleInTl","scaleInVerBottom","scaleInRight","scaleInHorCenter","scaleInBr","scaleInHorLeft","scaleInBottom","scaleInHorRight","scaleOutCenter","scaleOutBl","scaleOutBr","scaleOutVerCenter","scaleOutVerTop","scaleOutVerBottom","scaleOutTop","scaleOutLeft","scaleOutTr","scaleOutTl","scaleOutRight","scaleOutBottom","scaleOutHorCenter","scaleOutHorLeft","scaleOutHorRight","fromPosition","toPosition","slideInTop","slideInLeft","slideInRight","slideInBottom","slideInTr","slideInTl","slideInBr","slideInBl","slideOutTop","slideOutRight","slideOutBottom","slideOutLeft","slideOutTr","slideOutBr","slideOutBl","slideOutTl","swingBase","swingParams","swingOutParams","swingInTopFwd","swingInRightFwd","swingInBottomFwd","swingInLeftFwd","swingInTopBck","swingInRightBck","swingInBottomBck","swingInLeftBck","swingOutTopFwd","swingOutRightFwd","swingOutBottomFwd","swingOutLefttFwd","swingOutTopBck","swingOutRightBck","swingOutBottomBck","swingOutLeftBck","height","startHeight","endHeight","growVerIn","growVerOut","IgxNavigationService","navs","add","id","navItem","remove","get","toggle","args","_i","_a","open","close","IgxNavigationToggleDirective","nav","state","toggleNavigationDrawer","Directive","selector","Input","HostListener","IgxNavigationCloseDirective","closeNavigationDrawer","IgxNavigationModule","NgModule","declarations","exports","providers","cloneArray","array","deep","arr","cloneValue","mergeObjects","obj1","obj2","isObject","Error","_b","tslib_1.__values","keys","_c","isDate","Date","getTime","isArray","Map","Set","result","toString","getNodeSizeViaRange","range","node","overflow","isFirefox","selectNodeContents","width","getBoundingClientRect","isIE","navigator","appVersion","indexOf","isEdge","test","userAgent","isLeftClick","event","button","flatten","forEach","el","children","toArray","NAVIGATION_KEYS","ROW_EXPAND_KEYS","split","ROW_COLLAPSE_KEYS","SUPPORTED_KEYS","from","None","Asc","Desc","DefaultSortingStrategy","instance","_instance","sort","data","fieldName","dir","ignoreCase","valueResolver","_this","reverse","SortingDirection","arraySort","compareObjects","compareValues","a","an","undefined","bn","toLowerCase","compareFn","IgxSorting","expressions","sortDataRecursive","groupedRecordsByExpression","index","expression","groupval","res","len","getFieldValue","comparer","groupingComparer","expressionIndex","j","expr","gbData","gbDataLen","exprsLen","dataLen","strategy","groupDataRecursive","level","parent","grid","groupsRecords","group","groupRow","records","groupParent","groups","rowHeight","group_1","group_1_1","groupItem","obj","IgxDataRecordSorting","tslib_1.__extends","IgxGrouping","groupBy","IncorrectPageIndex","IncorrectRecordsPerPage","FilteringExpressionsTree","operator","filteringOperands","find","findIndex","isFilteringExpressionsTreeForColumn","expressionsTree","ADD","DELETE","UPDATE","GridBaseAPIService","editCellState","editRowState","destroyMap","get_column_by_name","name","columnList","col","field","get_summary_data","filteredData","transactions","enabled","DataUtil","mergeTransactions","getAggregatedChanges","primaryKey","getTransactionLog","filter","type","TransactionType","map","rowID","rec","splice","getRowData","get_all_data","get_row_index_in_data","escape_editMode","crudService","end","get_cell_inEditMode","cell","record","get_row_by_key","rowSelector","dataRowList","row","rowData","get_row_by_index","rowIndex","rowList","get_cell_by_key","cells","column","get_cell_by_index","columnIndex","get_cell_by_visible_index","visibleColumnIndex","submit_value","update_cell","editValue","cancel","valueInTransactions","getAggregatedValue","createEditEventArgs","onCellEdit","emit","newValue","castToNumber","isEqual","oldValue","summaryService","clearSummaryCache","updateData","selection","is_item_selected","deselect_item","select_item","hasSummarizedColumns","removeSummaries","rowEditable","_pipeTrigger","rowValueInDataSource","rowCurrentValue","rowNewValue","transaction","_update_row","rowInEditMode","newData","transactionState","lastCommitedValue","getState","update_row","selected","hasSummarized","onRowEdit","endPending","newId","update_row_in_array","remove_grouping_expression","sortingState","sortingExpressions","prepare_sorting_expression","sort_multiple","expressions_1","expressions_1_1","each","term","conditionOrExpressionsTree","filteringTree","filteringExpressionsTree","endEdit","paging","page","fieldFilterIndex","prepare_filtering_expression","filter_global","condition","columns","filteringIgnoreCase","clear_filter","filteringState","clear_sort","searchVal","insertAtIndex","newExpressionsTree","oldExpressionsTreeIndex","newExpression","stateCollections","maxCollection","maxExpr","collection","myExpr","should_apply_number_style","dataType","DataType","Number","get_data","includeTransactions","dataWithAddedInTransactionRows","get_filtered_data","getSortStrategyPerColumn","sortStrategy","addRowToData","deleteRowFromData","recordRef","deleteRowById","rowId","hasRowInNonDeletedState","onRowDeleted","rowSelectable","deselectRows","checkHeaderCheckboxStatus","cdr","markForCheck","dataAfterDelete","refreshSearch","perPage","get_row_id","row_deleted_transaction","atInexistingPage","isLastPage","Injectable","And","Or","BaseFilteringStrategy","findMatchByExpression","cond","val","logic","matchRecord","matchOperand","operand","FilteringLogic","FilteringStrategy","TreeGridFilteringStrategy","filterImpl","cloneTreeGridRecord","filteredChildren","isFilteredOutParent","IgxTreeGridFilteringPipe","gridAPI","hierarchyData","pipeTrigger","resetFilteredOutProperty","expandAllRecursive","expansionStates","expandedStates","updateNonProcessedRecord","set","Pipe","pure","String","Boolean","sorting","treeGridSort","hierarchicalData","hr","hierarchicalRecord","expanded","grouping","restoreGroups","groupData","restoreGroupsIterative","chain","pointer","added","shift","unshift","hierarchy","this_1","getHierarchy","expandState","expansion","isHierarchyMatch","defaultExpanded","Math","max","start","min","slice","recordsPerPage","countPages","countRecords","PagingError","isNaN","ceil","treeGridFilter","gRow","h1","h2","every","deleteRows","item","mergeHierarchicalTransactions","childDataKey","path","parent_1","this_2","findParentFromPath","updateIndex","x","deleteIndex","transactions_1","transactions_1_1","path_1","path_1_1","ExportUtilities","getKeysFromData","dataEntry","dataEntryMiddle","floor","dataEntryLast","keys1","keys2","keys3","isSpecialData","saveBlobToFile","blob","fileName","document","createElement","window","msSaveOrOpenBlob","url","URL","createObjectURL","download","href","body","appendChild","click","removeChild","revokeObjectURL","stringToArrayBuffer","buf","ArrayBuffer","view","Uint8Array","charCodeAt","hasValue","isNullOrWhitespaces","trim","IgxBaseExporter","flatRecords","_isTreeGrid","_indexOfLastPinnedColumn","_sort","onRowExport","EventEmitter","onColumnExport","export","options","_columnList","hiddenColumns","lastVisbleColumnIndex","columnHeader","header","exportColumn","hidden","ignoreColumnsVisibility","ignoreColumnsOrder","visibleIndex","columnInfo","skip","formatter","skipFormatter","pinned","hiddenColumn","prepareData","exportData","k","skippedPinnedColumnsCount","columnsWithoutHeaderCount","columnExportArgs","dataToExport","exportRow","exportDataImplementation","resetDefaults","rowArgs","reduce","rawValue","originalRowData","rootRecords","prepareHierarchicalData","ignoreFiltering","filteringLogic","ignoreSorting","Output","CharSeparatedValueData","_data","valueDelimiter","_headerRecord","_dataRecords","_eor","_escapeCharacters","_delimiterLength","_isSpecialData","setDelimiter","_delimiter","processHeaderRecord","processDataRecords","processField","escapeChars","safeValue","some","v","includes","recordData","keys_1","keys_1_1","keyName","processRecord","keys_2","keys_2_1","currentData","dataRecords","currentData_1","currentData_1_1","IgxExporterOptionsBase","_fileExtension","setFileName","_fileName","endsWith","IgxCsvExporterOptions","fileType","_super","getExtensionFromFileType","setFileType","fType","extension","CsvFileTypes","CSV","TSV","TAB","_valueDelimiter","_fileType","oldExt","pop","newName","replace","IgxCsvExporterService","onExportEnded","csvData","_stringData","saveFile","exportFile","Blob","RootExcelFolder","RootRelsExcelFolder","DocPropsExcelFolder","XLExcelFolder","XLRelsExcelFolder","ThemeExcelFolder","WorksheetsExcelFolder","WorksheetsRelsExcelFolder","TablesExcelFolder","RootRelsFile","AppFile","CoreFile","WorkbookRelsFile","ThemeFile","WorksheetFile","StyleFile","WorkbookFile","ContentTypesFile","SharedStringsFile","WorksheetRelsFile","TablesFile","ExcelStrings","getRels","XML_STRING","getApp","getCore","getTheme","getStyles","hasNonStringValues","getWorkbook","getWorksheetRels","getWorkbookRels","hasSharedStrings","retVal","SHARED_STRING_RELATIONSHIP","getSheetXML","dimension","freezePane","cols","sheetData","hasTable","hasGroupedRows","outlineLevel","getSharedStringXML","count","uniqueCount","table","getContentTypesXML","contentTypes","getTablesXML","tableColumns","getExcelColumn","returnString","char","fromCharCode","writeElement","folder","worksheetData","file","isEmpty","dictionary","dataDictionary","maxOutlineLevel","columnCount","saveValue","rowCount","isTreeGridData","sCollapsed","sHidden","hasCollapsedParent","rowOutlineLevel","sOutlineLevel","cellData","getCellData","columnWidths","widthInTwips","columnWidth","MIN_WIDTH","indexOfLastPinnedColumn","ignorePinning","frozenColumnCount","exportAsTable","join","columnName","cellValue","savedValue","isSavedAsString","dict","sortedValues","getKeys","sharedStrings","sortedValues_1","sortedValues_1_1","getSanitizedValue","stringsCount","lastColumn","values","sortString","sortingExpression","sc","childFiles","ExcelFileTypes","childFolders","ExcelFolderTypes","ExcelElementsFactory","getExcelFolder","getExcelFile","WorksheetDataDictionary","_dictionary","_widthsDictionary","_counter","dirtyKeyCollections","_calculateColumnWidth","_columnWidths","_columnTypeInfo","fill","isHeader","sanitizedValue","sanitizeValue","getTextWidth","maxWidth","getValue","_keysAreValid","_keys","metrics","getContext","measureText","TEXT_PADDING","_context","canvas","font","DEFAULT_FONT","WorksheetData","initializeData","_columnCount","_rowCount","_dataDictionary","actualData","IgxExcelExporterService","populateFolder","zip","_d","childFolder","folderIntance","zipFolder","folderName","_e","_f","childFile","maxLevel_1","_xlsx","JSZip","rootFolder","generateAsync","ZIP_OPTIONS","then","xlsx","atob","compression","IgxExcelExporterOptions","_columnWidth","_rowHeight","Left","Center","Right","Top","Middle","Bottom","Point","y","getTargetRect","settings","targetRect","bottom","left","right","top","HTMLElement","targetPoint","getViewportRect","documentElement","clientWidth","clientHeight","scrollPosition","getViewportScrollPosition","documentRect","horizontalScrollPosition","scrollLeft","scrollX","verticalScrollPosition","scrollTop","scrollY","cloneInstance","object","clonedObj","getPrototypeOf","GlobalPositionStrategy","_defaultSettings","horizontalDirection","HorizontalAlignment","verticalDirection","VerticalAlignment","horizontalStartPoint","verticalStartPoint","openAnimation","closeAnimation","minSize","position","contentElement","size","initialCall","classList","parentElement","justifyContent","alignItems","clone","ScrollStrategy","scrollContainer","NoOpScrollStrategy","initialize","overlayService","attach","detach","DeprecateMethod","message","isMessageShown","descriptor","originalMethod_1","targetName","showMessage","DeprecateProperty","getter_1","setter_1","messageToDisplay","originalDescriptor","newKey","generateUniqueKey","configurable","enumerable","isDevMode","console","warn","warningShown","IgxOverlayService","_factoryResolver","_appRef","_injector","builder","_zone","_componentId","_overlayInfos","destroy$","Subject","positionStrategy","scrollStrategy","modal","closeOnOutsideClick","onOpening","onOpened","onClosing","onClosed","onAnimation","documentClicked","ev","info","elementRef","nativeElement","contains","positionTarget","clickOnPositionTarget","positionTargetRect","clientX","clientY","excludePositionTarget","closeAnimationPlayer","hasStarted","_hide","repositionAll","reposition","_document","component","moduleRef","getOverlayInfo","show","compOrId","getOverlayById","_show","hide","hideAll","overlayInfo","contentElementRect","eventArgs","componentRef","detachView","hostView","destroy","elementRect","initialSize","hook","placeElementHook","moveElementToOverlay","changeDetectorRef","detectChanges","updateSize","addOutsideClickListener","addResizeHandler","setupModalWrapper","playOpenAnimation","visibility","removeOutsideClickListener","removeResizeHandler","child","parentNode","applyAnimationParams","playCloseAnimation","onCloseDone","ngZone","ElementRef","dynamicFactory","factoryResolver","componentFactoryResolver","resolveComponentFactory","injector","dynamicComponent","attachView","element","location","insertBefore","wrapperElement","getWrapperElement","getContentElement","getOverlayElement","elementScrollTop","wrapper","content","addEventListener","stopPropagation","outlet","_overlayElement","fromEvent","pipe","takeUntil","subscribe","cleanUp","openAnimationPlayer","animationBuilder","build","innerRenderer","_renderer","openAnimationInnerPlayer","engine","players","onDone","reset","closeAnimationInnerPlayer","getPosition","init","setPosition","animationPlayer","animationType","play","animationOptions","transitionDuration","transitionTimingFunction","shouldRemoveClickEventListener_1","removeEventListener","closingOverlaysCount","defaultView","ngOnDestroy","complete","providedIn","ComponentFactoryResolver","ApplicationRef","Injector","AnimationBuilder","Inject","DOCUMENT","NgZone","ConnectedPositioningStrategy","setStyle","startPoint","wrapperRect","round","BaseFitPositionStrategy","connectedFit","_initialSettings","viewPortRect","updateViewPortFit","fitHorizontal","fitVertical","fitInViewport","calculateLeft","calculateTop","AutoPositionStrategy","transformString","canFlipHorizontal","flipHorizontal","horizontalPush","canFlipVertical","flipVertical","verticalPush","flippedStartPoint","flippedDirection","leftBorder","rightBorder","topBorder","bottomBorder","leftExtend","rightExtend","abs","topExtend","bottomExtend","ElasticPositionStrategy","maxReduction","reduction","translation","AbsoluteScrollStrategy","_initialized","onScroll","_overlayService","_scrollContainer","_id","runOutsideAngular","addScrollEventListener","BlockScrollStrategy","preventDefault","_sourceElement","srcElement","_initialScrollTop","_initialScrollLeft","onWheel","stopImmediatePropagation","CloseScrollStrategy","cumulativeScrollTop","cumulativeScrollLeft","initialScrollTop","_threshold","initialScrollLeft","scrollHeight","IgxBaseTransactionService","_isPending","_pendingTransactions","_pendingStates","onStateUpdate","updateState","undo","redo","mergeChanges","updateValue","commit","clear","startPending","states","mergeValues","first","second","IgxTransactionService","_transactions","_redoStack","_undoStack","_states","verifyAddedTransaction","addTransaction","pendingState","pendingChange","change","aggregatedValue","originalValue","actions","JSON","stringify","lastActions","currentActions","currentActions_1","currentActions_1_1","actions_1","actions_1_1","action","delete","cleanState","IgxHierarchicalTransactionService","clearArraysFromObject","currentState","prop","IgxToggleDirective","navigationService","_overlaySubFilter","_overlayId","_collapsed","overlayClosed","unsubscribe","collapsed","overlaySettings","hasOpenAnimation","hasCloseAnimation","openEventArgs","_overlayOpenedSub","_overlayClosingSub","clearSubscription","_overlayClosedSub","isClosing","ngOnInit","subscription","closed","exportAs","ChangeDetectorRef","Optional","HostBinding","IgxToggleActionDirective","_closeOnOutsideClick","_target","_overlayDefaults","onClick","clonedSettings","updateOverlaySettings","positionStrategyClone","tslib_1.__decorate","IgxOverlayOutletDirective","IgxToggleModule","Up","Down","IGX_DROPDOWN_BASE","IgxSelectionAPIService","componentID","newSelection","get_empty","sel","add_item","itemID","add_items","itemIDs","clearSelection","select_items","delete_item","delete_items","deselectedItem","deselect_items","has","first_item","are_all_selected","dataCount","are_none_selected","get_all_ids","NEXT_ID","IgxDropDownGroupComponent","role","groupClass","disabled","labelId","Component","template","IgxDropDownItemBase","dropDown","_focused","_selected","_index","_disabled","itemIndex","displayDensity","focused","items","clicked","ngDoCheck","dropDownSelectedItem","selectItem","IgxDropDownItemComponent","allowItemsFocus","focusedItem","focus","preventScroll","comfortable","cosy","compact","DisplayDensityToken","InjectionToken","DisplayDensityBase","displayDensityOptions","onDensityChanged","oldDisplayDensityOptions","DisplayDensity","_displayDensity","currentDisplayDensity","densityChangedArgs","oldDensity","newDensity","getComponentDensityClass","baseStyleClass","IgxDropDownBase","_displayDensityOptions","_focusedItem","onSelection","maxHeight","cssClass","headers","onItemActionKey","DropDownActionKey","oldSelection","navigate","currentIndex","newIndex","getNearestSiblingFocusableItemIndex","navigateItem","startIndex","oldItem","newItem","scrollToHiddenItem","navigateFirst","Navigate","navigateLast","navigateNext","navigatePrev","parentRect","IgxDropDownComponent","toggleDirective","selectedItem","setSelectedItem","onToggleOpening","scrollToItem","onToggleOpened","onToggleClosing","onToggleClosed","itemPosition","calculateScrollPosition","setTimeout","scrollDelta","elementHeight","provide","useExisting","ViewChild","ContentChildren","forwardRef","descendants","IgxDropDownItemNavigationDirective","dropdown","handleKeyDown","onArrowUpKeyDown","onArrowDownKeyDown","onHomeKeyDown","onEndKeyDown","Self","IgxDropDownModule","imports","CommonModule","START","END","IgxHintDirective","_element","_position","IgxHintPosition","isPositionStart","isPositionEnd","toUpperCase","_applyPosition","IgxInputGroupBase","nativeValidationAttributes","INITIAL","VALID","INVALID","IgxInputDirective","inputGroup","ngModel","formControl","_valid","IgxInputState","isInput","isTextArea","checkValidity","hasAttribute","required","isRequired","onFocus","isFocused","onBlur","ngControl","valid","_hasValidators","onInput","ngAfterViewInit","hasPlaceholder","control","validator","validation","tagName","_statusChanges$","statusChanges","onStatusChanged","bind","asyncValidator","touched","dirty","invalid","placeholder","nativeValidationAttributes_1","nativeValidationAttributes_1_1","nativeValidationAttribute","NgModel","FormControlName","IgxLabelDirective","defaultClass","IgxPrefixDirective","IgxPrefixModule","IgxSuffixDirective","IgxSuffixModule","LINE","BOX","BORDER","SEARCH","IgxInputGroupComponent","_type","IgxInputGroupType","_filled","_supressInputAutofocus","isBox","isBorder","isSearch","hasWarning","input","hints","read","ContentChild","IgxInputGroupModule","IgxAutocompleteDirective","defaultSettings","dropDownOpened$","onItemSelected","autofill","select","model","setValue","highlightFirstItem","autocompleteSettings","listId","onArrowDown","onTab","changes","IgxAutocompleteModule","IgxButtonDirective","_cssClass","buttonClick","addClass","_color","color","_backgroundColor","_label","setAttribute","removeClass","Renderer2","IgxButtonModule","DEFAULT","DASHED","IgxDividerDirective","_inset","IgxDividerType","middle","vertical","baseMargin","IgxDividerModule","VERTICALLY","HORIZONTALLY","NONE","IgxDragCustomEventDetails","IgxDropEnterEventArgs","IgxDropLeaveEventArgs","IgxDropEventArgs","IgxDragDirective","zone","renderer","dragTolerance","ghostImageClass","hideBaseOnDrag","animateOnRelease","dragGhostHost","dragStart","dragEnd","returnMoveEnd","dragClicked","touch","transitionProperty","_visibility","defaultReturnDuration","_startX","_startY","_dragStarted","_pointerDownId","_clicked","_lastDropArea","_destroy","_removeOnDestroy","bVisible","parseInt","_dragGhost","requestAnimationFrame","PointerEvent","pointerEventsEnabled","onPointerDown","throttle","interval","animationFrameScheduler","onPointerMove","onPointerUp","touchEventsEnabled","pointerId","pageX","pageY","touches","marginTop","getComputedStyle","marginLeft","_dragOffsetX","getWindowScrollLeft","_dragOffsetY","getWindowScrollTop","_dragStartX","_dragStartY","setPointerCapture","dragStartArgs_1","originalEvent","owner","totalMovedX","totalMovedY","run","createDragGhost","dispatchDragEvents","onTransitionEnd","dispatchDropEvent","cloneNode","hostLeft","hostTop","visible","topDropArea","startX","startY","elementsFromPoint","getElementsAtPoint","getAttribute","dispatchEvent","updateDragRelativePos","totalDraggedX","totalDraggedY","newPosX","newPosY","diffStartX","diffStartY","dropFinished","viewPortX","pageXOffset","viewPortY","pageYOffset","eventName","dragLeaveEvent","createEvent","initCustomEvent","IgxDropDirective","onEnter","onLeave","onDrop","droppable","dragover","onDragEnter","onDragLeave","onDragOver","elementPosX","elementPosY","offsetX","detail","offsetY","drag","dragData","onDragDrop","IgxDragDropModule","IgxFilterOptions","inputValue","get_value","textContent","valueToTest","matchFn","metConditionFn","overdueConditionFn","IgxFilterDirective","filtering","filtered","ngOnChanges","filterOptions","currentValue","previousValue","IgxFilterPipe","filteredItems","match","IgxFilterModule","IgxFocusDirective","comp","focusState","trigger","getEditElement","NG_VALUE_ACCESSOR","IgxFocusModule","DisplayContainerComponent","_viewContainer","notVirtual","ViewContainerRef","HVirtualHelperComponent","cssClasses","VirtualHelperComponent","_height","destroyed","IgxScrollInertiaDirective","wheelStep","inertiaStep","swipeToleranceX","inertiaDeltaY","inertiaDeltaX","inertiaDuration","_savedSpeedsX","setPointerCaptureFName","Element","releasePointerCaptureFName","targetElem","evt","onTouchStart","onTouchMove","onTouchEnd","onMSGestureStart","onMSGestureChange","IgxScrollInertiaScrollContainer","scrollDeltaX","scrollDeltaY","scrollStep","minWheelStep","wheelDeltaX","sign","deltaX","calcAxisCoords","wheelDeltaY","deltaY","IgxScrollInertiaDirection","_scrollToX","curScrollLeft","maxScrollLeft","_scrollToY","preventParentScroll","curScrollTop","maxScrollTop","offsetHeight","MSGesture","cancelAnimationFrame","_touchInertiaAnimID","_touchStartX","_touchStartY","_lastTouchEnd","_lastTouchX","_lastTouchY","_savedSpeedsY","_totalMovedX","_offsetRecorded","_offsetDirection","_touchPrevented","scrolledXY","destX","destY","timeFromLastTouch","speedX","speedY","_lastMovedX","_lastMovedY","_scrollTo","_inertiaInit","pointerType","_pointer","_gestureObject","addPointer","screenX","screenY","touchPos","dest","stepModifer","_nextX","_nextY","IgxScrollInertiaModule","IgxForOfSyncService","_master","isMaster","directive","igxForScrollOrientation","setMaster","forced","orientation","resetMaster","sizesCache","chunkSize","IgxForOfDirective","_template","_differs","resolver","totalItemCount","onChunkLoad","onDataChanged","onBeforeViewDestroyed","onChunkPreload","_sizesCache","_differ","heightCache","MAX_PERF_SCROLL_DIFF","_virtHeight","_virtHeightRatio","_virtScrollTop","_bScrollInternal","_scrollPosition","_embeddedViews","getVerticalScroll","igxForContainerSize","igxForOf","hScroll","vh","removeScrollEventListeners","getHorizontalScroll","func","vertical_1","verticalScrollHandler","isScrollable","totalSize","vc","igxForScrollContainer","igxForSizePropName","dcFactory","dc","createComponent","scrollDirection","touchAction","initSizesCache","getElement","_calculateChunkSize","getIndexAt","embeddedView","_vcr","createEmbeddedView","$implicit","factory","_maxHeight","_calcMaxBrowserHeight","_calcHeight","onHScroll","hvFactory","hvh","_updateHScrollOffset","forOf","igxForTrackBy","getTypeNameForDebugging","defaultItemSize","firstChange","containerSize","_recalcOnContainerChange","diff","_updateSizeCache","_applyChanges","_updateScrollOffset","addScrollTop","addTop","originalVirtScrollTop","maxVirtScrollTop","scrollOffset","fixedUpdateAllElements","maxRealScrollTop","scrollTo","isRemote","isPrevItem","nextScroll","_adjustToIndex","scrollNext","scr","endIndex","scrollPrev","scrollNextPage","scrollPrevPage","getColumnScrollLeft","colIndex","getItemCountInView","getSizeAt","getScrollForIndex","realPercentScrolled","prevStartIndex","recalcUpdateSizes","diffs","totalDiff","rNode","rootNodes","nodeType","Node","ELEMENT_NODE","h","igxForItemSize","oldVal","newVal","currDiff","totalWidth","reducer","acc","scrToBottom","_isScrolledToBottom","hSum","_isAtBottomIndex","updatesToIndex","sumDiffs","currOffset","inScrollTop","newStart","prevStart","moveApplyScrollNext","moveApplyScrollPrev","fixedApplyScroll","prevIndex","embView","cntx","context","getContextIndex","insert","_trackByFn","fn","prevChunkSize","applyChunkSizeChange","_recalcScrollBarSize","embeddedViewCopy","div","_calcMaxChunkSize","viewref","nodeName","elem","getElementsByTagName","_getItemSize","maxLength","sum","availableSize","accumulator","currentItem","curItem","prevItem","prevSize","midIdx","cmp","removeLastElem","oldElem","addLastElem","elemIndex","_updateVScrollOffset","vScroll","dim","TemplateRef","IterableDiffers","IgxGridForOfDirective","syncService","onDataChanging","getItemSize","summaries","masterSizesCache","itemsDimension","oldHeight","handleCacheChanges","identityChanges","newHeightCache","newSizesCache","newHeight","numRemovedItems","forEachRemovedItem","forEachIdentityChange","previousIndex","forEachItem","assumeMaster","scrollAmount","_updateViews","IgxForOfModule","entryComponents","IgxLayoutDirective","wrap","justify","itemAlign","display","IgxFlexDirective","grow","shrink","flex","order","basis","IgxLayoutModule","MASK_FLAGS","KEYS","MaskHelper","_cursor","parseValueByMask","maskOptions","cursor","mask","format","literals","getMaskLiterals","literalKeys","nonLiteralIndeces","getNonLiteralIndeces","parseValueByMaskOnInit","insertCharAt","promptChar","isCharValid","validateCharOnPostion","replaceCharAt","parseMask","outputVal","mask_1","mask_1_1","inputVal","literalValues","mask_2","mask_2_1","nonLiteralValues","getNonLiteralValues","pos","nonLiteralValues_1","nonLiteralValues_1_1","restoreValueFromMask","value_1","value_1_1","parseValueByMaskUponSelection","isMarked","parseValueByMaskUponCopyPaste","clipboardData","selectionEnd","clipboardData_1","clipboardData_1_1","inputChar","isValid","charAt","RegExp","strValue","substring","nonLiteralsIndeces","value_2","value_2_1","noop","IgxMaskDirective","onValueChange","_maskOptions","_onTouchedCallback","_onChangeCallback","maskHelper","selectionStart","onKeydown","keyCode","charCode","_stopPropagation","_ctrlDown","_key","_selection","onKeyup","onPaste","_paste","_valOnPaste","_cursorOnPaste","getCursorPosition","onInputChanged","setCursorPosition","currentCursorPos","rawVal","dataValue","includeLiterals","formattedValue","focusedValuePipe","displayValuePipe","setSelectionRange","writeValue","registerOnChange","registerOnTouched","multi","IgxMaskModule","BEFORE","AFTER","nextId","IgxRadioComponent","labelPosition","tabindex","disableRipple","ariaLabelledBy","ariaLabel","checked","inputId","_value","_onRadioChange","_onRadioClick","nativeRadio","blur","_onLabelClick","radio","RadioLabelPosition","IgxRippleDirective","rippleTarget","rippleDuration","rippleDisabled","rippleElementClass","rippleHostClass","_centered","animationQueue","centered","onMouseDown","_ripple","setStyles","rippleElement","styleParams","radius","rippleColor","querySelector","rectBounds","dimensions","IgxRippleModule","IgxRadioGroupDirective","_name","_isInitialized","_labelPosition","_required","_selectRadioButton","_setRadioButtonNames","_setRadioButtonsRequired","_disableRadioButtons","_setRadioButtonLabelPosition","ngAfterContentInit","_initRadioButtons","radioButtons","_selectedRadioButtonChanged","IgxRadioModule","IgxTextHighlightDirective","_div","_observer","_nodeWasRemoved","_forceEvaluation","_activeElementIndex","groupName","onActiveElementChanged","deactivate","activateIfNecessary","_lastSearchInfo","setActiveHighlight","highlight","highlightGroupsMap","clearActiveHighlight","clearHighlight","disconnect","_valueChanged","searchedText","matchCount","caseSensitive","exactMatch","_container","firstElementChild","ngAfterViewChecked","text","caseSensitiveResolved","exactMatchResolved","searchNeedsEvaluation","clearChildElements","getHighlightedText","activate","observe","MutationObserver","mutationList","mutation","removedNodes","addedNodes","childList","spans","querySelectorAll","elementToActivate","activeCssClass","elementToDeactivate","originalContentHidden","setProperty","searchText","appendDiv","stringValue","contentStringResolved","searchTextResolved","appendSpan","appendText","foundIndex","previousMatchEnd","textElement","createText","outerHTML","span","containerClass","IgxTextHighlightModule","IgxTextSelectionDirective","selectionState","IgxTextSelectionModule","IgxTooltipTargetDirective","_navigationService","showDelay","hideDelay","tooltipDisabled","onTooltipShow","onTooltipHide","positionSettings","useAnimation","checkOutletAndOutsideClick","preMouseEnterCheck","toBeShown","clearTimeout","timeoutId","toBeHidden","hidingArgs","tooltip","forceClose","mergedOverlaySettings","preMouseLeaveCheck","onKeydownEscape","onMouseEnter","showingArgs","onMouseLeave","showTooltip","onDocumentTouchStart","hideTooltip","IgxTooltipDirective","forceOpen","finish","IgxTooltipModule","IgxFilteringOperand","operations","isUnary","iconName","findValueInSet","conditionList","f","append","operation","IgxBooleanFilteringOperand","IgxDateFilteringOperand","validateInputData","targetp","getDateParts","searchp","year","month","day","now","td","setDate","getDate","yesterday","date","dateFormat","hours","milliseconds","minutes","seconds","getFullYear","getMonth","getHours","getMinutes","getSeconds","getMilliseconds","toISOString","IgxNumberFilteringOperand","IgxStringFilteringOperand","search","applyIgnoreCase","startsWith","filteringStateDefaults","GroupedRecords","IgxIconService","_sanitizer","_httpClient","_fontSet","_fontSetAliases","_cachedSvgIcons","className","registerFontSetAlias","alias","fontSetClassName","addSvgIcon","fontSet","safeUrl","bypassSecurityTrustResourceUrl","sanitize","SecurityContext","RESOURCE_URL","fetchSvg","addSvgIconFromText","iconText","cacheSvgIcon","isSvgIconCached","iconKey","getSvgIconKey","responseType","ensureSvgContainerCreated","innerHTML","svg","oldChild","_svgContainer","DomSanitizer","HttpClient","IgxIconComponent","_el","iconService","ariaHidden","active","defaultFontSet","updateIconClass","iconColor","svgImage","noLigature","explicitLigature","IgxIconModule","forRoot","ngModule","HttpClientModule","INITIALS","IMAGE","ICON","IgxAvatarComponent","_size","roundShape","src","AvatarType","icon","initials","imageTemplate","initialsTemplate","iconTemplate","defaultTemplate","roleDescription","getRole","getSrcUrl","IgxAvatarModule","INFO","SUCCESS","WARNING","ERROR","IgxBadgeComponent","label","setClasses","classes","Type","IgxBadgeModule","IGX_EXPANSION_PANEL_COMPONENT","IgxExpansionPanelBodyComponent","panel","_labelledBy","labelledBy","headerId","IgxExpansionPanelTitleDirective","IgxExpansionPanelDescriptionDirective","IgxExpansionPanelIconDirective","IgxExpansionPanelHeaderComponent","_iconTemplate","lv","iconPosition","ICON_POSITION","onInteraction","onAction","openPanel","altKey","expand","closePanel","collapse","Host","IgxExpansionPanelComponent","animationSettings","onCollapsed","onExpanded","cb","IgxExpansionPanelModule","IgxBannerActionsDirective","IgxBannerComponent","_bannerActionTemplate","_animationSettings","_expansionPanel","_bannerEvent","banner","openingArgs","closingArgs","onExpansionPanelOpen","onExpansionPanelClose","IgxBannerModule","horizontal","IgxButtonGroupComponent","_cdr","buttonClickNotifier$","queryListNotifier$","multiSelection","selectedIndexes","onSelect","onUnselect","viewButtons","templateButtons","_itemContentCssClass","buttons","_isVertical","ButtonGroupAlignment","selectButton","buttonElement","indexInViewButtons","deselectButton","initButtons","_clickHandler","ViewChildren","IgxButtonGroupModule","After","Before","Between","Specific","Weekdays","Weekends","MDAYS","stop","step","cur","isLeap","weekDay","getDay","monthRange","nDays","isDateInRanges","ranges","dateInMs","ranges_1","ranges_1_1","dRanges","dateRange","DateRangeType","dRange","datesInMs","datesInMs_1","datesInMs_1_1","SUNDAY","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","Calendar","firstWeekDay","WEEKDAYS","_firstWeekDay","weekdays","monthdates","extraWeek","days","timedelta","generateICalendarDate","monthdatescalendar","dates","units","ret","checkRollover","setFullYear","setMonth","setTime","formatToParts","locale","parts","Intl","DateTimeFormat","full","formattedParts_1","toType","partType","literal","combined","parts_1","parts_1_1","parts_2","parts_2_1","isCurrentMonth","isNextMonth","isPrevMonth","isPreviousMonth","IgxCalendarYearDirective","onYearSelection","isCurrentYear","IgxCalendarMonthDirective","onMonthSelection","IgxCalendarHeaderTemplateDirective","IgxCalendarSubheaderTemplateDirective","IgxCalendarBase","CalendarSelection","rangeStarted","_locale","_disabledDates","_specialDates","_formatOptions","weekday","_formatViews","calendarModel","viewDate","weekStart","initFormatters","formatOptions","formatViews","selectedDates","selectDate","_viewDate","getDateOnly","getDateOnlyInMs","generateDateRange","selectSingle","selectMultiple","valueDateOnly_1","selectRange","excludeDisabledDates","valueOf","isDateDisabled","deselectSingle","deselectMultiple","selectedDatesCount","datesInMsToDeselect","deselectRange","valueStart","valueEnd","selectedDatesStart","selectedDatesEnd","formatterDay","formatterWeekday","formatterMonth","formatterYear","formatterMonthday","disabledDates","deselectDate","selectDateFromClient","YEAR","DECADE","IgxMonthPickerBase","_activeView","CalendarView","changeYear","yearsBtn","activeViewDecade","activeViewDecadeKB","formattedYear","IgxMonthsViewComponent","formatView","styleClass","_monthFormat","initMonthFormatter","_calendarModel","formattedMonth","_formatterMonth","selectMonth","monthTracker","monthFormat","onKeydownArrowUp","months","nodeRect","nextNodeRect","onKeydownArrowDown","onKeydownArrowRight","onKeydownArrowLeft","onKeydownHome","onKeydownEnd","onKeydownEnter","CalendarHammerConfig","overrides","pan","Hammer","DIRECTION_VERTICAL","threshold","HammerGestureConfig","IgxYearsViewComponent","_yearFormat","initYearFormatter","_formatterYear","selectYear","scroll","delta","generateYearRange","yearTracker","yearFormat","currentYear","HAMMER_GESTURE_CONFIG","useClass","IgxDayItemComponent","onDateSelection","today","outOfRangeDates","specialDates","isWeekend","isInactive","isToday","isDisabled","isOutOfRange","isSpecial","IgxDaysViewComponent","animationAction","changeDaysView","onViewChanged","isKeydownTrigger","disableOutOfRangeDates","formattedDate","generateWeekHeader","dayNames","rv","rv_1","rv_1_1","rowTracker","dateTracker","focusActiveDate","selectDay","animationDone","isLast","date_1","callback","toState","nextDate","focusPreviousUpDate","prevView","dayItem","focusNextDownDate","nextView","focusPreviousDate","focusNextDate","animations","transition","IgxCalendarComponent","hasHeader","_monthAction","activeView","headerTemplateDirective","subheaderTemplateDirective","headerDate","generateContext","previousMonth","daysView","previousMonthKB","nextMonth","nextMonthKB","dacadeView","getFormattedDate","monthday","childClicked","viewChanged","changeMonth","monthsBtn","activeViewYear","monthsView","activeViewYearKB","onKeydownPageUp","activeDate","activeElement","onKeydownPageDown","onKeydownShiftPageUp","onKeydownShiftPageDown","monthView","yearView","IgxMonthPickerComponent","yearAction","nextYear","previousYear","nextYearKB","previousYearKB","IgxCalendarModule","FormsModule","IgxCardMediaDirective","IgxCardHeaderComponent","IgxCardThumbnailDirective","IgxCardHeaderTitleDirective","IgxCardHeaderSubtitleDirective","IgxCardContentDirective","IgxCardFooterDirective","OUTLINED","IgxCardComponent","IgxCardType","JUSTIFY","IgxCardActionsComponent","card","isVerticalSet","layout","IgxCardActionsLayout","IgxCardModule","NEXT","PREV","IgxCarouselComponent","loop","pause","navigation","onSlideChanged","onSlideAdded","onSlideRemoved","onCarouselPaused","onCarouselPlaying","slides","_total","_interval","_restartInterval","_destroyed","_lastInterval","clearInterval","setAriaLabel","slide","total","_currentSlide","_playing","carousel","current","Direction","_moveTo","prev","_resetInterval","setInterval","tick","IgxSlideComponent","IgxCarouselModule","IgxCheckboxComponent","LabelPosition","indeterminate","disableTransitions","checkbox","_onCheckboxChange","_onCheckboxClick","nativeCheckbox","preserveWhitespaces","IGX_CHECKBOX_REQUIRED_VALIDATOR","NG_VALIDATORS","IgxCheckboxRequiredDirective","CheckboxRequiredValidator","IgxCheckboxModule","CHIP_ID","IgxChipComponent","draggable","removable","selectable","class","onMoveStart","onMoveEnd","onRemove","onKeyDown","_selectedItemClass","_movedWhileRemoving","changeSelection","chipArea","backgroundColor","newColor","removeIcon","defaultRemoveIcon","selectIcon","defaultSelectIcon","selectClass","SELECT_CLASS","srcEvent","onSelectArgs","onChipKeyDown","keyDownArgs","onRemoveBtnKeyDown","onRemoveMouseDown","onRemoveClick","onRemoveTouchMove","onRemoveTouchEnd","onChipDragStart","onChipDragEnd","dragDir","onChipMoveEnd","onChipDragClicked","clickEventArgs","onChipDragEnterHandler","chip","dragChip","onChipDrop","IgxChipsAreaComponent","_iterableDiffers","onReorder","selectedChips","chipsList","forEachAddedItem","addedChip","onChipMoveStart","onChipDragEnter","onChipSelectionChange","modifiedChipsArray","chipsArray","dragChipIndex","shiftKey","positionChipAtIndex","dropChipIndex","chipIndex","targetIndex","shiftRestLeft","eventData","IgxChipsModule","IgxComboHeaderDirective","IgxComboFooterDirective","IgxComboItemDirective","IgxComboEmptyDirective","IgxComboHeaderItemDirective","IgxComboAddItemDirective","IgxComboToggleIconDirective","IgxComboClearIconDirective","IgxComboAPIService","register","combo","add_custom_item","addItemToCollection","set_selected_item","isItemSelected","deselectItems","selectItems","IgxComboItemComponent","comboAPI","itemHeight","comboID","isVisible","rect","parentDiv","IGX_COMBO_COMPONENT","IgxComboAddItemComponent","IgxComboDropDownComponent","scrollHandler","verticalScrollContainer","itemsMaxHeight","focusSearchInput","vContainer","subscribeNext","triggerCheck","scrollTarget","navigateRemoteItem","navigateDown","allData","extraScroll","isAddButtonVisible","sortedChildren","isAddItemFocused","focusAddItemButton","targetDataIndex","itemIndexInData","lastLoadedIndex","isScrolledToLast","addedIndex_1","findNextFocusableItem","navigateUp","addedIndex","focusComboSearch","indexInData","tslib_1.__spread","virtualContainer","take","sortedChildren_1","sortedChildren_1_1","updateScrollPosition","handleEnter","handleSpace","IgxComboFilteringPipe","SimpleFilteringStrategy","filteringExpressions","IgxComboSortingPipe","IgxComboGroupingPipe","groupKey","inserts","currentHeader","insertFlag","valueKey","IgxComboFilterConditionPipe","ComboConnectedPositionStrategy","_callback","ItemHeights","IgxComboComponent","customValueFlag","defaultFallbackGroup","stringFilters","booleanFilters","_filteringLogic","_filteringExpressions","_sortingExpressions","_groupKey","_prevInputValue","_dataType","_filteredData","_itemHeight","searchInput","comboInput","itemTemplate","headerTemplate","footerTemplate","headerItemTemplate","addItemTemplate","emptyTemplate","toggleIconTemplate","clearIconTemplate","dropdownContainer","onSelectionChange","onAddition","onSearchInput","onDataPreLoad","allowCustomValues","searchPlaceholder","filterable","IgxComboState","searchValue","_displayKey","clearSorting","onInputClick","checkMatch","handleKeyUp","displayKey","itemMatch","handleInputChange","cdrFlag","getValueByValueKey","DataTypes","_stringifyItemID","_parseItemID","parse","handleSelectAll","selectAllItems","deselectAllItems","addedItem","oldCollection","newCollection","opening","displaySearchInput","newArray","expression2","headerExpression","searchVale","NgControl","_positionCallback","dataLoading","setDisabledState","complexTemplate","primitiveTemplate","handleClearItems","selectedItems","newItems","clearCurrentSelection","setSelection","ignoreFilter","allVisible","itemValue","oldSelectionEmit","handleOpening","handleOpened","handleClosing","handleClosed","IgxComboModule","ReactiveFormsModule","DatePickerUtil","parseDateFormat","maskValue","DEFAULT_LOCALE","dateStruct","SHORT_DATE_MASK","maskArray","monthInitPosition","dayInitPosition","yearInitPosition","initialPosition","formatType","getYearFormatType","getMonthFormatType","getDayFormatType","isDateChar","SEPARATOR","fillDatePartsPositions","getDefaultLocaleMask","getInputMask","inputMask","getMask","parseDateArray","dateFormatParts","prevDateValue","yearPrefix","dayStr","getDayValueFromInput","monthStr","getMonthValueFromInput","yearStr","getYearValueFromInput","getDateFormatPart","originalYear","fullYear","NaN","daysInMonth","maskToPromptChars","PROMPT_CHAR","trimUnderlines","getModifiedDateInput","isSpinLoop","maxValue","minValue","datePart","getDatePartOnPosition","datePartType","datePartFormatType","datePartValue","getDateValueFromInput","minMax","getMinMaxValue","tempValue","startIdx","endIdx","prefix","getNumericFormatPrefix","addPromptCharsEditMode","dateArray","checkForCompleteDateInput","dayValue","monthValue","yearValue","isFullInput","isFullYearInput","formatterOptions","resolvedOptions","NUMBER_OF_MONTHS","getFullYearFromString","partPosition","yearPart","currentPos","IGX_DATE_PICKER_COMPONENT","DatePickerDisplayValuePipe","_datePicker","rawDateString","DatePickerInputValuePipe","invalidDate","IgxDatePickerTemplateDirective","DropDown","Dialog","IgxCalendarContainerComponent","mode","InteractionMode","onClose","onTodaySelection","onEscape","closeCalendar","triggerTodaySelection","ShortDate","MediumDate","LongDate","FullDate","IgxDatePickerComponent","_moduleRef","labelVisibility","onOpen","onDisabledDate","onValidationFailed","inputValuePipe","spinDelta","defaultLocale","calendarHeight","_destroy$","_format","PredefinedFormatOptions","_modalOverlay","_dropDownOverlay","_customFormatChecker","_transformedDate","_getEditorDate","_getDisplayDate","datePickerTemplateDirective","readOnlyDatePickerTemplate","editableDatePickerTemplate","displayData","openDialog","onSpaceClick","inputElement","editableInput","readonlyInput","_positionSettings","outletDirective","_dropDownOverlaySettings","_modalOverlaySettings","overlay","_componentID","_onOpening","_onOpened","_onClosed","handleSelection","calendar","modalOverlay","modalOverlaySettings","dropDownOverlay","dropDownOverlaySettings","dropDownTarget","editableInputGroup","templateDropDownTarget","_setCursorPosition","setHours","setMinutes","setSeconds","setMilliseconds","_isInEditMode","calculateDate","spinValue","targetValue","cursorPosition","_getCursorPosition","checkInput","inputType","dateString","invokedByEvent","newDateArray","datePicker","prevValue","eventType","modifiedInputValue","_initializeCalendarContainer","_focusCalendarDate","componentInstance","isVertical","subheaderTemplate","cancelButtonLabel","todayButtonLabel","_setLocaleToDate","toLocaleDateString","formatDate","changedValue","NgModuleRef","IgxDatePickerModule","IgxDialogTitleDirective","defaultStyle","IgxDialogActionsDirective","DIALOG_ID","IgxDialogComponent","navService","title","leftButtonLabel","leftButtonType","leftButtonColor","leftButtonBackgroundColor","leftButtonRipple","rightButtonLabel","rightButtonType","rightButtonColor","rightButtonBackgroundColor","rightButtonRipple","onLeftButtonSelect","onRightButtonSelect","_animaitonSettings","_closeOnOutsideSelect","_isModal","_titleId","_overlayDefaultSettings","isModal","closeOnOutsideSelect","isOpen","toggleRef","emitCloseFromDialog","dialog","onDialogSelected","DIALOG_CLASS","onInternalLeftButtonSelect","onInternalRightButtonSelect","IgxDialogModule","IgxRow","IgxCell","inlineEditorTemplate","parseFloat","isFinite","cellID","IgxGridCRUDService","createCell","createRow","sameRow","sameCell","columnID","beginRowEdit","onRowEditEnter","endRowEdit","openRowOverlay","begin","onCellEditEnter","rowEditing","isInEditMode","IgxGridSelectionService","dragMode","keyboardState","pointerState","temp","_ranges","initPointerState","initKeyboardState","addKeyboardRange","generateRange","primaryButton","ctrl","isActiveNode","isInMap","addRangeMeta","removeRangeMeta","rowStart","rowEnd","columnStart","columnEnd","keyboardStateOnKeydown","shiftTab","keyboardStateOnFocus","emitter","kbState","dragSelect","pointerDown","pointerDownShiftKey","clearTextSelection","mergeMap","source","entries","pair","newValue_1","pointerEnter","pointerUp","restoreTextSelection","runTask","getSelection","rangeCount","_selectionRange","getRangeAt","removeAllRanges","addRange","createRange","_moveSelectionChrome","Range","selectNode","HammerGesturesManager","doc","hammerOptions","inputClass","TouchInput","recognizers","Pan","Swipe","DIRECTION_HORIZONTAL","Tap","taps","_hammerManagers","supports","eventHandler","mc","getManagerForElement","addManagerForElement","handler","eventObj","on","off","addGlobalEventListener","getGlobalEventTarget","getDOM","setManagerOption","manager","removeManagerForElement","IgxGridCellComponent","selectionService","touchManager","highlightClass","activeHighlightClass","lastPinned","editMode","isInCompositionMode","pointerdown","selectionNode","ctrlKey","pointerenter","pointerup","onRangeSelection","_updateCRUDStatus","onDoubleClick","editable","deleted","cellTemplate","defaultCellTemplate","gridID","setEditMode","isCellSelected","rowTransaction","rowCurrentState","inEditMode","_highlight","lastSearchInfo","compositionStartHandler","compositionEndHandler","focusHandlerIE","focusOut","cssProps","crud","editableCell","update","onCellClick","onContextMenu","handleAlt","isToggleKey","trigger_row_expansion_toggle","treeRow","handleTab","performShiftTabKey","performTab","handleEnd","goToLastCell","handleHome","goToFirstCell","keydownArgs","targetType","onGridKeydown","onFocusChange","navigateTop","navigateBottom","onKeydownEnterEditMode","onKeydownExitEditMode","checkboxElement","onCellEditCancel","highlightText","searchable","calculateSizeToFit","changeDetection","ChangeDetectionStrategy","OnPush","IgxRowComponent","defaultCssClass","_rowSelection","_rowData","resolveClasses","visibleColumns","pinnedColumns","unpinnedColumns","showRowCheckboxes","onCheckboxClick","triggerRowSelectionChange","isSelected","allRowsSelected","indexClass","evenRowCSS","oddRowCSS","selectedClass","editClass","dirtyClass","deletedClass","IgxSummaryOperand","operate","summaryResult","IgxNumberSummaryOperand","average","IgxDateSummaryOperand","latest","earliest","IgxColumnResizingService","resizeCursor","showResizer","getVisibleContentHeight","topLevelParent","headerGroup","actualMinWidth","minWidth","defaultMinWidth","headerCell","actualWidth","pinnedMaxWidth","calcPinnedContainerMaxWidth","getPinnedWidth","MAX_SAFE_INTEGER","autosizeColumnOnDblClick","currentColWidth","getLargestCellWidth","reflow","onColumnResized","prevWidth","newWidth","resizeColumn","startResizePos","colMinWidth","colMaxWidth","isColumnResizing","IgxResizeHandleDirective","colResizingService","_dblClick","columnGroup","resizable","debounceTime","_onResizeAreaMouseDown","resizeLine","resizer","onMousedown","onMouseOver","IgxColumnResizerDirective","restrictHResizeMin","MIN_SAFE_INTEGER","restrictHResizeMax","resizeEnd","resizeStart","resize","switchMap","_left","onMousemove","onMouseup","IgxFilterCellTemplateDirective","IgxCellTemplateDirective","IgxCellHeaderTemplateDirective","IgxCellFooterTemplateDirective","IgxCellEditorTemplateDirective","IgxColumnMovingService","_column","_icon","BeforeDropTarget","AfterDropTarget","IgxColumnMovingDragDirective","cms","_ghostImageClass","_dragGhostImgIconClass","_dragGhostImgIconGroupClass","movable","groupable","_unsubscribe","cancelDrop","isColumnMoving","onColumnMovingStart","subscription$","draggedColumn","onColumnMoving","flexBasis","createTextNode","hostElemLeft","hostElemTop","childNodes","paddingLeft","IgxColumnMovingDropDirective","_dropIndicator","_lastDropIndicator","_dragLeave","_dropIndicatorClass","IgxColumnComponent","_hVirtDir","hasMovableColumns","disablePinning","isDropTarget","clientRect","_dropPos","DropPosition","lastElementChild","innerText","horizontalScroll","wheelHandler","nextPinnedWidth","onColumnMovingEnd","moveColumn","IgxGridBodyDirective","IgxDatePipeComponent","LOCALE_ID","DatePipe","IgxDecimalPipeComponent","DecimalPipe","ContainerPositioningStrategy","isTop","isTopInitialPosition","container","sortable","_calcWidth","headerClasses","headerGroupClasses","sortingIgnoreCase","_pinned","_summaries","_filters","_sortStrategy","_hidden","_disableHiding","_disablePinning","_defaultMinWidth","_hasSummary","_vIndex","recalculateSummaries","resetCaches","check","resetSummaryHeight","filteringService","refreshExpressions","widthSetByUser","_width","defaultWidth","calcPixelWidth","cacheCalcWidth","pin","unpin","classRef","removeSummariesCachePerColumn","_summaryPipeTrigger","_groupingComparer","funcRef","_bodyTemplate","_headerTemplate","_inlineEditorTemplate","_filterCellTemplate","vIndex","allChildren","indexInCollection","ptr","lvl","headTemplate","editorTemplate","filterCellTemplateDirective","filters","hasIndex","getUnpinnedWidth","unpinnedAreaMinWidth","_unpinnedIndex","_unpinnedColumns","_pinnedColumns","targetColumn","isPinned","onColumnPinning","_moveColumns","reinitPinStates","headerCellList","filterCellList","filterCell","headerGroupsList","autosize","largest","cellsContentWidths_1","cellStyle","cellPadding","paddingRight","borderRightWidth","headerStyle","headerPadding","largestCell","getCellWidth","colWidth","isPercentageWidth","cellWidth","unpinnedWidth","getPossibleColumnWidth","IgxColumnGroupComponent","QueryList","isChildrenWidthInPercent","ItemPropertyValueChanged","propName","valueChanged","_propName","_object","onValueChanged","ColumnChooserItemBase","indentation","IgxColumnHidingItemDirective","disableHiding","Alphabetical","DisplayOrder","CustomFilteringStrategy","ColumnChooserBase","disableFilter","columnsAreaMaxHeight","_currentColumns","_gridColumns","_rawColumns","_columnDisplayOrder","ColumnDisplayOrder","_filterCriteria","_filterColumnsPrompt","_title","createColumnItems","filterCriteria","clearFiltering","orderColumns","createColumnItem","localeCompare","createFilteringExpression","IgxColumnHidingComponent","showAllText","hideAllText","onColumnVisibilityChanged","columnItems","hiddenColumnsCount","hidableColumns","onVisibilityChanged","showAllColumns","hideAllColumns","IgxColumnHidingModule","IgxColumnPinningItemDirective","IgxColumnPinningComponent","checkboxValueChange","columnItem","pinnable","IgxColumnPinningModule","IgxGridToolbarComponent","excelExporter","csvExporter","_overlaySettings","gridHeight","calcHeight","exportExcel","exportCsv","getTitle","toolbarTitle","getExportText","exportText","getExportExcelText","exportExcelText","getExportCsvText","exportCsvText","exportClicked","exportButton","exportDropdown","exportToExcelClicked","performExport","exportToCsvClicked","exp","exportType","exporter","onToolbarExporting","toggleColumnHidingUI","columnHidingButton","columnHidingDropdown","toggleColumnPinningUI","columnPinningButton","columnPinningDropdown","toolbar","toolbarCustomContentTemplate","IgxGridToolbarCustomContentDirective","IgxRowEditTemplateDirective","IgxRowEditTextDirective","IgxRowEditActionsDirective","IgxRowEditTabStopDirective","rowEditTabs","allTabs","last","move","focusNextCell","cellIndex","parentVirtDir","tap","lastEditableColumnIndex","firstEditableColumnIndex","targetCell","isColumnFullyVisible","isColumnLeftFullyVisible","virtDirRow","getColumnUnpinnedIndex","IgxGridBaseComponent","IgxGridGroupByRowComponent","gridSelection","paddingIndentationCssClass","isExpandedGroup","grRowExpr","isVirtualized","groupRowIndex","toggleGroup","isKeySupportedInGroupRow","handleTabKey","getColumnByName","rootSummariesEnabled","alt","IgxGridNavigationService","offsetWidth","rowComp","summariesRowList","forOfDir","headerContainer","displayContainerWidth","displayContainerScrollLeft","isRowInEditMode","isColumnEditable","gridOrderedColumns","findNextEditable","gridColumns","MoveDirection","getCellElementByVisibleIndex","isSummary","cellSelector","getCellSelector","nextElementSibling","getFocusableGrid","performHorizontalScrollToCell","previousElementSibling","movePreviousEditable","editableIndex","moveNextEditable","rowElement","firstCell","allCells","verticalScroll","currentRowIndex","containerTopOffset","verticalDisplayContainerElement","offsetTop","tag","getRowSelector","getRowByIndex","focusPreviousElement","currentRowEl","focusElem","containerHeight","targetEndTopOffset","nextIndex_1","getNextRowByIndex","focusNextElement","isSummaryRow","rows","getAllRows","goToLastBodyElement","rowEl","moveFocusToFilterCell","toStart","isFilterRowVisible","focusFilterRowCloseButton","unpinnedFilterableColumns","focusFilterCellChip","scrollToFilterCell","navigatePrevFilterCell","prevFilterableIndex","firstFiltarableCol","getFirstPinnedFilterableColumn","prevColumn","prevVisibleIndex","navigateFirstCellIfPossible","navigateNextFilterCell","nextFilterableIndex","nextColumn","nextVisibleIndex","getLastPinnedFilterableColumn","pinnedFilterableColums","allowFiltering","filterMode","FilterMode","quickFilter","shouldPerformVerticalScroll","targetRowIndex","targetRow","unpinnedIndex","nextIndex","tbody","icons","FILTERING_ICONS_FONT_SET","ExpressionUI","IgxFilteringService","columnsWithComplexFilter","areEventsSubscribed","isFiltering","columnToExpressionsMap","columnStartIndex","filteredColumn","selectedExpression","columnToFocus","shouldFocusNext","columnToMoreIconHidden","_datePipe","subscribeToEvents","updateFilteringCell","updateFilterCellArea","filterInternal","createSimpleFilteringTree","clearFilter","conditionOrExpressionTree","expressionsTreeForColumn","expressionForColumn","onFilteringDone","getExpressions","filterGlobal","registerSVGIcons","icons_1","icons_1_1","columnId","expressionUIs","generateExpressionsList","isFilteringTreeComplex","removeExpression","indexToRemove","expressionsList","beforeOperator","afterOperator","expressionUIList","currAndBranch","currExpressionUI","isFilterComplex","isComplex","getOperatorAsString","resourceStrings","igx_grid_filter_operator_and","igx_grid_filter_operator_or","getChipLabel","datePipe","focusFirst","focusChip","filteringRow","closeButton","currentColumnRight","currentColumnLeft","getChildAndOperatorsCount","expressionsUIs","generateExpressionsListRecursive","exprUI","prevExprUI","isFilteringExpressionsTreeEmpty","expressionTree","exprTree","WatchChanges","propDesc","privateKey","originalSetter","SimpleChange","IgxExcelStyleSearchComponent","clearInput","onCheckboxChange","IgxExcelStyleDefaultExpressionComponent","onExpressionRemoved","onLogicOperatorChanged","inputValuesDirective","expressionUI","inputGroupConditions","inputValuesElement","isConditionSelected","conditionName","getConditionName","translateCondition","getInputWidth","getCondition","getIconName","conditions","toggleCustomDialogDropDown","dropdownConditions","onConditionsChanged","onValuesInput","transformValue","onLogicOperatorButtonClicked","buttonIndex","logicOperatorButtonGroup","selectedButtons","onLogicOperatorKeyDown","onRemoveButtonClick","onInputConditionsKeyDown","IgxExcelStyleDateExpressionComponent","openDatePicker","IgxExcelStyleCustomDialogComponent","_customDialogPositionSettings","_customDialogOverlaySettings","dateExpressionTemplate","defaultExpressionTemplate","onCustomDialogOpening","selectedOperator","createInitialExpressionUIElement","onCustomDialogOpened","expressionComponents","rootGrid","onClearButtonClick","closeDialog","overlayComponentId","onApplyButtonClick","onAddButtonClick","markChildrenForCheck","scrollToBottom","onApplyButtonKeyDown","createCondition","expressionDateComponents","firstExprUI","secondExprUI","expressionsContainer","IgxExcelStyleSortingComponent","onSortButtonClicked","sortDirection","sortButtonGroup","isColumnGrouped","clearSort","FilterListItem","IgxExcelStyleSortingTemplateDirective","IgxExcelStyleMovingTemplateDirective","IgxExcelStyleHidingTemplateDirective","IgxExcelStylePinningTemplateDirective","IgxGridExcelStyleFilteringComponent","shouldOpenSubMenu","containsNullOrEmpty","selectAllSelected","selectAllIndeterminate","filterValues","columnMoving","Subscription","listData","uniqueValues","_subMenuPositionSettings","_subMenuOverlaySettings","igx_grid_excel_boolean_filter","igx_grid_excel_number_filter","igx_grid_excel_date_filter","igx_grid_excel_text_filter","customDialog","populateColumnData","excelStyleSorting","se","excelStyleSearch","clearFilterClass","closeDropdown","onPin","onHide","onTextFilterClick","currentTarget","gridRect","dropdownRect","mainDropdown","x1","subMenu","onTextFilterKeyDown","onSubMenuClosed","onSubMenuSelection","areExpressionsSelectable","areExpressionsValuesInTheList","firstValue","gridExpressionsTree","toDateString","shouldUpdateSelection","addBooleanItems","addItems","sortData","addBlanksItem","addSelectAllItem","filterListItem","selectAll","igx_grid_excel_select_all","blanks","igx_grid_excel_blanks","valueA","valueB","excelStyleSortingTemplateDirective","defaultExcelStyleSortingTemplate","excelStyleMovingTemplateDirective","defaultExcelStyleMovingTemplate","excelStylePinningTemplateDirective","defaultExcelStylePinningTemplate","excelStyleHidingTemplateDirective","defaultExcelStyleHidingTemplate","applyFilter","filterTree","filterOptimizationThreshold","blanksItemIndex","blanksItem","onClearFilterKeyDown","showCustomFilterItem","IgxGridHeaderComponent","_filteringService","hostRole","defaultClasses","igx-grid__th","asc","ascending","descending","igx-grid__th--number","igx-grid__th--sortable","igx-grid__th--filtrable","igx-grid__th--sorted","sorted","klass","hasColumnGroups","maxLevelHeaderDepth","defaultRowHeight","initFilteringSettings","getSortDirection","_componentOverlayId","triggerSort","onFilteringIconClick","toggleFilterDropdown","onSortingIconClick","sortDir","groupingExpressions","filterIconTarget","filterIconClassName","_filterMenuOverlaySettings","_filterMenuPositionSettings","onOverlayOpening","onOverlayClosed","IgxGridFilteringCellComponent","baseClass","currentTemplate","moreFiltersCount","onTabKeyDown","isLastElementFocused","onShiftTabKeyDown","isFirstElementFocused","isChipVisible","updateVisibleFilters","filterCellTemplate","complexFilter","defaultFilter","emptyFilter","onChipClicked","isColumnRightVisible","isColumnLeftVisible","onChipRemoved","filteringIndicatorClass","isMoreIconHidden","focusFirstElement","focusElement","ghostChip","complexChip","ex","moreIcon","chipsArea","areaWidth","viewWidth","chipsAreaElements","visibleChipsCount","moreIconWidth","areAllColumnsInView","IgxGridHeaderGroupComponent","getHeaderGroupWidth","igx-grid__th--pinned","igx-grid__th--pinned-last","isLastPinned","igx-grid__drag-col-header","isHeaderDragged","igx-grid__th--filtering","isFiltered","CurrentResourceStrings","GridResStrings","igx_grid_groupByArea_message","igx_grid_emptyFilteredGrid_message","igx_grid_emptyGrid_message","igx_grid_filter","igx_grid_filter_row_close","igx_grid_filter_row_reset","igx_grid_filter_row_placeholder","igx_grid_filter_row_boolean_placeholder","igx_grid_filter_row_date_placeholder","igx_grid_complex_filter","igx_grid_filter_contains","igx_grid_filter_doesNotContain","igx_grid_filter_startsWith","igx_grid_filter_endsWith","igx_grid_filter_equals","igx_grid_filter_doesNotEqual","igx_grid_filter_empty","igx_grid_filter_notEmpty","igx_grid_filter_null","igx_grid_filter_notNull","igx_grid_filter_before","igx_grid_filter_after","igx_grid_filter_today","igx_grid_filter_yesterday","igx_grid_filter_thisMonth","igx_grid_filter_lastMonth","igx_grid_filter_nextMonth","igx_grid_filter_thisYear","igx_grid_filter_lastYear","igx_grid_filter_nextYear","igx_grid_filter_greaterThan","igx_grid_filter_lessThan","igx_grid_filter_greaterThanOrEqualTo","igx_grid_filter_lessThanOrEqualTo","igx_grid_filter_true","igx_grid_filter_false","igx_grid_filter_all","igx_grid_filter_condition_placeholder","igx_grid_summary_count","igx_grid_summary_min","igx_grid_summary_max","igx_grid_summary_sum","igx_grid_summary_average","igx_grid_summary_earliest","igx_grid_summary_latest","igx_grid_excel_filter_moving_left","igx_grid_excel_filter_moving_right","igx_grid_excel_filter_moving_header","igx_grid_excel_filter_sorting_asc","igx_grid_excel_filter_sorting_desc","igx_grid_excel_filter_sorting_header","igx_grid_excel_filter_clear","igx_grid_excel_custom_dialog_add","igx_grid_excel_custom_dialog_clear","igx_grid_excel_custom_dialog_header","igx_grid_excel_cancel","igx_grid_excel_apply","igx_grid_excel_search_placeholder","igx_grid_excel_hide","igx_grid_excel_pin","igx_grid_excel_unpin","igx_grid_excel_custom_filter","TimePickerResStrings","igx_time_picker_ok","igx_time_picker_cancel","updateResourceStrings","currentStrings","newStrings","IgxGridSummaryService","summaryCacheMap","rootSummaryID","summaryHeight","maxSummariesLenght","retriggerRootPipe","deleteOperation","calculateGridHeight","isGroupedColumn","deleteSummaryCache","isTreeGrid","removeAllTreeGridSummaries","isHierarchicalGrid","getSummaryID","cache","calcMaxSummaryHeight","maxSummaryLength","hasSummary","getCurrentSummaryColumn","defaultSummaryHeight","calculateSummaries","rowSummaries","columnValues","updateSummaryCache","groupingArgs","compareGroupingExpressions","filteringApplied","summaryIDs","removeChildRowSummaries","newExpressions","removedCols","ungroupedColumns","newExpr","colName","IgxSummaryCellComponent","firstCellIndentation","isKeySupportedInCell","getRowElementByIndex","sr","dataRowIndex","translateSummary","summary","IgxSummaryRowComponent","getColumnSummaries","LEFT","TOP","RIGHT","BOTTOM","TOPLEFT","TOPRIGHT","BOTTOMLEFT","BOTTOMRIGHT","IgxGridDragSelectDirective","ref","onDragStop","onDragScroll","end$","lastDirection","DragScrollDirection","startDragSelection","activeDrag","_measureDimensions","_sub","_interval$","stopDragSelection","_activeDrag","trunc","IgxTemplateOutletDirective","_viewContainerRef","_embeddedViewsMap","onViewCreated","onViewMoved","onCachedViewLoaded","_getActionType","TemplateOutletAction","CreateView","_recreateView","MoveView","_moveView","UseCachedView","_useCachedView","UpdateViewContext","_updateExistingContext","igxTemplateOutletContext","cleanCache","cleanView","tmplID","_viewRef","igxTemplateOutlet","cachedView","oldContext","_cloneContext","_shouldRecreateView","ctxChange","_hasContextShapeChanged","prevCtxKeys","currCtxKeys","currCtxKeys_1","currCtxKeys_1_1","ctx","movedView","shouldRecreate","IgxTemplateOutletModule","IgxGridColumnResizerComponent","IgxGridFilteringRowComponent","_conditionsOverlaySettings","_operatorsOverlaySettings","chipAreaScrollOffset","isKeyPressed","isComposing","_cancelChipClick","resetExpression","addExpression","showHideArrowButtons","onTabKeydown","onEscKeydown","defaultDateUI","defaultFilterUI","onPrefixKeyDown","dropDownConditions","toggleConditionsDropDown","inputGroupPrefix","onInputKeyDown","commitInput","onInputKeyUp","onCompositionStart","onCompositionEnd","datePickerClose","indexToDeselect","scrollChipsWhenAddingExpression","onClearKeyDown","onClearClick","onCommitKeyDown","onCommitClick","onInputGroupFocusout","focusedElement","onDateSelected","toggleOperatorsDropDown","dropDownOperators","unaryConditionChangedCallback","conditionChangedCallback","onChipPointerdown","onChipClick","onChipSelected","onLeftArrowKeyDown","scrollChipsOnRemove","scrollChipsOnArrowPress","arrowPosition","chipAraeChildren","containerRect","containerWidth","chipsAreaWidth","showArrows","isColumnFiltered","containerRectRight","lastChipRectRight","resetChipsArea","dif","IgxGridTransaction","rootLevelOnly","childLevelsOnly","rootAndChildLevels","excelStyleFilter","dataCell","summaryCell","differs","viewRef","_resourceStrings","_emptyGridMessage","_emptyFilteredGridMessage","_isLoading","overlayIDs","autoGenerate","columnHidingTitle","columnPinningTitle","onRowSelectionChange","onRowEditCancel","onColumnInit","onSortingDone","onPagingDone","onRowAdded","columnsWithNoSetWidths","_showToolbar","_exportExcel","_exportCsv","_toolbarTitle","_exportText","_exportExcelText","_exportCsvText","_rowEditable","_filteredSortedData","toolbarHtml","calcRowCheckboxWidth","chipsGoupingExpressions","activeMatchIndex","matchInfoCache","_perPage","_page","_paging","_columns","_filteringExpressionsTree","_maxLevelHeaderDepth","_columnHiding","_columnPinning","_keydownListener","_vScrollListener","_hScrollListener","_wheelListener","_allowFiltering","_filterMode","_hiddenColumnsText","_pinnedColumnsText","_autoSize","_ngAfterViewInitPassed","_totalWidth","_pinnedVisible","_unpinnedVisible","_pinnedWidth","_unpinnedWidth","_visibleColumns","_columnGroups","_columnWidthSetByUser","_defaultTargetRecordNumber","_summaryPosition","GridSummaryPosition","_summaryCalculationMode","GridSummaryCalculationMode","rowEditPositioningStrategy","rowEditSettings","rowOutletDirective","resizeHandler","calculateGridSizes","_scrollWidth","filteringExpressionTreeClone","totalPages","previous","deselectAllRows","refreshGridState","_hostWidth","theadRow","headerGroups","_summaryRowList","sumList","_rowList","rList","_dataRowList","toolbarCustomContentTemplates","_outletDirective","rowEditingOutletDirective","rowEditCustom","defaultRowEditTemplate","orderedColumns","rowEditTabsCUSTOM","rowEditTabsDEFAULT","_currentRowState","getExportExcel","getExportCsv","onStable","changeRowEditingOverlayStateOnScroll","hideOverlays","horizontalScrollHandler","_horizontalForOfs","vfor","overlayID","keydownHandler","isNavigationKey","_setupServices","_setupListeners","destructor","ind","columnListDiffer","calcWidth","shouldGenerate","getScrollWidth","setupColumns","autogenerateColumns","initColumns","onColumnsChanged","resetColumnsCaches","resetForOfCache","firstVirtRow","resetColumnCollections","resetCachedWidths","initPinning","isAttachedToDom","mutationsList","subtree","list","combineForOfCollections","summaryList","vertScrDC","$event","dataList","tmpOutlets","tmplOutlet","toggleColumnVisibility","headerCheckboxContainer","defaultHeaderGroupMinWidth","getRowByKey","keyValue","getCellByColumn","columnField","getCellByKey","pagingState","to","fromIndex","toIndex","newList","_resetColumnList","notifyOnChanges","_reorderPinnedColumns","dropIndex","_moveChildColumns","buffer","dropTarget","fi","ti","nextPage","previousPage","isFirstPage","paginate","addRow","deleteRow","updateCell","isDefined","updateRow","enableSummaries","rest","_multipleSummaries","disableSummaries","_disableMultipleSummaries","pinColumn","unpinColumn","findNext","findPrev","updateActiveInfo","rebuildMatchCache","activeInfo_1","clearSearch","summaryCalculationMode","dataLength","_derivePossibleWidth","MINIMUM_COLUMN_WIDTH","allItems","renderedRowHeight","summariesHeight","_calculateGridBodyHeight","getGroupAreaHeight","getToolbarHeight","toolbarHeight","showToolbar","getPagingHeight","pagingHeight","paginator","footerBordersAndScrollbars","tfoot","computed","groupAreaHeight","renderedHeight","isPercentHeight","getPropertyValue","bodyHeight","getDataBasedBodyHeight","defaultTargetBodyHeight","hasVerticalSroll","scrollWidth","baseWidth","computedWidth","visibleChildColumns","columnsWithSetWidths","columnsToSize","sumExistingWidths","curr","widthValue","calculateGridWidth","getElementById","isPercentWidth","getColumnWidthSum","colSum","getFeatureColumnsWidth","added_1","removed_1","hasScroll","repositionRowEditingOverlay","isStable","_applyWidthHostBinding","currentWidth","takeHidden","fc","fc_1","fc_1_1","hostWidth","summaryOperand","customSummary","resolveDataTypes","fields","generateDataFields","onlyTopLevel","setColumnEditState","onHeaderCheckboxClick","headerCheckbox","headerStatus","filteredItemsStatus","currSelection","atLeastOneSelected","notAllSelected","dataItem","updateHeaderCheckboxStatusOnFilter","selectedRows","selectRows","rowIDs","selectableRows","selectAllRows","clearCellSelection","dragScroll","arg","columnToVisibleIndex","startNode","endNode","getSelectedRanges","extractDataFromSelection","selectedData","selectionMap","tuple","selectionMap_1","selectionMap_1_1","temp_1","temp_1_1","getSelectedData","newSelectionAsSet","oldSelectionAsSet","isScroll","compareDocumentPosition","DOCUMENT_POSITION_CONTAINS","trackColumnChanges","increment","rebuildCache","matchInfo","currentPinnedWidth","newUnpinnedCols","delayScrolling","filteredSortedData","scrollDirective","scrollToHorizontally","scrollRow","virtDir","goal","navigateTo","visibleColIndex","executeCallback","getNextCell","currRowIndex","curVisibleColIndex","isValidPosition","colIndexes","editCol","nextCellIndex","getNextDataRowIndex","getPreviousCell","prevCellIndex","getPrevDataRowIndex","GridKeydownTargetType","summaryCells","prevRow","nextRow","c1","c2","numberPipe","dataRow","occurenceIndex","searchIndex","_group","getGroupByRecords","rowEditingOverlay","toggleRowEditingOverlay","configureRowEditingOverlay","rowEditingWheelHandler","closeRowEditingOverlay","rowStyle","useOuter","parentRowOutletDirective","rowChanges","writeToData","endRowTransaction","columnindex","ri","currentCell","hasHorizontalScroll","_restoreVirtState","rowForOf","gridScrLeft","cachedViewLoaded","tmplId","templateID","index_1","summaryRow","IgxSummaryDataPipe","IgxProcessBarTextTemplateDirective","CENTER","DANGER","BaseProgress","requestAnimationId","_valueInPercent","_max","_animate","runAnimation","updateProgressSmoothly","passedValue","convertInPercentage","progressValue","valueInPercent","updateProgress","isInLimitRange","updateProgressDirectly","directionFlow","comparator","isExceedingUpperLimit","isExceedingLowerLimit","NEXT_LINEAR_ID","NEXT_CIRCULAR_ID","IgxLinearProgressBarComponent","valueMin","striped","textAlign","IgxTextAlign","textVisibility","textTop","onProgressChanged","maxNum","_step","valueInRange","getValueInProperRange","changedValues","IgxProgressType","IgxCircularProgressBarComponent","STROKE_OPACITY_DVIDER","STROKE_OPACITY_ADDITION","_circleRadius","_circumference","PI","valueInProperRange","FRAMES","strokeDashoffset","getProgress","strokeOpacity","_svgCircle","percentage","IgxProgressBarModule","IgxGridCellStylesPipe","callbackOrValue","IgxGridNotGroupedPipe","IgxGridTopLevelColumns","IgxGridFilterConditionPipe","IgxGridTransactionPipe","IgxGridPipesModule","IgxExcelStyleColumnMovingComponent","findColumn","onMoveButtonClicked","moveDirection","IgxListBase","IgxEmptyListTemplateDirective","IgxDataLoadingTemplateDirective","IgxListItemLeftPanningTemplateDirective","IgxListItemRightPanningTemplateDirective","IgxListItemComponent","_panState","IgxListPanState","panOffset","lastPanDir","onItemClicked","panStart","isTrue","allowLeftPanning","allowRightPanning","panMove","isPanningToLeft","showLeftPanTemplate","setContentElementLeft","maxLeft","showRightPanTemplate","maxRight","panEnd","relativeOffset","widthTriggeringGrip","panEndTriggeringThreshold","oldPanState","hideLeftAndRightPanTemplates","keepItem","onLeftPan","onRightPan","args2","oldState","newState","onPanStateChange","setLeftAndRightTemplatesVisibility","leftVisibility","rightVisibility","leftPanningTemplateElement","rightPanningTemplateElement","candidates","getElementsByClassName","IgxListComponent","isLoading","dataLoadingTemplate","defaultDataLoadingTemplate","emptyListTemplate","defaultEmptyListTemplate","IgxListModule","IgxExcelStyleSearchFilterPipe","it","IgxGridExcelStyleFilteringModule","IgxGridCommonModule","IgxGridAPIService","groupingState","arrange_sorting_expressions","groupBy_multiple","clear_groupby","names_1","groupedCols","newSortingExpr","grExprIndex","grpExpandState","groupingExpansionState","grExpr","sortExprIndex","groupingState_1","groupingState_1_1","groupBy_get_expanded_for_group","grState","groupBy_is_row_in_group","rowInGroup","groupBy_toggle_group","expansionState","isEditRowInGroup","rowState","groupsExpanded","groupExprA","groupExprB","get_groupBy_record_id","recordId","hierrarchy","groupByKey","IgxGroupByRowTemplateDirective","IgxGroupAreaDropDirective","hovered","columnBelongsToGrid","isGrouped","column_1","closestParentByAttr","attr","closestGridID","IgxGridComponent","_groupingExpressions","_groupingExpandState","_hideGroupedColumns","_dropAreaMessage","onGroupingDone","_gridAPI","oldExpressions","_applyGrouping","groupedCols_1","ungroupedCols_1","groupingDoneArgs","groupedColumns","groupingDiffer","_setGroupColsVisibility","_groupsRowList","_groupRowTemplate","_groupAreaTemplate","clearGrouping","_getStateForGroupRow","_toggleGroup","isGroupByRecord","toggleAllGroupRows","emptyGridTemplate","emptyFilteredGridTemplate","emptyGridDefaultTemplate","loadingGridTemplate","loadingGridDefaultTemplate","chipsOrderChanged","newGrouping","KeyboardEvent","chipsMovingEnded","columnExpr","groupArea","headerGroupContainer","groupByRecord","dropAreaTemplate","defaultDropAreaTemplate","getGroupByChipTitle","groupTemplate","hideGroupedColumns","source_1","IgxGridSortingPipe","IgxGridPreGroupingPipe","IgxGridPostGroupingPipe","IgxGridPagingPipe","IgxGridFilteringPipe","IgxGridRowComponent","IgxGridSummaryPipe","flatData","summaryPosition","summaryPipeTrigger","addSummaryRows","gridId","recordsWithSummary","lastChildMap","maxSummaryHeight","groupRecords","groupRecord","groupRecordId","removeDeletedRecord","summaryRecord","lastChild","lastChildId","IgxGridModule","IgxTreeGridAPIService","processedRootRecords","expand_row","collapse_row","toggle_row_expansion","treeRecord","isExpanded","get_row_expansion_state","onRowToggle","expand_path_to_record","expansionDepth","foreignKey","childData","treeGrid","flatDataWithCascadeOnDeleteAndTransactions","cascadeOnDelete","selectedChildren","get_selected_children","generateRowPath","selectedRowIDs","row_deleted_parent","IgxTreeGridNavigationService","IgxTreeGridComponent","processedRecords","_expansionDepth","Infinity","_expansionStates","cloneMap","mapIn","mapCloned","mapObj","expandRow","collapseRow","toggleRow","expandAll","collapseAll","parentRowID","parentRecord","parentData","childKey","processedExpandedFlatData","IgxTreeGridRowComponent","_treeRow","IgxTreeGridHierarchizingPipe","hierarchicalRecords","treeGridRecordsMap","hierarchizeFlatData","hierarchizeRecursive","getRowID","missingParentRecords","setIndentationLevels","indentationLevel","IgxTreeGridFlatteningPipe","expandedLevels","getFlatDataRecursive","parentExpanded","updateNonProcessedRecordExpansion","IgxTreeGridSortingPipe","flattenTreeGridRecords","records_1","records_1_1","IgxTreeGridPagingPipe","IgxTreeGridTransactionPipe","aggregatedChanges","flatDataClone","hierarchicalDataClone","cloneHierarchicalArray","array_1","array_1_1","clonedItem","IgxTreeGridCellComponent","showIndicator","treeGridAPI","onIndicatorFocus","indicatorWidth","indicator","indicatorStyle","indicatorMargin","marginRight","leftPadding","indentationDiv","indentationStyle","IgxTreeGridSummaryPipe","cellIndentation","childRecord","deletedRows","lenght","IgxTreeGridModule","IgxHierarchicalSelectionAPIService","hSelection","add_sub_item","rootID","parentID","selItem","get_sub_item","clear_sub_item","IgxHierarchicalGridNavigationService","parentGrid","getClosestElemByTag","getChildContainer","getChildGridRowContainer","getChildGrid","childGridID","hgridAPI","getChildGrids","g","getIsChildAtIndex","isChildGridRecord","prevElem","focusPrevChild","_navigateUpInChild","scrollGrid","focusPrev","nextElem","focusNextChild","_navigateDownInChild","focusNext","topIsVisible","scrollable","getNextScrollable","lastIndex","targetIndex_1","scrTopPosition","cellSelector_1","endIsVisible","getNextScrollableDown","targetIndex_2","diffBottom","rowIsVisible","gridTop","_getMaxTop","diffTop","scrGrid","topGrid","summaryRows","hasSummaries","isLastDataRow","nextIsDataRow","isLastColumn","isLastSummaryRow","virt","isNextChild","_navigateToNextParentRow","focusNextRow","childContainer","focusNextChildDOMElem","parentHasSummary","parentRowIndex","isLastRowInParent","nextIsSiblingChild","parentSummary","childGrid","targetGrid","prevSiblingChild","gridElem","dataRows","hasRows","performShiftTabIntoChild","getLastGridElem","lastRowIndex_1","closestChild","trContainer","focusPrevRow","prevChild","getSibling","prevChildRow","childRow","lastCellIndex","grids","gridElems","childLevel","childLayoutList","hg","parentRow","isScrolledToBottom","lastRowInChild","currGrid","parentContainer","childRowContainer","prevIsSiblingChild","getNextParentInfo","nextElement","nonScrollable","parentInfo","nextParentGrid","nextParentElem","parentState","atLastChunk","_getMinBottom","cell_1","closestScrollableGrid","gridBottom","inView","canScroll","cellElem","inChild","cellSelector_2","cell_2","rIndex_1","scrTop","horizontalScrollGridToIndex","callBackFunc","containerTop","sourceElem","targetTag","IgxHierarchicalTransactionServiceFactory","useFactory","hierarchicalTransactionServiceFactory","IgxHierarchicalGridBaseComponent","transactionFactory","_expandChildren","createColumnsList","_createColumn","_createColGroupComponent","_createColComponent","factoryGroup","inputs","newChildren_1","newCol","factoryColumn","getGridsForIsland","rowIslandID","getChildGridsForRowIsland","IgxHierarchicalGridAPIService","childRowIslands","childGrids","registerChildRowIsland","rowIsland","unsetChildRowIsland","getChildRowIsland","currPath","pathElem","childrenForLayout","rowIslandKey","inDepth","layoutMap","getParentRowId","registerChildGrid","getChildGridByID","IgxRowIslandAPIService","unset","oldId","rowIslandAPI","IgxRowIslandComponent","childColumns","onLayoutChange","onGridCreated","initialChanges","layout_id","isInit","expandChildren","updateOnRender","pId","parentId","parentIsland","updateChildren","onRowIslandChange","nestedColumns","colsArray","topCols","updateColumnList","cleanGridState","childGridTemplates","tmpl","IgxChildGridRowComponent","selectionAPI","ch","_handleLayoutChanges","hGrid","l","IgxHierarchicalGridComponent","childLayoutKeys","highlightedRowID","_hierarchicalState","h_id","updateParentSizes","hierarchicalState","hg_verticalScrollHandler","hg_horizontalScrollHandler","cachedData","updateSizes","recalcColSizes","allLayoutList","colLength","_clearSeletionHighlights","hasExpandableChildren","headerHierarchyExpander","getDefaultExpanderWidth","isRowHighlighted","isHierarchicalRecord","childGridsData","trackChanges","moveView","rootHeight","topDiff","collapseAllRows","viewCreatedHandler","viewMovedHandler","relatedGrid","vScr","hScr","inDeph","onContainerScroll","hadScrollbar","IgxHierarchicalGridCellComponent","helement","_rootGrid","_getRootGrid","_clearAllHighlights","currentElement","persistFocusedCell","IgxHierarchicalRowComponent","hselection","IgxGridHierarchicalPipe","childKeys","addHierarchy","IgxGridHierarchicalPagingPipe","IgxHierarchicalGridModule","IgxActionIconDirective","IgxNavbarComponent","titleId","actionIconTemplate","actionButtonIcon","_triggerAction","IgxNavbarModule","IgxNavDrawerItemDirective","activeClass","IgxNavDrawerTemplateDirective","IgxNavDrawerMiniTemplateDirective","IgxNavigationDrawerComponent","_state","_touchManager","enableGestures","pinThreshold","miniWidth","pinChange","opened","closing","_gesturesAttached","_widthCache","windowWidth","css","drawer","mini","styleDummy","_panning","_maxEdgeZone","checkPinThreshold","getWindowWidth","swipe","startPosition","center","distance","maxEdgeZone","panstart","_panStartWidth","getExpectedWidth","_panLimit","setElementClass","visibleWidth","newX","percent","hasAnimateWidth","setXSize","toPrecision","resetPan","toggleOpenedEvent","toggleClosedEvent","miniTemplate","contentTemplate","_miniTemplate","setDrawerWidth","_drawer","_overlay","_styleDummy","updateEdgeZone","ensureEvents","_resizeObserver","set_maxEdgeZone","innerWidth","screen","setElementStyle","getDrawerWidth","debounce","Renderer","IgxNavigationDrawerModule","IgxSliderThumbComponent","_elementRef","_isActiveLabel","isActive","onThumbValueChange","onChange","fromHandler","thumbBounderies","thumbCenter","onPan","mouseX","updateThumbValue","onFocusListener","showThumbLabel","continuous","_timer","hideThumbLabel","thumbLabelVisibilityDuration","calculateTrackUpdate","scaleX","thumbPositionX","stepDistanceCenter","stepDistance","stepToProceed","stepDist","IgxSliderThumbModule","IgxThumbFromTemplateDirective","IgxThumbToTemplateDirective","SLIDER","RANGE","FROM","TO","IgxSliderComponent","_pMin","_pMax","_hasViewInit","_minValue","_maxValue","_countinuous","_labels","SliderType","thumbs","slierClass","thumb","SliderHandle","lowerValue","labelsViewEnabled","upperValue","labels","updateTrack","calculateStepDistance","positionHandlesAndUpdateTrack","setTickInterval","disable","lowerBound","updateLowerBoundAndMinTravelZone","upperBound","updateUpperBoundAndMaxTravelZone","_lowerBound","valueToFraction","_upperBound","isRange","lower","upper","validateInitialValue","findClosestThumb","thumbTo","thumbFrom","showThumbLabels","hideThumbLabels","toggleThumbLabels","onPanListener","onPanStart","onPanEnd","onTapListener","onTap","_lowerValue","_upperValue","sliderSetup","subscribeTo","thumbChanged","positionHandle","thumbType","swapThumb","hasValueChanged","emitValueChanged","onThumbChange","toggleThumb","closestHandle","generateTickMarks","handle","fromOffset","offsetLeft","toOffset","xPointer","closestTo","trackRange","ticks","positions","pMin","pMax","positionGap","trackLeftIndention","track","unsubscriber","merge","isSliderWithDifferentValue","isRangeWithOneDifferentValue","IgxSliderModule","IgxSnackbarComponent","autoHide","displayTime","animationStarted","triggerAction","snackbarAnimationStarted","fromState","snackbarAnimationDone","toOpacity","IgxSnackbarModule","IgxSwitchComponent","switch","_onSwitchChange","_onSwitchClick","SwitchLabelPosition","IGX_SWITCH_REQUIRED_VALIDATOR","IgxSwitchRequiredDirective","IgxSwitchModule","IgxTabTemplateDirective","IgxBottomNavComponent","onTabSelected","onTabDeselected","selectedIndex","_itemStyle","tabs","panels","_selectedPanelHandler","_deselectPanel","selectedTab","tab","IgxTabComponent","IgxTabPanelComponent","_tabBar","_tabTemplate","tabTemplate","_changesCount","relatedPanel","IgxBottomNavModule","IgxTabsBase","scrollElement","scrollRight","IgxTabItemComponent","_tabs","_nativeTabItem","onResize","selectedIndicator","nativeTabItem","relatedGroup","focusDelay","isLeftArrow","tabsArray","IgxRightButtonStyleDirective","getRightButtonStyle","ButtonStyle","viewPortWidth","viewPort","itemsContainerChildrenCount","itemsContainer","itemsContainerWidth","lastTab","headerContainerWidth","IgxLeftButtonStyleDirective","getLeftButtonStyle","IgxTabItemTemplateDirective","IgxTabsGroupComponent","transformContentAnimation","tabItem","relatedTab","transformIndicatorAnimation","onTabItemSelected","tabElement","viewPortOffsetWidth","contentOffset","tabsContainer","contentsContainer","FIXED","CONTENTFIT","IgxTabsComponent","tabsType","onTabItemDeselected","_selectedIndex","setSelectedGroup","iconLabelFound","TabsType","selectedGroupHandler","prevSelectedIndex","deselectGroup","_groupChanges$","resetSelectionOnCollectionChanged","selectGroupByIndex","selectableGroup","selectedTabItem","tabsArray_1","tabsArray_1_1","IgxTabsModule","IGX_TIME_PICKER_COMPONENT","IgxItemListDirective","timePicker","nextItem","nextHour","nextMinute","nextAmPm","prevHour","prevMinute","prevAmPm","listName","minuteList","_ampmItems","ampmList","hourList","okButtonClick","hideOverlay","cancelButtonClick","onHover","onPanMove","IgxHourItemDirective","itemList","isSelectedHour","selectedHour","scrollHourIntoView","IgxMinuteItemDirective","isSelectedMinute","selectedMinute","scrollMinuteIntoView","IgxAmPmItemDirective","isSelectedAmPm","selectedAmPm","scrollAmPmIntoView","IgxTimePickerTemplateDirective","TimeDisplayFormatPipe","maskAmPM","sections","hour","amPM","prompt","regExp","hourVal","minutesVal","TimeInputFormatPipe","cleared","HOURS_POS","MINUTES_POS","AMPM_POS","TimePickerHammerConfig","IgxTimePickerComponent","itemsDelta","_hourItems","_minuteItems","isNotEmpty","displayFormat","inputFormat","_okButtonLabel","_cancelButtonLabel","_isHourListLoop","_isMinuteListLoop","_hourView","_minuteView","_ampmView","_isValueValid","dispVal","_formatTime","_displayValue","displayValue","setThroughUI","formatValue","minuteEntries","hourEntries","timePickerTemplateDirective","defaultTimePickerTemplate","dropdownInputTemplate","_generateHours","_generateMinutes","_generateAmPm","spinOnEdit","_input","_onDropDownClosed","onKeydownSpace","onAltArrowDown","_scrollItemIntoView","isListLoop","viewType","itemIntoView","_itemToString","_nextItem","_prevItem","_viewToString","leadZeroHour","leadZeroMinute","itemsCount","formattedMinute","minute","formattedHour","_updateHourView","_updateMinuteView","_updateAmPmView","_addEmptyItems","hourItemsCount","minuteItemsCount","_getSelectedTime","_convertMinMaxValue","_dateFromModel","_isEntryValid","re","validHourEntries","validMinuteEntries","_updateEditableInput","_spinHours","currentVal","minVal","maxVal","hDelta","_spinMinutes","mDelta","_initializeContainer","_prevSelectedHour","_prevSelectedMinute","_prevSelectedAmPm","_closeDropDown","posStrategy","hourIntoView","minuteIntoView","ampmIntoView","time","hoursInView","minutesInView","ampmInView","ampm","preserveAmPm","prompts","amPm","displayVal","IgxTimePickerModule","IgxToastComponent","CSS_CLASSES","IGX_TOAST_BOTTOM","IGX_TOAST_MIDDLE","IGX_TOAST_TOP","onShowing","onShown","onHiding","onHidden","IgxToastPosition","mapPositionToClassName","IgxToastModule","IgxSelectGroupComponent","IgxSelectItemComponent","SelectPositioningStrategy","_selectDefaultSettings","defaultWindowToListOffset","positionAndScrollBottom","outBoundsAmount","listContainerBoundRect","positionNoScroll","CURRENT_POSITION_Y","itemTextToInputTextDiff","positionAndScrollTop","getItemsOutOfView","currentScroll","remainingScroll","listOutOfBounds","elementContainer","returnVals","Amount","inputRect","LIST_HEIGHT","itemTextPadding","itemTextIndent","point","itemElement","X","Y","getFirstItemElement","inputHeight","itemBoundRect","itemTopListOffset","inputFontSize","fontSize","numericInputFontSize","itemFontSize","inputTextToInputTop","itemTextToItemTop","CURRENT_BOTTOM_Y","OUT_OF_BOUNDS","itemLeftPadding","textIndent","numericLeftPadding","numericTextIndent","selectItemPaddingHorizontal","IgxSelectToggleIconDirective","IgxSelectComponent","itemText","Promise","resolve","IgxSelectItemNavigationDirective","inputStream","clearStream$","EMPTY","captureKey","timer","activateItemByText","activeItemIndex","IgxSelectModule","changei18n","getCurrentResourceStrings","SMALL","MEDIUM","LARGE"],"mappings":"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","sourcesContent":["enum EaseIn {\n    quad = `cubic-bezier(0.550, 0.085, 0.680, 0.530)` as any,\n    cubic = `cubic-bezier(0.550, 0.055, 0.675, 0.190)` as any,\n    quart = `cubic-bezier(0.895, 0.030, 0.685, 0.220)` as any,\n    quint = `cubic-bezier(0.755, 0.050, 0.855, 0.060)` as any,\n    sine = `cubic-bezier(0.470, 0.000, 0.745, 0.715)` as any,\n    expo = `cubic-bezier(0.950, 0.050, 0.795, 0.035)` as any,\n    circ = `cubic-bezier(0.600, 0.040, 0.980, 0.335)` as any,\n    back = `cubic-bezier(0.600, -0.280, 0.735, 0.045)` as any\n}\n\nenum EaseOut {\n    quad = `cubic-bezier(0.250, 0.460, 0.450, 0.940)` as any,\n    cubic = `cubic-bezier(0.215, 0.610, 0.355, 1.000)` as any,\n    quart = `cubic-bezier(0.165, 0.840, 0.440, 1.000)` as any,\n    quint = `cubic-bezier(0.230, 1.000, 0.320, 1.000)` as any,\n    sine = `cubic-bezier(0.390, 0.575, 0.565, 1.000)` as any,\n    expo = `cubic-bezier(0.190, 1.000, 0.220, 1.000)` as any,\n    circ = `cubic-bezier(0.075, 0.820, 0.165, 1.000)` as any,\n    back = `cubic-bezier(0.175, 0.885, 0.320, 1.275)` as any\n}\n\nenum EaseInOut {\n    quad = `cubic-bezier(0.455, 0.030, 0.515, 0.955)` as any,\n    cubic = `cubic-bezier(0.645, 0.045, 0.355, 1.000)` as any,\n    quart = `cubic-bezier(0.770, 0.000, 0.175, 1.000)` as any,\n    quint = `cubic-bezier(0.860, 0.000, 0.070, 1.000)` as any,\n    sine = `cubic-bezier(0.445, 0.050, 0.550, 0.950)` as any,\n    expo = `cubic-bezier(1.000, 0.000, 0.000, 1.000)` as any,\n    circ = `cubic-bezier(0.785, 0.135, 0.150, 0.860)` as any,\n    back = `cubic-bezier(0.680, -0.550, 0.265, 1.550)` as any\n}\n\nexport { EaseIn, EaseOut, EaseInOut };\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.sine,\n    endOpacity: 1,\n    startOpacity: 0\n};\n\nconst fadeIn: AnimationReferenceMetadata = animation(base, {\n    params: baseParams\n});\n\nconst fadeOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        delay: '0s',\n        duration: '350ms',\n        easing: EaseOut.sine,\n        endOpacity: 0,\n        startOpacity: 1\n    }\n});\n\nexport { fadeIn, fadeOut };\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        backfaceVisibility: 'hidden',\n        transformStyle: 'preserve-3d'\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `translateZ({{startDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{startAngle}}deg)`\n            }),\n            style({\n                offset: 1,\n                transform: `translateZ({{endDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{endAngle}}deg)`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 180,\n    endDistance: '0px',\n    rotateX: 1,\n    rotateY: 0,\n    rotateZ: 0,\n    startAngle: 0,\n    startDistance: '0px'\n};\n\nconst flipTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams\n    }\n});\n\nconst flipBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180\n    }\n});\n\nconst flipLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipHorFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px'\n    }\n});\n\nconst flipHorBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px'\n    }\n});\n\nconst flipVerFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipVerBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nexport {\n    flipTop,\n    flipRight,\n    flipBottom,\n    flipLeft,\n    flipHorFwd,\n    flipHorBck,\n    flipVerFwd,\n    flipVerBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            offset: 0,\n            opacity: `{{endOpacity}}`,\n            transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 0,\n    endOpacity: 1,\n    rotateX: 0,\n    rotateY: 0,\n    rotateZ: 1,\n    startAngle: -360,\n    startOpacity: 0,\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    startOpacity: 1\n};\n\nconst rotateInCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseInParams }\n});\n\nconst rotateOutCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseOutParams }\n});\n\nconst rotateInTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateOutTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateInRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateOutRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateInBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateOutBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateInLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateOutLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateInTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateInBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateInDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nexport {\n    rotateInCenter,\n    rotateInTop,\n    rotateInRight,\n    rotateInLeft,\n    rotateInBottom,\n    rotateInTr,\n    rotateInBr,\n    rotateInBl,\n    rotateInTl,\n    rotateInDiagonal1,\n    rotateInDiagonal2,\n    rotateInHor,\n    rotateInVer,\n    rotateOutCenter,\n    rotateOutTop,\n    rotateOutRight,\n    rotateOutLeft,\n    rotateOutBottom,\n    rotateOutTr,\n    rotateOutBr,\n    rotateOutBl,\n    rotateOutTl,\n    rotateOutDiagonal1,\n    rotateOutDiagonal2,\n    rotateOutHor,\n    rotateOutVer\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseInOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst baseRecipe: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            }),\n            style({\n                offset: 0.1,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.2,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n            }),\n            style({\n                offset: 0.3,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.4,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.5,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.6,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.7,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.8,\n                transform: `rotate(-{{endAngle}}deg) translate{{direction}}({{endDistance}})`\n\n            }),\n            style({\n                offset: 0.9,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{endDistance}})`\n\n            }),\n            style({\n                offset: 1,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '800ms',\n    easing: EaseInOut.quad,\n    endAngle: 0,\n    endDistance: '8px',\n    startAngle: 0,\n    startDistance: '10px',\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst shakeHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'X'\n    }\n});\n\nconst shakeVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y'\n    }\n});\n\nconst shakeTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'top'\n    }\n});\n\nconst shakeBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'center'\n    }\n});\n\nconst shakeLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'center'\n    }\n});\n\nconst shakeCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 8,\n        endDistance: '0',\n        startAngle: 10,\n        startDistance: '0',\n        xPos: 'center',\n        yPos: 'center'\n    }\n});\n\nconst shakeTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst shakeBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nexport {\n    shakeHor,\n    shakeVer,\n    shakeTop,\n    shakeBottom,\n    shakeRight,\n    shakeLeft,\n    shakeCenter,\n    shakeTr,\n    shakeBr,\n    shakeBl,\n    shakeTl\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { IAnimationParams } from '../main';\n\nconst heartbeatBase: AnimationMetadata[] = [\n    style({\n        animationTimingFunction: `ease-out`,\n        transform: `scale(1)`,\n        transformOrigin: `center center`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.1,\n                transform: `scale(0.91)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.17,\n                transform: `scale(0.98)`\n            }),\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.33,\n                transform: `scale(0.87)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.45,\n                transform: `scale(1)`\n            })\n        ])\n    )\n];\n\nconst heartbeatParams: IAnimationParams = {\n    delay: '0s',\n    duration: '1.5s',\n    easing: 'ease-in-out'\n};\n\nconst pulsateBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.5,\n                transform: `scale({{toScale}})`\n            }),\n            style({\n                offset: 1,\n                transform: `scale({{fromScale}})`\n            })\n        ])\n    )\n];\n\nconst pulsateParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.5s',\n    easing: 'ease-in-out',\n    fromScale: 1,\n    toScale: 1.1\n};\n\nconst blinkBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                opacity: .8,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.8,\n                opacity: 0,\n                transform: `scale({{midScale}})`\n            }),\n            style({\n                offset: 1,\n                opacity: 0,\n                transform: `scale({{toScale}})`\n            })\n        ])\n    )\n];\n\nconst blinkParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.8s',\n    easing: 'ease-in-out',\n    fromScale: .2,\n    midScale: 1.2,\n    toScale: 2.2\n};\n\nconst pulsateFwd = animation(pulsateBase, {\n    params: {\n        ...pulsateParams\n    }\n});\n\nconst pulsateBck = animation(pulsateBase, {\n    params: {\n        ...pulsateParams,\n        toScale: .9\n    }\n});\n\nconst heartbeat = animation(heartbeatBase, {\n    params: {\n        ...heartbeatParams\n    }\n});\n\nconst blink = animation(blinkBase, {\n    params: {\n        ...blinkParams\n    }\n});\n\nexport {\n    heartbeat,\n    pulsateFwd,\n    pulsateBck,\n    blink\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `scale{{direction}}({{fromScale}})`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `scale{{direction}}({{toScale}})`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    direction: '',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromScale: .5,\n    startOpacity: 0,\n    toScale: 1,\n    xPos: '50%',\n    yPos: '50%'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseOut.sine,\n    endOpacity: 0,\n    fromScale: 1,\n    startOpacity: 1,\n    toScale: .5\n};\n\nconst scaleInCenter: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst scaleInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTr = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutCenter: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst scaleOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nexport {\n    scaleInTop,\n    scaleInRight,\n    scaleInBottom,\n    scaleInLeft,\n    scaleInCenter,\n    scaleInTr,\n    scaleInBr,\n    scaleInBl,\n    scaleInTl,\n    scaleInVerTop,\n    scaleInVerBottom,\n    scaleInVerCenter,\n    scaleInHorCenter,\n    scaleInHorLeft,\n    scaleInHorRight,\n    scaleOutTop,\n    scaleOutRight,\n    scaleOutBottom,\n    scaleOutLeft,\n    scaleOutCenter,\n    scaleOutTr,\n    scaleOutBr,\n    scaleOutBl,\n    scaleOutTl,\n    scaleOutVerTop,\n    scaleOutVerBottom,\n    scaleOutVerCenter,\n    scaleOutHorCenter,\n    scaleOutHorLeft,\n    scaleOutHorRight\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `{{fromPosition}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `{{toPosition}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromPosition: 'translateY(-500px)',\n    startOpacity: 0,\n    toPosition: 'translateY(0)'\n};\n\nconst baseOutParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    fromPosition: 'translateY(0)',\n    startOpacity: 1,\n    toPosition: 'translateY(-500px)'\n};\n\nconst slideInTop: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst slideInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(-500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateY(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideOutTop: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst slideOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseIn.quad,\n            endOpacity: 0,\n            fromPosition: 'translateY(0)',\n            startOpacity: 1,\n            toPosition: 'translateY(500px)'\n        }\n    }\n);\n\nconst slideOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(-500px)'\n        }\n    }\n);\n\nexport {\n    slideInTop,\n    slideInRight,\n    slideInBottom,\n    slideInLeft,\n    slideInTr,\n    slideInBr,\n    slideInBl,\n    slideInTl,\n    slideOutTop,\n    slideOutBottom,\n    slideOutRight,\n    slideOutLeft,\n    slideOutTr,\n    slideOutBr,\n    slideOutBl,\n    slideOutTl\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst swingBase: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate{{direction}}({{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `rotate{{direction}}({{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst swingParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '.5s',\n    easing: EaseOut.back,\n    endAngle: 0,\n    endOpacity: 1,\n    startAngle: -100,\n    startOpacity: 0,\n    xPos: 'top',\n    yPos: 'center'\n};\n\nconst swingOutParams: IAnimationParams = {\n    ...swingParams,\n    duration: '.55s',\n    easing: EaseIn.back,\n    endAngle: 70,\n    endOpacity: 0,\n    startAngle: 0,\n    startOpacity: 1\n};\n\nconst swingInTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams\n    }\n});\n\nconst swingInRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        startAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        startAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingInTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: 70\n    }\n});\n\nconst swingInRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: 70,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams\n    }\n});\n\nconst swingOutRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        endAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLefttFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        endAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: -100\n    }\n});\n\nconst swingOutRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: -100,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nexport {\n    swingInTopFwd,\n    swingInRightFwd,\n    swingInLeftFwd,\n    swingInBottomFwd,\n    swingInTopBck,\n    swingInRightBck,\n    swingInBottomBck,\n    swingInLeftBck,\n    swingOutTopFwd,\n    swingOutRightFwd,\n    swingOutBottomFwd,\n    swingOutLefttFwd,\n    swingOutTopBck,\n    swingOutRightBck,\n    swingOutBottomBck,\n    swingOutLeftBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut, EaseIn } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{ startOpacity }}`,\n        height: `{{ startHeight }}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{ endOpacity }}`,\n            height: `{{ endHeight }}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    startOpacity: 0,\n    endOpacity: 1,\n    startHeight: '',\n    endHeight: ''\n};\n\nconst growVerIn: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 0,\n        endOpacity: 1,\n        startHeight: '0px',\n        endHeight: '*'\n    }\n});\n\nconst growVerOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 1,\n        endOpacity: 0,\n        startHeight: '*',\n        endHeight: '0px'\n    }\n});\n\nexport { growVerIn, growVerOut };\n","import { IToggleView } from './IToggleView';\n\n/**\n * Common service to be injected between components where those implementing common\n * ToggleView interface can register and toggle directives can call their methods.\n * TODO: Track currently active? Events?\n */\nexport class IgxNavigationService {\n    private navs: { [id: string]: IToggleView; };\n\n    constructor() {\n        this.navs = {};\n    }\n\n    public add(id: string, navItem: IToggleView) {\n        this.navs[id] = navItem;\n    }\n\n    public remove(id: string) {\n        delete this.navs[id];\n    }\n\n    public get(id: string): IToggleView {\n        if (id) {\n            return this.navs[id];\n        }\n    }\n\n    public toggle(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].toggle(...args);\n        }\n    }\n    public open(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].open(...args);\n        }\n    }\n    public close(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].close(...args);\n        }\n    }\n}\n","import { Directive, HostListener, Input, NgModule } from '@angular/core';\nimport {IgxNavigationService} from './nav.service';\n\n/**\n * Directive that can toggle targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavToggle=\"ID\"> Toggle </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavToggle]' })\nexport class IgxNavigationToggleDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavToggle') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public toggleNavigationDrawer() {\n        this.state.toggle(this.target, true);\n    }\n}\n\n/**\n * Directive that can close targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavClose=\"ID\"> Close </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavClose]' })\nexport class IgxNavigationCloseDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavClose') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public closeNavigationDrawer() {\n        this.state.close(this.target, true);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    exports: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxNavigationModule {}\n","/**\n *@hidden\n */\nexport function cloneArray(array: any[], deep?: boolean) {\n    const arr = [];\n    if (!array) {\n        return arr;\n    }\n    let i = array.length;\n    while (i--) {\n        arr[i] = deep ? cloneValue(array[i]) : array[i];\n    }\n    return arr;\n}\n\n/**\n * Doesn't clone leaf items\n * @hidden\n */\nexport function cloneHierarchicalArray(array: any[], childDataKey: any): any[] {\n    const result: any[] = [];\n    if (!array) {\n        return result;\n    }\n\n    for (const item of array) {\n        const clonedItem = cloneValue(item);\n        if (Array.isArray(item[childDataKey])) {\n            clonedItem[childDataKey] = cloneHierarchicalArray(clonedItem[childDataKey], childDataKey);\n        }\n        result.push(clonedItem);\n    }\n    return result;\n}\n\n/**\n * Deep clones all first level keys of Obj2 and merges them to Obj1\n * @param obj1 Object to merge into\n * @param obj2 Object to merge from\n * @returns Obj1 with merged cloned keys from Obj2\n * @hidden\n */\nexport function mergeObjects(obj1: {}, obj2: {}): any {\n    if (!isObject(obj1)) {\n        throw new Error(`Cannot merge into ${obj1}. First param must be an object.`);\n    }\n\n    if (!isObject(obj2)) {\n        return obj1;\n    }\n\n    for (const key of Object.keys(obj2)) {\n        obj1[key] = cloneValue(obj2[key]);\n    }\n\n    return obj1;\n}\n\n/**\n * Creates deep clone of provided value.\n * Supports primitive values, dates and objects.\n * If passed value is array returns shallow copy of the array.\n * @param value value to clone\n * @returns Deep copy of provided value\n *@hidden\n */\nexport function cloneValue(value: any): any {\n    if (isDate(value)) {\n        return new Date(value.getTime());\n    }\n    if (Array.isArray(value)) {\n        return [...value];\n    }\n\n    if (value instanceof Map || value instanceof Set) {\n        return value;\n    }\n\n    if (isObject(value)) {\n        const result = {};\n\n        for (const key of Object.keys(value)) {\n            result[key] = cloneValue(value[key]);\n        }\n        return result;\n    }\n    return value;\n}\n\n/**\n * Checks if provided variable is Object\n * @param value Value to check\n * @returns true if provided variable is Object\n *@hidden\n */\nexport function isObject(value: any): boolean {\n    return value && value.toString() === '[object Object]';\n}\n\n/**\n * Checks if provided variable is Date\n * @param value Value to check\n * @returns true if provided variable is Date\n *@hidden\n */\nexport function isDate(value: any) {\n    return Object.prototype.toString.call(value) === '[object Date]';\n}\n\n/**\n * Checks if the two passed arguments are equal\n * Currently supports date objects\n * @param obj1\n * @param obj2\n * @returns: `boolean`\n * @hidden\n */\nexport function isEqual(obj1, obj2): boolean {\n    if (isDate(obj1) && isDate(obj2)) {\n        return obj1.getTime() === obj2.getTime();\n    }\n    return obj1 === obj2;\n}\n\n/**\n *@hidden\n */\nexport const enum KEYCODES {\n    ENTER = 13,\n    SPACE = 32,\n    ESCAPE = 27,\n    LEFT_ARROW = 37,\n    UP_ARROW = 38,\n    RIGHT_ARROW = 39,\n    DOWN_ARROW = 40,\n    F2 = 113,\n    TAB = 9\n}\n\n/**\n *@hidden\n */\nexport const enum KEYS {\n    ENTER = 'Enter',\n    SPACE = ' ',\n    SPACE_IE = 'Spacebar',\n    ESCAPE = 'Escape',\n    ESCAPE_IE = 'Esc',\n    LEFT_ARROW = 'ArrowLeft',\n    LEFT_ARROW_IE = 'Left',\n    UP_ARROW = 'ArrowUp',\n    UP_ARROW_IE = 'Up',\n    RIGHT_ARROW = 'ArrowRight',\n    RIGHT_ARROW_IE = 'Right',\n    DOWN_ARROW = 'ArrowDown',\n    DOWN_ARROW_IE = 'Down',\n    F2 = 'F2',\n    TAB = 'Tab'\n}\n\n/**\n *@hidden\n* Returns the actual size of the node content, using Range\n* ```typescript\n* let range = document.createRange();\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = getNodeSizeViaRange(range, column.cells[0].nativeElement);\n* ```\n */\nexport function getNodeSizeViaRange(range: Range, node: any): number {\n    let overflow = null;\n    if (!isFirefox()) {\n        overflow = node.style.overflow;\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = 'visible';\n    }\n\n    range.selectNodeContents(node);\n    const width = range.getBoundingClientRect().width;\n\n    if (!isFirefox()) {\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = overflow;\n    }\n\n    return width;\n}\n/**\n *@hidden\n* Returns the actual size of the node content, using Canvas\n* ```typescript\n* let ctx = document.createElement('canvas').getContext('2d');\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = valToPxlsUsingCanvas(ctx, column.cells[0].nativeElement);\n* ```\n */\nexport function getNodeSizeViaCanvas(canvas2dCtx: any, node: any): number {\n    const s = this.grid.document.defaultView.getComputedStyle(node);\n\n    // need to set the font to get correct width\n    canvas2dCtx.font = s.fontSize + ' ' + s.fontFamily;\n\n    return canvas2dCtx.measureText(node.textContent).width;\n}\n/**\n *@hidden\n */\nexport function isIE(): boolean {\n    return navigator.appVersion.indexOf('Trident/') > 0;\n}\n/**\n *@hidden\n */\nexport function isEdge(): boolean {\n    const edgeBrowser = /Edge[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return edgeBrowser;\n}\n\n/**\n *@hidden\n */\nexport function isFirefox(): boolean {\n    const firefoxBrowser = /Firefox[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return firefoxBrowser;\n}\n\n/**\n * @hidden\n */\nexport function isLeftClick(event: PointerEvent) {\n    return event.button === 0;\n}\n\n/** @hidden */\nexport function isNavigationKey(key: string): boolean {\n    return ['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright',\n        'home', 'end', 'space', 'spacebar', ' '].indexOf(key) !== -1;\n}\n\n/**\n *@hidden\n */\nexport function flatten(arr: any[]) {\n    let result = [];\n\n    arr.forEach(el => {\n        result.push(el);\n        if (el.children) {\n            const children = Array.isArray(el.children) ? el.children : el.children.toArray();\n            result = result.concat(flatten(children));\n        }\n    });\n    return result;\n}\n\nexport interface CancelableEventArgs {\n    /**\n     * Provides the ability to cancel the event.\n     */\n    cancel: boolean;\n}\n\nexport interface CancelableBrowserEventArgs extends CancelableEventArgs {\n    /** Browser event */\n    event?: Event;\n}\n\nexport const NAVIGATION_KEYS = new Set(['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright',\n                                'home', 'end', 'space', 'spacebar', ' ']);\nexport const ROW_EXPAND_KEYS = new Set('right down arrowright arrowdown'.split(' '));\nexport const ROW_COLLAPSE_KEYS = new Set('left up arrowleft arrowup'.split(' '));\nexport const SUPPORTED_KEYS = new Set([...Array.from(NAVIGATION_KEYS), 'tab', 'enter', 'f2', 'escape', 'esc']);\n","import { ISortingStrategy } from './sorting-strategy';\n\n/**\n * Represents sorting expressions.\n */\nexport enum SortingDirection {\n    None = 0,\n    Asc = 1,\n    Desc = 2\n}\n\nexport interface ISortingExpression {\n   fieldName: string;\n   dir: SortingDirection;\n   ignoreCase?: boolean;\n   strategy?: ISortingStrategy;\n}\n","import { cloneArray } from '../core/utils';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { ISortingExpression, SortingDirection } from './sorting-expression.interface';\nimport { IGroupingExpression } from './grouping-expression.interface';\n\nexport interface ISortingStrategy {\n    sort: (data: any[],\n           fieldName: string,\n           dir: SortingDirection,\n           ignoreCase: boolean,\n           valueResolver: (obj: any, key: string) => any) => any[];\n}\n\nexport class DefaultSortingStrategy implements ISortingStrategy {\n    private static _instance: DefaultSortingStrategy = null;\n\n    protected constructor() {}\n\n    public static instance(): DefaultSortingStrategy {\n        return this._instance || (this._instance = new this());\n    }\n\n    public sort(data: any[],\n                fieldName: string,\n                dir: SortingDirection,\n                ignoreCase: boolean,\n                valueResolver: (obj: any, key: string) => any) {\n        const key = fieldName;\n        const reverse = (dir === SortingDirection.Desc ? -1 : 1);\n        const cmpFunc = (obj1, obj2) => {\n            return this.compareObjects(obj1, obj2, key, reverse, ignoreCase, valueResolver);\n        };\n        return this.arraySort(data, cmpFunc);\n    }\n\n    public compareValues(a: any, b: any) {\n        const an = (a === null || a === undefined);\n        const bn = (b === null || b === undefined);\n        if (an) {\n            if (bn) {\n                return 0;\n            }\n            return -1;\n        } else if (bn) {\n            return 1;\n        }\n        return a > b ? 1 : a < b ? -1 : 0;\n    }\n\n    protected compareObjects(obj1: object,\n                             obj2: object,\n                             key: string,\n                             reverse: number,\n                             ignoreCase: boolean,\n                             valueResolver: (obj: any, key: string) => any) {\n        let a = valueResolver(obj1, key);\n        let b = valueResolver(obj2, key);\n        if (ignoreCase) {\n            a = a && a.toLowerCase ? a.toLowerCase() : a;\n            b = b && b.toLowerCase ? b.toLowerCase() : b;\n        }\n        return reverse * this.compareValues(a, b);\n    }\n\n    protected arraySort(data: any[], compareFn?): any[] {\n        return data.sort(compareFn);\n    }\n}\n\nexport class IgxSorting {\n    public sort(data: any[], expressions: ISortingExpression[]): any[] {\n        return this.sortDataRecursive(data, expressions);\n    }\n\n    private groupedRecordsByExpression(data: any[],\n            index: number,\n            expression: IGroupingExpression): any[] {\n        let i;\n        let groupval;\n        const res = [];\n        const key = expression.fieldName;\n        const len = data.length;\n        res.push(data[index]);\n        groupval = this.getFieldValue(data[index], key);\n        index++;\n        const comparer = expression.groupingComparer || DefaultSortingStrategy.instance().compareValues;\n        for (i = index; i < len; i++) {\n            if (comparer(this.getFieldValue(data[i], key), groupval) === 0) {\n                res.push(data[i]);\n            } else {\n                break;\n            }\n        }\n        return res;\n    }\n    private sortDataRecursive<T>(data: T[],\n                                 expressions: ISortingExpression[],\n                                 expressionIndex: number = 0): T[] {\n        let i;\n        let j;\n        let expr: ISortingExpression;\n        let gbData;\n        let gbDataLen;\n        const exprsLen = expressions.length;\n        const dataLen = data.length;\n        expressionIndex = expressionIndex || 0;\n        if (expressionIndex >= exprsLen || dataLen <= 1) {\n            return data;\n        }\n        expr = expressions[expressionIndex];\n        if (!expr.strategy) {\n            expr.strategy = DefaultSortingStrategy.instance();\n        }\n        data = expr.strategy.sort(data, expr.fieldName, expr.dir, expr.ignoreCase, this.getFieldValue);\n        if (expressionIndex === exprsLen - 1) {\n            return data;\n        }\n        // in case of multiple sorting\n        for (i = 0; i < dataLen; i++) {\n            gbData = this.groupedRecordsByExpression(data, i, expr);\n            gbDataLen = gbData.length;\n            if (gbDataLen > 1) {\n                gbData = this.sortDataRecursive(gbData, expressions, expressionIndex + 1);\n            }\n            for (j = 0; j < gbDataLen; j++) {\n                data[i + j] = gbData[j];\n            }\n            i += gbDataLen - 1;\n        }\n        return data;\n    }\n    protected groupDataRecursive<T>(data: T[], expressions: ISortingExpression[], level: number,\n        parent: IGroupByRecord, metadata: IGroupByRecord[], grid: any = null, groupsRecords: any[] = []): T[] {\n        let i = 0;\n        let result = [];\n        while (i < data.length) {\n            const group = this.groupedRecordsByExpression(data, i, expressions[level]);\n            const groupRow: IGroupByRecord = {\n                expression: expressions[level],\n                level,\n                records: cloneArray(group),\n                value: group[0][expressions[level].fieldName],\n                groupParent: parent,\n                groups: [],\n                height: grid ? grid.rowHeight : null\n            };\n            if (parent) {\n                parent.groups.push(groupRow);\n            } else {\n                groupsRecords.push(groupRow);\n            }\n            if (level < expressions.length - 1) {\n                result = result.concat(this.groupDataRecursive(group, expressions, level + 1, groupRow, metadata, grid, groupsRecords));\n            } else {\n                for (const groupItem of group) {\n                    metadata.push(groupRow);\n                    result.push(groupItem);\n                }\n            }\n            i += group.length;\n        }\n        return result;\n    }\n    protected getFieldValue(obj: any, key: string): any {\n        return obj[key];\n    }\n}\n\nexport class IgxDataRecordSorting extends IgxSorting {\n    protected getFieldValue(obj: any, key: string): any {\n        return obj.data[key];\n    }\n}\n","import { IGroupByRecord } from './groupby-record.interface';\nimport { ISortingExpression } from './sorting-expression.interface';\nimport { IgxSorting } from './sorting-strategy';\n\nexport interface IGroupByResult {\n    data: any[];\n    metadata: IGroupByRecord[];\n}\n\nexport class IgxGrouping extends IgxSorting {\n    public groupBy(data: any[], expressions: ISortingExpression[], grid?: any, groupsRecords?: any[]): IGroupByResult {\n        const metadata: IGroupByRecord[] = [];\n        const grouping = this.groupDataRecursive(data, expressions, 0, null, metadata, grid, groupsRecords);\n        return {\n            data: grouping,\n            metadata: metadata\n        };\n    }\n}\n\n","export enum PagingError {\n    None,\n    IncorrectPageIndex,\n    IncorrectRecordsPerPage\n}\n\nexport declare interface IPagingState {\n    index: number;\n    recordsPerPage: number;\n    metadata?: {\n        countPages: number;\n        error: PagingError;\n        countRecords: number;\n    };\n}\n","import { IFilteringExpression, FilteringLogic } from './filtering-expression.interface';\n\nexport declare interface IFilteringExpressionsTree {\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[];\n    operator: FilteringLogic;\n    fieldName?: string;\n\n    find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression;\n    findIndex(fieldName: string): number;\n}\n\nexport class FilteringExpressionsTree implements IFilteringExpressionsTree {\n\n    /**\n     * Sets/gets the filtering operands.\n     * ```typescript\n     * const gridExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n     * const expression = [\n     * {\n     *   condition: IgxStringFilteringOperand.instance().condition('contains'),\n     *   fieldName: 'Column Field',\n     *   searchVal: 'Value',\n     *   ignoreCase: false\n     * }];\n     * gridExpressionsTree.filteringOperands.push(expression);\n     * this.grid.filteringExpressionsTree = gridExpressionsTree;\n     * ```\n     * ```typescript\n     * let filteringOperands = gridExpressionsTree.filteringOperands;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[] = [];\n\n    /**\n     * Sets/gets the operator.\n     * ```typescript\n     * gridExpressionsTree.operator = FilteringLogic.And;\n     * ```\n     * ```typescript\n     * let operator = gridExpressionsTree.operator;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    operator: FilteringLogic;\n\n    /**\n     * Sets/gets the field name of the column where the filtering expression is placed.\n     * ```typescript\n     *  gridExpressionTree.fieldName = 'Column Field';\n     * ```\n     * ```typescript\n     * let columnField = expressionTree.fieldName;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    fieldName?: string;\n\n    constructor(operator: FilteringLogic, fieldName?: string) {\n        this.operator = operator;\n        this.fieldName = fieldName;\n    }\n\n    /**\n     * Returns the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpression = gridExpressionTree.find('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression {\n        const index = this.findIndex(fieldName);\n\n        if (index > -1) {\n            return this.filteringOperands[index];\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns the index of the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpressionIndex = gridExpressionTree.findIndex('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public findIndex(fieldName: string): number {\n        let expr;\n        for (let i = 0; i < this.filteringOperands.length; i++) {\n            expr = this.filteringOperands[i];\n            if (expr instanceof FilteringExpressionsTree) {\n                if (this.isFilteringExpressionsTreeForColumn(expr, fieldName)) {\n                    return i;\n                }\n            } else {\n                if ((expr as IFilteringExpression).fieldName === fieldName) {\n                    return i;\n                }\n            }\n        }\n\n        return -1;\n    }\n\n    protected isFilteringExpressionsTreeForColumn(expressionsTree: IFilteringExpressionsTree, fieldName: string): boolean {\n        if (expressionsTree.fieldName === fieldName) {\n            return true;\n        }\n\n        let expr;\n        for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n            expr = expressionsTree.filteringOperands[i];\n            if ((expr instanceof FilteringExpressionsTree)) {\n                return this.isFilteringExpressionsTreeForColumn(expr, fieldName);\n            } else {\n                return (expr as IFilteringExpression).fieldName === fieldName;\n            }\n        }\n\n        return false;\n    }\n}\n","import { EventEmitter } from '@angular/core';\n\nexport enum TransactionType {\n    ADD = 'add',\n    DELETE = 'delete',\n    UPDATE = 'update'\n}\n\nexport interface Transaction {\n    id: any;\n    type: TransactionType;\n    newValue: any;\n}\n\n/**\n * @experimental\n * @hidden\n */\nexport interface HierarchicalTransaction extends Transaction {\n    path: any[];\n}\n\nexport interface State {\n    value: any;\n    recordRef: any;\n    type: TransactionType;\n}\n\n/**\n * @experimental\n * @hidden\n */\nexport interface HierarchicalState extends State {\n    path: any[];\n}\n\nexport interface TransactionService<T extends Transaction, S extends State> {\n    /**\n     * Returns whether transaction is enabled for this service\n     */\n    readonly enabled: boolean;\n\n    /**\n     * Event fired when transaction state has changed - add transaction, commit all transactions, undo and redo\n     */\n    onStateUpdate?: EventEmitter<void>;\n\n    /**\n     * @returns if there are any transactions in the Undo stack\n     */\n    canUndo: boolean;\n\n    /**\n     * @returns if there are any transactions in the Redo stack\n     */\n    canRedo: boolean;\n\n    /**\n     * Adds provided  transaction with recordRef if any\n     * @param transaction Transaction to be added\n     * @param recordRef Reference to the value of the record in the data source related to the changed item\n     */\n    add(transaction: T, recordRef?: any): void;\n\n    /**\n     * Returns all recorded transactions in chronological order\n     * @param id Optional record id to get transactions for\n     * @returns All transaction in the service or for the specified record\n     */\n    getTransactionLog(id?: any): T[];\n\n    /**\n     * Remove the last transaction if any\n     */\n    undo(): void;\n\n    /**\n     * Applies the last undone transaction if any\n     */\n    redo(): void;\n\n    /**\n     * Returns aggregated changes from all transactions\n     * @param mergeChanges If set to true will merge each state's value over relate recordRef\n     * and will record resulting value in the related transaction\n     * @returns Collection of aggregated transactions for each changed record\n     */\n    getAggregatedChanges(mergeChanges: boolean): T[];\n\n    /**\n     * Returns the state of the record with provided id\n     * @param id The id of the record\n     * @returns State of the record if any\n     */\n    getState(id: any): S;\n\n    /**\n     * Returns value of the required id including all uncommitted changes\n     * @param id The id of the record to return value for\n     * @param mergeChanges If set to true will merge state's value over relate recordRef\n     * and will return merged value\n     * @returns Value with changes or **null**\n     */\n    getAggregatedValue(id: any, mergeChanges: boolean): any;\n\n    /**\n     * Applies all transactions over the provided data\n     * @param data Data source to update\n     */\n    commit(data: any[]): void;\n\n    /**\n     * Clears all transactions\n     */\n    clear(): void;\n\n    /**\n     * Starts pending transactions. All transactions passed after call to startPending\n     * will not be added to transaction log\n     */\n    startPending(): void;\n\n    /**\n     * Clears all pending transactions and aggregated pending state. If commit is set to true\n     * commits pending states as single transaction\n     * @param commit Should commit the pending states\n     */\n    endPending(commit: boolean): void;\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { cloneArray, isEqual, mergeObjects } from '../core/utils';\nimport { DataUtil, DataType } from '../data-operations/data-util';\nimport { IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { ISortingExpression, SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxRowComponent } from './row.component';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { IFilteringExpressionsTree, FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { Transaction, TransactionType, State } from '../services/transaction/transaction';\nimport { IgxCell, IgxRow } from '../core/grid-selection';\n/**\n *@hidden\n */\n@Injectable()\nexport class GridBaseAPIService <T extends IgxGridBaseComponent & IGridDataBindable> {\n\n    grid: T;\n    protected editCellState: Map<string, any> = new Map<string, any>();\n    protected editRowState: Map<string, { rowID: any, rowIndex: number }> = new Map();\n    protected destroyMap: Map<string, Subject<boolean>> = new Map<string, Subject<boolean>>();\n\n    public get_column_by_name(name: string): IgxColumnComponent {\n        return this.grid.columnList.find((col) => col.field === name);\n    }\n\n    public get_summary_data() {\n        const grid = this.grid;\n        let data = grid.filteredData;\n        if (!data) {\n            if (grid.transactions.enabled) {\n                data = DataUtil.mergeTransactions(\n                    cloneArray(grid.data),\n                    grid.transactions.getAggregatedChanges(true),\n                    grid.primaryKey\n                );\n                const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === TransactionType.DELETE).map(t => t.id);\n                deletedRows.forEach(rowID => {\n                    const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n                    const index = tempData.indexOf(rowID);\n                    if (index !== -1) {\n                       data.splice(index, 1);\n                    }\n                });\n            } else {\n                data = grid.data;\n            }\n        }\n        return data;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getRowData(rowID: any) {\n        const data = this.get_all_data(this.grid.transactions.enabled);\n        const index = this.get_row_index_in_data(rowID);\n        return data[index];\n    }\n\n    // TODO: Refactor\n    public escape_editMode() {\n        this.grid.crudService.end();\n    }\n\n    // TODO: Refactor\n    public get_cell_inEditMode(): IgxCell {\n        return this.grid.crudService.cell;\n    }\n\n    public get_row_index_in_data(rowID: any): number {\n        const grid = this.grid as IgxGridBaseComponent;\n        if (!grid) {\n            return -1;\n        }\n        const data = this.get_all_data(grid.transactions.enabled);\n        return grid.primaryKey ? data.findIndex(record => record[grid.primaryKey] === rowID) : data.indexOf(rowID);\n    }\n\n    public get_row_by_key(rowSelector: any): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        const primaryKey = this.grid.primaryKey;\n        if (primaryKey !== undefined && primaryKey !== null) {\n            return this.grid.dataRowList.find((row) => row.rowData[primaryKey] === rowSelector);\n        } else {\n            return this.grid.dataRowList.find((row) => row.rowData === rowSelector);\n        }\n    }\n\n    public get_row_by_index(rowIndex: number): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        return this.grid.rowList.find((row) => row.index === rowIndex);\n    }\n\n    public get_cell_by_key(rowSelector: any, field: string): IgxGridCellComponent {\n        const row = this.get_row_by_key(rowSelector);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.column.field === field);\n        }\n    }\n\n    public get_cell_by_index(rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.columnIndex === columnIndex);\n        }\n    }\n\n    public get_cell_by_visible_index(rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.visibleColumnIndex === columnIndex);\n        }\n    }\n\n    public submit_value() {\n        const cell = this.grid.crudService.cell;\n        if (cell) {\n            const args = this.update_cell(cell, cell.editValue);\n            if (args.cancel) {\n                return;\n            }\n            this.escape_editMode();\n        }\n    }\n\n    update_cell(cell: IgxCell, value: any) {\n        const data = this.get_all_data(this.grid.transactions.enabled);\n        const index = this.get_row_index_in_data(cell.id.rowID);\n\n        cell.editValue = value;\n\n        const valueInTransactions = this.grid.transactions.getAggregatedValue(cell.id.rowID, true);\n        if (valueInTransactions) {\n            cell.value = valueInTransactions[cell.column.field];\n            cell.rowData = valueInTransactions;\n        }\n\n        const args = cell.createEditEventArgs();\n\n\n        this.grid.onCellEdit.emit(args);\n        if (args.cancel) {\n            return args;\n        }\n\n        // Cast to number after emit\n        // TODO: Clean up this\n        args.newValue = cell.castToNumber(args.newValue);\n\n        if (isEqual(args.oldValue, args.newValue)) {\n            return args;\n        }\n        this.grid.summaryService.clearSummaryCache(args);\n        this.updateData(this.grid, cell.id.rowID, data[index], cell.rowData, { [cell.column.field ]: args.newValue });\n        if (this.grid.primaryKey === cell.column.field) {\n            if (this.grid.selection.is_item_selected(this.grid.id, cell.id.rowID)) {\n                this.grid.selection.deselect_item(this.grid.id, cell.id.rowID);\n                this.grid.selection.select_item(this.grid.id, args.newValue);\n            }\n            if (this.grid.hasSummarizedColumns) {\n                this.grid.summaryService.removeSummaries(cell.id.rowID);\n            }\n        }\n        if (!this.grid.rowEditable || !this.grid.crudService.row ||\n                this.grid.crudService.row.id !== cell.id.rowID || !this.grid.transactions.enabled) {\n            this.grid.summaryService.clearSummaryCache(args);\n            (this.grid as any)._pipeTrigger++;\n        }\n\n        return args;\n    }\n\n    /**\n     * Updates related row of provided grid's data source with provided new row value\n     * @param grid Grid to update data for\n     * @param rowID ID of the row to update\n     * @param rowValueInDataSource Initial value of the row as it is in data source\n     * @param rowCurrentValue Current value of the row as it is with applied previous transactions\n     * @param rowNewValue New value of the row\n     */\n    protected updateData(grid, rowID, rowValueInDataSource: any, rowCurrentValue: any, rowNewValue: {[x: string]: any}) {\n        if (grid.transactions.enabled) {\n            const transaction: Transaction = {\n                id: rowID,\n                type: TransactionType.UPDATE,\n                newValue: rowNewValue\n            };\n            grid.transactions.add(transaction, rowCurrentValue);\n        } else {\n            mergeObjects(rowValueInDataSource, rowNewValue);\n        }\n    }\n\n    _update_row(row: IgxRow, value?: any) {\n        const grid = this.grid;\n\n        const rowInEditMode = grid.crudService.row;\n        row.newData = value ? value : grid.transactions.getAggregatedValue(row.id, true);\n\n\n        if (rowInEditMode && row.id === rowInEditMode.id) {\n            row.data = { ...row.data, ...rowInEditMode.transactionState };\n        // TODO: Workaround for updating a row in edit mode through the API\n        } else if (this.grid.transactions.enabled) {\n            const lastCommitedValue = grid.transactions.getState(row.id) ?\n                grid.transactions.getState(row.id).value : null;\n            row.data = lastCommitedValue ? Object.assign(row.data, lastCommitedValue) : row.data;\n        }\n    }\n\n    update_row(row: IgxRow, value: any) {\n        const grid = this.grid;\n        const selected = grid.selection.is_item_selected(grid.id, row.id);\n        const rowInEditMode = grid.crudService.row;\n        const data = this.get_all_data(grid.transactions.enabled);\n        const index = this.get_row_index_in_data(row.id);\n        const hasSummarized = grid.hasSummarizedColumns;\n\n        this._update_row(row, value);\n\n        const args = row.createEditEventArgs();\n\n        // If no valid row is found\n        if (index === -1) {\n            return args;\n        }\n\n        grid.onRowEdit.emit(args);\n\n        if (args.cancel) {\n            return args;\n        }\n\n        if (rowInEditMode) {\n            grid.transactions.endPending(false);\n        }\n\n        if (!args.newValue) {\n            return args;\n        }\n\n        if (hasSummarized) {\n            grid.summaryService.removeSummaries(args.rowID);\n        }\n\n        this.updateData(grid, row.id, data[index], args.oldValue, args.newValue);\n        const newId = grid.primaryKey ? args.newValue[grid.primaryKey] : args.newValue;\n        if (selected) {\n            grid.selection.deselect_item(grid.id, row.id);\n            grid.selection.select_item(grid.id, newId);\n        }\n        if (hasSummarized) {\n            grid.summaryService.removeSummaries(newId);\n        }\n        (grid as any)._pipeTrigger++;\n\n        return args;\n    }\n\n\n\n    protected update_row_in_array(value: any, rowID: any, index: number) {\n        const grid = this.grid;\n        grid.data[index] = value;\n    }\n\n    public sort(expression: ISortingExpression): void {\n        if (expression.dir === SortingDirection.None) {\n            this.remove_grouping_expression(expression.fieldName);\n        }\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n        this.prepare_sorting_expression([sortingState], expression);\n        this.grid.sortingExpressions = sortingState;\n    }\n\n    public sort_multiple(expressions: ISortingExpression[]): void {\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        for (const each of expressions) {\n            if (each.dir === SortingDirection.None) {\n                this.remove_grouping_expression(each.fieldName);\n            }\n            this.prepare_sorting_expression([sortingState], each);\n        }\n\n        this.grid.sortingExpressions = sortingState;\n    }\n\n    public filter(fieldName: string, term, conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase: boolean) {\n        const grid = this.grid;\n        const filteringTree = grid.filteringExpressionsTree;\n        grid.endEdit(false);\n\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        const fieldFilterIndex = filteringTree.findIndex(fieldName);\n        if (fieldFilterIndex > -1) {\n            filteringTree.filteringOperands.splice(fieldFilterIndex, 1);\n        }\n\n        this.prepare_filtering_expression(filteringTree, fieldName, term, conditionOrExpressionsTree, ignoreCase, fieldFilterIndex);\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public filter_global(term, condition, ignoreCase) {\n        if (!condition) {\n            return;\n        }\n\n        const grid = this.grid;\n        const filteringTree = grid.filteringExpressionsTree;\n        grid.endEdit(false);\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        filteringTree.filteringOperands = [];\n        for (const column of grid.columns) {\n            this.prepare_filtering_expression(filteringTree, column.field, term,\n                condition, ignoreCase || column.filteringIgnoreCase);\n        }\n\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public clear_filter(fieldName: string) {\n        if (fieldName) {\n            const column = this.get_column_by_name(fieldName);\n            if (!column) {\n                return;\n            }\n        }\n\n        const grid = this.grid;\n        grid.endEdit(false);\n        const filteringState = grid.filteringExpressionsTree;\n        const index = filteringState.findIndex(fieldName);\n\n        if (index > -1) {\n            filteringState.filteringOperands.splice(index, 1);\n        } else if (!fieldName) {\n            filteringState.filteringOperands = [];\n        }\n\n        grid.filteringExpressionsTree = filteringState;\n    }\n\n    public clear_sort(fieldName: string) {\n        const sortingState = this.grid.sortingExpressions;\n        const index = sortingState.findIndex((expr) => expr.fieldName === fieldName);\n        if (index > -1) {\n            sortingState.splice(index, 1);\n            this.grid.sortingExpressions = sortingState;\n        }\n    }\n\n    protected prepare_filtering_expression(filteringState: IFilteringExpressionsTree, fieldName: string, searchVal,\n        conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree, ignoreCase: boolean, insertAtIndex = -1) {\n\n        let newExpressionsTree;\n        const oldExpressionsTreeIndex = filteringState.findIndex(fieldName);\n        const expressionsTree = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            conditionOrExpressionsTree as IFilteringExpressionsTree : null;\n        const condition = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            null : conditionOrExpressionsTree as IFilteringOperation;\n        const newExpression: IFilteringExpression = { fieldName, searchVal, condition, ignoreCase };\n\n        if (oldExpressionsTreeIndex === -1) {\n            // no expressions tree found for this field\n            if (expressionsTree) {\n                if (insertAtIndex > -1) {\n                    filteringState.filteringOperands.splice(insertAtIndex, 0, expressionsTree);\n                } else {\n                    filteringState.filteringOperands.push(expressionsTree);\n                }\n            } else if (condition) {\n                // create expressions tree for this field and add the new expression to it\n                newExpressionsTree = new FilteringExpressionsTree(filteringState.operator, fieldName);\n                newExpressionsTree.filteringOperands.push(newExpression);\n                filteringState.filteringOperands.push(newExpressionsTree);\n            }\n        }\n    }\n\n    protected prepare_sorting_expression(stateCollections: Array<Array<any>>, expression: ISortingExpression) {\n        if (expression.dir === SortingDirection.None) {\n            stateCollections.forEach(state => {\n                state.splice(state.findIndex((expr) => expr.fieldName === expression.fieldName), 1);\n            });\n            return;\n        }\n\n        /**\n         * We need to make sure the states in each collection with same fields point to the same object reference.\n         * If the different state collections provided have different sizes we need to get the largest one.\n         * That way we can get the state reference from the largest one that has the same fieldName as the expression to prepare.\n         */\n        let maxCollection = stateCollections[0];\n        for (let i = 1; i < stateCollections.length; i++) {\n            if (maxCollection.length < stateCollections[i].length) {\n                maxCollection = stateCollections[i];\n            }\n        }\n        const maxExpr = maxCollection.find((expr) => expr.fieldName === expression.fieldName);\n\n        stateCollections.forEach(collection => {\n            const myExpr = collection.find((expr) => expr.fieldName === expression.fieldName);\n            if (!myExpr && !maxExpr) {\n                // Expression with this fieldName is missing from the current and the max collection.\n                collection.push(expression);\n            } else if (!myExpr && maxExpr) {\n                // Expression with this fieldName is missing from the current and but the max collection has.\n                collection.push(maxExpr);\n                Object.assign(maxExpr, expression);\n            } else {\n                // The current collection has the expression so just update it.\n                Object.assign(myExpr, expression);\n            }\n        });\n    }\n\n    protected remove_grouping_expression(fieldName) {\n    }\n\n    public should_apply_number_style(column: IgxColumnComponent): boolean {\n        return column.dataType === DataType.Number;\n    }\n\n    public get_data(): any[] {\n        const grid = this.grid;\n        const data = grid.data ? grid.data : [];\n        return data;\n    }\n\n    public get_all_data(includeTransactions = false): any[] {\n        const grid = this.grid;\n        let data = grid.data ? grid.data : [];\n        data = includeTransactions ? grid.dataWithAddedInTransactionRows : data;\n        return data;\n    }\n\n    public get_filtered_data(): any[] {\n        return this.grid.filteredData;\n    }\n\n    protected getSortStrategyPerColumn(fieldName: string) {\n        return this.get_column_by_name(fieldName) ?\n            this.get_column_by_name(fieldName).sortStrategy : undefined;\n    }\n\n    public addRowToData(rowData: any) {\n        // Add row goes to transactions and if rowEditable is properly implemented, added rows will go to pending transactions\n        // If there is a row in edit - > commit and close\n        const grid = this.grid;\n        if (grid.transactions.enabled) {\n            const transactionId = grid.primaryKey ? rowData[grid.primaryKey] : rowData;\n            const transaction: Transaction = { id: transactionId, type: TransactionType.ADD, newValue: rowData };\n            grid.transactions.add(transaction);\n        } else {\n            grid.data.push(rowData);\n        }\n    }\n\n    public deleteRowFromData(rowID: any, index: number) {\n        //  if there is a row (index !== 0) delete it\n        //  if there is a row in ADD or UPDATE state change it's state to DELETE\n        const grid = this.grid;\n        if (index !== -1) {\n            if (grid.transactions.enabled) {\n                const transaction: Transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };\n                grid.transactions.add(transaction, grid.data[index]);\n            } else {\n                grid.data.splice(index, 1);\n            }\n        } else {\n            const state: State = grid.transactions.getState(rowID);\n            grid.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);\n        }\n    }\n\n    public deleteRowById(rowId: any) {\n        let index: number;\n        const grid = this.grid;\n        const data = this.get_all_data();\n        if (grid.primaryKey) {\n            index = data.map((record) => record[grid.primaryKey]).indexOf(rowId);\n        } else {\n            index = data.indexOf(rowId);\n        }\n        const state: State = grid.transactions.getState(rowId);\n        const hasRowInNonDeletedState = state && state.type !== TransactionType.DELETE;\n\n        //  if there is a row (index !== -1) and the we have cell in edit mode on same row exit edit mode\n        //  if there is no row (index === -1), but there is a row in ADD or UPDATE state do as above\n        //  Otherwise just exit - there is nothing to delete\n        if (index !== -1 || hasRowInNonDeletedState) {\n            // Always exit edit when row is deleted\n            grid.endEdit(true);\n        } else {\n            return;\n        }\n\n        //  TODO: should we emit this when cascadeOnDelete is true for each row?!?!\n        grid.onRowDeleted.emit({ data: data[index] });\n\n        //  first deselect row then delete it\n        if (grid.rowSelectable && grid.selection.is_item_selected(grid.id, rowId)) {\n            grid.deselectRows([rowId]);\n        } else {\n            grid.checkHeaderCheckboxStatus();\n        }\n\n        this.deleteRowFromData(rowId, index);\n        (grid as any)._pipeTrigger++;\n        grid.cdr.markForCheck();\n        // Data needs to be recalculated if transactions are in place\n        // If no transactions, `data` will be a reference to the grid getter, otherwise it will be stale\n        const dataAfterDelete = grid.transactions.enabled ? grid.dataWithAddedInTransactionRows : data;\n        grid.refreshSearch();\n        if (dataAfterDelete.length % grid.perPage === 0 && dataAfterDelete.length / grid.perPage - 1 < grid.page && grid.page !== 0) {\n            grid.page--;\n        }\n    }\n\n    public get_row_id(rowData) {\n        const grid = this.grid;\n        return grid.primaryKey ? rowData[grid.primaryKey] : rowData;\n    }\n\n    public row_deleted_transaction(rowID: any): boolean {\n        const grid = this.grid;\n        if (!grid) {\n            return false;\n        }\n        if (!grid.transactions.enabled) {\n            return false;\n        }\n        const state = grid.transactions.getState(rowID);\n        if (state) {\n            return state.type === TransactionType.DELETE;\n        }\n\n        return false;\n    }\n\n    public atInexistingPage(): Boolean {\n        const grid = this.grid;\n        return grid.data.length % grid.perPage === 0 && grid.isLastPage && grid.page !== 0;\n    }\n}\n","import { IFilteringOperation } from './filtering-condition';\n\nexport enum FilteringLogic {\n    And,\n    Or\n}\n\n/**\n * Represents filtering expressions.\n */\nexport declare interface IFilteringExpression {\n    fieldName: string;\n    condition: IFilteringOperation;\n    searchVal?: any;\n    ignoreCase?: boolean;\n}\n","import { FilteringLogic, IFilteringExpression } from './filtering-expression.interface';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from './filtering-expressions-tree';\n\nexport interface IFilteringStrategy {\n    filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[];\n}\n\nexport abstract class BaseFilteringStrategy implements IFilteringStrategy  {\n    public abstract filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[];\n\n    protected abstract getFieldValue(rec: object, fieldName: string): any;\n\n    public findMatchByExpression(rec: object, expr: IFilteringExpression): boolean {\n        const cond = expr.condition;\n        const val = this.getFieldValue(rec, expr.fieldName);\n        return cond.logic(val, expr.searchVal, expr.ignoreCase);\n    }\n\n    public matchRecord(rec: object, expressions: IFilteringExpressionsTree | IFilteringExpression): boolean {\n        if (expressions) {\n            if (expressions instanceof FilteringExpressionsTree) {\n                const expressionsTree = expressions as IFilteringExpressionsTree;\n                const operator = expressionsTree.operator as FilteringLogic;\n                let matchOperand, operand;\n\n                if (expressionsTree.filteringOperands && expressionsTree.filteringOperands.length) {\n                    for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                        operand = expressionsTree.filteringOperands[i];\n                        matchOperand = this.matchRecord(rec, operand);\n\n                        // Return false if at least one operand does not match and the filtering logic is And\n                        if (!matchOperand && operator === FilteringLogic.And) {\n                            return false;\n                        }\n\n                        // Return true if at least one operand matches and the filtering logic is Or\n                        if (matchOperand && operator === FilteringLogic.Or) {\n                            return true;\n                        }\n                    }\n\n                    return matchOperand;\n                }\n\n                return true;\n            } else {\n                const expression = expressions as IFilteringExpression;\n                return this.findMatchByExpression(rec, expression);\n            }\n        }\n\n        return true;\n    }\n}\n\nexport class FilteringStrategy extends BaseFilteringStrategy {\n    public filter<T>(data: T[], expressionsTree: IFilteringExpressionsTree): T[] {\n        let i;\n        let rec;\n        const len = data.length;\n        const res: T[] = [];\n        if (!expressionsTree || !expressionsTree.filteringOperands || expressionsTree.filteringOperands.length === 0 || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = data[i];\n            if (this.matchRecord(rec, expressionsTree)) {\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string): any {\n        return rec[fieldName];\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { BaseFilteringStrategy } from '../../data-operations/filtering-strategy';\nimport { IFilteringState } from '../../data-operations/filtering-state.interface';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid';\n\n/** @hidden */\nexport class TreeGridFilteringStrategy extends BaseFilteringStrategy {\n    public filter(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree): ITreeGridRecord[] {\n        return this.filterImpl(data, expressionsTree, undefined);\n    }\n\n    private filterImpl(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree, parent: ITreeGridRecord): ITreeGridRecord[] {\n        let i: number;\n        let rec: ITreeGridRecord;\n        const len = data.length;\n        const res: ITreeGridRecord[] = [];\n        if (!expressionsTree || !expressionsTree.filteringOperands || expressionsTree.filteringOperands.length === 0 || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = DataUtil.cloneTreeGridRecord(data[i]);\n            rec.parent = parent;\n            if (rec.children) {\n                const filteredChildren = this.filterImpl(rec.children, expressionsTree, rec);\n                rec.children = filteredChildren.length > 0 ? filteredChildren : null;\n            }\n\n            if (this.matchRecord(rec, expressionsTree)) {\n                res.push(rec);\n            } else if (rec.children && rec.children.length > 0) {\n                rec.isFilteredOutParent = true;\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string): any {\n        const hierarchicalRecord = <ITreeGridRecord>rec;\n        return hierarchicalRecord.data[fieldName];\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridFiltering',\n    pure: true\n})\nexport class IgxTreeGridFilteringPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n     }\n\n    public transform(hierarchyData: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree,\n        id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        const state = {\n            expressionsTree: expressionsTree,\n            strategy: new TreeGridFilteringStrategy()\n        };\n\n        this.resetFilteredOutProperty(grid.records);\n\n        if (!state.expressionsTree ||\n            !state.expressionsTree.filteringOperands ||\n            state.expressionsTree.filteringOperands.length === 0) {\n            grid.filteredData = null;\n            return hierarchyData;\n        }\n\n        const result = this.filter(hierarchyData, state);\n        const filteredData: any[] = [];\n        this.expandAllRecursive(grid, result, grid.expansionStates, filteredData);\n        grid.filteredData = filteredData;\n\n        return result;\n    }\n\n    private resetFilteredOutProperty(map: Map<any, ITreeGridRecord>) {\n        const keys = Array.from(map.keys());\n        for (let i = 0; i < keys.length; i++) {\n            map.get(keys[i]).isFilteredOutParent = undefined;\n        }\n    }\n\n    private expandAllRecursive(grid: IgxTreeGridComponent, data: ITreeGridRecord[],\n        expandedStates: Map<any, boolean>, filteredData: any[]) {\n        for (let i = 0; i < data.length; i++) {\n            const rec = data[i];\n            filteredData.push(rec.data);\n            this.updateNonProcessedRecord(grid, rec);\n\n            if (rec.children && rec.children.length > 0) {\n                expandedStates.set(rec.rowID, true);\n                this.expandAllRecursive(grid, rec.children, expandedStates, filteredData);\n            }\n        }\n    }\n\n    private updateNonProcessedRecord(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.isFilteredOutParent = record.isFilteredOutParent;\n    }\n\n    private filter(data: ITreeGridRecord[], state: IFilteringState): ITreeGridRecord[] {\n        return state.strategy.filter(data, state.expressionsTree);\n    }\n}\n","import { IFilteringState } from './filtering-state.interface';\n\nimport { IgxSorting, IgxDataRecordSorting } from './sorting-strategy';\nimport { IGroupByResult, IgxGrouping } from './grouping-strategy';\n\nimport { IPagingState, PagingError } from './paging-state.interface';\n\nimport { IGroupByExpandState, IGroupByKey } from './groupby-expand-state.interface';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { IGroupingState } from './groupby-state.interface';\nimport { TreeGridFilteringStrategy } from '../grids/tree-grid/tree-grid.filtering.pipe';\nimport { ISortingExpression } from './sorting-expression.interface';\nimport { FilteringStrategy } from './filtering-strategy';\nimport { ITreeGridRecord } from '../grids/tree-grid';\nimport { cloneValue, mergeObjects } from '../core/utils';\nimport { Transaction, TransactionType, HierarchicalTransaction } from '../services/transaction/transaction';\n\n/**\n * @hidden\n */\nexport enum DataType {\n    String = 'string',\n    Number = 'number',\n    Boolean = 'boolean',\n    Date = 'date'\n}\n\n/**\n * @hidden\n */\nexport class DataUtil {\n    public static sort<T>(data: T[], expressions: ISortingExpression[], sorting: IgxSorting = new IgxSorting()): T[] {\n        return sorting.sort(data, expressions);\n    }\n\n    public static treeGridSort(hierarchicalData: ITreeGridRecord[],\n        expressions: ISortingExpression[],\n        parent?: ITreeGridRecord): ITreeGridRecord[] {\n        let res: ITreeGridRecord[] = [];\n        hierarchicalData.forEach((hr: ITreeGridRecord) => {\n            const rec: ITreeGridRecord = DataUtil.cloneTreeGridRecord(hr);\n            rec.parent = parent;\n            if (rec.children) {\n                rec.children = DataUtil.treeGridSort(rec.children, expressions, rec);\n            }\n            res.push(rec);\n        });\n\n        res = DataUtil.sort(res, expressions, new IgxDataRecordSorting());\n\n        return res;\n    }\n\n    public static cloneTreeGridRecord(hierarchicalRecord: ITreeGridRecord) {\n        const rec: ITreeGridRecord = {\n            rowID: hierarchicalRecord.rowID,\n            data: hierarchicalRecord.data,\n            children: hierarchicalRecord.children,\n            isFilteredOutParent: hierarchicalRecord.isFilteredOutParent,\n            level: hierarchicalRecord.level,\n            expanded: hierarchicalRecord.expanded\n        };\n        return rec;\n    }\n\n    public static group<T>(data: T[], state: IGroupingState, grid: any = null, groupsRecords: any[] = []): IGroupByResult {\n        const grouping = new IgxGrouping();\n        groupsRecords.splice(0, groupsRecords.length);\n        return grouping.groupBy(data, state.expressions, grid, groupsRecords);\n    }\n    public static restoreGroups(groupData: IGroupByResult, state: IGroupingState): any[] {\n        if (state.expressions.length === 0) {\n            return groupData.data;\n        }\n        return this.restoreGroupsIterative(groupData, state);\n    }\n    private static restoreGroupsIterative(groupData: IGroupByResult, state: IGroupingState): any[] {\n        const metadata = groupData.metadata;\n        const result = [], added = [];\n        let chain: any[];\n        let i = 0, j;\n        let pointer: IGroupByRecord;\n        let expanded: boolean;\n        for (i = 0; i < metadata.length;) {\n            chain = [metadata[i]];\n            pointer = metadata[i].groupParent;\n            // break off if the parent is already added\n            while (pointer && added[0] !== pointer) {\n                chain.push(pointer);\n                if (added[0] && added[0].level === pointer.level) {\n                    added.shift();\n                }\n                pointer = pointer.groupParent;\n            }\n            for (j = chain.length - 1; j >= 0; j--) {\n                result.push(chain[j]);\n                added.unshift(chain[j]);\n                const hierarchy = this.getHierarchy(chain[j]);\n                const expandState: IGroupByExpandState = state.expansion.find((s) =>\n                    this.isHierarchyMatch(s.hierarchy || [{ fieldName: chain[j].expression.fieldName, value: chain[j].value }], hierarchy));\n                expanded = expandState ? expandState.expanded : state.defaultExpanded;\n                if (!expanded) {\n                    break;\n                }\n            }\n            added.shift();\n            j = Math.max(j, 0);\n            const start = chain[j].records.findIndex(r => r === groupData.data[i]);\n            const end = Math.min(metadata.length - i + start, chain[j].records.length);\n            if (expanded) {\n                result.push(...chain[j].records.slice(start, end));\n            }\n            i += end - start;\n        }\n        return result;\n    }\n    public static page<T>(data: T[], state: IPagingState): T[] {\n        if (!state) {\n            return data;\n        }\n        const len = data.length;\n        const index = state.index;\n        const res = [];\n        const recordsPerPage = state.recordsPerPage;\n        state.metadata = {\n            countPages: 0,\n            countRecords: data.length,\n            error: PagingError.None\n        };\n        if (index < 0 || isNaN(index)) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        if (recordsPerPage <= 0 || isNaN(recordsPerPage)) {\n            state.metadata.error = PagingError.IncorrectRecordsPerPage;\n            return res;\n        }\n        state.metadata.countPages = Math.ceil(len / recordsPerPage);\n        if (!len) {\n            return data;\n        }\n        if (index >= state.metadata.countPages) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        return data.slice(index * recordsPerPage, (index + 1) * recordsPerPage);\n    }\n    public static filter<T>(data: T[], state: IFilteringState): T[] {\n        if (!state.strategy) {\n            state.strategy = new FilteringStrategy();\n        }\n        return state.strategy.filter(data, state.expressionsTree);\n    }\n\n    public static treeGridFilter(data: ITreeGridRecord[], state: IFilteringState): ITreeGridRecord[] {\n        if (!state.strategy) {\n            state.strategy = new TreeGridFilteringStrategy();\n        }\n        return state.strategy.filter(data, state.expressionsTree);\n    }\n\n    public static getHierarchy(gRow: IGroupByRecord): Array<IGroupByKey> {\n        const hierarchy: Array<IGroupByKey> = [];\n        if (gRow !== undefined && gRow.expression) {\n            hierarchy.push({ fieldName: gRow.expression.fieldName, value: gRow.value });\n            while (gRow.groupParent) {\n                gRow = gRow.groupParent;\n                hierarchy.unshift({ fieldName: gRow.expression.fieldName, value: gRow.value });\n            }\n        }\n        return hierarchy;\n    }\n\n    public static isHierarchyMatch(h1: Array<IGroupByKey>, h2: Array<IGroupByKey>): boolean {\n        if (h1.length !== h2.length) {\n            return false;\n        }\n        return h1.every((level, index): boolean => {\n            return level.fieldName === h2[index].fieldName && level.value === h2[index].value;\n        });\n    }\n\n    /**\n     * Merges all changes from provided transactions into provided data collection\n     * @param data Collection to merge\n     * @param transactions Transactions to merge into data\n     * @param primaryKey Primary key of the collection, if any\n     * @param deleteRows Should delete rows with DELETE transaction type from data\n     * @returns Provided data collections updated with all provided transactions\n     */\n    public static mergeTransactions<T>(data: T[], transactions: Transaction[], primaryKey?: any, deleteRows: boolean = false): T[] {\n        data.forEach((item: any, index: number) => {\n            const rowId = primaryKey ? item[primaryKey] : item;\n            const transaction = transactions.find(t => t.id === rowId);\n            if (transaction && transaction.type === TransactionType.UPDATE) {\n                data[index] = transaction.newValue;\n            }\n        });\n\n        if (deleteRows) {\n            transactions\n                .filter(t => t.type === TransactionType.DELETE)\n                .forEach(t => {\n                    const index = primaryKey ? data.findIndex(d => d[primaryKey] === t.id) : data.findIndex(d => d === t.id);\n                    if (0 <= index && index < data.length) {\n                        data.splice(index, 1);\n                    }\n                });\n        }\n\n        data.push(...transactions\n            .filter(t => t.type === TransactionType.ADD)\n            .map(t => t.newValue));\n\n        return data;\n    }\n\n    /**\n     * Merges all changes from provided transactions into provided hierarchical data collection\n     * @param data Collection to merge\n     * @param transactions Transactions to merge into data\n     * @param childDataKey Data key of child collections\n     * @param primaryKey Primary key of the collection, if any\n     * @param deleteRows Should delete rows with DELETE transaction type from data\n     * @returns Provided data collections updated with all provided transactions\n     */\n    public static mergeHierarchicalTransactions(\n        data: any[],\n        transactions: HierarchicalTransaction[],\n        childDataKey: any,\n        primaryKey?: any,\n        deleteRows: boolean = false): any[] {\n\n        for (const transaction of transactions) {\n            if (transaction.path) {\n                const parent = this.findParentFromPath(data, primaryKey, childDataKey, transaction.path);\n                let collection: any[] = parent ? parent[childDataKey] : data;\n                switch (transaction.type) {\n                    case TransactionType.ADD:\n                        //  if there is no parent this is ADD row at root level\n                        if (parent && !parent[childDataKey]) {\n                            parent[childDataKey] = collection = [];\n                        }\n                        collection.push(transaction.newValue);\n                        break;\n                    case TransactionType.UPDATE:\n                        const updateIndex = collection.findIndex(x => x[primaryKey] === transaction.id);\n                        if (updateIndex !== -1) {\n                            collection[updateIndex] = mergeObjects(cloneValue(collection[updateIndex]), transaction.newValue);\n                        }\n                        break;\n                    case TransactionType.DELETE:\n                        if (deleteRows) {\n                            const deleteIndex = collection.findIndex(r => r[primaryKey] === transaction.id);\n                            if (deleteIndex !== -1) {\n                                collection.splice(deleteIndex, 1);\n                            }\n                        }\n                        break;\n                }\n            } else {\n                //  if there is no path this is ADD row in root. Push the newValue to data\n                data.push(transaction.newValue);\n            }\n        }\n        return data;\n    }\n\n    private static findParentFromPath(data: any[], primaryKey: any, childDataKey: any, path: any[]): any {\n        let collection: any[] = data;\n        let result: any;\n\n        for (const id of path) {\n            result = collection && collection.find(x => x[primaryKey] === id);\n            if (!result) {\n                break;\n            }\n\n            collection = result[childDataKey];\n        }\n\n        return result;\n    }\n}\n","\n/**\n * @hidden\n */\nexport class ExportUtilities {\n    public static getKeysFromData(data: any[]) {\n        const length = data.length;\n        if (length === 0) {\n            return [];\n        }\n\n        const dataEntry = data[0];\n        const dataEntryMiddle = data[Math.floor(length / 2)];\n        const dataEntryLast = data[length - 1];\n\n        const keys1 = Object.keys(dataEntry);\n        const keys2 = Object.keys(dataEntryMiddle);\n        const keys3 = Object.keys(dataEntryLast);\n\n        const keys = new Set(keys1.concat(keys2).concat(keys3));\n\n        return !ExportUtilities.isSpecialData(data) ? Array.from(keys) : [ 'Column 1' ];\n    }\n\n    public static saveBlobToFile(blob: Blob, fileName) {\n        const a = document.createElement('a');\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveOrOpenBlob(blob, fileName);\n        } else {\n            const url = window.URL.createObjectURL(blob);\n            a.download = fileName;\n\n            a.href = url;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(url);\n        }\n    }\n\n    public static stringToArrayBuffer(s: string): ArrayBuffer {\n        const buf = new ArrayBuffer(s.length);\n        const view = new Uint8Array(buf);\n        for (let i = 0; i !== s.length; ++i) {\n            /* tslint:disable no-bitwise */\n            view[i] = s.charCodeAt(i) & 0xFF;\n            /* tslint:enable no-bitwise */\n        }\n        return buf;\n    }\n\n    public static isSpecialData(data: any[]): boolean {\n        const dataEntry = data[0];\n        return (typeof dataEntry === 'string' ||\n                typeof dataEntry === 'number' ||\n                dataEntry instanceof Date);\n    }\n\n    public static hasValue(value: any): boolean {\n        return value !== undefined && value !== null;\n    }\n\n    public static isNullOrWhitespaces(value: string): boolean {\n        return value === undefined || value === null || !value.trim();\n    }\n}\n","import {\n    EventEmitter,\n    Output\n} from '@angular/core';\n\nimport { cloneValue } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\n\nimport { ExportUtilities } from './export-utilities';\nimport { IgxExporterOptionsBase } from './exporter-options-base';\nimport { ITreeGridRecord } from '../../grids/tree-grid/tree-grid.interfaces';\n\n/**\n * onRowExport event arguments\n * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n * // set args properties here\n * })\n */\nexport interface IRowExportingEventArgs {\n    /**\n     * Contains the exporting row data\n     */\n    rowData: any;\n\n    /**\n     * Contains the exporting row index\n     */\n    rowIndex: number;\n\n    /**\n     * Skip the exporting row when set to true\n     */\n    cancel: boolean;\n}\n\n/**\n    * onColumnExport event arguments\n    * ```typescript\n    * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n    * // set args properties here\n    * });\n    * ```\n    */\nexport interface IColumnExportingEventArgs {\n    /**\n     * Contains the exporting column header\n     */\n    header: string;\n\n    /**\n     * Contains the exporting column field name\n     */\n    field: string;\n\n    /**\n     * Contains the exporting column index\n     */\n    columnIndex: number;\n\n    /**\n     * Skip the exporting column when set to true\n     */\n    cancel: boolean;\n\n    /**\n     * Export the column's data without applying its formatter, when set to true\n     */\n    skipFormatter: boolean;\n}\n\nexport abstract class IgxBaseExporter {\n    private _columnList: any[];\n    private flatRecords = [];\n\n    protected _isTreeGrid = false;\n    protected _indexOfLastPinnedColumn = -1;\n    protected _sort = null;\n\n    /**\n     * This event is emitted when a row is exported.\n     * ```typescript\n     * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    @Output()\n    public onRowExport = new EventEmitter<IRowExportingEventArgs>();\n\n    /**\n     * This event is emitted when a column is exported.\n     * ```typescript\n     * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    @Output()\n    public onColumnExport = new EventEmitter<IColumnExportingEventArgs>();\n\n    /**\n     * Method for exporting IgxGrid component's data.\n     * ```typescript\n     * this.exporterService.export(this.igxGridForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public export(grid: any, options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        const columns = grid.columnList.toArray();\n        this._columnList = new Array<any>(columns.length);\n\n        const hiddenColumns = [];\n        let lastVisbleColumnIndex = -1;\n\n        columns.forEach((column) => {\n            const columnHeader = column.header !== '' ? column.header : column.field;\n            const exportColumn = !column.hidden || options.ignoreColumnsVisibility;\n            const index = options.ignoreColumnsOrder ? column.index : column.visibleIndex;\n\n            const columnInfo = {\n                header: columnHeader,\n                field: column.field,\n                skip: !exportColumn,\n                formatter: column.formatter,\n                skipFormatter: false\n            };\n\n            if (index !== -1) {\n                this._columnList[index] = columnInfo;\n                lastVisbleColumnIndex = Math.max(lastVisbleColumnIndex, index);\n            } else {\n                hiddenColumns.push(columnInfo);\n            }\n\n            if (column.pinned && exportColumn) {\n                this._indexOfLastPinnedColumn = index;\n            }\n        });\n\n        // Append the hidden columns to the end of the list\n        hiddenColumns.forEach((hiddenColumn) => {\n            this._columnList[++lastVisbleColumnIndex] = hiddenColumn;\n        });\n\n        const data = this.prepareData(grid, options);\n        this.exportData(data, options);\n    }\n\n    /**\n     * Method for exporting any kind of array data.\n     * ```typescript\n     * this.exporterService.exportData(this.arrayForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public exportData(data: any[], options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        if (!this._columnList || this._columnList.length === 0) {\n            const keys = ExportUtilities.getKeysFromData(data);\n            this._columnList = keys.map((k) => ({ header: k, field: k, skip: false }));\n        }\n\n        let skippedPinnedColumnsCount = 0;\n        let columnsWithoutHeaderCount = 1;\n        this._columnList.forEach((column, index) => {\n            if (!column.skip) {\n                const columnExportArgs = {\n                    header: ExportUtilities.isNullOrWhitespaces(column.header) ?\n                        'Column' + columnsWithoutHeaderCount++ : column.header,\n                    field: column.field,\n                    columnIndex: index,\n                    cancel: false,\n                    skipFormatter: false\n                };\n                this.onColumnExport.emit(columnExportArgs);\n\n                column.header = columnExportArgs.header;\n                column.skip = columnExportArgs.cancel;\n                column.skipFormatter = columnExportArgs.skipFormatter;\n\n                if (column.skip && index <= this._indexOfLastPinnedColumn) {\n                    skippedPinnedColumnsCount++;\n                }\n\n                if (this._sort && this._sort.fieldName === column.field) {\n                    if (column.skip) {\n                        this._sort = null;\n                    } else {\n                        this._sort.fieldName = column.header;\n                    }\n                }\n            }\n        });\n\n        this._indexOfLastPinnedColumn -= skippedPinnedColumnsCount;\n\n        const dataToExport = new Array<any>();\n        const isSpecialData = ExportUtilities.isSpecialData(data);\n\n        data.forEach((row, index) => {\n            this.exportRow(dataToExport, row, index, isSpecialData);\n        });\n\n        this.exportDataImplementation(dataToExport, options);\n        this.resetDefaults();\n    }\n\n    protected abstract exportDataImplementation(data: any[], options: IgxExporterOptionsBase): void;\n\n    private exportRow(data: any[], rowData: any, index: number, isSpecialData: boolean) {\n        let row;\n\n        if (!isSpecialData) {\n            row = this._columnList.reduce((a, e) => {\n                if (!e.skip) {\n                    const rawValue = this._isTreeGrid ? rowData.data[e.field] : rowData[e.field];\n                    a[e.header] = e.formatter && !e.skipFormatter ? e.formatter(rawValue) : rawValue;\n                }\n                return a;\n            }, {});\n        } else {\n            row = this._isTreeGrid ? rowData.data : rowData;\n        }\n\n        const rowArgs = {\n            rowData: row,\n            rowIndex: index,\n            cancel: false\n        };\n        this.onRowExport.emit(rowArgs);\n\n        if (!rowArgs.cancel) {\n            data.push({ rowData: rowArgs.rowData, originalRowData: rowData });\n        }\n    }\n\n    private prepareData(grid: any, options: IgxExporterOptionsBase): any[] {\n        this.flatRecords = [];\n        let rootRecords = grid.rootRecords;\n        this._isTreeGrid = rootRecords !== undefined;\n\n        if (this._isTreeGrid) {\n            this.prepareHierarchicalData(rootRecords);\n        }\n\n        let data = this._isTreeGrid ? this.flatRecords : grid.data;\n\n        if (grid.filteringExpressionsTree &&\n            grid.filteringExpressionsTree.filteringOperands.length > 0 &&\n            !options.ignoreFiltering) {\n            const filteringState = {\n                expressionsTree: grid.filteringExpressionsTree,\n                logic: grid.filteringLogic\n            };\n\n            if (this._isTreeGrid) {\n                this.flatRecords = [];\n                rootRecords = DataUtil.treeGridFilter(rootRecords, filteringState);\n                this.prepareHierarchicalData(rootRecords);\n                data = this.flatRecords;\n            } else {\n                data = DataUtil.filter(data, filteringState);\n            }\n        }\n\n        if (grid.sortingExpressions &&\n            grid.sortingExpressions.length > 0 &&\n            !options.ignoreSorting) {\n            this._sort = cloneValue(grid.sortingExpressions[0]);\n\n            if (this._isTreeGrid) {\n                this.flatRecords = [];\n                rootRecords = DataUtil.treeGridSort(rootRecords, grid.sortingExpressions);\n                this.prepareHierarchicalData(rootRecords);\n                data = this.flatRecords;\n            } else {\n                data = DataUtil.sort(data, grid.sortingExpressions);\n            }\n        }\n\n        return data;\n    }\n\n    private prepareHierarchicalData(records: ITreeGridRecord[]) {\n        if (!records) {\n            return;\n        }\n        for (let i = 0; i < records.length; i++) {\n            const hierarchicalRecord = records[i];\n\n            this.flatRecords.push(hierarchicalRecord);\n            this.prepareHierarchicalData(hierarchicalRecord.children);\n        }\n    }\n\n    private resetDefaults() {\n        this._columnList = [];\n        this._indexOfLastPinnedColumn = -1;\n        this._sort = null;\n        this.flatRecords = [];\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\n\n/**\n * @hidden\n */\nexport class CharSeparatedValueData {\n    private _headerRecord = '';\n    private _dataRecords = '';\n    private _eor = '\\r\\n';\n    private _delimiter;\n    private _escapeCharacters = ['\\r', '\\n', '\\r\\n'];\n    private _delimiterLength = 1;\n    private _isSpecialData = false;\n\n    constructor(private _data: any[], valueDelimiter: string)  {\n        this.setDelimiter(valueDelimiter);\n    }\n\n    public prepareData() {\n        if (!this._data || this._data.length === 0) {\n            return '';\n        }\n\n        const keys = ExportUtilities.getKeysFromData(this._data);\n\n        if (keys.length === 0) {\n            return '';\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(this._data);\n        this._escapeCharacters.push(this._delimiter);\n\n        this._headerRecord = this.processHeaderRecord(keys, this._escapeCharacters);\n        this._dataRecords = this.processDataRecords(this._data, keys, this._escapeCharacters);\n\n        return this._headerRecord + this._dataRecords;\n    }\n\n    private processField(value, escapeChars): string {\n        let safeValue = ExportUtilities.hasValue(value) ? String(value) : '';\n        if (escapeChars.some((v) => safeValue.includes(v))) {\n            safeValue = `\"${safeValue}\"`;\n        }\n        return safeValue + this._delimiter;\n    }\n\n    private processHeaderRecord(keys, escapeChars): string {\n        let recordData = '';\n        for (const keyName of keys) {\n            recordData += this.processField(keyName, this._escapeCharacters);\n        }\n\n        return recordData.slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processRecord(record, keys, escapeChars): string {\n        let recordData = '';\n        for (const keyName of keys) {\n\n            const value = (record[keyName] !== undefined) ? record[keyName] : this._isSpecialData ? record : '';\n            recordData += this.processField(value, this._escapeCharacters);\n        }\n\n        return recordData.slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processDataRecords(currentData, keys, escapeChars) {\n        let dataRecords = '';\n        for (const row of currentData) {\n            dataRecords += this.processRecord(row, keys, escapeChars);\n        }\n\n        return dataRecords;\n    }\n\n    private setDelimiter(value) {\n        this._delimiter = value;\n        this._delimiterLength = value.length;\n    }\n}\n","export abstract class IgxExporterOptionsBase {\n    private _fileName: string;\n\n    /**\n     * Specifies whether hidden columns should be exported.\n     * ```typescript\n     * let ignoreColumnsVisibility = this.exportOptions.ignoreColumnsVisibility;\n     * this.exportOptions.ignoreColumnsVisibility = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsVisibility = false;\n\n    /**\n     * Specifies whether filtered out rows should be exported.\n     * ```typescript\n     * let ignoreFiltering = this.exportOptions.ignoreFiltering;\n     * this.exportOptions.ignoreFiltering = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreFiltering = false;\n\n    /**\n     * Specifies if the exporter should ignore the current column order in the IgxGrid.\n     * ```typescript\n     * let ignoreColumnsOrder = this.exportOptions.ignoreColumnsOrder;\n     * this.exportOptions.ignoreColumnsOrder = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsOrder = false;\n\n    /**\n     * Specifies whether the exported data should be sorted as in the provided IgxGrid.\n     * ```typescript\n     * let ignoreSorting = this.exportOptions.ignoreSorting;\n     * this.exportOptions.ignoreSorting = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreSorting = false;\n\n    constructor(fileName: string, protected _fileExtension: string) {\n        this.setFileName(fileName);\n    }\n\n    private setFileName(fileName: string): void {\n        this._fileName = fileName + (fileName.endsWith(this._fileExtension) === false ? this._fileExtension : '');\n    }\n\n    /**\n     * Gets the file name which will be used for the exporting operation.\n     * ```typescript\n     * let fileName = this.exportOptions.fileName;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    get fileName() {\n        return this._fileName;\n    }\n\n    /**\n     * Sets the file name which will be used for the exporting operation.\n     * ```typescript\n     * this.exportOptions.fileName = 'exportedData01';\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    set fileName(value) {\n        this.setFileName(value);\n    }\n\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the CSV exporting process.\n */\nexport class IgxCsvExporterOptions extends IgxExporterOptionsBase {\n\n    private _valueDelimiter;\n    private _fileType;\n\n    constructor(fileName: string, fileType: CsvFileTypes) {\n        super(fileName, IgxCsvExporterOptions.getExtensionFromFileType(fileType));\n        this.setFileType(fileType);\n        this.setDelimiter();\n    }\n\n    private static getExtensionFromFileType(fType: CsvFileTypes) {\n        let extension = '';\n        switch (fType) {\n            case CsvFileTypes.CSV:\n                extension = '.csv';\n                break;\n            case CsvFileTypes.TSV:\n                extension = '.tsv';\n                break;\n            case CsvFileTypes.TAB:\n                extension = '.tab';\n                break;\n            default:\n                throw Error('Unsupported CSV file type!');\n        }\n        return extension;\n    }\n\n    /**\n     * Gets the value delimiter which will be used for the exporting operation.\n     * ```typescript\n     * let delimiter = this.exportOptions.valueDelimiter;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get valueDelimiter() {\n        return this._valueDelimiter;\n    }\n\n    /**\n     * Sets a value delimiter which will overwrite the default delimiter of the selected export format.\n     * ```typescript\n     * this.exportOptions.valueDelimiter = '|';\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set valueDelimiter(value) {\n        this.setDelimiter(value);\n    }\n\n    /**\n     * Gets the CSV export format.\n     * ```typescript\n     * let filetype = this.exportOptions.fileType;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get fileType() {\n        return this._fileType;\n    }\n\n    /**\n     * Sets the CSV export format.\n     * ```typescript\n     * this.exportOptions.fileType = CsvFileTypes.TAB;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set fileType(value) {\n        this.setFileType(value);\n    }\n\n    private setFileType(value) {\n        if (value !== undefined && value !== null && value !== this._fileType) {\n            this._fileType = value;\n            const extension = IgxCsvExporterOptions.getExtensionFromFileType(value);\n            if (!this.fileName.endsWith(extension)) {\n                const oldExt = '.' + this.fileName.split('.').pop();\n                const newName = this.fileName.replace(oldExt, extension);\n                this._fileExtension = extension;\n                this.fileName = newName;\n            }\n        }\n    }\n\n    private setDelimiter(value?) {\n        if (value !== undefined && value !== '' && value !== null) {\n            this._valueDelimiter = value;\n        } else {\n            switch (this.fileType) {\n                case CsvFileTypes.CSV:\n                    this._valueDelimiter = ',';\n                    break;\n                case CsvFileTypes.TSV:\n                case CsvFileTypes.TAB:\n                    this._valueDelimiter = '\\t';\n                    break;\n            }\n        }\n    }\n}\n\n/**\n * This enumeration is used to configure the default value separator\n * as well as the default file extension used when performing CSV exporting.\n */\nexport enum CsvFileTypes {\n    /**\n     * Character Separated Values, default separator is \"comma\", default file extension is .csv\n     */\n    CSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tsv\n     */\n    TSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tab\n     */\n    TAB\n}\n","import { EventEmitter, Injectable, Output } from '@angular/core';\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { CharSeparatedValueData } from './char-separated-value-data';\nimport { CsvFileTypes, IgxCsvExporterOptions } from './csv-exporter-options';\n\nexport interface ICsvExportEndedEventArgs {\n    csvData: string;\n}\n\n/**\n * **Ignite UI for Angular CSV Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_csv.html)\n *\n * The Ignite UI for Angular CSV Exporter service can export data in a Character Separated Values format from\n * both raw data (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private csvExportService: IgxCsvExporterService) {\n * }\n *\n * const opt: IgxCsvExporterOptions = new IgxCsvExporterOptions(\"FileName\", CsvFileTypes.CSV);\n * this.csvExportService.exportData(this.localData, opt);\n * ```\n */\n@Injectable()\nexport class IgxCsvExporterService extends IgxBaseExporter {\n    private _stringData: string;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: ICsvExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxCsvExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<ICsvExportEndedEventArgs>();\n\n    protected exportDataImplementation(data: any[], options: IgxCsvExporterOptions) {\n        data = data.map((item) => item.rowData);\n        const csvData = new CharSeparatedValueData(data, options.valueDelimiter);\n        this._stringData = csvData.prepareData();\n\n        this.saveFile(options);\n        this.onExportEnded.emit({ csvData: this._stringData });\n    }\n\n    private saveFile(options: IgxCsvExporterOptions) {\n        switch (options.fileType) {\n            case CsvFileTypes.CSV:\n                this.exportFile(this._stringData, options.fileName, 'text/csv;charset=utf-8;');\n                break;\n            case CsvFileTypes.TSV:\n            case CsvFileTypes.TAB:\n                this.exportFile(this._stringData, options.fileName, 'text/tab-separated-values;charset=utf-8;');\n                break;\n        }\n    }\n\n    private exportFile(data: string, fileName: string, fileType: string): void {\n        const blob = new Blob(['\\ufeff', data], { type: fileType });\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","/**\n * @hidden\n */\nexport enum ExcelFolderTypes {\n    RootExcelFolder,\n    RootRelsExcelFolder,\n    DocPropsExcelFolder,\n    XLExcelFolder,\n    XLRelsExcelFolder,\n    ThemeExcelFolder,\n    WorksheetsExcelFolder,\n    WorksheetsRelsExcelFolder,\n    TablesExcelFolder\n}\n/**\n * @hidden\n */\nexport enum ExcelFileTypes {\n    RootRelsFile,\n    AppFile,\n    CoreFile,\n    WorkbookRelsFile,\n    ThemeFile,\n    WorksheetFile,\n    StyleFile,\n    WorkbookFile,\n    ContentTypesFile,\n    SharedStringsFile,\n    WorksheetRelsFile,\n    TablesFile\n}\n","/** @hidden */\nexport class ExcelStrings {\n    /* tslint:disable max-line-length */\n    private static XML_STRING = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\r\\n';\n    private static SHARED_STRING_RELATIONSHIP = '<Relationship Id=\"rId4\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\" Target=\"sharedStrings.xml\" />';\n\n    public static getRels(): string {\n        return ExcelStrings.XML_STRING + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\" Target=\"docProps/app.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\" Target=\"docProps/core.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\"/></Relationships>';\n    }\n\n    public static getApp(): string {\n        return ExcelStrings.XML_STRING + '<Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\" xmlns:vt=\"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\"><Application>Microsoft Excel</Application><DocSecurity>0</DocSecurity><ScaleCrop>false</ScaleCrop><HeadingPairs><vt:vector size=\"2\" baseType=\"variant\"><vt:variant><vt:lpstr>Worksheets</vt:lpstr></vt:variant><vt:variant><vt:i4>1</vt:i4></vt:variant></vt:vector></HeadingPairs><TitlesOfParts><vt:vector size=\"1\" baseType=\"lpstr\"><vt:lpstr>Sheet1</vt:lpstr></vt:vector></TitlesOfParts><Company></Company><LinksUpToDate>false</LinksUpToDate><SharedDoc>false</SharedDoc><HyperlinksChanged>false</HyperlinksChanged><AppVersion>16.0300</AppVersion></Properties>';\n    }\n\n    public static getCore(): string {\n        return ExcelStrings.XML_STRING + '<cp:coreProperties xmlns:cp=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:dcmitype=\"http://purl.org/dc/dcmitype/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><dc:creator></dc:creator><cp:lastModifiedBy></cp:lastModifiedBy><dcterms:created xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:20Z</dcterms:created><dcterms:modified xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:26Z</dcterms:modified></cp:coreProperties>';\n    }\n\n    public static getTheme(): string {\n        return ExcelStrings.XML_STRING + '<a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\"><a:themeElements><a:clrScheme name=\"Office\"><a:dk1><a:sysClr val=\"windowText\" lastClr=\"000000\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"44546A\"/></a:dk2><a:lt2><a:srgbClr val=\"E7E6E6\"/></a:lt2><a:accent1><a:srgbClr val=\"5B9BD5\"/></a:accent1><a:accent2><a:srgbClr val=\"ED7D31\"/></a:accent2><a:accent3><a:srgbClr val=\"A5A5A5\"/></a:accent3><a:accent4><a:srgbClr val=\"FFC000\"/></a:accent4><a:accent5><a:srgbClr val=\"4472C4\"/></a:accent5><a:accent6><a:srgbClr val=\"70AD47\"/></a:accent6><a:hlink><a:srgbClr val=\"0563C1\"/></a:hlink><a:folHlink><a:srgbClr val=\"954F72\"/></a:folHlink></a:clrScheme><a:fontScheme name=\"Office\"><a:majorFont><a:latin typeface=\"Calibri Light\" panose=\"020F0302020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"æ¸¸ã´ã·ãã¯ Light\"/><a:font script=\"Hang\" typeface=\"ë§ì ê³ ë\"/><a:font script=\"Hans\" typeface=\"ç­çº¿ Light\"/><a:font script=\"Hant\" typeface=\"æ°ç´°æé«\"/><a:font script=\"Arab\" typeface=\"Times New Roman\"/><a:font script=\"Hebr\" typeface=\"Times New Roman\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"MoolBoran\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Times New Roman\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:majorFont><a:minorFont><a:latin typeface=\"Calibri\" panose=\"020F0502020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"æ¸¸ã´ã·ãã¯\"/><a:font script=\"Hang\" typeface=\"ë§ì ê³ ë\"/><a:font script=\"Hans\" typeface=\"ç­çº¿\"/><a:font script=\"Hant\" typeface=\"æ°ç´°æé«\"/><a:font script=\"Arab\" typeface=\"Arial\"/><a:font script=\"Hebr\" typeface=\"Arial\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"DaunPenh\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Arial\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:minorFont></a:fontScheme><a:fmtScheme name=\"Office\"><a:fillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"110000\"/><a:satMod val=\"105000\"/><a:tint val=\"67000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"103000\"/><a:tint val=\"73000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"109000\"/><a:tint val=\"81000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:satMod val=\"103000\"/><a:lumMod val=\"102000\"/><a:tint val=\"94000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:satMod val=\"110000\"/><a:lumMod val=\"100000\"/><a:shade val=\"100000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"99000\"/><a:satMod val=\"120000\"/><a:shade val=\"78000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:fillStyleLst><a:lnStyleLst><a:ln w=\"6350\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"12700\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"19050\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln></a:lnStyleLst><a:effectStyleLst><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"57150\" dist=\"19050\" dir=\"5400000\" algn=\"ctr\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"63000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle></a:effectStyleLst><a:bgFillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:solidFill><a:schemeClr val=\"phClr\"><a:tint val=\"95000\"/><a:satMod val=\"170000\"/></a:schemeClr></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"93000\"/><a:satMod val=\"150000\"/><a:shade val=\"98000\"/><a:lumMod val=\"102000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:tint val=\"98000\"/><a:satMod val=\"130000\"/><a:shade val=\"90000\"/><a:lumMod val=\"103000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"63000\"/><a:satMod val=\"120000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:bgFillStyleLst></a:fmtScheme></a:themeElements><a:objectDefaults/><a:extraClrSchemeLst/><a:extLst><a:ext uri=\"{05A4C25C-085E-4340-85A3-A5531E510DB2}\"><thm15:themeFamily xmlns:thm15=\"http://schemas.microsoft.com/office/thememl/2012/main\" name=\"Office Theme\" id=\"{62F939B6-93AF-4DB8-9C6B-D6C7DFDC589F}\" vid=\"{4A3C46E8-61CC-4603-A589-7422A47A8E4A}\"/></a:ext></a:extLst></a:theme>';\n    }\n\n    public static getStyles(hasNonStringValues: boolean): string {\n        const additionalCellXF = '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\" applyNumberFormat=\"1\"/>';\n        const cellXFCount = hasNonStringValues ? 2 : 1;\n        return ExcelStrings.XML_STRING + '<styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac x16r2\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\" xmlns:x16r2=\"http://schemas.microsoft.com/office/spreadsheetml/2015/02/main\"><fonts count=\"1\" x14ac:knownFonts=\"1\"><font><sz val=\"11\"/><color theme=\"1\"/><name val=\"Calibri\"/><family val=\"2\"/><scheme val=\"minor\"/></font></fonts><fills count=\"2\"><fill><patternFill patternType=\"none\"/></fill><fill><patternFill patternType=\"gray125\"/></fill></fills><borders count=\"1\"><border><left/><right/><top/><bottom/><diagonal/></border></borders><cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs><cellXfs count=\"' + cellXFCount + '\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\"/>' + additionalCellXF + '</cellXfs><cellStyles count=\"1\"><cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/></cellStyles><dxfs count=\"0\"/><tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium2\" defaultPivotStyle=\"PivotStyleLight16\"/><extLst><ext uri=\"{EB79DEF2-80B8-43e5-95BD-54CBDDF9020C}\" xmlns:x14=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/main\"><x14:slicerStyles defaultSlicerStyle=\"SlicerStyleLight1\"/></ext><ext uri=\"{9260A510-F301-46a8-8635-F512D64BE5F5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:timelineStyles defaultTimelineStyle=\"TimeSlicerStyleLight1\"/></ext></extLst></styleSheet>';\n    }\n\n    public static getWorkbook(): string {\n        return ExcelStrings.XML_STRING + '<workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x15\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><fileVersion appName=\"xl\" lastEdited=\"6\" lowestEdited=\"6\" rupBuild=\"14420\"/><workbookPr filterPrivacy=\"1\" defaultThemeVersion=\"164011\"/><bookViews><workbookView xWindow=\"0\" yWindow=\"0\" windowWidth=\"22260\" windowHeight=\"12645\"/></bookViews><sheets><sheet name=\"Sheet1\" sheetId=\"1\" r:id=\"rId1\"/></sheets><calcPr calcId=\"162913\"/><extLst><ext uri=\"{140A7094-0E35-4892-8432-C4D2E57EDEB5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:workbookPr chartTrackingRefBase=\"1\"/></ext></extLst></workbook>';\n    }\n\n    public static getWorksheetRels(): string {\n        return ExcelStrings.XML_STRING + `<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/table\" Target=\"../tables/table1.xml\"/></Relationships>`;\n    }\n\n    public static getWorkbookRels(hasSharedStrings): string {\n        let retVal = ExcelStrings.XML_STRING + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\" Target=\"theme/theme1.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet1.xml\"/>';\n\n        if (hasSharedStrings) {\n            retVal += ExcelStrings.SHARED_STRING_RELATIONSHIP;\n        }\n\n        retVal += '</Relationships>';\n\n        return retVal;\n    }\n\n    public static getSheetXML(dimension: string, freezePane: string, cols: string, sheetData: string, hasTable: boolean, hasGroupedRows = false, outlineLevel = 0): string {\n        const tableParts = hasTable ? '<tableParts count=\"1\"><tablePart r:id=\"rId1\"/></tableParts>' : '';\n        const sheetOutlineProp = hasGroupedRows ? '<sheetPr><outlinePr summaryBelow=\"0\"/></sheetPr>' : '';\n        const sOutlineLevel = outlineLevel > 0 ? `outlineLevelRow=\"${outlineLevel}\"` : '';\n        // return ExcelStrings.XML_STRING +\n        //     '<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\"><dimension ref=\"' + dimension + '\"/><sheetViews><sheetView tabSelected=\"1\" workbookViewId=\"0\">' + freezePane + '</sheetView></sheetViews><sheetFormatPr defaultRowHeight=\"15\" x14ac:dyDescent=\"0.25\"/>' + cols + sheetData + '<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>' + tableParts + '</worksheet>';\n\n        return `${ExcelStrings.XML_STRING}\n<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">\n${sheetOutlineProp}\n<dimension ref=\"${dimension}\"/>\n<sheetViews><sheetView tabSelected=\"1\" workbookViewId=\"0\">${freezePane}</sheetView></sheetViews>\n<sheetFormatPr defaultRowHeight=\"15\" ${sOutlineLevel} x14ac:dyDescent=\"0.25\"/>\n${cols}\n${sheetData}\n<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>\n${tableParts}</worksheet>`;\n\n    }\n\n    public static getSharedStringXML(count: number, uniqueCount: number, table: string): string {\n        return ExcelStrings.XML_STRING + '<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"' + count + '\" uniqueCount=\"' + uniqueCount + '\">' + table + '</sst>';\n    }\n\n    public static getContentTypesXML(hasSharedStrings: boolean, hasTable: boolean): string {\n        let contentTypes = ExcelStrings.XML_STRING +\n        `<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\\\">\n            <Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\"/>\n            <Default Extension=\"xml\" ContentType=\"application/xml\"/>\n            <Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\"/>\n            <Override PartName=\"/xl/worksheets/sheet1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\"/>\n            <Override PartName=\"/xl/theme/theme1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.theme+xml\"/>\n            <Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\"/>\n            <Override PartName=\"/docProps/core.xml\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\"/>\n            <Override PartName=\"/docProps/app.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.extended-properties+xml\"/>`;\n\n        contentTypes += hasSharedStrings ?\n        `\t<Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\"/>` : '';\n\n        contentTypes += hasTable ?\n            `<Override PartName=\"/xl/tables/table1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\"/>` : '';\n        contentTypes += `</Types>`;\n\n        return contentTypes;\n    }\n\n    public static getTablesXML(dimension: string, tableColumns: string, sort: string): string {\n        return `${ExcelStrings.XML_STRING}<table xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" id=\"1\" name=\"Table1\" displayName=\"Table1\" ref=\"${dimension}\" totalsRowShown=\"0\">\n    <autoFilter ref=\"${dimension}\"/>${sort}${tableColumns}<tableStyleInfo name=\"TableStyleMedium2\" showFirstColumn=\"0\" showLastColumn=\"0\" showRowStripes=\"1\" showColumnStripes=\"0\"/>\n</table>`;\n    }\n    /* tslint:enable max-line-length */\n\n    public static getExcelColumn(index: number): string {\n        // Returns the excel column name for given 0-based index\n        // For example 27 should return \"AB\"\n        let returnString = '';\n        while (index >= 0) {\n            const char = index % 26;\n            returnString = String.fromCharCode(65 + char) + returnString;\n            index = Math.floor(index / 26) - 1;\n        }\n        return returnString;\n    }\n}\n","import { IExcelFile } from './excel-interfaces';\nimport { ExcelStrings } from './excel-strings';\nimport { WorksheetData } from './worksheet-data';\n\nimport * as JSZip from 'jszip/dist/jszip';\n\n/**\n * @hidden\n */\nexport class RootRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('.rels', ExcelStrings.getRels());\n    }\n}\n\n/**\n * @hidden\n */\nexport class AppFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('app.xml', ExcelStrings.getApp());\n    }\n}\n\n/**\n * @hidden\n */\nexport class CoreFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('core.xml', ExcelStrings.getCore());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const hasSharedStrings = worksheetData.isEmpty === false;\n        folder.file('workbook.xml.rels', ExcelStrings.getWorkbookRels(hasSharedStrings));\n    }\n}\n\n/**\n * @hidden\n */\nexport class ThemeFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('theme1.xml', ExcelStrings.getTheme());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetFile implements IExcelFile {\n    private static MIN_WIDTH = 8.34;\n\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const sheetData = [];\n        const cols = [];\n        let dimension: string;\n        const dictionary = worksheetData.dataDictionary;\n        let freezePane = '';\n        let maxOutlineLevel = 0;\n\n        if (worksheetData.isEmpty) {\n            sheetData.push('<sheetData/>');\n            dimension = 'A1';\n        } else {\n            sheetData.push('<sheetData>');\n            const height =  worksheetData.options.rowHeight;\n            const rowHeight = height ? ' ht=\"' + height + '\" customHeight=\"1\"' : '';\n\n            sheetData.push(`<row r=\"1\"${rowHeight}>`);\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const column = ExcelStrings.getExcelColumn(i) + 1;\n                const value = dictionary.saveValue(worksheetData.keys[i], i, true);\n                sheetData.push(`<c r=\"${column}\" t=\"s\"><v>${value}</v></c>`);\n            }\n            sheetData.push('</row>');\n\n            for (let i = 1; i < worksheetData.rowCount; i++) {\n                if (!worksheetData.isTreeGridData) {\n                    sheetData.push(`<row r=\"${(i + 1)}\"${rowHeight}>`);\n                } else {\n                    const rowData = worksheetData.data[i - 1].originalRowData;\n                    const sCollapsed = (!rowData.expanded) ? '' : (rowData.expanded === true) ? '' : ` collapsed=\"1\"`;\n                    const sHidden = (rowData.parent && this.hasCollapsedParent(rowData)) ? ` hidden=\"1\"` : '';\n                    const rowOutlineLevel = rowData.level ? rowData.level : 0;\n                    const sOutlineLevel = rowOutlineLevel > 0 ? ` outlineLevel=\"${rowOutlineLevel}\"` : '';\n                    maxOutlineLevel = maxOutlineLevel < rowOutlineLevel ? rowOutlineLevel : maxOutlineLevel;\n\n                    sheetData.push(`<row r=\"${(i + 1)}\"${rowHeight}${sOutlineLevel}${sCollapsed}${sHidden}>`);\n                }\n                for (let j = 0; j < worksheetData.columnCount; j++) {\n                    const cellData = WorksheetFile.getCellData(worksheetData, i, j);\n                    sheetData.push(cellData);\n                }\n                sheetData.push('</row>');\n            }\n            sheetData.push('</sheetData>');\n            dimension = 'A1:' + ExcelStrings.getExcelColumn(worksheetData.columnCount - 1) + worksheetData.rowCount;\n\n            cols.push('<cols>');\n\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const width = dictionary.columnWidths[i];\n                // Use the width provided in the options if it exists\n                const widthInTwips = worksheetData.options.columnWidth ?\n                                    worksheetData.options.columnWidth :\n                                    Math.max(((width / 96) * 14.4), WorksheetFile.MIN_WIDTH);\n\n                cols.push(`<col min=\"${(i + 1)}\" max=\"${(i + 1)}\" width=\"${widthInTwips}\" customWidth=\"1\"/>`);\n            }\n\n            cols.push('</cols>');\n\n            if (worksheetData.indexOfLastPinnedColumn !== -1 &&\n                !worksheetData.options.ignorePinning &&\n                !worksheetData.options.ignoreColumnsOrder) {\n                const frozenColumnCount = worksheetData.indexOfLastPinnedColumn + 1;\n                const firstCell = ExcelStrings.getExcelColumn(frozenColumnCount) + '1';\n                freezePane = `<pane xSplit=\"${frozenColumnCount}\" topLeftCell=\"${firstCell}\" activePane=\"topRight\" state=\"frozen\"/>`;\n            }\n        }\n        const hasTable = !worksheetData.isEmpty && worksheetData.options.exportAsTable;\n\n        folder.file('sheet1.xml',\n                    ExcelStrings.getSheetXML(dimension, freezePane, cols.join(''), sheetData.join(''), hasTable,\n                    worksheetData.isTreeGridData, maxOutlineLevel));\n    }\n\n    private hasCollapsedParent(rowData) {\n        let result = !rowData.parent.expanded;\n        while (rowData.parent) {\n            result = result || !rowData.parent.expanded;\n            rowData = rowData.parent;\n        }\n\n        return result;\n    }\n    /* tslint:disable member-ordering */\n    private static getCellData(worksheetData: WorksheetData, row: number, column: number): string {\n        const dictionary = worksheetData.dataDictionary;\n        const columnName = ExcelStrings.getExcelColumn(column) + (row + 1);\n        const columnHeader = worksheetData.keys[column];\n\n        const rowData = worksheetData.data[row - 1].rowData;\n\n        const cellValue = worksheetData.isSpecialData ? rowData : rowData[columnHeader];\n\n        if (cellValue === undefined || cellValue === null) {\n            return `<c r=\"${columnName}\" s=\"1\"/>`;\n        } else {\n            const savedValue = dictionary.saveValue(cellValue, column, false);\n            const isSavedAsString = savedValue !== -1;\n\n            const value = isSavedAsString ? savedValue : cellValue;\n            const type = isSavedAsString ? ` t=\"s\"` : '';\n            const format = isSavedAsString ? '' : ` s=\"1\"`;\n\n            return `<c r=\"${columnName}\"${type}${format}><v>${value}</v></c>`;\n        }\n    }\n    /* tslint:enable member-ordering */\n}\n\n/**\n * @hidden\n */\nexport class StyleFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('styles.xml', ExcelStrings.getStyles(worksheetData.dataDictionary && worksheetData.dataDictionary.hasNonStringValues));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('workbook.xml', ExcelStrings.getWorkbook());\n    }\n}\n\n/**\n * @hidden\n */\nexport class ContentTypesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('[Content_Types].xml', ExcelStrings.getContentTypesXML(!worksheetData.isEmpty, worksheetData.options.exportAsTable));\n    }\n}\n\n/**\n * @hidden\n */\nexport class SharedStringsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const dict = worksheetData.dataDictionary;\n        const sortedValues = dict.getKeys();\n        const sharedStrings = new Array<string>(sortedValues.length);\n\n        for (const value of sortedValues) {\n            sharedStrings[dict.getSanitizedValue(value)] = '<si><t>' + value + '</t></si>';\n        }\n\n        folder.file('sharedStrings.xml', ExcelStrings.getSharedStringXML(\n                        dict.stringsCount,\n                        sortedValues.length,\n                        sharedStrings.join(''))\n                    );\n    }\n}\n\n/**\n * @hidden\n */\nexport class TablesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const columnCount = worksheetData.columnCount;\n        const lastColumn = ExcelStrings.getExcelColumn(columnCount - 1) + worksheetData.rowCount;\n        const dimension = 'A1:' + lastColumn;\n        const values = worksheetData.keys;\n        let sortString = '';\n\n        let tableColumns = '<tableColumns count=\"' + columnCount + '\">';\n        for (let i = 0; i < columnCount; i++) {\n            const value =  values[i];\n            tableColumns += '<tableColumn id=\"' + (i + 1) + '\" name=\"' + value + '\"/>';\n        }\n\n        tableColumns += '</tableColumns>';\n\n        if (worksheetData.sort) {\n            const sortingExpression = worksheetData.sort;\n            const sc = ExcelStrings.getExcelColumn(values.indexOf(sortingExpression.fieldName));\n            const dir = sortingExpression.dir - 1;\n            sortString = `<sortState ref=\"A2:${lastColumn}\"><sortCondition descending=\"${dir}\" ref=\"${sc}1:${sc}15\"/></sortState>`;\n        }\n\n        folder.file('table1.xml', ExcelStrings.getTablesXML(dimension, tableColumns, sortString));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('sheet1.xml.rels', ExcelStrings.getWorksheetRels());\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport { IExcelFolder } from './excel-interfaces';\nimport { WorksheetData } from './worksheet-data';\n\n/** @hidden */\nexport class RootExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ContentTypesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [\n            ExcelFolderTypes.RootRelsExcelFolder,\n            ExcelFolderTypes.DocPropsExcelFolder,\n            ExcelFolderTypes.XLExcelFolder\n        ];\n    }\n}\n\n/** @hidden */\nexport class RootRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.RootRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class DocPropsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'docProps';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [\n            ExcelFileTypes.AppFile,\n            ExcelFileTypes.CoreFile\n        ];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class XLExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'xl';\n    }\n\n    childFiles(data: WorksheetData) {\n        const retVal = [\n            ExcelFileTypes.StyleFile,\n            ExcelFileTypes.WorkbookFile\n        ];\n\n        if (!data.isEmpty) {\n            retVal.push(ExcelFileTypes.SharedStringsFile);\n        }\n\n        return retVal;\n    }\n\n    childFolders(data: WorksheetData) {\n        const retVal = [\n            ExcelFolderTypes.XLRelsExcelFolder,\n            ExcelFolderTypes.ThemeExcelFolder,\n            ExcelFolderTypes.WorksheetsExcelFolder\n        ];\n\n        if (!data.isEmpty && data.options.exportAsTable) {\n            retVal.push(ExcelFolderTypes.TablesExcelFolder);\n        }\n\n        return retVal;\n    }\n}\n\n/** @hidden */\nexport class XLRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorkbookRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class ThemeExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'theme';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ThemeFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'worksheets';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return data.isEmpty || !data.options.exportAsTable ? [] : [ExcelFolderTypes.WorksheetsRelsExcelFolder];\n    }\n}\n\n/** @hidden */\nexport class TablesExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return 'tables';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.TablesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport {\n    AppFile,\n    ContentTypesFile,\n    CoreFile,\n    RootRelsFile,\n    SharedStringsFile,\n    StyleFile,\n    TablesFile,\n    ThemeFile,\n    WorkbookFile,\n    WorkbookRelsFile,\n    WorksheetFile,\n    WorksheetRelsFile\n} from './excel-files';\n\nimport {\n    DocPropsExcelFolder,\n    RootExcelFolder,\n    RootRelsExcelFolder,\n    TablesExcelFolder,\n    ThemeExcelFolder,\n    WorksheetsExcelFolder,\n    WorksheetsRelsExcelFolder,\n    XLExcelFolder,\n    XLRelsExcelFolder\n} from './excel-folders';\n\nimport {\n    IExcelFile,\n    IExcelFolder\n} from './excel-interfaces';\n\n/** @hidden */\nexport class ExcelElementsFactory {\n\n    public static getExcelFolder(type: ExcelFolderTypes): IExcelFolder {\n        switch (type) {\n            case ExcelFolderTypes.RootExcelFolder:\n                return new RootExcelFolder();\n            case ExcelFolderTypes.RootRelsExcelFolder:\n                return new RootRelsExcelFolder();\n            case ExcelFolderTypes.DocPropsExcelFolder:\n                return new DocPropsExcelFolder();\n            case ExcelFolderTypes.XLExcelFolder:\n                return new XLExcelFolder();\n            case ExcelFolderTypes.XLRelsExcelFolder:\n                return new XLRelsExcelFolder();\n            case ExcelFolderTypes.ThemeExcelFolder:\n                return new ThemeExcelFolder();\n            case ExcelFolderTypes.WorksheetsExcelFolder:\n                return  new WorksheetsExcelFolder();\n            case ExcelFolderTypes.WorksheetsRelsExcelFolder:\n                return new WorksheetsRelsExcelFolder();\n            case ExcelFolderTypes.TablesExcelFolder:\n                return new TablesExcelFolder();\n            default:\n                throw new Error('Unknown excel folder type!');\n        }\n    }\n\n    public static getExcelFile(type: ExcelFileTypes): IExcelFile {\n        switch (type) {\n            case ExcelFileTypes.RootRelsFile:\n                return  new RootRelsFile();\n            case ExcelFileTypes.AppFile:\n                return  new AppFile();\n            case ExcelFileTypes.CoreFile:\n                return new CoreFile();\n            case ExcelFileTypes.WorkbookRelsFile:\n                return new WorkbookRelsFile();\n            case ExcelFileTypes.ThemeFile:\n                return new ThemeFile();\n            case ExcelFileTypes.WorksheetFile:\n                return new WorksheetFile();\n            case ExcelFileTypes.StyleFile:\n                return new StyleFile();\n            case ExcelFileTypes.WorkbookFile:\n                return new WorkbookFile();\n            case ExcelFileTypes.ContentTypesFile:\n                return new ContentTypesFile();\n            case ExcelFileTypes.SharedStringsFile:\n                return new SharedStringsFile();\n            case ExcelFileTypes.WorksheetRelsFile:\n                return new WorksheetRelsFile();\n            case ExcelFileTypes.TablesFile:\n                return new TablesFile();\n            default:\n                throw Error('Unknown excel file type!');\n        }\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\n\n/** @hidden */\nexport class WorksheetDataDictionary {\n    private static DEFAULT_FONT = '11pt Calibri';\n    private static TEXT_PADDING = 5;\n\n    private _dictionary: any;\n    private _widthsDictionary: any;\n\n    private _sortedKeysByValue: string[];\n    private _sortedKeysByValueAreValid: boolean;\n\n    private _keys: string[];\n    private _keysAreValid: boolean;\n\n    private _counter: number;\n    private _calculateColumnWidth: boolean;\n    private _columnWidths: number[];\n    private _context: any;\n\n    private _columnTypeInfo: boolean[];\n    public hasNonStringValues = false;\n\n    public stringsCount: number;\n\n    constructor(columnCount: number, columnWidth: number) {\n        this._dictionary = {};\n        this._widthsDictionary = {};\n        this._counter = 0;\n        this.dirtyKeyCollections();\n\n        this._calculateColumnWidth = !columnWidth;\n        this._columnWidths = new Array<number>(columnCount);\n        this._columnTypeInfo = new Array<boolean>(columnCount);\n\n        if (!this._calculateColumnWidth) {\n            this._columnWidths.fill(columnWidth);\n        }\n\n        this.stringsCount = 0;\n    }\n\n    public get columnWidths() {\n        return this._columnWidths;\n    }\n\n    public saveValue(value: any, column: number, isHeader: boolean): number {\n        if (this._columnTypeInfo[column] === undefined && isHeader === false) {\n            this._columnTypeInfo[column] = typeof value === 'string' ||\n                                            typeof value === 'boolean' ||\n                                            value instanceof Date;\n        }\n\n        let sanitizedValue = '';\n        const isSavedAsString = this._columnTypeInfo[column] || isHeader;\n\n        if (isSavedAsString) {\n            sanitizedValue = this.sanitizeValue(value);\n\n            if (this._dictionary[sanitizedValue] === undefined) {\n                this._dictionary[sanitizedValue] = this._counter++;\n                this.dirtyKeyCollections();\n            }\n\n            this.stringsCount ++;\n        } else {\n            this.hasNonStringValues = true;\n        }\n\n        if (this._calculateColumnWidth) {\n            const width = this.getTextWidth(value);\n            const maxWidth = Math.max(this._columnWidths[column] || 0, width);\n            this._columnWidths[column] = maxWidth;\n        }\n\n        return isSavedAsString ? this.getSanitizedValue(sanitizedValue) : -1;\n    }\n\n    public getValue(value: string): number {\n        return this.getSanitizedValue(this.sanitizeValue(value));\n    }\n\n    public getSanitizedValue(sanitizedValue: string): number {\n        return this._dictionary[sanitizedValue];\n    }\n\n    public getKeys(): string[] {\n        if (!this._keysAreValid) {\n            this._keys = Object.keys(this._dictionary);\n            this._keysAreValid = true;\n        }\n\n        return this._keys;\n    }\n\n    private getTextWidth(value: any): number {\n        if (this._widthsDictionary[value] === undefined) {\n            const context = this.getContext();\n            const metrics = context.measureText(value);\n            this._widthsDictionary[value] = metrics.width + WorksheetDataDictionary.TEXT_PADDING;\n        }\n\n        return this._widthsDictionary[value];\n    }\n\n    private getContext(): any {\n        if (!this._context) {\n            const canvas = document.createElement('canvas');\n            this._context = canvas.getContext('2d');\n            this._context.font = WorksheetDataDictionary.DEFAULT_FONT;\n        }\n\n        return this._context;\n    }\n\n    private sanitizeValue(value: any): string {\n        if (ExportUtilities.hasValue(value) === false) {\n            return '';\n        } else {\n            const stringValue = String(value);\n            return stringValue.replace(/&/g, '&amp;')\n                            .replace(/</g, '&lt;')\n                            .replace(/>/g, '&gt;')\n                            .replace(/\"/g, '&quot;')\n                            .replace(/'/g, '&apos;');\n        }\n    }\n\n    private dirtyKeyCollections(): void {\n        this._keysAreValid = false;\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\nimport { WorksheetDataDictionary } from './worksheet-data-dictionary';\n\n/** @hidden */\nexport class WorksheetData {\n    private _columnCount: number;\n    private _rowCount: number;\n    private _dataDictionary: WorksheetDataDictionary;\n    private _keys: string[];\n    private _isSpecialData: boolean;\n\n    constructor(private _data: any[], public options: IgxExcelExporterOptions, public indexOfLastPinnedColumn,\n                public sort: any, public isTreeGridData = false) {\n        this.initializeData();\n    }\n\n    public get data() {\n        return this._data;\n    }\n\n    public get columnCount(): number {\n        return this._columnCount;\n    }\n\n    public get rowCount(): number {\n        return this._rowCount;\n    }\n\n    public get isEmpty() {\n        return !this.rowCount || !this._columnCount;\n    }\n\n    public get keys(): string[] {\n        return this._keys;\n    }\n\n    public get isSpecialData(): boolean {\n        return this._isSpecialData;\n    }\n\n    public get dataDictionary() {\n        return this._dataDictionary;\n    }\n\n    private initializeData() {\n        if (!this._data || this._data.length === 0) {\n            return;\n        }\n\n        const actualData = this._data.map((item) => item.rowData);\n\n        this._keys = ExportUtilities.getKeysFromData(actualData);\n        if (this._keys.length === 0) {\n            return;\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(actualData);\n\n        this._columnCount = this._keys.length;\n        this._rowCount = this._data.length + 1;\n\n        this._dataDictionary = new WorksheetDataDictionary(this._columnCount, this.options.columnWidth);\n    }\n}\n","import * as JSZip from 'jszip/dist/jszip';\n\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { ExcelElementsFactory } from './excel-elements-factory';\nimport { ExcelFolderTypes } from './excel-enums';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\nimport { IExcelFolder } from './excel-interfaces';\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { WorksheetData } from './worksheet-data';\n\nexport interface IExcelExportEndedEventArgs {\n    xlsx: JSZip;\n}\n\n/**\n * **Ignite UI for Angular Excel Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_excel.html)\n *\n * The Ignite UI for Angular Excel Exporter service can export data in MicrosoftÂ® ExcelÂ® format from both raw data\n * (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private excelExportService: IgxExcelExporterService) {\n * }\n *\n * this.excelExportService.exportData(this.localData, new IgxExcelExporterOptions(\"FileName\"));\n * ```\n */\n@Injectable()\nexport class IgxExcelExporterService extends IgxBaseExporter {\n\n    private static ZIP_OPTIONS = { compression: 'DEFLATE', type: 'base64' };\n    private _xlsx: JSZip;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: IExcelExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxExcelExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<IExcelExportEndedEventArgs>();\n\n    private static populateFolder(folder: IExcelFolder, zip: JSZip, worksheetData: WorksheetData): any {\n        for (const childFolder of folder.childFolders(worksheetData)) {\n            const folderIntance = ExcelElementsFactory.getExcelFolder(childFolder);\n            const zipFolder = zip.folder(folderIntance.folderName);\n            IgxExcelExporterService.populateFolder(folderIntance, zipFolder, worksheetData);\n        }\n\n        for (const childFile of folder.childFiles(worksheetData)) {\n            const fileInstance = ExcelElementsFactory.getExcelFile(childFile);\n            fileInstance.writeElement(zip, worksheetData);\n        }\n    }\n\n    protected exportDataImplementation(data: any[], options: IgxExcelExporterOptions): void {\n        if (this._isTreeGrid) {\n            let maxLevel = 0;\n            data.forEach((r) => {\n                maxLevel = Math.max(maxLevel, r.originalRowData.level);\n            });\n            if (maxLevel > 7) {\n                throw Error('Can create an outline of up to eight levels!');\n            }\n        }\n\n        const worksheetData = new WorksheetData(data, options, this._indexOfLastPinnedColumn, this._sort, this._isTreeGrid);\n        this._xlsx = new JSZip();\n\n        const rootFolder = ExcelElementsFactory.getExcelFolder(ExcelFolderTypes.RootExcelFolder);\n        IgxExcelExporterService.populateFolder(rootFolder, this._xlsx, worksheetData);\n\n        this._xlsx.generateAsync(IgxExcelExporterService.ZIP_OPTIONS).then((result) => {\n            this.saveFile(result, options.fileName);\n\n            this.onExportEnded.emit({ xlsx: this._xlsx });\n        });\n    }\n\n    private saveFile(data: string, fileName: string): void {\n        const blob = new Blob([ExportUtilities.stringToArrayBuffer(atob(data))], {\n            type: ''\n        });\n\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the Excel exporting process.\n */\nexport class IgxExcelExporterOptions extends IgxExporterOptionsBase {\n    private _columnWidth: number;\n    private _rowHeight: number;\n\n    /**\n     * Specifies if column pinning should be ignored. If ignoreColumnsOrder is set to true,\n     * this option will always be considered as set to true.\n     * ```typescript\n     * let ignorePinning = this.exportOptions.ignorePinning;\n     * this.exportOptions.ignorePinning = true;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public ignorePinning = false;\n\n    /**\n     * Specifies whether the exported data should be formatted as Excel table. (True by default)\n     * ```typescript\n     * let exportAsTable = this.exportOptions.exportAsTable;\n     * this.exportOptions.exportAsTable = false;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public exportAsTable = true;\n\n    constructor(fileName: string) {\n        super(fileName, '.xlsx');\n    }\n\n    /**\n     * Gets the width of the columns in the exported excel file.\n     * ```typescript\n     * let width = this.exportOptions.columnWidth;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get columnWidth(): number {\n        return this._columnWidth;\n    }\n\n    /**\n     * Sets the width of the columns in the exported excel file. If left unspecified or 0,\n     * the width of the largest string in the column will be used.\n     * ```typescript\n     * this.exportOptions.columnWidth = 55;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set columnWidth(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for column width!');\n        }\n\n        this._columnWidth = value;\n    }\n\n    /**\n     * Gets the height of the rows in the exported excel file.\n     * ```typescript\n     * let height = this.exportOptions.rowHeight;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get rowHeight(): number {\n        return this._rowHeight;\n    }\n\n    /**\n     * Sets the height of the rows in the exported excel file. If left unspecified or 0,\n     * the default height of the excel rows will be used.\n     * ```typescript\n     * this.exportOptions.rowHeight = 25;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set rowHeight(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for row height!');\n        }\n\n        this._rowHeight = value;\n    }\n}\n","import { IPositionStrategy } from './position/IPositionStrategy';\n\nimport { IScrollStrategy } from './scroll';\nimport { AnimationReferenceMetadata, AnimationPlayer } from '@angular/animations';\nimport { ComponentRef, ElementRef, NgZone } from '@angular/core';\nimport { IgxOverlayOutletDirective } from '../../directives/toggle/toggle.directive';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, cloneValue } from '../../core/utils';\n\nexport enum HorizontalAlignment {\n    Left = -1,\n    Center = -0.5,\n    Right = 0\n}\n\nexport enum VerticalAlignment {\n    Top = -1,\n    Middle = -0.5,\n    Bottom = 0\n}\n\nexport class Point {\n    constructor(public x: number, public y: number) { }\n}\n\nexport interface PositionSettings {\n    /** Attaching target for the component to show */\n    target?: Point | HTMLElement;\n    /** Direction in which the component should show */\n    horizontalDirection?: HorizontalAlignment;\n    /** Direction in which the component should show */\n    verticalDirection?: VerticalAlignment;\n    /** Target's starting point */\n    horizontalStartPoint?: HorizontalAlignment;\n    /** Target's starting point */\n    verticalStartPoint?: VerticalAlignment;\n    /** Animation applied while overlay opens */\n    openAnimation?: AnimationReferenceMetadata;\n    /** Animation applied while overlay closes */\n    closeAnimation?: AnimationReferenceMetadata;\n    /** The size up to which element may shrink when shown in elastic position strategy */\n    minSize?: Size;\n}\n\nexport interface OverlaySettings {\n    /** Position strategy to use with this settings */\n    positionStrategy?: IPositionStrategy;\n    /** Scroll strategy to use with this settings */\n    scrollStrategy?: IScrollStrategy;\n    /** Set if the overlay should be in modal mode */\n    modal?: boolean;\n    /** Set if the overlay should closed on outside click */\n    closeOnOutsideClick?: boolean;\n    /** Set the outlet container to attach the overlay to */\n    outlet?: IgxOverlayOutletDirective | ElementRef;\n    /**\n     * @hidden @internal\n     * Exclude the position strategy target for outside clicks\n     */\n    excludePositionTarget?: boolean;\n}\n\nexport interface OverlayEventArgs {\n    /** Id of the overlay generated with `attach()` method */\n    id: string;\n    /** Available when `Type<T>` is provided to the `attach()` method and allows access to the created Component instance */\n    componentRef?: ComponentRef<{}>;\n}\n\nexport interface OverlayCancelableEventArgs extends OverlayEventArgs, CancelableEventArgs {\n}\n\nexport interface OverlayClosingEventArgs extends OverlayEventArgs, CancelableBrowserEventArgs {\n}\n\nexport interface OverlayAnimationEventArgs {\n    /** Id of the overlay generated with `attach()` method */\n    id: string;\n    /** Animation player that will play the animation */\n    animationPlayer: AnimationPlayer;\n    /** Type of animation to be played. It should be either 'open' or 'close' */\n    animationType: 'open' | 'close';\n}\n\nexport interface Size {\n    /** Gets or sets the horizontal component of Size */\n    width: number;\n\n    /** Gets or sets the vertical component of Size */\n    height: number;\n}\n\n/**\n * @hidden\n * Calculates the rectangle of target for provided overlay settings. Defaults to 0,0,0,0 rectangle\n * if no target is provided\n * @param settings Overlay settings for which to calculate target rectangle\n */\nexport function getTargetRect(settings: PositionSettings): ClientRect {\n    let targetRect: ClientRect = {\n        bottom: 0,\n        height: 0,\n        left: 0,\n        right: 0,\n        top: 0,\n        width: 0\n    };\n\n    if (settings.target instanceof HTMLElement) {\n        targetRect = (settings.target as HTMLElement).getBoundingClientRect();\n    } else if (settings.target instanceof Point) {\n        const targetPoint = settings.target as Point;\n        targetRect = {\n            bottom: targetPoint.y,\n            height: 0,\n            left: targetPoint.x,\n            right: targetPoint.x,\n            top: targetPoint.y,\n            width: 0\n        };\n    }\n\n    return targetRect;\n}\n\n/** @hidden */\nexport interface OverlayInfo {\n    id?: string;\n    elementRef?: ElementRef;\n    componentRef?: ComponentRef<{}>;\n    settings?: OverlaySettings;\n    initialSize?: Size;\n    hook?: HTMLElement;\n    openAnimationPlayer?: AnimationPlayer;\n    closeAnimationPlayer?: AnimationPlayer;\n    openAnimationInnerPlayer?: any;\n    closeAnimationInnerPlayer?: any;\n    ngZone: NgZone;\n}\n\n/** @hidden @internal */\nexport function getViewportRect(document: Document): ClientRect {\n    const width = document.documentElement.clientWidth;\n    const height = document.documentElement.clientHeight;\n    const scrollPosition = getViewportScrollPosition();\n\n    return {\n        top: scrollPosition.y,\n        left: scrollPosition.x,\n        right: scrollPosition.x + width,\n        bottom: scrollPosition.y + height,\n        width: width,\n        height: height,\n    };\n}\n\n/** @hidden @internal */\nexport function getViewportScrollPosition(): Point {\n    const documentElement = document.documentElement;\n    const documentRect = documentElement.getBoundingClientRect();\n\n    const horizontalScrollPosition = -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;\n    const verticalScrollPosition = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;\n\n    return new Point(horizontalScrollPosition, verticalScrollPosition);\n}\n\n/** @hidden @internal*/\nexport function cloneInstance(object) {\n    const clonedObj = Object.assign(Object.create(Object.getPrototypeOf(object)), object);\n    clonedObj.settings = cloneValue(clonedObj.settings);\n    return clonedObj;\n}\n","import { IPositionStrategy } from './IPositionStrategy';\nimport { PositionSettings, HorizontalAlignment, VerticalAlignment, Size, cloneInstance } from './../utilities';\nimport { fadeIn, fadeOut } from '../../../animations/main';\n\n/**\n * Positions the element based on the directions passed in trough PositionSettings.\n * These are Top/Middle/Bottom for verticalDirection and Left/Center/Right for horizontalDirection\n */\nexport class GlobalPositionStrategy implements IPositionStrategy {\n    private _defaultSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Center,\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle,\n        openAnimation: fadeIn,\n        closeAnimation: fadeOut,\n        minSize: { width: 0, height: 0 }\n    };\n\n    /** @inheritdoc */\n    public settings: PositionSettings;\n\n    constructor(settings?: PositionSettings) {\n        this.settings = Object.assign({}, this._defaultSettings, settings);\n    }\n\n    position(contentElement: HTMLElement, size?: Size, document?: Document, initialCall?: boolean): void {\n        contentElement.classList.add('igx-overlay__content--relative');\n        contentElement.parentElement.classList.add('igx-overlay__wrapper--flex');\n        switch (this.settings.horizontalDirection) {\n            case HorizontalAlignment.Left:\n                contentElement.parentElement.style.justifyContent = 'flex-start';\n                break;\n            case HorizontalAlignment.Center:\n                contentElement.parentElement.style.justifyContent = 'center';\n                break;\n            case HorizontalAlignment.Right:\n                contentElement.parentElement.style.justifyContent = 'flex-end';\n                break;\n            default:\n                break;\n        }\n\n        switch (this.settings.verticalDirection) {\n            case VerticalAlignment.Top:\n                contentElement.parentElement.style.alignItems = 'flex-start';\n                break;\n            case VerticalAlignment.Middle:\n                contentElement.parentElement.style.alignItems = 'center';\n                break;\n            case VerticalAlignment.Bottom:\n                contentElement.parentElement.style.alignItems = 'flex-end';\n                break;\n            default:\n                break;\n        }\n    }\n\n    /** @inheritdoc */\n    clone(): IPositionStrategy {\n        return cloneInstance(this);\n    }\n}\n\n","import { IScrollStrategy } from './IScrollStrategy';\nimport { IgxOverlayService } from '../overlay';\n\nexport abstract class ScrollStrategy implements IScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) { }\n    /** @inheritdoc */\n    abstract initialize(document: Document, overlayService: IgxOverlayService, id: string);\n\n    /** @inheritdoc */\n    abstract attach(): void;\n\n    /** @inheritdoc */\n    abstract detach(): void;\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Empty scroll strategy. Does nothing.\n */\nexport class NoOpScrollStrategy extends ScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n    }\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) { }\n\n    /** @inheritdoc */\n    attach(): void { }\n\n    /** @inheritdoc */\n    detach(): void { }\n}\n","import { isDevMode } from '@angular/core';\n\n/**\n * @hidden\n */\nexport function DeprecateMethod(message: string): MethodDecorator {\n    let isMessageShown = false;\n\n    return function (target: any, key: string, descriptor: PropertyDescriptor) {\n        if (descriptor && descriptor.value) {\n            const originalMethod = descriptor.value;\n\n            descriptor.value = function () {\n                const targetName = typeof target === 'function' ? target.name : target.constructor.name;\n                isMessageShown = showMessage(`${targetName}.${key}: ${message}`, isMessageShown);\n\n                return originalMethod.call(this, arguments);\n            };\n\n            return descriptor;\n        }\n    };\n}\n\n/**\n * @hidden\n */\nexport function DeprecateProperty(message: string): PropertyDecorator {\n    return function(target: any, key: string) {\n        let isMessageShown = false;\n        const messageToDisplay = `${target.constructor.name}.${key}: ${message}`;\n\n        // if the target already has the property defined\n        const originalDescriptor = Object.getOwnPropertyDescriptor(target, key);\n        if (originalDescriptor) {\n            let getter, setter;\n            getter = originalDescriptor.get;\n            setter = originalDescriptor.set;\n\n            if (getter) {\n                originalDescriptor.get = function() {\n                    isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                    return getter.call(this);\n                };\n            }\n\n            if (setter) {\n                originalDescriptor.set = function (value) {\n                    isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                    setter.call(this, value);\n                };\n            }\n\n            return originalDescriptor;\n        }\n\n        // the target doesn't contain a descriptor for that property, so create one\n        // use backing field to set/get the value of the property to ensure there won't be infinite recursive calls\n        const newKey = generateUniqueKey(target, key);\n        Object.defineProperty(target, key, {\n            configurable: true,\n            enumerable: true,\n            set: function(value) {\n                isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                this[newKey] = value;\n            },\n            get: function() {\n                isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                return this[newKey];\n            }\n        });\n    };\n}\n\n/**\n * @hidden\n */\nfunction generateUniqueKey(target: any, key: string): string {\n    let newKey = '_' + key;\n    while (target.hasOwnProperty(newKey)) {\n        newKey = '_' + newKey;\n    }\n\n    return newKey;\n}\n\n/**\n * @hidden\n */\nexport function showMessage(message: string, isMessageShown: boolean): boolean {\n    if (!isMessageShown && isDevMode()) {\n        console.warn(message);\n    }\n\n    return true;\n}\n","import { DOCUMENT } from '@angular/common';\nimport { GlobalPositionStrategy } from './position/global-position-strategy';\nimport { NoOpScrollStrategy } from './scroll/NoOpScrollStrategy';\nimport {\n    OverlaySettings,\n    OverlayEventArgs,\n    OverlayInfo,\n    OverlayAnimationEventArgs,\n    OverlayCancelableEventArgs,\n    OverlayClosingEventArgs\n} from './utilities';\n\nimport {\n    ApplicationRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injectable,\n    Injector,\n    Type,\n    OnDestroy,\n    NgModuleRef,\n    NgZone\n} from '@angular/core';\nimport { AnimationBuilder, AnimationReferenceMetadata, AnimationMetadataType, AnimationAnimateRefMetadata } from '@angular/animations';\nimport { fromEvent, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { IAnimationParams } from '../../animations/main';\nimport { showMessage } from '../../core/deprecateDecorators';\n\nlet warningShown = false;\n\n/**\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/overlay_main.html)\n * The overlay service allows users to show components on overlay div above all other elements in the page.\n */\n@Injectable({ providedIn: 'root' })\nexport class IgxOverlayService implements OnDestroy {\n    private _componentId = 0;\n    private _overlayInfos: OverlayInfo[] = [];\n    private _overlayElement: HTMLElement;\n    private _document: Document;\n    private destroy$ = new Subject<boolean>();\n\n    private _defaultSettings: OverlaySettings = {\n        positionStrategy: new GlobalPositionStrategy(),\n        scrollStrategy: new NoOpScrollStrategy(),\n        modal: true,\n        closeOnOutsideClick: true\n    };\n\n    /**\n     * Emitted before the component is opened.\n     * ```typescript\n     * onOpening(event: OverlayCancelableEventArgs){\n     *     const onOpening = event;\n     * }\n     * ```\n     */\n    public onOpening = new EventEmitter<OverlayCancelableEventArgs>();\n\n    /**\n     * Emitted after the component is opened and all animations are finished.\n     * ```typescript\n     * onOpened(event: OverlayEventArgs){\n     *     const onOpened = event;\n     * }\n     * ```\n     */\n    public onOpened = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before the component is closed.\n     * ```typescript\n     * onClosing(event: OverlayCancelableEventArgs){\n     *     const onClosing = event;\n     * }\n     * ```\n     */\n    public onClosing = new EventEmitter<OverlayClosingEventArgs>();\n\n    /**\n     * Emitted after the component is closed and all animations are finished.\n     * ```typescript\n     * onClosed(event: OverlayEventArgs){\n     *     const onClosed = event;\n     * }\n     * ```\n     */\n    public onClosed = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before animation is started\n     * ```typescript\n     * onAnimation(event: OverlayAnimationEventArgs){\n     *     const onAnimation = event;\n     * }\n     * ```\n     */\n    public onAnimation = new EventEmitter<OverlayAnimationEventArgs>();\n\n    constructor(\n        private _factoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private builder: AnimationBuilder,\n        @Inject(DOCUMENT) private document: any,\n        private _zone: NgZone) {\n        this._document = <Document>this.document;\n    }\n\n    /**\n     * Generates Id. Provide this Id when call `show(id, settings?)` method\n     * @param component ElementRef to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     */\n    attach(element: ElementRef, settings?: OverlaySettings): string;\n    /**\n     * Generates Id. Provide this Id when call `show(id, settings?)` method\n     * @param component Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @param moduleRef Optional reference to the NgModule that can resolve the component's factory\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     */\n    attach(component: Type<any>, settings?: OverlaySettings, moduleRef?: NgModuleRef<any>): string;\n    attach(component: ElementRef | Type<any>, settings?: OverlaySettings, moduleRef?: NgModuleRef<any>): string {\n        let info: OverlayInfo;\n        info = this.getOverlayInfo(component, moduleRef);\n\n        //  if there is no info most probably wrong type component was provided and we just go out\n        if (!info) {\n            return null;\n        }\n\n        info.id = (this._componentId++).toString();\n        settings = Object.assign({}, this._defaultSettings, settings);\n        info.settings = settings;\n        this._overlayInfos.push(info);\n        return info.id;\n    }\n\n    /**\n     * Shows the overlay for provided id.\n     * @param id Id to show overlay for\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     */\n    show(id: string, settings?: OverlaySettings): string;\n    /**\n     * Shows the provided component.\n     * @param component ElementRef or Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     * ```typescript\n     * this.overlay.show(element, settings);\n     * ```\n     * @deprecated Use `attach(component)` to obtain an Id. Then `show(id, settings?)` with provided Id.\n     */\n    // tslint:disable-next-line:unified-signatures\n    show(component: ElementRef | Type<any>, settings?: OverlaySettings): string;\n    show(compOrId: string | ElementRef | Type<any>, settings?: OverlaySettings): string {\n        let info: OverlayInfo;\n        let id: string;\n        if (typeof compOrId === 'string') {\n            id = compOrId;\n            info = this.getOverlayById(compOrId);\n            if (!info) {\n                console.warn('igxOverlay.show was called with wrong id: ' + compOrId);\n                return null;\n            }\n        } else {\n            warningShown = showMessage(\n                '`show(component, settings?)` overload is deprecated. Use `attach(component)` to obtain an Id.' +\n                'Then `show(id, settings?)` with provided Id.',\n                warningShown);\n            id = (this._componentId++).toString();\n            info = this.getOverlayInfo(compOrId);\n\n            //  if there is no info most probably wrong type component was provided and we just go out\n            if (!info) {\n                return;\n            }\n\n            info.id = id;\n        }\n\n        settings = Object.assign({}, this._defaultSettings, info.settings, settings);\n        info.settings = settings;\n\n        this._show(info);\n        return id;\n    }\n\n    /**\n     * Hides the component with the ID provided as a parameter.\n     * ```typescript\n     * this.overlay.hide(id);\n     * ```\n     */\n    hide(id: string) {\n        this._hide(id);\n    }\n\n    /**\n     * Hides all the components and the overlay.\n     * ```typescript\n     * this.overlay.hideAll();\n     * ```\n     */\n    hideAll() {\n        // since overlays are removed on animation done, que all hides\n        for (let i = this._overlayInfos.length; i--;) {\n            this.hide(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     * Repositions the component with ID provided as a parameter.\n     * ```typescript\n     * this.overlay.reposition(id);\n     * ```\n     */\n    reposition(id: string) {\n        const overlayInfo = this.getOverlayById(id);\n        if (!overlayInfo || !overlayInfo.settings) {\n            console.error('Wrong id provided in overlay.reposition method. Id: ' + id);\n            return;\n        }\n\n        const contentElement = overlayInfo.elementRef.nativeElement.parentElement;\n        const contentElementRect = contentElement.getBoundingClientRect();\n        overlayInfo.settings.positionStrategy.position(\n            contentElement,\n            {\n                width: contentElementRect.width,\n                height: contentElementRect.height\n            },\n            this._document,\n            false);\n    }\n\n    private _show(info: OverlayInfo) {\n        const eventArgs: OverlayCancelableEventArgs = { id: info.id, componentRef: info.componentRef, cancel: false };\n        this.onOpening.emit(eventArgs);\n        if (eventArgs.cancel) {\n            if (info.componentRef) {\n                this._appRef.detachView(info.componentRef.hostView);\n                info.componentRef.destroy();\n            }\n\n            return;\n        }\n\n        //  if there is no close animation player, or there is one but it is not started yet we are in clear\n        //  opening. Otherwise, if there is close animation player playing animation now we should not setup\n        //  overlay this is already done\n        if (!info.closeAnimationPlayer || (info.closeAnimationPlayer && !info.closeAnimationPlayer.hasStarted())) {\n            const elementRect = info.elementRef.nativeElement.getBoundingClientRect();\n            info.initialSize = { width: elementRect.width, height: elementRect.height };\n            info.hook = this.placeElementHook(info.elementRef.nativeElement);\n\n            this.moveElementToOverlay(info);\n            if (info.componentRef) {\n                info.componentRef.changeDetectorRef.detectChanges();\n            }\n            this.updateSize(info);\n            if (this._overlayInfos.indexOf(info) === -1) {\n                this._overlayInfos.push(info);\n            }\n\n            info.settings.positionStrategy.position(\n                info.elementRef.nativeElement.parentElement,\n                { width: info.initialSize.width, height: info.initialSize.height },\n                document,\n                true);\n            info.settings.scrollStrategy.initialize(this._document, this, info.id);\n            info.settings.scrollStrategy.attach();\n        }\n\n        this.addOutsideClickListener(info);\n        this.addResizeHandler(info.id);\n\n        if (info.settings.modal) {\n            this.setupModalWrapper(info);\n        }\n\n        if (info.settings.positionStrategy.settings.openAnimation) {\n            this.playOpenAnimation(info);\n        } else {\n            //  to eliminate flickering show the element just before onOpened fire\n            info.elementRef.nativeElement.parentElement.style.visibility = '';\n            this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n        }\n    }\n\n    private _hide(id: string, event?: Event) {\n        const info: OverlayInfo = this.getOverlayById(id);\n\n        if (!info) {\n            console.warn('igxOverlay.hide was called with wrong id: ' + id);\n            return;\n        }\n\n        const eventArgs = { id, componentRef: info.componentRef, cancel: false, event };\n        this.onClosing.emit(eventArgs);\n        if (eventArgs.cancel) {\n            return;\n        }\n\n        //  TODO: synchronize where these are added/attached and where removed/detached\n        info.settings.scrollStrategy.detach();\n        this.removeOutsideClickListener(info);\n        this.removeResizeHandler(info.id);\n\n        const child: HTMLElement = info.elementRef.nativeElement;\n        if (info.settings.modal) {\n            const parent = child.parentNode.parentNode as HTMLElement;\n            this.applyAnimationParams(parent, info.settings.positionStrategy.settings.closeAnimation);\n            parent.classList.remove('igx-overlay__wrapper--modal');\n            parent.classList.add('igx-overlay__wrapper');\n        }\n\n        if (info.settings.positionStrategy.settings.closeAnimation) {\n            this.playCloseAnimation(info);\n        } else {\n            this.onCloseDone(info);\n        }\n    }\n\n    private getOverlayInfo(component: any, moduleRef?: NgModuleRef<any>): OverlayInfo {\n        const info: OverlayInfo = { ngZone: this._zone };\n        if (component instanceof ElementRef) {\n            info.elementRef = <ElementRef>component;\n        } else {\n            let dynamicFactory: ComponentFactory<{}>;\n            const factoryResolver = moduleRef ? moduleRef.componentFactoryResolver : this._factoryResolver;\n            try {\n                dynamicFactory = factoryResolver.resolveComponentFactory(component);\n            } catch (error) {\n                console.error(error);\n                return null;\n            }\n\n            const injector = moduleRef ? moduleRef.injector : this._injector;\n            const dynamicComponent: ComponentRef<{}> = dynamicFactory.create(injector);\n            this._appRef.attachView(dynamicComponent.hostView);\n\n            // If the element is newly created from a Component, it is wrapped in 'ng-component' tag - we do not want that.\n            const element = dynamicComponent.location.nativeElement;\n            info.elementRef = <ElementRef>{ nativeElement: element };\n            info.componentRef = dynamicComponent;\n        }\n\n        return info;\n    }\n\n    private placeElementHook(element: HTMLElement): HTMLElement {\n        if (!element.parentElement) {\n            return null;\n        }\n\n        const hook = this._document.createElement('div');\n        element.parentElement.insertBefore(hook, element);\n        return hook;\n    }\n\n    private moveElementToOverlay(info: OverlayInfo) {\n        const wrapperElement = this.getWrapperElement();\n        const contentElement = this.getContentElement(wrapperElement, info.settings.modal);\n        this.getOverlayElement(info).appendChild(wrapperElement);\n        const elementScrollTop = info.elementRef.nativeElement.scrollTop;\n        contentElement.appendChild(info.elementRef.nativeElement);\n\n        if (elementScrollTop) {\n            info.elementRef.nativeElement.scrollTop = elementScrollTop;\n        }\n    }\n\n    private getWrapperElement(): HTMLElement {\n        const wrapper: HTMLElement = this._document.createElement('div');\n        wrapper.classList.add('igx-overlay__wrapper');\n        return wrapper;\n    }\n\n    private getContentElement(wrapperElement: HTMLElement, modal: boolean): HTMLElement {\n        const content: HTMLElement = this._document.createElement('div');\n        if (modal) {\n            content.classList.add('igx-overlay__content--modal');\n            content.addEventListener('click', (ev: Event) => {\n                ev.stopPropagation();\n            });\n        } else {\n            content.classList.add('igx-overlay__content');\n        }\n\n        content.addEventListener('scroll', (ev: Event) => {\n            ev.stopPropagation();\n        });\n\n        //  hide element to eliminate flickering. Show the element exactly before animation starts\n        content.style.visibility = 'hidden';\n\n        wrapperElement.appendChild(content);\n        return content;\n    }\n\n    private getOverlayElement(info: OverlayInfo): HTMLElement {\n        if (info.settings.outlet) {\n            return info.settings.outlet.nativeElement;\n        }\n        if (!this._overlayElement) {\n            this._overlayElement = this._document.createElement('div');\n            this._overlayElement.classList.add('igx-overlay');\n            this._document.body.appendChild(this._overlayElement);\n        }\n\n        return this._overlayElement;\n    }\n\n    private updateSize(info: OverlayInfo) {\n        if (info.componentRef) {\n            //  if we are positioning component this is first time it gets visible\n            //  and we can finally get its size\n            info.initialSize = info.elementRef.nativeElement.getBoundingClientRect();\n        }\n\n        // set content div width only if element to show has width\n        if (info.initialSize.width !== 0) {\n            info.elementRef.nativeElement.parentElement.style.width = info.initialSize.width + 'px';\n        }\n    }\n\n    private setupModalWrapper(info: OverlayInfo) {\n        const wrapperElement = info.elementRef.nativeElement.parentElement.parentElement;\n        fromEvent(wrapperElement, 'keydown').pipe(\n            filter((ev: KeyboardEvent) => ev.key === 'Escape' || ev.key === 'Esc'),\n            takeUntil(this.destroy$)\n        ).subscribe(() => this.hide(info.id));\n        wrapperElement.classList.remove('igx-overlay__wrapper');\n        this.applyAnimationParams(wrapperElement, info.settings.positionStrategy.settings.openAnimation);\n        wrapperElement.classList.add('igx-overlay__wrapper--modal');\n    }\n\n    private onCloseDone(info: OverlayInfo) {\n        this.cleanUp(info);\n        this.onClosed.emit({ id: info.id, componentRef: info.componentRef });\n    }\n\n    private cleanUp(info: OverlayInfo) {\n        const child: HTMLElement = info.elementRef.nativeElement;\n        const outlet = this.getOverlayElement(info);\n        if (!outlet.contains(child)) {\n            console.warn('Component with id:' + info.id + ' is already removed!');\n            return;\n        }\n\n        outlet.removeChild(child.parentNode.parentNode);\n        if (info.componentRef) {\n            this._appRef.detachView(info.componentRef.hostView);\n            info.componentRef.destroy();\n        }\n\n        if (info.hook) {\n            info.hook.parentElement.insertBefore(info.elementRef.nativeElement, info.hook);\n            info.hook.parentElement.removeChild(info.hook);\n        }\n\n        const index = this._overlayInfos.indexOf(info);\n        this._overlayInfos.splice(index, 1);\n\n        // this._overlayElement.parentElement check just for tests that manually delete the element\n        if (this._overlayInfos.length === 0 && this._overlayElement && this._overlayElement.parentElement) {\n            this._overlayElement.parentElement.removeChild(this._overlayElement);\n            this._overlayElement = null;\n        }\n    }\n\n    private playOpenAnimation(info: OverlayInfo) {\n        if (!info.openAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.openAnimation);\n            info.openAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.openAnimationPlayer)._renderer;\n            info.openAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n            info.openAnimationPlayer.onDone(() => {\n                this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n                if (info.openAnimationPlayer) {\n                    info.openAnimationPlayer.reset();\n                    info.openAnimationPlayer = null;\n                }\n\n                if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n                    info.closeAnimationPlayer.reset();\n                }\n            });\n        }\n\n        //  if there is opening animation already started do nothing\n        if (info.openAnimationPlayer.hasStarted()) {\n            return;\n        }\n\n        //  if there is closing animation already started start open animation from where close one has reached\n        //  and remove close animation\n        if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.closeAnimationInnerPlayer.getPosition();\n            info.closeAnimationPlayer.reset();\n            info.closeAnimationPlayer = null;\n            info.openAnimationPlayer.init();\n            info.openAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.openAnimationPlayer, animationType: 'open' });\n\n        //  to eliminate flickering show the element just before animation start\n        info.elementRef.nativeElement.parentElement.style.visibility = '';\n        info.openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(info: OverlayInfo) {\n        if (!info.closeAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.closeAnimation);\n            info.closeAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.closeAnimationPlayer)._renderer;\n            info.closeAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n\n            info.closeAnimationPlayer.onDone(() => {\n                if (info.closeAnimationPlayer) {\n                    info.closeAnimationPlayer.reset();\n                    info.closeAnimationPlayer = null;\n                }\n\n                if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n                    info.openAnimationPlayer.reset();\n                }\n                this.onCloseDone(info);\n            });\n        }\n\n        //  if there is closing animation already started do nothing\n        if (info.closeAnimationPlayer.hasStarted()) {\n            return;\n        }\n\n        //  if there is opening animation already started start close animation from where open one has reached\n        //  and remove open animation\n        if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.openAnimationInnerPlayer.getPosition();\n            info.openAnimationPlayer.reset();\n            info.openAnimationPlayer = null;\n            info.closeAnimationPlayer.init();\n            info.closeAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.closeAnimationPlayer, animationType: 'close' });\n        info.closeAnimationPlayer.play();\n    }\n\n    //  TODO: check if applyAnimationParams will work with complex animations\n    private applyAnimationParams(wrapperElement: HTMLElement, animationOptions: AnimationReferenceMetadata) {\n        if (!animationOptions) {\n            wrapperElement.style.transitionDuration = '0ms';\n            return;\n        }\n        if (animationOptions.type === AnimationMetadataType.AnimateRef) {\n            animationOptions = (animationOptions as AnimationAnimateRefMetadata).animation;\n        }\n        if (!animationOptions.options || !animationOptions.options.params) {\n            return;\n        }\n        const params = animationOptions.options.params as IAnimationParams;\n        if (params.duration) {\n            wrapperElement.style.transitionDuration = params.duration;\n        }\n        if (params.easing) {\n            wrapperElement.style.transitionTimingFunction = params.easing;\n        }\n    }\n\n    /** @hidden @internal */\n    public getOverlayById(id: string): OverlayInfo {\n        if (!id) {\n            return null;\n        }\n\n        const info = this._overlayInfos.find(e => e.id === id);\n        return info;\n    }\n\n    private documentClicked = (ev: MouseEvent) => {\n        //  if we get to modal overlay just return - we should not close anything under it\n        //  if we get to non-modal overlay do the next:\n        //   1. Check it has close on outside click. If not go on to next overlay;\n        //   2. If true check if click is on the element. If it is on the element we have closed\n        //  already all previous non-modal with close on outside click elements, so we return. If\n        //  not close the overlay and check next\n        for (let i = this._overlayInfos.length; i--;) {\n            const info = this._overlayInfos[i];\n            if (info.settings.modal) {\n                return;\n            }\n            if (info.settings.closeOnOutsideClick) {\n                //  if the click is on the element do not close this overlay\n                if (!info.elementRef.nativeElement.contains(ev.target)) {\n                    // if we should exclude position target check if the click is over it. If so do not close overlay\n                    const positionTarget = info.settings.positionStrategy.settings.target as HTMLElement;\n                    let clickOnPositionTarget = false;\n                    if (positionTarget) {\n                        const positionTargetRect = positionTarget.getBoundingClientRect();\n                        clickOnPositionTarget = ev.clientX >= positionTargetRect.left && ev.clientX <= positionTargetRect.right &&\n                                                ev.clientY >= positionTargetRect.top && ev.clientY <= positionTargetRect.bottom;\n                    }\n\n                    if (!(info.settings.excludePositionTarget && clickOnPositionTarget)) {\n                        //  if the click is outside click, but close animation has started do nothing\n                        if (!(info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted())) {\n                            this._hide(info.id, ev);\n                        }\n                    }\n                } else {\n                    //  TODO: should we return here, or continue with next overlays\n                    return;\n                }\n            }\n        }\n    }\n\n    private addOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.closeOnOutsideClick) {\n            if (info.settings.modal) {\n                fromEvent(info.elementRef.nativeElement.parentElement.parentElement, 'click')\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe(() => this.hide(info.id));\n            } else if (\n                //  if all overlays minus closing overlays equals one add the handler\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal).length -\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal &&\n                    x.closeAnimationPlayer &&\n                    x.closeAnimationPlayer.hasStarted()).length === 1) {\n                this._document.addEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private removeOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.modal === false) {\n            let shouldRemoveClickEventListener = true;\n            this._overlayInfos.forEach(o => {\n                if (o.settings.modal === false && o.id !== info.id) {\n                    shouldRemoveClickEventListener = false;\n                }\n            });\n\n            if (shouldRemoveClickEventListener) {\n                this._document.removeEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private addResizeHandler(id: string) {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.addEventListener('resize', this.repositionAll);\n        }\n    }\n\n    private removeResizeHandler(id: string) {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.removeEventListener('resize', this.repositionAll);\n        }\n    }\n\n    /** @hidden */\n    public repositionAll = () => {\n        for (let i = this._overlayInfos.length; i--;) {\n            this.reposition(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import { IPositionStrategy } from './IPositionStrategy';\nimport {\n  getTargetRect,\n  cloneInstance,\n  HorizontalAlignment,\n  Point,\n  PositionSettings,\n  Size,\n  VerticalAlignment\n} from './../utilities';\nimport { scaleInVerTop, scaleOutVerTop } from '../../../animations/main';\n\n/**\n * Positions the element based on the directions and start point passed in trough PositionSettings.\n * It is possible to either pass a start point or an HTMLElement as a positioning base.\n */\nexport class ConnectedPositioningStrategy implements IPositionStrategy {\n  private _defaultSettings: PositionSettings = {\n    // default Point(0, 0) in getPointFromPositionsSettings\n    target: null,\n    horizontalDirection: HorizontalAlignment.Right,\n    verticalDirection: VerticalAlignment.Bottom,\n    horizontalStartPoint: HorizontalAlignment.Left,\n    verticalStartPoint: VerticalAlignment.Bottom,\n    openAnimation: scaleInVerTop,\n    closeAnimation: scaleOutVerTop,\n    minSize: { width: 0, height: 0 }\n  };\n\n  /** @inheritdoc */\n  public settings: PositionSettings;\n\n  constructor(settings?: PositionSettings) {\n    this.settings = Object.assign({}, this._defaultSettings, settings);\n  }\n\n  /** @inheritdoc */\n  position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n    const targetRect = getTargetRect(this.settings);\n    const contentElementRect = contentElement.getBoundingClientRect();\n    this.setStyle(contentElement, targetRect, contentElementRect);\n  }\n\n  /**\n   * @inheritdoc\n   * Creates clone of this position strategy\n   * @returns clone of this position strategy\n   */\n  clone(): IPositionStrategy {\n    return cloneInstance(this);\n  }\n\n  /**\n   * Sets element's style which effectively positions provided element according\n   * to provided position settings\n   * @param element Element to position\n   * @param targetRect Bounding rectangle of strategy target\n   * @param elementRect Bounding rectangle of the element\n   */\n  protected setStyle(element: HTMLElement, targetRect: ClientRect, elementRect: ClientRect) {\n    const startPoint: Point = {\n      x: targetRect.right + targetRect.width * this.settings.horizontalStartPoint,\n      y: targetRect.bottom + targetRect.height * this.settings.verticalStartPoint,\n    };\n    const wrapperRect: ClientRect = element.parentElement.getBoundingClientRect();\n\n    //  clean up styles - if auto position strategy is chosen we may pass here several times\n    element.style.right = '';\n    element.style.left = '';\n    element.style.bottom = '';\n    element.style.top = '';\n\n    switch (this.settings.horizontalDirection) {\n      case HorizontalAlignment.Left:\n        element.style.right = `${Math.round(wrapperRect.right - startPoint.x)}px`;\n        break;\n      case HorizontalAlignment.Center:\n        element.style.left = `${Math.round(startPoint.x - wrapperRect.left - elementRect.width / 2)}px`;\n        break;\n      case HorizontalAlignment.Right:\n        element.style.left = `${Math.round(startPoint.x - wrapperRect.left)}px`;\n        break;\n    }\n\n    switch (this.settings.verticalDirection) {\n      case VerticalAlignment.Top:\n        element.style.bottom = `${Math.round(wrapperRect.bottom - startPoint.y)}px`;\n        break;\n      case VerticalAlignment.Middle:\n        element.style.top = `${Math.round(startPoint.y - wrapperRect.top - elementRect.height / 2)}px`;\n        break;\n      case VerticalAlignment.Bottom:\n        element.style.top = `${Math.round(startPoint.y - wrapperRect.top)}px`;\n        break;\n    }\n  }\n}\n","import { ConnectedPositioningStrategy } from './connected-positioning-strategy';\nimport { HorizontalAlignment, VerticalAlignment, PositionSettings, Size, getViewportRect, getTargetRect } from '../utilities';\n\nexport abstract class BaseFitPositionStrategy extends ConnectedPositioningStrategy {\n    protected _initialSize: Size;\n    protected _initialSettings: PositionSettings;\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n        const targetRect = getTargetRect(this.settings);\n        const contentElementRect = contentElement.getBoundingClientRect();\n        if (initialCall) {\n            const connectedFit: ConnectedFit = {};\n            connectedFit.targetRect = targetRect;\n            connectedFit.contentElementRect = contentElementRect;\n            this._initialSettings = this._initialSettings || Object.assign({}, this.settings);\n            this.settings = Object.assign({}, this._initialSettings);\n            connectedFit.viewPortRect = getViewportRect(document);\n            this.updateViewPortFit(connectedFit);\n            if (!connectedFit.fitHorizontal || !connectedFit.fitVertical) {\n                this.fitInViewport(contentElement, connectedFit);\n            }\n        }\n        this.setStyle(contentElement, targetRect, contentElementRect);\n    }\n\n    /**\n     * Checks if element can fit in viewport and updates provided connectedFit\n     * with the result\n     * @param connectedFit connectedFit to update\n     */\n    protected updateViewPortFit(connectedFit: ConnectedFit) {\n        connectedFit.left = this.calculateLeft(\n            connectedFit.targetRect,\n            connectedFit.contentElementRect,\n            this.settings.horizontalStartPoint,\n            this.settings.horizontalDirection);\n        connectedFit.right = connectedFit.left + connectedFit.contentElementRect.width;\n        connectedFit.fitHorizontal =\n            connectedFit.viewPortRect.left < connectedFit.left && connectedFit.right < connectedFit.viewPortRect.right;\n\n        connectedFit.top = this.calculateTop(\n            connectedFit.targetRect,\n            connectedFit.contentElementRect,\n            this.settings.verticalStartPoint,\n            this.settings.verticalDirection);\n        connectedFit.bottom = connectedFit.top + connectedFit.contentElementRect.height;\n        connectedFit.fitVertical =\n            connectedFit.viewPortRect.top < connectedFit.top && connectedFit.bottom < connectedFit.viewPortRect.bottom;\n    }\n\n    /**\n     * Calculates the position of the left border of the element if it gets positioned\n     * with provided start point and direction\n     * @param targetRect Rectangle of the target where element is attached\n     * @param elementRect Rectangle of the element\n     * @param startPoint Start point of the target\n     * @param direction Direction in which to show the element\n     */\n    protected calculateLeft(\n        targetRect: ClientRect, elementRect: ClientRect, startPoint: HorizontalAlignment, direction: HorizontalAlignment): number {\n        return targetRect.right + targetRect.width * startPoint + elementRect.width * direction;\n    }\n\n    /**\n     * Calculates the position of the top border of the element if it gets positioned\n     * with provided position settings related to the target\n     * @param targetRect Rectangle of the target where element is attached\n     * @param elementRect Rectangle of the element\n     * @param startPoint Start point of the target\n     * @param direction Direction in which to show the element\n     */\n    protected calculateTop(\n        targetRect: ClientRect, elementRect: ClientRect, startPoint: VerticalAlignment, direction: VerticalAlignment): number {\n        return targetRect.bottom + targetRect.height * startPoint + elementRect.height * direction;\n    }\n\n    /**\n     * Fits the element into viewport according to the position settings\n     * @param element element to fit in viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     */\n    protected abstract fitInViewport(\n        element: HTMLElement,\n        connectedFit: ConnectedFit);\n}\n\nexport interface ConnectedFit {\n    contentElementRect?: ClientRect;\n    targetRect?: ClientRect;\n    viewPortRect?: ClientRect;\n    fitHorizontal?: boolean;\n    fitVertical?: boolean;\n    left?: number;\n    right?: number;\n    top?: number;\n    bottom?: number;\n}\n","import { VerticalAlignment, HorizontalAlignment, PositionSettings } from './../utilities';\nimport { BaseFitPositionStrategy, ConnectedFit } from './base-fit-position-strategy';\n\n/**\n * Positions the element as in **Connected** positioning strategy and re-positions the element in\n * the view port (calculating a different start point) in case the element is partially getting out of view\n */\nexport class AutoPositionStrategy extends BaseFitPositionStrategy {\n\n    /** @inheritdoc */\n    protected fitInViewport(element: HTMLElement, connectedFit: ConnectedFit) {\n        const transformString: string[] = [];\n        if (!connectedFit.fitHorizontal) {\n            if (this.canFlipHorizontal(connectedFit)) {\n                this.flipHorizontal();\n            } else {\n                const horizontalPush = this.horizontalPush(connectedFit);\n                transformString.push(`translateX(${horizontalPush}px)`);\n            }\n        }\n\n        if (!connectedFit.fitVertical) {\n            if (this.canFlipVertical(connectedFit)) {\n                this.flipVertical();\n            } else {\n                const verticalPush = this.verticalPush(connectedFit);\n                transformString.push(`translateY(${verticalPush}px)`);\n            }\n        }\n\n        element.style.transform = transformString.join(' ').trim();\n    }\n\n    /**\n     * Checks if element can be flipped without get off the viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns true if element can be flipped and stain in viewport\n     */\n    private canFlipHorizontal(connectedFit: ConnectedFit): boolean {\n        //  HorizontalAlignment can be Left = -1; Center = -0.5 or Right = 0.\n        //  To virtually flip direction and start point (both are HorizontalAlignment) we can do this:\n        //  flippedAlignment = (-1) * (HorizontalAlignment + 1)\n        //  this way:\n        //  (-1) * (Left + 1) = 0 = Right\n        //  (-1) * (Center + 1) = -0.5 = Center\n        //  (-1) * (Right + 1) = -1 = Left\n        const flippedStartPoint = (-1) * (this.settings.horizontalStartPoint + 1);\n        const flippedDirection = (-1) * (this.settings.horizontalDirection + 1);\n\n        const leftBorder = this.calculateLeft(\n            connectedFit.targetRect, connectedFit.contentElementRect, flippedStartPoint, flippedDirection);\n        const rightBorder = leftBorder + connectedFit.contentElementRect.width;\n        return connectedFit.viewPortRect.left < leftBorder && rightBorder < connectedFit.viewPortRect.right;\n    }\n\n    /**\n     * Checks if element can be flipped without get off the viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns true if element can be flipped and stain in viewport\n     */\n    private canFlipVertical(connectedFit: ConnectedFit): boolean {\n        const flippedStartPoint = (-1) * (this.settings.verticalStartPoint + 1);\n        const flippedDirection = (-1) * (this.settings.verticalDirection + 1);\n\n        const topBorder = this.calculateTop(\n            connectedFit.targetRect, connectedFit.contentElementRect, flippedStartPoint, flippedDirection);\n        const bottomBorder = topBorder + connectedFit.contentElementRect.height;\n        return connectedFit.viewPortRect.top < topBorder && bottomBorder < connectedFit.viewPortRect.bottom;\n    }\n\n    /**\n     * Flips direction and start point of the position settings\n     */\n    private flipHorizontal() {\n        switch (this.settings.horizontalDirection) {\n            case HorizontalAlignment.Left:\n                this.settings.horizontalDirection = HorizontalAlignment.Right;\n                break;\n            case HorizontalAlignment.Right:\n                this.settings.horizontalDirection = HorizontalAlignment.Left;\n                break;\n        }\n        switch (this.settings.horizontalStartPoint) {\n            case HorizontalAlignment.Left:\n                this.settings.horizontalStartPoint = HorizontalAlignment.Right;\n                break;\n            case HorizontalAlignment.Right:\n                this.settings.horizontalStartPoint = HorizontalAlignment.Left;\n                break;\n        }\n    }\n\n    /**\n     * Flips direction and start point of the position settings\n     */\n    private flipVertical() {\n        switch (this.settings.verticalDirection) {\n            case VerticalAlignment.Top:\n                this.settings.verticalDirection = VerticalAlignment.Bottom;\n                break;\n            case VerticalAlignment.Bottom:\n                this.settings.verticalDirection = VerticalAlignment.Top;\n                break;\n        }\n        switch (this.settings.verticalStartPoint) {\n            case VerticalAlignment.Top:\n                this.settings.verticalStartPoint = VerticalAlignment.Bottom;\n                break;\n            case VerticalAlignment.Bottom:\n                this.settings.verticalStartPoint = VerticalAlignment.Top;\n                break;\n        }\n    }\n\n    /**\n     * Calculates necessary horizontal push according to provided connectedFit\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns amount of necessary translation which will push the element into viewport\n     */\n    private horizontalPush(connectedFit: ConnectedFit): number {\n        const leftExtend = connectedFit.left;\n        const rightExtend = connectedFit.right - connectedFit.viewPortRect.right;\n        //  if leftExtend < 0 overlay goes beyond left end of the screen. We should push it back with exactly\n        //  as much as it is beyond the screen.\n        //  if rightExtend > 0 overlay goes beyond right end of the screen. We should push it back with the\n        //  extend but with amount not bigger than what left between left border of screen and left border of\n        //  overlay, e.g. leftExtend\n        if (leftExtend < 0) {\n            return Math.abs(leftExtend);\n        } else if (rightExtend > 0) {\n            return - Math.min(rightExtend, leftExtend);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Calculates necessary vertical push according to provided connectedFit\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns amount of necessary translation which will push the element into viewport\n     */\n    private verticalPush(connectedFit: ConnectedFit): number {\n        const topExtend = connectedFit.top;\n        const bottomExtend = connectedFit.bottom - connectedFit.viewPortRect.bottom;\n        if (topExtend < 0) {\n            return Math.abs(topExtend);\n        } else if (bottomExtend > 0) {\n            return - Math.min(bottomExtend, topExtend);\n        } else {\n            return 0;\n        }\n    }\n}\n","import { BaseFitPositionStrategy, ConnectedFit } from './base-fit-position-strategy';\nimport { HorizontalAlignment, VerticalAlignment, PositionSettings } from '../utilities';\n\n/**\n * Positions the element as in **Connected** positioning strategy and resize the element\n * to fit in the view port in case the element is partially getting out of view\n */\nexport class ElasticPositionStrategy extends BaseFitPositionStrategy {\n    /** @inheritdoc */\n    protected fitInViewport(element: HTMLElement, connectedFit: ConnectedFit) {\n        element.classList.add('igx-overlay__content--elastic');\n        const transformString: string[] = [];\n        if (!connectedFit.fitHorizontal) {\n            const maxReduction = Math.max(0, connectedFit.contentElementRect.width - this.settings.minSize.width);\n            const leftExtend = Math.max(0, connectedFit.viewPortRect.left - connectedFit.left);\n            const rightExtend = Math.max(0, connectedFit.right - connectedFit.viewPortRect.right);\n            const reduction = Math.min(maxReduction, leftExtend + rightExtend);\n            element.style.width = `${connectedFit.contentElementRect.width - reduction}px`;\n\n            //  if direction is center and element goes off the screen in left direction we should push the\n            //  element to the right. Prevents left still going out of view when normally positioned\n            if (this.settings.horizontalDirection === HorizontalAlignment.Center) {\n                //  the amount of translation depends on whether element goes off the screen to the left,\n                //  to the right or in both directions, as well as how much it goes of the screen and finally\n                //  on the minSize. The translation should be proportional between left and right extend\n                //  taken from the reduction\n                const translation = leftExtend * reduction / (leftExtend + rightExtend);\n                if (translation > 0) {\n                    transformString.push(`translateX(${translation}px)`);\n                }\n            }\n        }\n\n        if (!connectedFit.fitVertical) {\n            const maxReduction = Math.max(0, connectedFit.contentElementRect.height - this.settings.minSize.height);\n            const topExtend = Math.max(0, connectedFit.viewPortRect.top - connectedFit.top);\n            const bottomExtend = Math.max(0, connectedFit.bottom - connectedFit.viewPortRect.bottom);\n            const reduction = Math.min(maxReduction, topExtend + bottomExtend);\n            element.style.height = `${connectedFit.contentElementRect.height - reduction}px`;\n\n            //  if direction is middle and element goes off the screen in top direction we should push the\n            //  element to the bottom. Prevents top still going out of view when normally positioned\n            if (this.settings.verticalDirection === VerticalAlignment.Middle) {\n                //  the amount of translation depends on whether element goes off the screen to the top,\n                //  to the bottom or in both directions, as well as how much it goes of the screen and finally\n                //  on the minSize. The translation should be proportional between top and bottom extend\n                //  taken from the reduction\n                const translation = topExtend * reduction / (topExtend + bottomExtend);\n                if (translation > 0) {\n                    transformString.push(`translateY(${translation}px)`);\n                }\n            }\n        }\n        element.style.transform = transformString.join(' ').trim();\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\nimport { NgZone } from '@angular/core';\n\n/**\n * On scroll reposition the overlay content.\n */\nexport class AbsoluteScrollStrategy extends ScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private _scrollContainer: HTMLElement;\n    private _zone: NgZone;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n        this._scrollContainer = scrollContainer;\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._zone = overlayService.getOverlayById(id).ngZone;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        if (this._zone) {\n            this._zone.runOutsideAngular(() => {\n                this.addScrollEventListener();\n            });\n        } else {\n            this.addScrollEventListener();\n        }\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n        }\n\n        this._initialized = false;\n    }\n\n    private addScrollEventListener() {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.addEventListener('scroll', this.onScroll, true);\n        }\n    }\n\n    private onScroll = () => {\n        this._overlayService.repositionAll();\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Prevents scrolling while the overlay content is shown.\n */\nexport class BlockScrollStrategy extends ScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _initialScrollTop: number;\n    private _initialScrollLeft: number;\n    private _sourceElement: Element;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n\n        this._document = document;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        this._document.addEventListener('scroll', this.onScroll, true);\n        this._document.addEventListener('wheel', this.onWheel, true);\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        this._document.removeEventListener('scroll', this.onScroll, true);\n        this._document.removeEventListener('wheel', this.onWheel, true);\n        this._sourceElement = null;\n        this._initialScrollTop = 0;\n        this._initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        ev.preventDefault();\n        if (!this._sourceElement || this._sourceElement !== ev.srcElement) {\n            this._sourceElement = ev.srcElement;\n            this._initialScrollTop = this._sourceElement.scrollTop;\n            this._initialScrollLeft = this._sourceElement.scrollLeft;\n        }\n\n        this._sourceElement.scrollTop = this._initialScrollTop;\n        this._sourceElement.scrollLeft = this._initialScrollLeft;\n    }\n\n    private onWheel(ev: WheelEvent) {\n        ev.stopImmediatePropagation();\n        ev.preventDefault();\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Uses a tolerance and closes the shown component upon scrolling if the tolerance is exceeded\n */\nexport class CloseScrollStrategy extends ScrollStrategy {\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private initialScrollTop: number;\n    private initialScrollLeft: number;\n    private cumulativeScrollTop: number;\n    private cumulativeScrollLeft: number;\n    private _threshold: number;\n    private _initialized = false;\n    private _sourceElement: Element;\n    private _scrollContainer: HTMLElement;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n        this._scrollContainer = scrollContainer;\n        this._threshold = 10;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll);\n            this._sourceElement = this._scrollContainer;\n        } else {\n            this._document.addEventListener('scroll', this.onScroll);\n            if (document.documentElement.scrollHeight > document.documentElement.clientHeight) {\n                this._sourceElement = document.documentElement as Element;\n            } else if (document.body.scrollHeight > document.body.clientHeight) {\n                this._sourceElement = document.body as Element;\n            }\n        }\n\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = this._sourceElement.scrollTop;\n        this.initialScrollLeft = this._sourceElement.scrollLeft;\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        // TODO: check why event listener removes only on first call and remains on each next!!!\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll);\n        }\n        this._sourceElement = null;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = 0;\n        this.initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop += this._sourceElement.scrollTop;\n        this.cumulativeScrollLeft += this._sourceElement.scrollLeft;\n\n        if (Math.abs(this.cumulativeScrollTop - this.initialScrollTop) > this._threshold ||\n            Math.abs(this.cumulativeScrollLeft - this.initialScrollLeft) > this._threshold) {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n            this._overlayService.hide(this._id);\n        }\n    }\n}\n","import { TransactionService, Transaction, State } from './transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxBaseTransactionService<T extends Transaction, S extends State> implements TransactionService<T, S> {\n    protected _isPending = false;\n    protected _pendingTransactions: T[] = [];\n    protected _pendingStates: Map<any, S> = new Map();\n\n    /**\n     * @inheritdoc\n     */\n    public get canRedo(): boolean {\n        return false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get canUndo(): boolean {\n        return false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get enabled(): boolean {\n        return this._isPending;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public onStateUpdate = new EventEmitter<void>();\n\n    /**\n     * @inheritdoc\n     */\n    public add(transaction: T, recordRef?: any): void {\n        if (this._isPending) {\n            this.updateState(this._pendingStates, transaction, recordRef);\n            this._pendingTransactions.push(transaction);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getTransactionLog(id?: any): T[] { return []; }\n\n    /**\n     * @inheritdoc\n     */\n    undo(): void { }\n\n    /**\n     * @inheritdoc\n     */\n    redo(): void { }\n\n    /**\n     * @inheritdoc\n     */\n    getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._pendingStates.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.getAggregatedValue(key, mergeChanges) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getState(id: any): S {\n        return this._pendingStates.get(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._pendingStates.get(id);\n        if (!state) {\n            return null;\n        }\n        if (mergeChanges) {\n            return this.updateValue(state);\n        }\n        return state.value;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    commit(data: any[]): void { }\n\n    /**\n     * @inheritdoc\n     */\n    clear(): void {\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public startPending(): void {\n        this._isPending = true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        if (state) {\n            if (isObject(state.value)) {\n                mergeObjects(state.value, transaction.newValue);\n            } else {\n                state.value = transaction.newValue;\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n    }\n\n    /**\n     * Updates the recordRef of the provided state with all the changes in the state. Accepts primitive and object value types\n     * @param state State to update value for\n     * @returns updated value including all the changes in provided state\n     */\n    protected updateValue(state: S) {\n        return this.mergeValues(state.recordRef, state.value);\n    }\n\n    /**\n     * Merges second values in first value and the result in empty object. If values are primitive type\n     * returns second value if exists, or first value.\n     * @param first Value to merge into\n     * @param second Value to merge\n     */\n    protected mergeValues<U>(first: U, second: U): U {\n        let result: U;\n        if (isObject(first) || isObject(second)) {\n            result = mergeObjects(mergeObjects({}, first), second);\n        } else {\n            result = second ? second : first;\n        }\n        return result;\n    }\n}\n","import { Transaction, State, TransactionType } from './transaction';\nimport { IgxBaseTransactionService } from './base-transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxTransactionService<T extends Transaction, S extends State> extends IgxBaseTransactionService<T, S> {\n    protected _transactions: T[] = [];\n    protected _redoStack: { transaction: T, recordRef: any }[][] = [];\n    protected _undoStack: { transaction: T, recordRef: any }[][] = [];\n    protected _states: Map<any, S> = new Map();\n\n    /**\n     * @inheritdoc\n     */\n    get canUndo(): boolean {\n        return this._undoStack.length > 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get canRedo(): boolean {\n        return this._redoStack.length > 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public onStateUpdate = new EventEmitter<void>();\n\n    /**\n     * @inheritdoc\n     */\n    public add(transaction: T, recordRef?: any): void {\n        const states = this._isPending ? this._pendingStates : this._states;\n        this.verifyAddedTransaction(states, transaction, recordRef);\n        this.addTransaction(transaction, states, recordRef);\n    }\n\n    protected addTransaction(transaction: T, states: Map<any, S>, recordRef?: any) {\n        this.updateState(states, transaction, recordRef);\n\n        const transactions = this._isPending ? this._pendingTransactions : this._transactions;\n        transactions.push(transaction);\n\n        if (!this._isPending) {\n            this._undoStack.push([{ transaction, recordRef }]);\n            this._redoStack = [];\n            this.onStateUpdate.emit();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getTransactionLog(id?: any): T[] {\n        if (id) {\n            return this._transactions.filter(t => t.id === id);\n        }\n        return [...this._transactions];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getState(id: any): S {\n        return this._states.get(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get enabled(): boolean {\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._states.get(id);\n        const pendingState = super.getState(id);\n\n        //  if there is no state and there is no pending state return null\n        if (!state && !pendingState) {\n            return null;\n        }\n\n        const pendingChange = super.getAggregatedValue(id, false);\n        const change = state && state.value;\n        let aggregatedValue = this.mergeValues(change, pendingChange);\n        if (mergeChanges) {\n            const originalValue = state ? state.recordRef : pendingState.recordRef;\n            aggregatedValue = this.mergeValues(originalValue, aggregatedValue);\n        }\n        return aggregatedValue;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        if (commit) {\n            const actions: { transaction: T, recordRef: any }[] = [];\n            // don't use addTransaction due to custom undo handling\n            for (const transaction of this._pendingTransactions) {\n                const pendingState = this._pendingStates.get(transaction.id);\n                this._transactions.push(transaction);\n                this.updateState(this._states, transaction, pendingState.recordRef);\n                actions.push({ transaction, recordRef: pendingState.recordRef });\n            }\n\n            this._undoStack.push(actions);\n            this._redoStack = [];\n\n            this.onStateUpdate.emit();\n        }\n        super.endPending(commit);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public commit(data: any[]): void {\n        this._states.forEach((s: S) => {\n            const index = data.findIndex(i => JSON.stringify(i) === JSON.stringify(s.recordRef));\n            switch (s.type) {\n                case TransactionType.ADD:\n                    data.push(s.value);\n                    break;\n                case TransactionType.DELETE:\n                    if (0 <= index && index < data.length) {\n                        data.splice(index, 1);\n                    }\n                    break;\n                case TransactionType.UPDATE:\n                    if (0 <= index && index < data.length) {\n                        data[index] = this.updateValue(s);\n                    }\n                    break;\n            }\n        });\n        this.clear();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public clear(): void {\n        this._transactions = [];\n        this._states.clear();\n        this._redoStack = [];\n        this._undoStack = [];\n        this.onStateUpdate.emit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public undo(): void {\n        if (this._undoStack.length <= 0) {\n            return;\n        }\n\n        const lastActions: { transaction: T, recordRef: any }[] = this._undoStack.pop();\n        this._transactions.splice(this._transactions.length - lastActions.length);\n        this._redoStack.push(lastActions);\n\n        this._states.clear();\n        for (const currentActions of this._undoStack) {\n            for (const transaction of currentActions) {\n                this.updateState(this._states, transaction.transaction, transaction.recordRef);\n            }\n        }\n\n        this.onStateUpdate.emit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public redo(): void {\n        if (this._redoStack.length > 0) {\n            let actions: { transaction: T, recordRef: any, useInUndo?: boolean }[];\n            actions = this._redoStack.pop();\n            for (const action of actions) {\n                this.updateState(this._states, action.transaction, action.recordRef);\n                this._transactions.push(action.transaction);\n            }\n\n            this._undoStack.push(actions);\n            this.onStateUpdate.emit();\n        }\n    }\n\n    /**\n     * Verifies if the passed transaction is correct. If not throws an exception.\n     * @param transaction Transaction to be verified\n     */\n    protected verifyAddedTransaction(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        const state = states.get(transaction.id);\n        switch (transaction.type) {\n            case TransactionType.ADD:\n                if (state) {\n                    //  cannot add same item twice\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already added.`);\n                }\n                break;\n            case TransactionType.DELETE:\n            case TransactionType.UPDATE:\n                if (state && state.type === TransactionType.DELETE) {\n                    //  cannot delete or update deleted items\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already deleted.`);\n                }\n                if (!state && !recordRef && !this._isPending) {\n                    //  cannot initially add transaction or delete item with no recordRef\n                    throw new Error(`Cannot add this transaction. This is first transaction of type ${transaction.type} ` +\n                        `for id ${transaction.id}. For first transaction of this type recordRef is mandatory.`);\n                }\n                break;\n        }\n    }\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        //  if TransactionType is ADD simply add transaction to states;\n        //  if TransactionType is DELETE:\n        //    - if there is state with this id of type ADD remove it from the states;\n        //    - if there is state with this id of type UPDATE change its type to DELETE;\n        //    - if there is no state with this id add transaction to states;\n        //  if TransactionType is UPDATE:\n        //    - if there is state with this id of type ADD merge new value and state recordRef into state new value\n        //    - if there is state with this id of type UPDATE merge new value into state new value\n        //    - if there is state with this id and state type is DELETE change its type to UPDATE\n        //    - if there is no state with this id add transaction to states;\n        if (state) {\n            switch (transaction.type) {\n                case TransactionType.DELETE:\n                    if (state.type === TransactionType.ADD) {\n                        states.delete(transaction.id);\n                    } else if (state.type === TransactionType.UPDATE) {\n                        state.value = transaction.newValue;\n                        state.type = TransactionType.DELETE;\n                    }\n                    break;\n                case TransactionType.UPDATE:\n                    if (isObject(state.value)) {\n                        if (state.type === TransactionType.ADD) {\n                            state.value = this.mergeValues(state.value, transaction.newValue);\n                        }\n                        if (state.type === TransactionType.UPDATE) {\n                            mergeObjects(state.value, transaction.newValue);\n                        }\n                    } else {\n                        state.value = transaction.newValue;\n                    }\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n\n        //  should not clean pending state. This will happen automatically on endPending call\n        if (!this._isPending) {\n            this.cleanState(transaction.id, states);\n        }\n    }\n\n    /**\n     * Compares the state with recordRef and clears all duplicated values. If any state ends as\n     * empty object removes it from states.\n     * @param state State to clean\n     */\n    protected cleanState(id: any, states: Map<any, S>): void {\n        const state = states.get(id);\n        //  do nothing if\n        //  there is no state, or\n        //  there is no state value (e.g. DELETED transaction), or\n        //  there is no recordRef (e.g. ADDED transaction)\n        if (state && state.value && state.recordRef) {\n            //  if state's value is object compare each key with the ones in recordRef\n            //  if values in any key are the same delete it from state's value\n            //  if state's value is not object, simply compare with recordRef and remove\n            //  the state if they are equal\n            if (isObject(state.recordRef)) {\n                for (const key of Object.keys(state.value)) {\n                    if (JSON.stringify(state.recordRef[key]) === JSON.stringify(state.value[key])) {\n                        delete state.value[key];\n                    }\n                }\n\n                //  if state's value is empty remove the state from the states, only if state is not DELETE type\n                if (state.type !== TransactionType.DELETE && Object.keys(state.value).length === 0) {\n                    states.delete(id);\n                }\n            } else {\n                if (state.recordRef === state.value) {\n                    states.delete(id);\n                }\n            }\n        }\n    }\n}\n","import { HierarchicalTransaction, HierarchicalState, TransactionType } from './transaction';\nimport { Injectable } from '@angular/core';\nimport { IgxTransactionService } from './igx-transaction';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneValue } from '../../core/utils';\n\n/** @experimental @hidden */\n@Injectable()\nexport class IgxHierarchicalTransactionService<T extends HierarchicalTransaction, S extends HierarchicalState>\n    extends IgxTransactionService<T, S> {\n\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : cloneValue(state.value);\n            this.clearArraysFromObject(value);\n            result.push({ id: key, path: state.path, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        super.updateState(states, transaction, recordRef);\n\n        //  if transaction has no path, e.g. flat data source, get out\n        if (!transaction.path) {\n            return;\n        }\n\n        const currentState = states.get(transaction.id);\n        if (currentState) {\n            currentState.path = transaction.path;\n        }\n\n        //  if transaction has path, Hierarchical data source, and it is DELETE\n        //  type transaction for all child rows remove ADD states and update\n        //  transaction type and value of UPDATE states\n        if (transaction.type === TransactionType.DELETE) {\n            states.forEach((v: S, k: any) => {\n                if (v.path && v.path.indexOf(transaction.id) !== -1) {\n                    switch (v.type) {\n                        case TransactionType.ADD:\n                            states.delete(k);\n                            break;\n                        case TransactionType.UPDATE:\n                            states.get(k).type = TransactionType.DELETE;\n                            states.get(k).value = null;\n                    }\n                }\n            });\n        }\n    }\n\n    public commit(data: any[], primaryKey?: any, childDataKey?: any): void {\n        if (childDataKey) {\n            DataUtil.mergeHierarchicalTransactions(data, this.getAggregatedChanges(true), childDataKey, primaryKey, true);\n        } else {\n            super.commit(data);\n        }\n        this.clear();\n    }\n\n    //  TODO: remove this method. Force cloning to strip child arrays when needed instead\n    private clearArraysFromObject(obj: {}) {\n        if (obj) {\n            for (const prop of Object.keys(obj)) {\n                if (Array.isArray(obj[prop])) {\n                    delete obj[prop];\n                }\n            }\n        }\n    }\n}\n\n","import {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    Inject\n} from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../../core/navigation';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { OverlaySettings, OverlayEventArgs, ConnectedPositioningStrategy, AbsoluteScrollStrategy, IPositionStrategy } from '../../services';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subscription, Subject, MonoTypeOperatorFunction } from 'rxjs';\nimport { OverlayClosingEventArgs } from '../../services/overlay/utilities';\nimport { CancelableEventArgs, CancelableBrowserEventArgs } from '../../core/utils';\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\n\n@Directive({\n    exportAs: 'toggle',\n    selector: '[igxToggle]'\n})\nexport class IgxToggleDirective implements IToggleView, OnInit, OnDestroy {\n    protected _overlayId: string;\n    private destroy$ = new Subject<boolean>();\n    private _overlaySubFilter: [MonoTypeOperatorFunction<OverlayEventArgs>, MonoTypeOperatorFunction<OverlayEventArgs>] = [\n        filter(x => x.id === this._overlayId),\n        takeUntil(this.destroy$)\n    ];\n    private _overlayOpenedSub: Subscription;\n    private _overlayClosingSub: Subscription;\n    private _overlayClosedSub: Subscription;\n\n    /**\n     * Emits an event after the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpened(event) {\n     *    alert(\"Toggle opened!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpened)='onToggleOpened($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter();\n\n    /**\n     * Emits an event before the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpening(event) {\n     *  alert(\"Toggle opening!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpening)='onToggleOpening($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs>();\n\n    /**\n     * Emits an event after the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosed(event) {\n     *  alert(\"Toggle closed!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onClosed)='onToggleClosed($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter();\n\n    /**\n     * Emits an event before the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosing(event) {\n     *  alert(\"Toggle closing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *  igxToggle\n     *  (onClosing)='onToggleClosing($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs>();\n\n    private _collapsed = true;\n    /**\n     * @hidden\n     */\n    public get collapsed(): boolean {\n        return this._collapsed;\n    }\n\n    /**\n     * Identifier which is registered into `IgxNavigationService`\n     *\n     * ```typescript\n     * let myToggleId = this.toggle.id;\n     * ```\n     */\n    @Input()\n    public id: string;\n\n    /**\n     * @hidden\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle--hidden')\n    @HostBinding('attr.aria-hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    constructor(\n        private elementRef: ElementRef,\n        private cdr: ChangeDetectorRef,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        @Optional() private navigationService: IgxNavigationService) {\n    }\n\n    /**\n     * Opens the toggle.\n     *\n     * ```typescript\n     * this.myToggle.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        //  if there is open animation do nothing\n        //  if toggle is not collapsed and there is no close animation do nothing\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasOpenAnimation = info ? info.openAnimationPlayer : false;\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n        if (hasOpenAnimation || !(this._collapsed || hasCloseAnimation)) {\n            return;\n        }\n\n        if (!info) {\n            this._overlayId = this.overlayService.attach(this.elementRef, overlaySettings);\n        }\n\n        this._collapsed = false;\n        this.cdr.detectChanges();\n\n        const openEventArgs: CancelableEventArgs = { cancel: false };\n        this.onOpening.emit(openEventArgs);\n        if (openEventArgs.cancel) {\n            this._collapsed = true;\n            this.cdr.detectChanges();\n            return;\n        }\n\n        this.overlayService.show(this._overlayId, overlaySettings);\n\n        this.unsubscribe();\n        this._overlayOpenedSub = this.overlayService.onOpened.pipe(...this._overlaySubFilter).subscribe(() => {\n            this.onOpened.emit();\n        });\n\n        this._overlayClosingSub = this.overlayService\n            .onClosing\n            .pipe(...this._overlaySubFilter)\n            .subscribe((e: OverlayClosingEventArgs) => {\n                const eventArgs: CancelableBrowserEventArgs = { cancel: false, event: e.event };\n                this.onClosing.emit(eventArgs);\n                e.cancel = eventArgs.cancel;\n\n                //  in case event is not canceled this will close the toggle and we need to unsubscribe.\n                //  Otherwise if for some reason, e.g. close on outside click, close() gets called before\n                //  onClosed was fired we will end with calling onClosing more than once\n                if (!e.cancel) {\n                    this.clearSubscription(this._overlayClosingSub);\n                }\n            });\n\n        this._overlayClosedSub = this.overlayService.onClosed\n            .pipe(...this._overlaySubFilter)\n            .subscribe(this.overlayClosed);\n    }\n\n    /**\n     * Closes the toggle.\n     *\n     * ```typescript\n     * this.myToggle.close();\n     * ```\n     */\n    public close() {\n        //  if toggle is collapsed do nothing\n        //  if there is close animation do nothing, toggle will close anyway\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n        if (this._collapsed || hasCloseAnimation) {\n            return;\n        }\n\n        this.overlayService.hide(this._overlayId);\n    }\n\n    /**\n     * Opens or closes the toggle, depending on its current state.\n     *\n     * ```typescript\n     * this.myToggle.toggle();\n     * ```\n     */\n    public toggle(overlaySettings?: OverlaySettings) {\n        //  if toggle is collapsed call open\n        //  if there is close animation call open\n        if (this.collapsed || this.isClosing) {\n            this.open(overlaySettings);\n        } else {\n            this.close();\n        }\n    }\n\n    /** @hidden @internal */\n    public get isClosing() {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        return info ? info.closeAnimationPlayer : false;\n    }\n\n    /**\n     * Repositions the toggle.\n     * ```typescript\n     * this.myToggle.reposition();\n     * ```\n     */\n    public reposition() {\n        this.overlayService.reposition(this._overlayId);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navigationService && this.id) {\n            this.navigationService.add(this.id, this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navigationService && this.id) {\n            this.navigationService.remove(this.id);\n        }\n        if (!this.collapsed && this._overlayId) {\n            this.overlayService.hide(this._overlayId);\n        }\n        this.unsubscribe();\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    private overlayClosed = () => {\n        this._collapsed = true;\n        this.cdr.detectChanges();\n        delete this._overlayId;\n        this.unsubscribe();\n        this.onClosed.emit();\n    }\n\n    private unsubscribe() {\n        this.clearSubscription(this._overlayOpenedSub);\n        this.clearSubscription(this._overlayClosingSub);\n        this.clearSubscription(this._overlayClosedSub);\n    }\n\n    private clearSubscription(subscription: Subscription) {\n        if (subscription && !subscription.closed) {\n            subscription.unsubscribe();\n        }\n    }\n}\n\n@Directive({\n    exportAs: 'toggle-action',\n    selector: '[igxToggleAction]'\n})\nexport class IgxToggleActionDirective implements OnInit {\n    protected _overlayDefaults: OverlaySettings;\n\n    /**\n     * Provide settings that control the toggle overlay positioning, interaction and scroll behavior.\n     * ```typescript\n     * const settings: OverlaySettings = {\n     *      closeOnOutsideClick: false,\n     *      modal: false\n     *  }\n     * ```\n     * ---\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [overlaySettings]=\"settings\"></div>\n     * ```\n     */\n    @Input()\n    public overlaySettings: OverlaySettings;\n\n    private _closeOnOutsideClick: boolean;\n    /**\n     * DEPRECATED. Determines whether the toggle should close when you click outside.\n     *\n     * ```typescript\n     * // get\n     * let closesOnOutsideClick = this.toggle.closeOnOutsideClick;\n     * ```\n     */\n    @Input()\n    @DeprecateProperty(`igxToggleAction 'closeOnOutsideClick' input is deprecated. Use 'overlaySettings' input object instead.`)\n    public get closeOnOutsideClick(): boolean {\n        return this._closeOnOutsideClick;\n    }\n    /**\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [closeOnOutsideClick]=\"'true'\"></div>\n     * ```\n     */\n    public set closeOnOutsideClick(v: boolean) {\n        this._closeOnOutsideClick = v;\n    }\n\n    /**\n     * Determines where the toggle element overlay should be attached.\n     *\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [igxToggleOutlet]=\"outlet\"></div>\n     * ```\n     * Where `outlet` in an instance of `IgxOverlayOutletDirective` or an `ElementRef`\n     */\n    @Input('igxToggleOutlet')\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     * @hidden\n     */\n    @Input('igxToggleAction')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this.navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    protected _target: IToggleView | string;\n\n    constructor(private element: ElementRef, @Optional() private navigationService: IgxNavigationService) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this._overlayDefaults = {\n            positionStrategy: new ConnectedPositioningStrategy({ target: this.element.nativeElement }),\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            closeOnOutsideClick: true,\n            modal: false,\n            excludePositionTarget: true\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (this._closeOnOutsideClick !== undefined) {\n            this._overlayDefaults.closeOnOutsideClick = this._closeOnOutsideClick;\n        }\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n\n        const clonedSettings = Object.assign({}, this._overlayDefaults, this.overlaySettings);\n        this.updateOverlaySettings(clonedSettings);\n        this.target.toggle(clonedSettings);\n    }\n\n    /**\n     * Updates provided overlay settings\n     * @param settings settings to update\n     * @returns returns updated copy of provided overlay settings\n     */\n    protected updateOverlaySettings(settings: OverlaySettings): OverlaySettings {\n        if (settings && settings.positionStrategy) {\n            const positionStrategyClone: IPositionStrategy = settings.positionStrategy.clone();\n            positionStrategyClone.settings.target = this.element.nativeElement;\n            settings.positionStrategy = positionStrategyClone;\n        }\n\n        return settings;\n    }\n}\n\n/**\n * Mark an element as an igxOverlay outlet container.\n * Directive instance is exported as `overlay-outlet` to be assigned to templates variables:\n * ```html\n * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n * ```\n */\n@Directive({\n    exportAs: 'overlay-outlet',\n    selector: '[igxOverlayOutlet]'\n})\nexport class IgxOverlayOutletDirective {\n    constructor(public element: ElementRef) { }\n\n    /** @hidden */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    exports: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxToggleModule { }\n","import { CancelableEventArgs, CancelableBrowserEventArgs } from '../core/utils';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\nimport { IToggleView } from '../core/navigation/IToggleView';\nimport { OnInit, EventEmitter } from '@angular/core';\nimport { DisplayDensityBase } from '../core/density';\n\n/** @hidden */\nexport enum Navigate {\n    Up = -1,\n    Down = 1\n}\n\n/** Key actions that have designated handlers in IgxDropDownComponent */\nexport enum DropDownActionKey {\n    ESCAPE = 'escape',\n    ENTER = 'enter',\n    SPACE = 'space'\n}\n\n/**\n * Interface that encapsulates onSelection event arguments - old selection, new selection and cancel selection.\n * @export\n */\nexport interface ISelectionEventArgs extends CancelableEventArgs {\n    oldSelection: IgxDropDownItemBase;\n    newSelection: IgxDropDownItemBase;\n}\n\n/**\n * Interface for an instance of IgxDropDownNavigationDirective\n * @export\n */\nexport interface IDropDownNavigationDirective {\n    target: any;\n    handleKeyDown(event: KeyboardEvent): void;\n    onArrowDownKeyDown(event?: KeyboardEvent): void;\n    onArrowUpKeyDown(event?: KeyboardEvent): void;\n    onEndKeyDown(event?: KeyboardEvent): void;\n    onHomeKeyDown(event?: KeyboardEvent): void;\n}\n\nexport const IGX_DROPDOWN_BASE = 'IgxDropDownBaseToken';\n\n/**\n * @hidden\n */\nexport interface IDropDownList extends DisplayDensityBase {\n    onSelection: EventEmitter<ISelectionEventArgs>;\n    width: string;\n    height: string;\n    id: string;\n    maxHeight: string;\n\n    collapsed: boolean;\n\n    items: IgxDropDownItemBase[];\n    headers: IgxDropDownItemBase[];\n    focusedItem: IgxDropDownItemBase;\n    navigateFirst(): void;\n    navigateLast(): void;\n    navigateNext(): void;\n    navigatePrev(): void;\n    navigateItem(newIndex: number, direction?: Navigate): void;\n    onItemActionKey(key: DropDownActionKey, event?: Event): void;\n}\n\n/**\n * @hidden\n */\nexport interface IDropDownBase extends IDropDownList, IToggleView {\n    onOpening: EventEmitter<CancelableEventArgs>;\n    onOpened: EventEmitter<void>;\n    onClosing: EventEmitter<CancelableBrowserEventArgs>;\n    onClosed: EventEmitter<void>;\n\n    selectedItem: any;\n    allowItemsFocus?: boolean;\n    setSelectedItem(index: number): void;\n    selectItem(item: IgxDropDownItemBase, event?: Event): void;\n}\n\n","import { Injectable } from '@angular/core';\n\n/** @hidden */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxSelectionAPIService {\n    /**\n     * If primaryKey is defined, then multiple selection is based on the primaryKey, and it is array of numbers, strings, etc.\n     * If the primaryKey is omitted, then selection is based on the item data\n     */\n    protected selection: Map<string,  Set<any>> = new Map<string, Set<any>>();\n\n    /**\n     * Get current component selection.\n     * @param componentID ID of the component.\n     */\n    public get(componentID: string): Set<any> {\n        return this.selection.get(componentID);\n    }\n\n    /**\n     * Set new component selection.\n     * @param componentID ID of the component.\n     * @param newSelection The new component selection to be set.\n     */\n    public set(componentID: string, newSelection: Set<any>) {\n        if (!componentID) {\n            throw Error('Invalid value for component id!');\n        }\n        this.selection.set(componentID, newSelection);\n    }\n\n    /**\n     * Clears selection for component.\n     * @param componentID ID of the component.\n     */\n    public clear(componentID: string) {\n        this.selection.set(componentID, this.get_empty());\n    }\n\n    /**\n     * Get current component selection length.\n     * @param componentID ID of the component.\n     */\n    public size(componentID: string): number {\n        const sel = this.get(componentID);\n        return sel ? sel.size : 0;\n    }\n\n    /**\n     * Creates new selection that consist of the new item added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_item() one.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (add_items method) to accumulate selection for multiple items.\n     *\n     * @returns Selection after the new item is added.\n     */\n    public add_item(componentID: string, itemID, sel?: Set<any>): Set<any> {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            sel = this.get_empty();\n        }\n        if (!itemID && itemID !== 0) {\n            throw Error('Invalid value for item id!');\n        }\n        sel.add(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_items() one.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     *\n     * @returns Selection after the new items are added.\n     */\n    public add_items(componentID: string, itemIDs: any[], clearSelection?: boolean): Set<any> {\n        let selection: Set<any>;\n        if (clearSelection) {\n            selection = this.get_empty();\n        } else if (itemIDs && itemIDs.length === 0) {\n            selection = new Set(this.get(componentID));\n        }\n        itemIDs.forEach((item) => selection = this.add_item(componentID, item, selection));\n        return selection;\n    }\n\n    /**\n     * Add item to the current component selection.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (select_items method) to accumulate selection for multiple items.\n     */\n    public select_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.add_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Add items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     */\n    public select_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.add_items(componentID, itemID, clearSelection));\n    }\n\n    /**\n     * Creates new selection that consist of the new items excluded from the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_item() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (delete_items method) to accumulate deselected items.\n     *\n     * @returns Selection after the item is removed.\n     */\n    public delete_item(componentID: string, itemID, sel?: Set<any>) {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            return;\n        }\n        sel.delete(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items removed to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_items() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the items to remove from component selection.\n     *\n     * @returns Selection after the items are removed.\n     */\n    public delete_items(componentID: string, itemIDs: any[]): Set<any> {\n        let selection: Set<any>;\n        itemIDs.forEach((deselectedItem) => selection = this.delete_item(componentID, deselectedItem, selection));\n        return selection;\n    }\n\n    /**\n     * Remove item from the current component selection.\n     * @param componentID ID of the component, which we remove item from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (deselect_items method) to accumulate selection for multiple items.\n     */\n    public deselect_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.delete_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Remove items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     */\n    public deselect_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.delete_items(componentID, itemID));\n    }\n\n    /**\n     * Check if the item is selected in the component selection.\n     * @param componentID ID of the component.\n     * @param itemID ID of the item to search.\n     *\n     * @returns If item is selected.\n     */\n    public is_item_selected(componentID: string, itemID): boolean {\n        const sel = this.get(componentID);\n        if (!sel) {\n            return false;\n        }\n        return sel.has(itemID);\n    }\n\n    /**\n     * Get first element in the selection.\n     * This is correct when we have only one item in the collection (for single selection purposes)\n     * and the method returns that item.\n     * @param componentID ID of the component.\n     *\n     * @returns First element in the set.\n     */\n    public first_item(componentID: string) {\n        const sel = this.get(componentID);\n        if (sel && sel.size > 0) {\n            return sel.values().next().value;\n       }\n    }\n\n    /**\n     * Returns whether all items are selected.\n     * @param componentID ID of the component.\n     * @param dataCount: number Number of items in the data.\n     *\n     * @returns If all items are selected.\n     */\n    public are_all_selected(componentID: string, dataCount: number): boolean {\n        return dataCount > 0 && dataCount === this.size(componentID);\n    }\n\n    /**\n     * Returns whether any of the items is selected.\n     * @param componentID ID of the component.\n     * @param data Entire data array.\n     *\n     * @returns If there is any item selected.\n     */\n    public are_none_selected(componentID: string): boolean {\n        return this.size(componentID) === 0;\n    }\n\n    /**\n     * Get all primary key values from a data array. If there isn't a primary key defined that the entire data is returned instead.\n     * @param data Entire data array.\n     * @param primaryKey Data primary key.\n     *\n     * @returns Array of identifiers, either primary key values or the entire data array.\n     */\n    public get_all_ids(data, primaryKey?) {\n        return primaryKey ? data.map((x) => x[primaryKey]) : data;\n    }\n\n    /**\n     * Returns empty selection collection.\n     * @returns empty set.\n    */\n    public get_empty() {\n        return new Set();\n    }\n}\n","import { Component, Input, HostBinding } from '@angular/core';\n\nlet NEXT_ID = 0;\n/**\n * The `<igx-drop-down-item>` is a container intended for row items in\n * a `<igx-drop-down>` container.\n */\n@Component({\n    selector: 'igx-drop-down-item-group',\n    template: `\n        <label id=\"{{labelId}}\">{{ label }}</label>\n        <ng-content select=\"igx-drop-down-item\"></ng-content>\n    `\n})\nexport class IgxDropDownGroupComponent {\n    private _id = NEXT_ID++;\n\n    /**\n     * @hidden @internal\n     */\n    public get labelId(): string {\n        return `igx-item-group-label-${this._id}`;\n    }\n\n    @HostBinding(`attr.aria-labelledby`)\n    public get labelledBy(): string {\n        return this.labelId;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.role')\n    public role = 'group';\n\n    /** @hidden @internal */\n    @HostBinding('class.igx-drop-down__group')\n    public groupClass = true;\n    /**\n     * Sets/gets if the item group is disabled\n     *\n     * ```typescript\n     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;\n     * // get\n     * ...\n     * const groupState: boolean = myDropDownGroup.disabled;\n     * ...\n     * //set\n     * ...\n     * myDropDownGroup,disabled = false;\n     * ...\n     * ```\n     *\n     * ```html\n     * <igx-drop-down-item-group [label]=\"'My Items'\" [disabled]=\"true\">\n     *     <igx-drop-down-item *ngFor=\"let item of items[index]\" [value]=\"item.value\">\n     *         {{ item.text }}\n     *     </igx-drop-down-item>\n     * </igx-drop-down-item-group>\n     * ```\n     *\n     * **NOTE:** All items inside of a disabled drop down group will be treated as disabled\n     */\n    @Input()\n    @HostBinding(`attr.aria-disabled`)\n    @HostBinding('class.igx-drop-down__group--disabled')\n    public disabled = false;\n\n    /**\n     * Sets/gets the label of the item group\n     *\n     * ```typescript\n     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;\n     * // get\n     * ...\n     * const myLabel: string = myDropDownGroup.label;\n     * ...\n     * // set\n     * ...\n     * myDropDownGroup.label = 'My New Label';\n     * ...\n     * ```\n     *\n     * ```html\n     * <igx-drop-down-item-group [label]=\"'My new Label'\">\n     *      ...\n     * </igx-drop-down-item-group>\n     * ```\n    */\n    @Input()\n    public label: string;\n}\n","import { IDropDownBase, IGX_DROPDOWN_BASE } from './drop-down.common';\nimport { Input, HostBinding, HostListener, ElementRef, Optional, Inject, DoCheck } from '@angular/core';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { DeprecateProperty, showMessage } from '../core/deprecateDecorators';\nimport { IgxDropDownGroupComponent } from './drop-down-group.component';\n\nlet NEXT_ID = 0;\nlet warningShown = false;\n\n/**\n * An abstract class defining a drop-down item:\n * With properties / styles for selection, highlight, height\n * Bindable property for passing data (`value: any`)\n * Parent component (has to be used under a parent with type `IDropDownBase`)\n * Method for handling click on Host()\n */\nexport abstract class IgxDropDownItemBase implements DoCheck {\n    /**\n     * @hidden\n     */\n    protected _focused = false;\n    protected _selected = false;\n    protected _index = null;\n    protected _disabled = false;\n\n    /**\n     * Sets/gets the `id` of the item.\n     * ```html\n     * <igx-drop-down-item [id] = 'igx-drop-down-item-0'></igx-drop-down-item>\n     * ```\n     * ```typescript\n     * let itemId =  this.item.id;\n     * ```\n     * @memberof IgxSelectItemComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-drop-down-item-${NEXT_ID++}`;\n\n    /**\n     * @hidden @internal\n     */\n    public get itemID() {\n        return this;\n    }\n\n    /**\n     * The data index of the dropdown item.\n     *\n     * ```typescript\n     * // get the data index of the selected dropdown item\n     * let selectedItemIndex = this.dropdown.selectedItem.index\n     * ```\n     */\n    @Input()\n    public get index(): number {\n        if (this._index === null) {\n            warningShown = showMessage(\n                'IgxDropDownItemBase: Automatic index is deprecated.' +\n                'Bind in the template instead using `<igx-drop-down-item [index]=\"i\"` instead.`',\n                warningShown);\n            return this.itemIndex;\n        }\n        return this._index;\n    }\n\n    public set index(value) {\n        this._index = value;\n    }\n\n    /**\n     * Gets/sets the value of the item if the item is databound\n     *\n     * ```typescript\n     * // usage in IgxDropDownItemComponent\n     * // get\n     * let mySelectedItemValue = this.dropdown.selectedItem.value;\n     *\n     * // set\n     * let mySelectedItem = this.dropdown.selectedItem;\n     * mySelectedItem.value = { id: 123, name: 'Example Name' }\n     *\n     * // usage in IgxComboItemComponent\n     * // get\n     * let myComboItemValue = this.combo.items[0].value;\n     * ```\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item')\n    get itemStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item--cosy')\n    public get itemStyleCosy() {\n        return this.dropDown.displayDensity === 'cosy' && !this.isHeader;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item--compact')\n    public get itemStyleCompact() {\n        return this.dropDown.displayDensity === 'compact' && !this.isHeader;\n    }\n\n    /**\n     * Sets/Gets if the item is the currently selected one in the dropdown\n     *\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.selected; // true\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-selected')\n    @HostBinding('class.igx-drop-down__item--selected')\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @Input()\n    @DeprecateProperty(`IgxDropDownItemBase \\`isSelected\\` property is deprecated.\\n` +\n        `Use \\`selected\\` instead.`)\n    get isSelected(): boolean {\n        return this.selected;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    set isSelected(value: boolean) {\n        this.selected = value;\n    }\n\n    /**\n     * Sets/gets if the given item is focused\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemFocused = mySelectedItem.isFocused;\n     * ```\n     */\n    @HostBinding('class.igx-drop-down__item--focused')\n    get focused(): boolean {\n        return (!this.isHeader && !this.disabled) && this._focused;\n    }\n\n    /**\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" isFocused={{!item.isFocused}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`IgxDropDownItemBase \\`isFocused\\` property is depracated.\\n` +\n        `Use \\`focused\\` instead.`)\n    get isFocused(): boolean {\n        return this.focused;\n    }\n    /**\n     * @hidden @internal\n     */\n    set isFocused(value: boolean) {\n        this.focused = value;\n    }\n\n    /**\n     * Sets/gets if the given item is header\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemHeader = mySelectedItem.isHeader;\n     * ```\n     *\n     * ```html\n     *  <!--set-->\n     *  <igx-dropdown-item *ngFor=\"let item of items\">\n     *      <div *ngIf=\"items.indexOf(item) === 5; then item.isHeader = true\">\n     *          {{item.field}}\n*           </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-drop-down__header')\n    public isHeader: boolean;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__header--cosy')\n    public get headerClassCosy() {\n        return this.isHeader && this.dropDown.displayDensity === 'cosy';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__header--compact')\n    public get headerClassCompact() {\n        return this.isHeader && this.dropDown.displayDensity === 'compact';\n    }\n\n    /**\n     * Sets/gets if the given item is disabled\n     *\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let myItemIsDisabled = mySelectedItem.disabled;\n     * ```\n     *\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" disabled={{!item.disabled}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     * **NOTE:** Drop-down items inside of a disabled `IgxDropDownGroup` will always count as disabled\n     */\n    @Input()\n    @HostBinding('attr.aria-disabled')\n    @HostBinding('class.igx-drop-down__item--disabled')\n    public get disabled(): boolean {\n        return this.group ? this.group.disabled || this._disabled : this._disabled;\n    }\n\n    public set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    /**\n     * Gets/sets the `role` attribute of the item. Default is 'option'.\n     *\n     * ```html\n     *  <igx-drop-down-item [role]=\"customRole\"></igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.role')\n    public role = 'option';\n\n    /**\n     * Gets item index\n     * @hidden @internal\n     */\n    public get itemIndex(): number {\n        return this.dropDown.items.indexOf(this);\n    }\n\n    /**\n     * Gets item element height\n     * @hidden @internal\n     */\n    public get elementHeight(): number {\n        return this.elementRef.nativeElement.clientHeight;\n    }\n\n    /**\n     * Get item html element\n     * @hidden @internal\n     */\n    public get element(): ElementRef {\n        return this.elementRef;\n    }\n\n    constructor(\n        @Inject(IGX_DROPDOWN_BASE) protected dropDown: IDropDownBase,\n        protected elementRef: ElementRef,\n        @Optional() protected group: IgxDropDownGroupComponent,\n        @Optional() @Inject(IgxSelectionAPIService) protected selection?: IgxSelectionAPIService\n    ) { }\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('click', ['$event'])\n    clicked(event) {\n    }\n\n    ngDoCheck(): void {\n        if (this.selected) {\n            const dropDownSelectedItem = this.selection.first_item(this.dropDown.id);\n            if (!dropDownSelectedItem || this !== dropDownSelectedItem) {\n                this.dropDown.selectItem(this);\n            }\n        }\n    }\n}\n","import {\n    Component,\n    DoCheck,\n    HostListener,\n    HostBinding\n} from '@angular/core';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\n\n/**\n * The `<igx-drop-down-item>` is a container intended for row items in\n * a `<igx-drop-down>` container.\n */\n@Component({\n    selector: 'igx-drop-down-item',\n    templateUrl: 'drop-down-item.component.html'\n})\nexport class IgxDropDownItemComponent extends IgxDropDownItemBase implements DoCheck {\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.tabindex')\n    get setTabIndex() {\n        const shouldSetTabIndex = this.dropDown.allowItemsFocus && !(this.disabled || this.isHeader);\n        if (shouldSetTabIndex) {\n            return 0;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('click', ['$event'])\n    clicked(event) {\n        if (this.disabled || this.isHeader) {\n            const focusedItem = this.dropDown.items.find((item) => item.focused);\n            if (this.dropDown.allowItemsFocus && focusedItem) {\n                focusedItem.element.nativeElement.focus({ preventScroll: true });\n            }\n            return;\n        }\n        if (this.selection) {\n            this.dropDown.selectItem(this, event);\n        }\n    }\n}\n","import { InjectionToken, Input, Output, EventEmitter, DoCheck } from '@angular/core';\n\n\n/**\n * Defines the posible values of the components' display density.\n */\nexport enum DisplayDensity {\n    comfortable = 'comfortable',\n    cosy = 'cosy',\n    compact = 'compact'\n}\n\n/**\n * Describes the object used to configure the DisplayDensity in Angular DI.\n */\nexport interface IDisplayDensityOptions {\n    displayDensity: DisplayDensity;\n}\n\nexport interface IDensityChangedEventArgs {\n    oldDensity: DisplayDensity;\n    newDensity: DisplayDensity;\n}\n\n/**\n * Defines the DisplayDensity DI token.\n */\nexport const DisplayDensityToken = new InjectionToken<IDisplayDensityOptions>('DisplayDensity');\n\n/**\n * Base class containing all logic required for implementing DisplayDensity.\n */\nexport class DisplayDensityBase implements DoCheck {\n    protected _displayDensity: DisplayDensity;\n\n    /**\n     * Returns the theme of the component.\n     * The default theme is `comfortable`.\n     * Available options are `comfortable`, `cosy`, `compact`.\n     * ```typescript\n     * let componentTheme = this.component.displayDensity;\n     * ```\n     */\n    @Input()\n    public get displayDensity(): DisplayDensity | string {\n        return this._displayDensity ||\n            ((this.displayDensityOptions && this.displayDensityOptions.displayDensity) || DisplayDensity.comfortable);\n    }\n\n    /**\n     * Sets the theme of the component.\n     */\n    public set displayDensity(val: DisplayDensity | string) {\n        const currentDisplayDensity = this._displayDensity;\n        this._displayDensity = val as DisplayDensity;\n\n        if (currentDisplayDensity !== this._displayDensity) {\n            const densityChangedArgs: IDensityChangedEventArgs = {\n                oldDensity: currentDisplayDensity,\n                newDensity: this._displayDensity\n            };\n\n            this.onDensityChanged.emit(densityChangedArgs);\n        }\n    }\n\n    @Output()\n    public onDensityChanged = new EventEmitter<IDensityChangedEventArgs>();\n\n    protected oldDisplayDensityOptions: IDisplayDensityOptions = { displayDensity: DisplayDensity.comfortable };\n\n\n    constructor(protected displayDensityOptions: IDisplayDensityOptions) {\n        Object.assign(this.oldDisplayDensityOptions, displayDensityOptions);\n    }\n\n    public ngDoCheck() {\n        if (!this._displayDensity && this.displayDensityOptions &&\n                this.oldDisplayDensityOptions.displayDensity !== this.displayDensityOptions.displayDensity) {\n            const densityChangedArgs: IDensityChangedEventArgs = {\n                oldDensity: this.oldDisplayDensityOptions.displayDensity,\n                newDensity: this.displayDensityOptions.displayDensity\n            };\n\n            this.onDensityChanged.emit(densityChangedArgs);\n            this.oldDisplayDensityOptions = Object.assign(this.oldDisplayDensityOptions, this.displayDensityOptions);\n        }\n    }\n\n    /**\n     * Given a style class of a component/element returns the modified version of it based\n     * on the current display density.\n     */\n    protected getComponentDensityClass(baseStyleClass: string): string {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return `${baseStyleClass}--${DisplayDensity.cosy}`;\n            case DisplayDensity.compact:\n                return `${baseStyleClass}--${DisplayDensity.compact}`;\n            default:\n                return baseStyleClass;\n        }\n    }\n}\n","import {\n    Input, HostBinding, ElementRef, QueryList, Output, EventEmitter, ChangeDetectorRef, Optional, Inject\n} from '@angular/core';\n\nimport { Navigate, ISelectionEventArgs } from './drop-down.common';\nimport { IDropDownList } from './drop-down.common';\nimport { DropDownActionKey } from './drop-down.common';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\nlet NEXT_ID = 0;\n\n/**\n * An abstract class, defining a drop-down component, with:\n * Properties for display styles and classes\n * A collection items of type `IgxDropDownItemBase`\n * Properties and methods for navigating (highlighting/focusing) items from the collection\n * Properties and methods for selecting items from the collection\n */\nexport abstract class IgxDropDownBase extends DisplayDensityBase implements IDropDownList {\n    protected _width;\n    protected _height;\n    protected _focusedItem: any = null;\n    protected _id = `igx-drop-down-${NEXT_ID++}`;\n\n    /**\n     * Get dropdown's html element of it scroll container\n     */\n    protected get scrollContainer() {\n        return this.element;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public children: QueryList<IgxDropDownItemBase>;\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-drop-down (onSelection)='handleSelection()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<ISelectionEventArgs>();\n\n    /**\n     *  Gets/Sets the width of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentWidth = this.dropdown.width;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [width]='160px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public width: string;\n\n    /**\n     * Gets/Sets the height of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentHeight = this.dropdown.height;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [height]='400px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public height: string;\n\n    /**\n     * Gets/Sets the drop down's id\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentId = this.dropdown.id;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [id]='newDropDownId'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public id: string;\n\n    /**\n     * Gets/Sets the drop down's container max height.\n     *\n     * ```typescript\n     * // get\n     * let maxHeight = this.dropdown.maxHeight;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [maxHeight]='200px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    @HostBinding('style.maxHeight')\n    public maxHeight = null;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down')\n    public cssClass = true;\n\n    /**\n     * Get all non-header items\n     *\n     * ```typescript\n     * let myDropDownItems = this.dropdown.items;\n     * ```\n     */\n    public get items(): IgxDropDownItemBase[] {\n        const items: IgxDropDownItemBase[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n\n        return items;\n    }\n\n    /**\n     * Get all header items\n     *\n     * ```typescript\n     * let myDropDownHeaderItems = this.dropdown.headers;\n     * ```\n     */\n    public get headers(): IgxDropDownItemBase[] {\n        const headers: IgxDropDownItemBase[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n\n        return headers;\n    }\n\n    /**\n     * Get dropdown html element\n     *\n     * ```typescript\n     * let myDropDownElement = this.dropdown.element;\n     * ```\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Gets if the dropdown is collapsed\n     */\n    public abstract collapsed: boolean;\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n        }\n\n    /** Keydown Handler */\n    public onItemActionKey(key: DropDownActionKey, event?: Event) {\n        switch (key) {\n            case DropDownActionKey.ENTER:\n            case DropDownActionKey.SPACE:\n                this.selectItem(this.focusedItem, event);\n                break;\n            case DropDownActionKey.ESCAPE:\n        }\n    }\n\n    /**\n     * Emits onSelection with the target item & event\n     * @hidden @internal\n     * @param newSelection the item selected\n     * @param event the event that triggered the call\n     */\n    public selectItem(newSelection?: IgxDropDownItemBase, event?: Event) {\n        this.onSelection.emit({\n            newSelection,\n            oldSelection: null,\n            cancel: false\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get focusedItem(): IgxDropDownItemBase {\n        return this._focusedItem;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set focusedItem(item: IgxDropDownItemBase) {\n        this._focusedItem = item;\n    }\n\n    protected navigate(direction: Navigate, currentIndex?: number) {\n        let index = -1;\n        if (this._focusedItem) {\n            index = currentIndex ? currentIndex : this._focusedItem.itemIndex;\n        }\n        const newIndex = this.getNearestSiblingFocusableItemIndex(index, direction);\n        this.navigateItem(newIndex);\n    }\n\n    protected getNearestSiblingFocusableItemIndex(startIndex: number, direction: Navigate): number {\n        let index = startIndex;\n        const items = this.items;\n        while (items[index + direction] && items[index + direction].disabled) {\n            index += direction;\n        }\n\n        index += direction;\n        if (index >= 0 && index < items.length) {\n            return index;\n        } else {\n            return -1;\n        }\n    }\n\n    /**\n     * Navigates to the item on the specified index\n     * @param newIndex number - the index of the item in the `items` collection\n     */\n    public navigateItem(newIndex: number) {\n        if (newIndex !== -1) {\n            const oldItem = this._focusedItem;\n            const newItem = this.items[newIndex];\n            if (oldItem) {\n                oldItem.focused = false;\n            }\n            this._focusedItem = newItem;\n            this.scrollToHiddenItem(newItem);\n            this._focusedItem.focused = true;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateFirst() {\n        this.navigate(Navigate.Down, -1);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateLast() {\n        this.navigate(Navigate.Up, this.items.length);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateNext() {\n        this.navigate(Navigate.Down);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigatePrev() {\n        this.navigate(Navigate.Up);\n    }\n\n    protected scrollToHiddenItem(newItem: IgxDropDownItemBase) {\n        const elementRect = newItem.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        if (parentRect.top > elementRect.top) {\n            this.scrollContainer.scrollTop -= (parentRect.top - elementRect.top);\n        }\n\n        if (parentRect.bottom < elementRect.bottom) {\n            this.scrollContainer.scrollTop += (elementRect.bottom - parentRect.bottom);\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    forwardRef,\n    NgModule,\n    QueryList,\n    OnInit,\n    Input,\n    OnDestroy,\n    ViewChild,\n    EventEmitter,\n    Output,\n    Optional,\n    Inject\n} from '@angular/core';\nimport { IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { IgxDropDownItemComponent } from './drop-down-item.component';\nimport { IgxDropDownBase } from './drop-down.base';\nimport { DropDownActionKey } from './drop-down.common';\nimport { IGX_DROPDOWN_BASE, IDropDownBase } from './drop-down.common';\nimport { ISelectionEventArgs, Navigate } from './drop-down.common';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, isIE } from '../core/utils';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { Subject } from 'rxjs';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\nimport { OverlaySettings } from '../services';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/**\n * **Ignite UI for Angular DropDown** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/drop_down.html)\n *\n * The Ignite UI for Angular Drop Down displays a scrollable list of items which may be visually grouped and\n * supports selection of a single item. Clicking or tapping an item selects it and closes the Drop Down\n *\n * Example:\n * ```html\n * <igx-drop-down>\n *   <igx-drop-down-item *ngFor=\"let item of items\" disabled={{item.disabled}} isHeader={{item.header}}>\n *     {{ item.value }}\n *   </igx-drop-down-item>\n * </igx-drop-down>\n * ```\n */\n@Component({\n    selector: 'igx-drop-down',\n    templateUrl: './drop-down.component.html',\n    providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxDropDownComponent }]\n})\nexport class IgxDropDownComponent extends IgxDropDownBase implements IDropDownBase, OnInit, OnDestroy {\n    protected destroy$ = new Subject<boolean>();\n\n    @ViewChild(IgxToggleDirective)\n    protected toggleDirective: IgxToggleDirective;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(forwardRef(() => IgxDropDownItemComponent), { descendants: true })\n    public children: QueryList<IgxDropDownItemBase>;\n\n    /**\n     * Gets/sets whether items take focus. Disabled by default.\n     * When enabled, drop down items gain tab index and are focused when active -\n     * this includes activating the selected item when opening the drop down and moving with keyboard navigation.\n     *\n     * Note: Keep that focus shift in mind when using the igxDropDownItemNavigation directive\n     * and ensure it's placed either on each focusable item or a common ancestor to allow it to handle keyboard events.\n     *\n     * ```typescript\n     * // get\n     * let dropDownAllowsItemFocus = this.dropdown.allowItemsFocus;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [allowItemsFocus]='true'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public allowItemsFocus = false;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n    set id(value: string) {\n        this.toggleDirective.id = value;\n        this.selection.set(value, this.selection.get(this.id));\n        this.selection.clear(this.id);\n        this._id = value;\n    }\n\n    /** Id of the internal listbox of the drop down */\n    public get listId() {\n        return this.id + '-list';\n    }\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpening)='handleOpening()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpened)='handleOpened()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<void>();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosing)='handleClosing()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosed)='handleClosed()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<void>();\n\n    /**\n     * Get currently selected item\n     *\n     * ```typescript\n     * let currentItem = this.dropdown.selectedItem;\n     * ```\n     */\n    public get selectedItem(): IgxDropDownItemBase {\n        const selectedItem = this.selection.first_item(this.id);\n        if (selectedItem) {\n            if (selectedItem.selected) {\n                return selectedItem;\n            }\n            this.selection.clear(this.id);\n        }\n        return null;\n    }\n\n    /**\n     * Gets if the dropdown is collapsed\n     *\n     * ```typescript\n     * let isCollapsed = this.dropdown.collapsed;\n     * ```\n     */\n    public get collapsed(): boolean {\n        return this.toggleDirective.collapsed;\n    }\n\n    protected get scrollContainer() {\n        return this.toggleDirective.element;\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(elementRef, cdr, _displayDensityOptions);\n    }\n\n    /**\n     * Opens the dropdown\n     *\n     * ```typescript\n     * this.dropdown.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        this.toggleDirective.open(overlaySettings);\n    }\n\n    /**\n     * Closes the dropdown\n     *\n     * ```typescript\n     * this.dropdown.close();\n     * ```\n     */\n    public close() {\n        this.toggleDirective.close();\n    }\n\n    /**\n     * Toggles the dropdown\n     *\n     * ```typescript\n     * this.dropdown.toggle();\n     * ```\n     */\n    public toggle(overlaySettings?: OverlaySettings) {\n        if (this.collapsed || this.toggleDirective.isClosing) {\n            this.open(overlaySettings);\n        } else {\n            this.close();\n        }\n    }\n\n    /**\n     * Select an item by index\n     * @param index of the item to select\n     */\n    public setSelectedItem(index: number) {\n        if (index < 0 || index >= this.items.length) {\n            return;\n        }\n        const newSelection = this.items[index];\n        this.selectItem(newSelection);\n    }\n\n    /**\n     * Navigates to the item on the specified index\n     * @param newIndex number\n     */\n    public navigateItem(index: number) {\n        super.navigateItem(index);\n        if (this.allowItemsFocus && this.focusedItem) {\n            this.focusedItem.element.nativeElement.focus();\n            this.cdr.markForCheck();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpening(e: CancelableEventArgs) {\n        this.onOpening.emit(e);\n        if (e.cancel) {\n            return;\n        }\n        this.scrollToItem(this.selectedItem);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpened() {\n        if (this.selectedItem) {\n            this._focusedItem = this.selectedItem;\n            this._focusedItem.focused = true;\n        } else if (this.allowItemsFocus) {\n            this.navigateFirst();\n        }\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleClosing(e: CancelableBrowserEventArgs) {\n        this.onClosing.emit(e);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleClosed() {\n        if (this._focusedItem) {\n            this._focusedItem.focused = false;\n        }\n        this.onClosed.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this.selection.clear(this.id);\n    }\n\n    protected scrollToItem(item: IgxDropDownItemBase) {\n        const itemPosition = this.calculateScrollPosition(item);\n\n        //  in IE11 setting sctrollTop is somehow slow and forces dropdown\n        //  to appear on screen before animation start. As a result dropdown\n        //  flickers badly. This is why we set scrollTop just a little later\n        //  allowing animation to start and prevent dropdown flickering\n        if (isIE()) {\n            setTimeout(() => {\n                this.scrollContainer.scrollTop = (itemPosition);\n            }, 1);\n        } else {\n            this.scrollContainer.scrollTop = (itemPosition);\n        }\n    }\n\n    /** @hidden @internal */\n    public calculateScrollPosition(item: IgxDropDownItemBase): number {\n        if (!item) {\n            return 0;\n        }\n\n        const elementRect = item.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        const scrollDelta = parentRect.top - elementRect.top;\n        let scrollPosition = this.scrollContainer.scrollTop - scrollDelta;\n\n        const dropDownHeight = this.scrollContainer.clientHeight;\n        scrollPosition -= dropDownHeight / 2;\n        scrollPosition += item.elementHeight / 2;\n\n        return Math.floor(scrollPosition);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    ngOnInit() {\n        this.toggleDirective.id = this.id;\n    }\n\n    /** Keydown Handler */\n    public onItemActionKey(key: DropDownActionKey, event?: Event) {\n        super.onItemActionKey(key, event);\n        this.close();\n    }\n\n    /**\n     * Handles the `onSelection` emit and the drop down toggle when selection changes\n     * @hidden\n     * @internal\n     * @param newSelection\n     * @param event\n     */\n    public selectItem(newSelection?: IgxDropDownItemBase, event?: Event) {\n        const oldSelection = this.selectedItem;\n        if (!newSelection) {\n            newSelection = this._focusedItem;\n        }\n        if (newSelection === null) {\n            return;\n        }\n        if (newSelection.isHeader) {\n            return;\n        }\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n\n        if (!args.cancel) {\n            this.selection.set(this.id, new Set([newSelection]));\n            if (oldSelection) {\n                oldSelection.selected = false;\n            }\n            if (newSelection) {\n                newSelection.selected = true;\n            }\n            if (event) {\n                this.toggleDirective.close();\n            }\n        }\n    }\n}\n\n","import { Directive, Optional, Self, Input, HostListener, Inject } from '@angular/core';\nimport { IGX_DROPDOWN_BASE } from './drop-down.common';\nimport { IDropDownNavigationDirective } from './drop-down.common';\nimport { IgxDropDownBase } from './drop-down.base';\nimport { DropDownActionKey } from './drop-down.common';\n\n/**\n * Navigation Directive that handles keyboard events on its host and controls a targeted IgxDropDownBase component\n */\n@Directive({\n    selector: '[igxDropDownItemNavigation]'\n})\nexport class IgxDropDownItemNavigationDirective implements IDropDownNavigationDirective {\n\n    protected _target: IgxDropDownBase = null;\n\n    constructor(@Self() @Optional() @Inject(IGX_DROPDOWN_BASE) public dropdown: IgxDropDownBase) { }\n\n    /**\n     * Gets the target of the navigation directive;\n     *\n     * ```typescript\n     * // Get\n     * export class MyComponent {\n     *  ...\n     *  @ContentChild(IgxDropDownNavigationDirective)\n     *  navDirective: IgxDropDownNavigationDirective = null\n     *  ...\n     *  const navTarget: IgxDropDownBase = navDirective.navTarget\n     * }\n     * ```\n     */\n    get target(): IgxDropDownBase {\n        return this._target;\n    }\n\n    /**\n     * Sets the target of the navigation directive;\n     * If no valid target is passed, it falls back to the drop down context\n     *\n     * ```html\n     * <!-- Set -->\n     * <input [igxDropDownItemNavigation]=\"dropdown\" />\n     * ...\n     * <igx-drop-down #dropdown>\n     * ...\n     * </igx-drop-down>\n     * ```\n     */\n    @Input('igxDropDownItemNavigation')\n    set target(target: IgxDropDownBase) {\n        this._target = target ? target : this.dropdown;\n    }\n\n    /**\n     * Captures keydown events and calls the appropriate handlers on the target component\n     */\n    @HostListener('keydown', ['$event'])\n    handleKeyDown(event: KeyboardEvent) {\n        if (event) {\n            const key = event.key.toLowerCase();\n            if (!this.target.collapsed) { // If dropdown is opened\n                const navKeys = ['esc', 'escape', 'enter', 'space', 'spacebar', ' ',\n            'arrowup', 'up', 'arrowdown', 'down', 'home', 'end'];\n                if (navKeys.indexOf(key) === -1) { // If key has appropriate function in DD\n                    return;\n                }\n                event.preventDefault();\n                event.stopPropagation();\n            } else { // If dropdown is closed, do nothing\n                return;\n            }\n            switch (key) {\n                case 'esc':\n                case 'escape':\n                    this.target.onItemActionKey(DropDownActionKey.ESCAPE, event);\n                    break;\n                case 'enter':\n                    this.target.onItemActionKey(DropDownActionKey.ENTER, event);\n                    break;\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                    this.target.onItemActionKey(DropDownActionKey.SPACE, event);\n                    break;\n                case 'arrowup':\n                case 'up':\n                    this.onArrowUpKeyDown();\n                    break;\n                case 'arrowdown':\n                case 'down':\n                    this.onArrowDownKeyDown();\n                    break;\n                case 'home':\n                    this.onHomeKeyDown();\n                    break;\n                case 'end':\n                    this.onEndKeyDown();\n                    break;\n                default:\n                    return;\n            }\n        }\n    }\n\n    /**\n     * Navigates to previous item\n     */\n    onArrowDownKeyDown() {\n        this.target.navigateNext();\n    }\n\n    /**\n     * Navigates to previous item\n     */\n    onArrowUpKeyDown() {\n        this.target.navigatePrev();\n    }\n\n    /**\n     * Navigates to target's last item\n     */\n    onEndKeyDown() {\n        this.target.navigateLast();\n    }\n\n    /**\n     * Navigates to target's first item\n     */\n    onHomeKeyDown() {\n        this.target.navigateFirst();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IgxDropDownComponent } from './drop-down.component';\nimport { IgxDropDownItemComponent } from './drop-down-item.component';\nimport { IgxDropDownItemNavigationDirective } from './drop-down-navigation.directive';\nimport { CommonModule } from '@angular/common';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxDropDownGroupComponent } from './drop-down-group.component';\n\nexport * from './drop-down.component';\nexport * from './drop-down-item.component';\nexport { ISelectionEventArgs, IDropDownNavigationDirective,  } from './drop-down.common';\nexport * from './drop-down-navigation.directive';\nexport * from './drop-down.base';\nexport * from './drop-down-item.base';\nexport * from './drop-down-group.component';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDropDownComponent, IgxDropDownItemComponent, IgxDropDownGroupComponent, IgxDropDownItemNavigationDirective],\n    exports: [IgxDropDownComponent, IgxDropDownItemComponent, IgxDropDownGroupComponent, IgxDropDownItemNavigationDirective],\n    imports: [CommonModule, IgxToggleModule],\n    providers: [IgxSelectionAPIService]\n})\nexport class IgxDropDownModule { }\n","import { Directive, ElementRef, HostBinding, Input, OnInit } from '@angular/core';\n\nenum IgxHintPosition {\n    START,\n    END\n}\n\n@Directive({\n    selector: 'igx-hint,[igxHint]'\n})\nexport class IgxHintDirective implements OnInit {\n    private _position: IgxHintPosition = IgxHintPosition.START;\n    /**\n     * Sets/gets whether the hint position is at the start.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionStart = true;\n     * ```\n     * ```typescript\n     * let isHintPositionStart = this.igxHint.isPositionStart;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--start')\n    public isPositionStart = false;\n    /**\n     * Sets/gets whether the hint position is at the end.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionEnd = true;\n     * ```\n     * ```typescript\n     * let isHintPositionEnd = this.igxHint.isPositionEnd;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--end')\n    public isPositionEnd = false;\n\n    constructor(private _element: ElementRef) {\n    }\n    /**\n     * Sets the position of the hint.\n     * ```html\n     * <igx-input-group>\n     *  <input igxInput type=\"text\"/>\n     *  <igx-hint #hint [position]=\"'start'\">IgxHint displayed at the start</igx-hint>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @Input('position')\n    set position(value: string) {\n        const position: IgxHintPosition = (IgxHintPosition as any)[value.toUpperCase()];\n        if (position !== undefined) {\n            this._position = position;\n            this._applyPosition(this._position);\n        }\n    }\n    /**\n     * Gets the position of the hint.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * let hintPosition =  this.igxHint.position;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    get position() {\n        return this._position.toString();\n    }\n    /**\n     *@hidden\n     */\n    ngOnInit() {\n        this._applyPosition(this._position);\n    }\n\n    private _applyPosition(position: IgxHintPosition) {\n        this.isPositionStart = this.isPositionEnd = false;\n        switch (position) {\n            case IgxHintPosition.START:\n                this.isPositionStart = true;\n                break;\n            case IgxHintPosition.END:\n                this.isPositionEnd = true;\n                break;\n            default: break;\n        }\n    }\n}\n","/** @hidden */\nexport abstract class IgxInputGroupBase {\n    disabled: boolean;\n    isFocused: boolean;\n    isRequired: boolean;\n    hasPlaceholder: boolean;\n}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Self\n} from '@angular/core';\nimport { AbstractControl, FormControlName, NgControl, NgModel } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { IgxInputGroupBase } from '../../input-group/input-group.common';\n\nconst nativeValidationAttributes = ['required', 'pattern', 'minlength', 'maxlength', 'min', 'max', 'step'];\n\nexport enum IgxInputState {\n    INITIAL,\n    VALID,\n    INVALID\n}\n\n@Directive({\n    selector: '[igxInput]',\n    exportAs: 'igxInput'\n})\nexport class IgxInputDirective implements AfterViewInit, OnDestroy {\n    private _valid = IgxInputState.INITIAL;\n    private _statusChanges$: Subscription;\n\n    constructor(\n        public inputGroup: IgxInputGroupBase,\n        @Optional() @Self() @Inject(NgModel) protected ngModel: NgModel,\n        @Optional() @Self() @Inject(FormControlName) protected formControl: FormControlName,\n        protected element: ElementRef,\n        protected cdr: ChangeDetectorRef) { }\n\n    private get ngControl(): NgControl {\n        return this.ngModel ? this.ngModel : this.formControl;\n    }\n    /**\n     * Sets the `value` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [value]=\"'IgxInput Value'\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input('value')\n    set value(value: any) {\n        this.nativeElement.value = value;\n        this.checkValidity();\n    }\n    /**\n     * Gets the `value` propery.\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let inputValue = this.igxInput.value;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    get value() {\n        return this.nativeElement.value;\n    }\n    /**\n     * Sets the `disabled` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [disabled]=\"true\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input()\n    public set disabled(value: boolean) {\n        this.nativeElement.disabled = value;\n        this.inputGroup.disabled = value;\n    }\n    /**\n     * Gets the `disabled` property\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let isDisabled = this.igxInput.disabled;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get disabled() {\n        return this.nativeElement.hasAttribute('disabled');\n    }\n\n    /**\n     * Sets the `required` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [required]=\"true\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input()\n    public set required(value: boolean) {\n        if (typeof value === 'boolean') {\n            this.nativeElement.required = this.inputGroup.isRequired = value;\n\n            if (value && !this.nativeElement.checkValidity()) {\n                this._valid = IgxInputState.INVALID;\n            } else {\n                this._valid = IgxInputState.INITIAL;\n            }\n        }\n    }\n\n    /**\n     * Gets whether the igxInput is required.\n     * ```typescript\n     * let isRequired = this.igxInput.required;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get required() {\n        return this.nativeElement.hasAttribute('required');\n    }\n\n    /**\n     * Sets/gets whether the `\"igx-input-group__input\"` class is added to the host element.\n     * Default value is `false`.\n     * ```typescript\n     * this.igxInput.isInput = true;\n     * ```\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isInput;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @HostBinding('class.igx-input-group__input')\n    public isInput = false;\n    /**\n     * Sets/gets whether the `\"class.igx-input-group__textarea\"` class is added to the host element.\n     * Default value is `false`.\n     * ```typescript\n     * this.igxInput.isTextArea = true;\n     * ```\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isTextArea;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @HostBinding('class.igx-input-group__textarea')\n    public isTextArea = false;\n    /**\n     *@hidden\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event) {\n        this.inputGroup.isFocused = true;\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('blur', ['$event'])\n    public onBlur(event) {\n        this.inputGroup.isFocused = false;\n        this._valid = IgxInputState.INITIAL;\n        if (this.ngControl) {\n            if (!this.ngControl.valid) {\n                this._valid = IgxInputState.INVALID;\n            }\n        } else if (this._hasValidators() && !this.nativeElement.checkValidity()) {\n            this._valid = IgxInputState.INVALID;\n        }\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('input')\n    public onInput() {\n        this.checkValidity();\n    }\n    /**\n     *@hidden\n     */\n    ngAfterViewInit() {\n        this.inputGroup.hasPlaceholder = this.nativeElement.hasAttribute('placeholder');\n        this.inputGroup.disabled = this.inputGroup.disabled || this.nativeElement.hasAttribute('disabled');\n        this.inputGroup.isRequired = this.nativeElement.hasAttribute('required');\n\n        // Make sure we do not invalidate the input on init\n        if (!this.ngControl) {\n            this._valid = IgxInputState.INITIAL;\n        }\n        // Also check the control's validators for required\n        if (!this.inputGroup.isRequired && this.ngControl && this.ngControl.control.validator) {\n            const validation = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = validation && validation.required;\n        }\n\n\n        const elTag = this.nativeElement.tagName.toLowerCase();\n        if (elTag === 'textarea') {\n            this.isTextArea = true;\n        } else {\n            this.isInput = true;\n        }\n\n        if (this.ngControl) {\n            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n        }\n\n        this.cdr.detectChanges();\n    }\n    /**\n     *@hidden\n     */\n    ngOnDestroy() {\n        if (this._statusChanges$) {\n            this._statusChanges$.unsubscribe();\n        }\n    }\n    /**\n     * Sets a focus on the igxInput.\n     * ```typescript\n     * this.igxInput.focus();\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public focus() {\n        this.nativeElement.focus();\n    }\n    /**\n     * Gets the `nativeElement` of the igxInput.\n     * ```typescript\n     * let igxInputNativeElement = this.igxInput.nativeElement;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    protected onStatusChanged() {\n        if (this.ngControl.control.validator || this.ngControl.control.asyncValidator) {\n            if (this.ngControl.control.touched || this.ngControl.control.dirty) {\n                if (this.inputGroup.isFocused) {\n                    // the user is still typing in the control\n                    this._valid = this.ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n                } else {\n                    // the user had touched the control previosly but now the value is changing due to changes in the form\n                    this._valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n                }\n            } else if (this._valid !== IgxInputState.INITIAL) {\n                this._valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n            } else if (this._valid === IgxInputState.INITIAL && this.ngControl.value !== undefined && this.ngControl.invalid) {\n                this._valid = IgxInputState.INVALID;\n            }\n        }\n    }\n    /**\n     * Gets whether the igxInput has a placeholder.\n     * ```typescript\n     * let hasPlaceholder = this.igxInput.hasPlaceholder;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get hasPlaceholder() {\n        return this.nativeElement.hasAttribute('placeholder');\n    }\n    /**\n     * Gets the placeholder element of the igxInput.\n     * ```typescript\n     * let igxInputPlaceholder = this.igxInput.placeholder;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get placeholder() {\n        return this.nativeElement.placeholder;\n    }\n\n    private _hasValidators(): boolean {\n        for (const nativeValidationAttribute of nativeValidationAttributes) {\n            if (this.nativeElement.hasAttribute(nativeValidationAttribute)) {\n                return true;\n            }\n        }\n\n        return !!this.ngControl && (!!this.ngControl.control.validator || !!this.ngControl.control.asyncValidator);\n    }\n    /**\n     * Gets whether the igxInput is focused.\n     * ```typescript\n     * let isFocused = this.igxInput.focused;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get focused() {\n        return this.inputGroup.isFocused;\n    }\n    /**\n     * Gets the state of the igxInput.\n     * ```typescript\n     * let igxInputState = this.igxInput.valid;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get valid(): IgxInputState {\n        return this._valid;\n    }\n\n    /**\n     * Gets whether the igxInput is valid.\n     * ```typescript\n     * let valid = this.igxInput.isValid;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get isValid(): boolean {\n        return this.valid !== IgxInputState.INVALID;\n    }\n\n    /**\n     * Sets the state of the igxInput.\n     * ```typescript\n     * this.igxInput.valid = IgxInputState.INVALID;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public set valid(value: IgxInputState) {\n        this._valid = value;\n    }\n\n    private checkValidity() {\n        if (!this.ngControl && this._hasValidators()) {\n            this._valid = this.nativeElement.checkValidity() ? IgxInputState.VALID : IgxInputState.INVALID;\n        }\n    }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\n\nlet NEXT_ID = 0;\n\n@Directive({\n    selector: '[igxLabel]'\n})\nexport class IgxLabelDirective {\n    @HostBinding('class.igx-input-group__label')\n    public defaultClass = true;\n\n/**\n * @hidden\n */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-label-${NEXT_ID++}`;\n}\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-prefix,[igxPrefix]'\n})\nexport class IgxPrefixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxPrefixDirective],\n    exports: [IgxPrefixDirective]\n})\nexport class IgxPrefixModule { }\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-suffix,[igxSuffix]'\n})\nexport class IgxSuffixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSuffixDirective],\n    exports: [IgxSuffixDirective]\n})\nexport class IgxSuffixModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    QueryList,\n    Inject,\n    Optional\n} from '@angular/core';\nimport { IgxHintDirective } from '../directives/hint/hint.directive';\nimport { IgxInputDirective, IgxInputState } from '../directives/input/input.directive';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { IgxPrefixDirective, IgxPrefixModule} from '../directives/prefix/prefix.directive';\nimport { IgxSuffixDirective, IgxSuffixModule } from '../directives/suffix/suffix.directive';\nimport { DisplayDensity, IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport { IgxInputGroupBase } from './input-group.common';\n\nlet NEXT_ID = 0;\n\nenum IgxInputGroupType {\n    LINE,\n    BOX,\n    BORDER,\n    SEARCH\n}\n\n@Component({\n    selector: 'igx-input-group',\n    templateUrl: 'input-group.component.html',\n    providers: [{ provide: IgxInputGroupBase, useExisting: IgxInputGroupComponent }]\n})\nexport class IgxInputGroupComponent extends DisplayDensityBase implements IgxInputGroupBase {\n    private _type = IgxInputGroupType.LINE;\n    private _filled = false;\n    private _supressInputAutofocus = false;\n\n    /**\n     * An ElementRef property of the `IgxInputGroupComponent`.\n     */\n    public element: ElementRef;\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-input-group [id]=\"'igx-input-group-55'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-input-group-${NEXT_ID++}`;\n\n    /**\n     * Property that enables/disables the autogenerated class of the `IgxInputGroupComponent`.\n     * By default applied the class is applied.\n     *```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *this.inputGroup.defaultClass = false;\n     *```\n     *}\n     */\n    @HostBinding('class.igx-input-group')\n    public defaultClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--placeholder')\n    public hasPlaceholder = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--required')\n    public isRequired = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--focused')\n    public isFocused = false;\n\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--box')\n    public isBox = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--border')\n    public isBorder = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--search')\n    public isSearch = false;\n\n    /**\n     * An @Input property that disables the `IgxInputGroupComponent`.\n     * ```html\n     * <igx-input-group [disabled]=\"'true'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('class.igx-input-group--disabled')\n    @Input()\n    public disabled = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--valid')\n    public get validClass(): boolean {\n        return this.input.valid === IgxInputState.VALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--invalid')\n    public get invalidClass(): boolean {\n        return this.input.valid === IgxInputState.INVALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--warning')\n    public hasWarning = false;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxHintDirective, { read: IgxHintDirective })\n    protected hints: QueryList<IgxHintDirective>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxInputDirective, { read: IgxInputDirective })\n    protected input: IgxInputDirective;\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (!this._supressInputAutofocus) {\n            this.input.focus();\n        }\n    }\n\n    /**\n     * An @Input property that sets how the input will be styled.\n     * The allowed values are `line`, `box`, `border` and `search`. The default is `line`.\n     * ```html\n     *<igx-input-group [type]=\"'search'\">\n     * ```\n     */\n    @Input('type')\n    set type(value: string) {\n        const type: IgxInputGroupType = (IgxInputGroupType as any)[value.toUpperCase()];\n        if (type !== undefined) {\n            this.isBox = this.isBorder = this.isSearch = false;\n            switch (type) {\n                case IgxInputGroupType.BOX:\n                    this.isBox = true;\n                    break;\n                case IgxInputGroupType.BORDER:\n                    this.isBorder = true;\n                    break;\n                case IgxInputGroupType.SEARCH:\n                    this.isSearch = true;\n                    break;\n                default: break;\n            }\n\n            this._type = type;\n        }\n    }\n\n    /**\n     * Returns whether the input element of the input group will be automatically focused on click.\n     * ```typescript\n     * let supressInputAutofocus = this.inputGroup.supressInputAutofocus;\n     * ```\n     */\n    @Input()\n    public get supressInputAutofocus(): boolean {\n        return this._supressInputAutofocus;\n    }\n\n    /**\n     * Sets whether the input element of the input group will be automatically focused on click.\n     * ```html\n     * <igx-input-group [supressInputAutofocus]=\"true\"></igx-input-group>\n     * ```\n     */\n    public set supressInputAutofocus(value: boolean) {\n        this._supressInputAutofocus = value;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--filled')\n    get isFilled() {\n        return this._filled || (this.input && this.input.value);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--cosy')\n    get isDisplayDensityCosy() {\n        return this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--comfortable')\n    get isDisplayDensityComfortable() {\n        return this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--compact')\n    get isDisplayDensityCompact() {\n        return this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * Returns the type of the `IgxInputGroupComponent`. How the input is styled.\n     * Values are `line` - 0, `box` - 1, `border` - 2  and `search` - 3. The default is `line`.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputType = this.inputGroup.type;\n     *}\n     * ```\n     */\n    get type() {\n        return this._type.toString();\n    }\n\n    constructor(private _element: ElementRef,\n        @Optional() @Inject(DisplayDensityToken) private _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n        this.element = _element;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` has hints.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputHints = this.inputGroup.hasHints;\n     *}\n     * ```\n     */\n    get hasHints() {\n        return this.hints.length > 0;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` has border.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputBroder = this.inputGroup.hasBorder;\n     *}\n     * ```\n     */\n    get hasBorder() {\n        return this._type === IgxInputGroupType.LINE ||\n            this._type === IgxInputGroupType.BOX;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is line.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeLine = this.inputGroup.isTypeLine;\n     *}\n     * ```\n     */\n    public get isTypeLine(): boolean {\n        return  this._type === IgxInputGroupType.LINE;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is box.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBox = this.inputGroup.isTypeBox;\n     *}\n     *```\n     */\n    get isTypeBox() {\n        return this._type === IgxInputGroupType.BOX;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is border.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBorder = this.inputGroup.isTypeBorder;\n     *}\n     * ```\n     */\n    get isTypeBorder() {\n        return this._type === IgxInputGroupType.BORDER;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is search.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeSearch = this.inputGroup.isTypeSearch;\n     *}\n     * ```\n     */\n    get isTypeSearch() {\n        return  this._type === IgxInputGroupType.SEARCH;\n    }\n\n    get filled() {\n        return this._filled;\n    }\n\n    set filled(val) {\n        this._filled = val;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxInputGroupComponent, IgxHintDirective, IgxInputDirective, IgxLabelDirective],\n    exports: [IgxInputGroupComponent,  IgxHintDirective, IgxInputDirective, IgxLabelDirective, IgxPrefixDirective, IgxSuffixDirective],\n    imports: [CommonModule, IgxPrefixModule, IgxSuffixModule]\n})\nexport class IgxInputGroupModule { }\n","import {\n    Directive, Input, Self, Optional, Inject, HostBinding, Output, EventEmitter,\n    NgModule, ElementRef, HostListener, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { NgModel, FormControlName } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { first, takeUntil } from 'rxjs/operators';\nimport { CancelableEventArgs } from '../../core/utils';\nimport { OverlaySettings, AbsoluteScrollStrategy, IScrollStrategy, IPositionStrategy, AutoPositionStrategy } from '../../services/index';\nimport { IgxDropDownModule, IgxDropDownComponent, ISelectionEventArgs, IgxDropDownItemNavigationDirective } from '../../drop-down/index';\nimport { IgxInputGroupComponent } from '../../input-group/index';\nimport { IgxOverlayOutletDirective } from '../toggle/toggle.directive';\n\n/**\n * Interface that encapsulates onItemSelection event arguments - new value and cancel selection.\n * @export\n */\nexport interface AutocompleteItemSelectionEventArgs extends CancelableEventArgs {\n    /**\n     * New value selected from the drop down\n     */\n    value: string;\n}\n\nexport interface AutocompleteOverlaySettings {\n    /** Position strategy to use with this settings */\n    positionStrategy?: IPositionStrategy;\n    /** Scroll strategy to use with this settings */\n    scrollStrategy?: IScrollStrategy;\n    /** Set the outlet container to attach the overlay to */\n    outlet?: IgxOverlayOutletDirective | ElementRef;\n}\n\n/**\n * **Ignite UI for Angular Autocomplete** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/autocomplete.html)\n *\n * The igxAutocomplete directive provides a way to enhance a text input\n * by showing a drop down of suggested options, provided by the developer.\n *\n * Example:\n * ```html\n * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" />\n * <igx-drop-down #townsPanel>\n *     <igx-drop-down-item *ngFor=\"let town of towns | startsWith:townSelected\" [value]=\"town\">\n *         {{town}}\n *     </igx-drop-down-item>\n * </igx-drop-down>\n * ```\n */\n@Directive({\n    selector: '[igxAutocomplete]'\n})\nexport class IgxAutocompleteDirective extends IgxDropDownItemNavigationDirective implements OnDestroy {\n\n    constructor(@Self() @Optional() @Inject(NgModel) protected ngModel: NgModel,\n                @Self() @Optional() @Inject(FormControlName) protected formControl: FormControlName,\n                @Optional() protected group: IgxInputGroupComponent,\n                protected elementRef: ElementRef,\n                protected cdr: ChangeDetectorRef) {\n        super(null);\n    }\n\n    private defaultSettings: OverlaySettings = {\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new AutoPositionStrategy({ target: this.parentElement }),\n        excludePositionTarget: true\n    };\n\n    protected id: string;\n    protected dropDownOpened$ = new Subject<boolean>();\n    protected get model() {\n        return this.ngModel || this.formControl;\n    }\n\n    /** @hidden @internal */\n    get nativeElement(): HTMLInputElement {\n        return this.elementRef.nativeElement;\n    }\n\n    /** @hidden @internal */\n    get parentElement(): HTMLElement {\n        return this.group ? this.group.element.nativeElement : this.nativeElement;\n    }\n\n    private get settings(): OverlaySettings {\n        const settings = Object.assign({}, this.defaultSettings, this.autocompleteSettings);\n        if (!settings.positionStrategy.settings.target) {\n            const positionStrategyClone: IPositionStrategy = settings.positionStrategy.clone();\n            positionStrategyClone.settings.target = this.parentElement;\n            settings.positionStrategy = positionStrategyClone;\n        }\n        return settings;\n    }\n\n    /**\n     * Sets the target of the autocomplete directive\n     *\n     * ```html\n     * <!-- Set -->\n     * <input [igxAutocomplete]=\"dropdown\" />\n     * ...\n     * <igx-drop-down #dropdown>\n     * ...\n     * </igx-drop-down>\n     * ```\n     */\n    @Input('igxAutocomplete')\n    public target: IgxDropDownComponent;\n\n    /**\n     * Enables/disables autocomplete component\n     *\n     * ```typescript\n     * // get\n     * let disabled = this.autocomplete.disabled;\n     * ```\n     * ```html\n     * <!--set-->\n     * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" [igxAutocompleteDisabled]=\"disabled\"/>\n     * ```\n     * ```typescript\n     * // set\n     * public disabled = true;\n     * ```\n     */\n    @Input('igxAutocompleteDisabled')\n    public disabled = false;\n\n    /**\n     * Provide overlay settings for the autocomplete drop down\n     *\n     * ```typescript\n     * // get\n     * let settings = this.autocomplete.autocompleteSettings;\n     * ```\n     * ```html\n     * <!--set-->\n     * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" [igxAutocompleteSettings]=\"settings\"/>\n     * ```\n     * ```typescript\n     * // set\n     * this.settings = {\n     *  positionStrategy: new ConnectedPositioningStrategy({\n     *      closeAnimation: null,\n     *      openAnimation: null\n     *  })\n     * };\n     * ```\n     */\n    @Input('igxAutocompleteSettings')\n    autocompleteSettings: AutocompleteOverlaySettings;\n\n    /**\n     * Emitted after item from the drop down is selected\n     *\n     * ```html\n     * <input igxInput [igxAutocomplete]=\"townsPanel\" (onItemSelected)='itemSelected($event)' />\n     * ```\n     */\n    @Output()\n    onItemSelected = new EventEmitter<AutocompleteItemSelectionEventArgs>();\n\n    /** @hidden @internal */\n    @HostBinding('attr.autocomplete')\n    public autofill = 'off';\n\n    /** @hidden  @internal */\n    @HostBinding('attr.role')\n    public role = 'combobox';\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-expanded')\n    public get ariaExpanded() {\n        return !this.collapsed;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-haspopup')\n    public get hasPopUp() {\n        return 'listbox';\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-owns')\n    public get ariaOwns() {\n        return this.target.listId;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-activedescendant')\n    public get ariaActiveDescendant() {\n        return !this.target.collapsed && this.target.focusedItem ? this.target.focusedItem.id : null;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-autocomplete')\n    public get ariaAutocomplete() {\n        return 'list';\n    }\n\n    /** @hidden  @internal */\n    @HostListener('input', ['$event'])\n    onInput() {\n        this.open();\n    }\n\n    /** @hidden  @internal */\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    @HostListener('keydown.ArrowUp', ['$event'])\n    @HostListener('keydown.Alt.ArrowUp', ['$event'])\n    onArrowDown(event: Event) {\n        event.preventDefault();\n        this.open();\n    }\n\n    /** @hidden  @internal */\n    @HostListener('keydown.Tab', ['$event'])\n    @HostListener('keydown.Shift.Tab', [`$event`])\n    onTab() {\n        this.close();\n    }\n\n    /** @hidden  @internal */\n    handleKeyDown(event) {\n        if (!this.collapsed) {\n            switch (event.key.toLowerCase()) {\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                case 'home':\n                case 'end':\n                    return;\n                default:\n                    super.handleKeyDown(event);\n            }\n        }\n    }\n\n    /** @hidden  @internal */\n    onArrowDownKeyDown() {\n        super.onArrowDownKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onArrowUpKeyDown() {\n        super.onArrowUpKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onEndKeyDown() {\n        super.onEndKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onHomeKeyDown() {\n        super.onHomeKeyDown();\n    }\n\n    /**\n     * Closes autocomplete drop down\n     */\n    public close() {\n        if (this.collapsed) {\n            return;\n        }\n        this.target.close();\n        this.dropDownOpened$.next();\n    }\n\n    /**\n     * Opens autocomplete drop down\n     */\n    public open() {\n        if (this.disabled || !this.collapsed) {\n            return;\n        }\n        this.target.width = this.parentElement.clientWidth + 'px';\n        this.target.open(this.settings);\n        this.target.onSelection.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.select);\n        this.target.onOpened.pipe(first()).subscribe(this.highlightFirstItem);\n        this.target.children.changes.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.highlightFirstItem);\n    }\n\n    private get collapsed(): boolean {\n        return this.target ? this.target.collapsed : true;\n    }\n\n    private select = (value: ISelectionEventArgs) => {\n        if (!value.newSelection) {\n            return;\n        }\n        value.cancel = true; // Disable selection in the drop down, because in autocomplete we do not save selection.\n        const newValue = value.newSelection.value;\n        const args: AutocompleteItemSelectionEventArgs = { value: newValue, cancel: false };\n        this.onItemSelected.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        this.close();\n        this.nativeElement.focus();\n\n        // Update model after the input is re-focused, in order to have proper valid styling.\n        // Otherwise when item is selected using mouse (and input is blurred), then valid style will be removed.\n        this.model ? this.model.control.setValue(newValue) : this.nativeElement.value = newValue;\n    }\n\n    private highlightFirstItem = () => {\n        if (this.target.focusedItem) {\n            this.target.focusedItem.focused = false;\n            this.target.focusedItem = null;\n        }\n        this.target.navigateFirst();\n        this.cdr.detectChanges();\n    }\n\n    /** @hidden */\n    public ngOnDestroy() {\n        this.dropDownOpened$.complete();\n    }\n}\n\n/** @hidden */\n@NgModule({\n    imports: [IgxDropDownModule, CommonModule],\n    declarations: [IgxAutocompleteDirective],\n    exports: [IgxAutocompleteDirective]\n})\nexport class IgxAutocompleteModule { }\n","import { Directive, ElementRef, EventEmitter, HostBinding, Input, Output, NgModule, Renderer2, HostListener } from '@angular/core';\n\n@Directive({\n    selector: '[igxButton]'\n})\nexport class IgxButtonDirective {\n    /**\n     *@hidden\n     */\n    private _type = 'flat';\n    /**\n     *@hidden\n     */\n    private _cssClass = 'igx-button';\n    /**\n     *@hidden\n     */\n    private _color: string;\n    /**\n     *@hidden\n     */\n    private _label: string;\n    /**\n     *@hidden\n     */\n    private _backgroundColor: string;\n\n    constructor(public element: ElementRef, private _renderer: Renderer2) { }\n\n    /**\n     * Returns the underlying DOM element\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Called when the button is clicked\n     */\n    @Output()\n    public buttonClick = new EventEmitter<any>();\n\n    /**\n     * Sets/gets the `role` attribute.\n     * ```typescript\n     * this.button.role = 'navbutton';\n     * ```\n     * ```typescript\n     * let buttonRole =  this.button.role;\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @HostBinding('attr.role') public role = 'button';\n    /**\n     * Sets the type of the button.\n     * ```html\n     * <button  igxButton= \"icon\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButton') set type(value: string) {\n        this._type = value || this._type;\n        this._renderer.addClass(this.nativeElement, `${this._cssClass}--${this._type}`);\n    }\n    /**\n     * Sets the button text color.\n     * ```html\n     * <button igxButton=\"gradient\" igxButtonColor=\"blue\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButtonColor') set color(value: string) {\n        this._color = value || this.nativeElement.style.color;\n        this._renderer.setStyle(this.nativeElement, 'color', this._color);\n    }\n    /**\n     * Sets the background color of the button.\n     * ```html\n     * <button igxButton=\"raised\" igxButtonBackground=\"red\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButtonBackground') set background(value: string) {\n        this._backgroundColor = value || this._backgroundColor;\n        this._renderer.setStyle(this.nativeElement, 'background', this._backgroundColor);\n    }\n    /**\n     * Sets the `aria-label` attribute.\n     * ```html\n     * <button igxButton= \"flat\" igxLabel=\"Label\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxLabel') set label(value: string) {\n        this._label = value || this._label;\n        this._renderer.setAttribute(this.nativeElement, `aria-label`, this._label);\n    }\n    /**\n     * Enables/disables the button.\n     *  ```html\n     * <button igxButton= \"fab\" [disabled]=\"true\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input() set disabled(val) {\n        val = !!val;\n        if (val) {\n            this._renderer.addClass(this.nativeElement, `${this._cssClass}--disabled`);\n        } else {\n            this._renderer.removeClass(this.nativeElement, `${this._cssClass}--disabled`);\n        }\n    }\n\n    /**\n     * Gets or sets whether the button is selected.\n     * Mainly used in the IgxButtonGroup component and it will have no effect if set separately.\n     * ```html\n     * <button igxButton=\"flat\" [selected]=\"button.selected\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input() public selected = false;\n\n    /**\n     *@hidden\n     */\n    @HostListener('click',  ['$event'])\n    public onClick(ev) {\n        this.buttonClick.emit(ev);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxButtonDirective],\n    exports: [IgxButtonDirective]\n})\nexport class IgxButtonModule { }\n","import { Directive, HostBinding, NgModule, Input } from '@angular/core';\n\nexport enum IgxDividerType {\n    DEFAULT = 'default',\n    DASHED = 'dashed'\n}\n\nlet NEXT_ID = 0;\n\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-divider'\n})\nexport class IgxDividerDirective {\n    /**\n     * Sets/gets the `id` of the divider.\n     * If not set, `id` will have value `\"igx-divider-0\"`;\n     * ```html\n     * <igx-divider id=\"my-divider\"></igx-divider>\n     * ```\n     * ```typescript\n     * let dividerId =  this.divider.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-divider-${NEXT_ID++}`;\n\n\n    /**\n     * An @Input property that sets the value of the `inset` attribute.\n     * If not provided it will be set to `'0'`.\n     * ```html\n     * <igx-divider inset=\"16px\"></igx-divider>\n     * ```\n     */\n    @Input('inset')\n    private _inset = '0';\n\n    /**\n     * An @Input property that sets the value of `role` attribute.\n     * If not the default value of `separator` will be used.\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'separator';\n\n    /**\n     * Sets the type of the divider. The default value\n     * is `default`. The divider can also be `dashed`;\n     * ```html\n     * <igx-divider type=\"dashed\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider')\n    @Input()\n    public type: IgxDividerType | string = IgxDividerType.DEFAULT;\n\n    @HostBinding('class.igx-divider--dashed')\n    get isDashed() {\n        return this.type === IgxDividerType.DASHED;\n    }\n\n    /**\n     * An @Input that sets the `middle` attribute of the divider.\n     * If set to `true` and an `inset` value has been provided,\n     * the divider will start shrinking from both ends.\n     * ```html\n     * <igx-divider [middle]=\"true\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider--inset')\n    @Input()\n    public middle = false;\n\n    /**\n     * A getter that returns `true` if the type of the divider is `default`;\n     * ```typescript\n     * const isDefault = this.divider.isDefault;\n     * ```\n     */\n    get isDefault() {\n        return this.type === IgxDividerType.DEFAULT;\n    }\n\n    /**\n     * An @Input that sets the vertical attribute of the divider.\n     * ```html\n     * <igx-divider [vertical]=\"true\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider--vertical')\n    @Input()\n    public vertical = false;\n\n    /**\n     * Sets the inset of the divider from the side(s).\n     * If the divider attribute `middle` is set to `true`,\n     * it will inset the divider on both sides.\n     * ```typescript\n     * this.divider.inset = '32px';\n     * ```\n     */\n    @HostBinding('style.margin')\n    set inset(value: string) {\n        this._inset = value;\n    }\n\n    /**\n     * Gets the current divider inset in terms of\n     * margin representation as applied to the divider.\n     * ```typescript\n     * const inset = this.divider.inset;\n     * ```\n     */\n    get inset() {\n        const baseMargin = '0';\n\n        if (this.middle) {\n            if (this.vertical) {\n                return `${this._inset} ${baseMargin}`;\n            }\n            return `${baseMargin} ${this._inset}`;\n        } else {\n            if (this.vertical) {\n                return `${this._inset} ${baseMargin} 0 ${baseMargin}`;\n            }\n            return `${baseMargin} 0 ${baseMargin} ${this._inset}`;\n        }\n    }\n}\n\n@NgModule({\n    declarations: [IgxDividerDirective],\n    exports: [IgxDividerDirective]\n})\nexport class IgxDividerModule { }\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    ChangeDetectorRef\n} from '@angular/core';\nimport { animationFrameScheduler, fromEvent, interval, Subject } from 'rxjs';\nimport { takeUntil, throttle } from 'rxjs/operators';\n\nexport enum RestrictDrag {\n    VERTICALLY,\n    HORIZONTALLY,\n    NONE\n}\n\nexport class IgxDragCustomEventDetails {\n    startX: number;\n    startY: number;\n    pageX: number;\n    pageY: number;\n    owner: IgxDragDirective;\n    originalEvent: any;\n}\n\nexport class IgxDropEnterEventArgs {\n        /**\n     * Reference to the original event that caused the draggable element to enter the igxDrop element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: any;\n    /** The owner igxDrop directive that triggered this event. */\n    owner: IgxDropDirective;\n    /** The igxDrag directive instanced on an element that entered the area of the igxDrop element */\n    drag: IgxDragDirective;\n    /** The data contained for the draggable element in igxDrag directive. */\n    dragData: any;\n    /** The initial position of the pointer on X axis when the dragged element began moving */\n    startX: number;\n    /** The initial position of the pointer on Y axis when the dragged element began moving */\n    startY: number;\n    /**\n     * The current position of the pointer on X axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageX: number;\n    /**\n     * The current position of the pointer on Y axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageY: number;\n    /**\n     * The current position of the pointer on X axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetX: number;\n    /**\n     * The current position of the pointer on Y axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetY: number;\n}\n\nexport class IgxDropLeaveEventArgs {\n    /**\n     * Reference to the original event that caused the draggable element to enter the igxDrop element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: any;\n    /** The owner igxDrop directive that triggered this event. */\n    owner: IgxDropDirective;\n    /** The igxDrag directive instanced on an element that entered the area of the igxDrop element */\n    drag: IgxDragDirective;\n    /** The data contained for the draggable element in igxDrag directive. */\n    dragData: any;\n    /** The initial position of the pointer on X axis when the dragged element began moving */\n    startX: number;\n    /** The initial position of the pointer on Y axis when the dragged element began moving */\n    startY: number;\n    /**\n     * The current position of the pointer on X axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageX: number;\n        /**\n     * The current position of the pointer on Y axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageY: number;\n    /**\n     * The current position of the pointer on X axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetX: number;\n    /**\n     * The current position of the pointer on Y axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetY: number;\n}\n\nexport class IgxDropEventArgs {\n    /**\n     * Reference to the original event that caused the draggable element to enter the igxDrop element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: any;\n    /** The owner igxDrop directive that triggered this event. */\n    owner: IgxDropDirective;\n    /** The igxDrag directive instanced on an element that entered the area of the igxDrop element */\n    drag: IgxDragDirective;\n    /**\n     * The current position of the pointer on X axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetX: number;\n    /**\n     * The current position of the pointer on Y axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetY: number;\n    /**\n     * Whether the default drop behavior of the igxDrop directive should be canceled.\n     * Note: If you implement custom behavior and you use `animateOnRelease` for the igxDrag make sure to call 'event.drag.dropFinished();'\n     * to notify the igxDrag directive that it has been dropped so it animates properly.\n     */\n    cancel: boolean;\n}\n\nexport interface IDragBaseEventArgs {\n    /**\n     * Reference to the original event that caused the interaction with the element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: PointerEvent | MouseEvent | TouchEvent;\n    /** The owner igxDrag directive that triggered this event. */\n    owner: IgxDragDirective;\n}\nexport interface IDragStartEventArgs extends IDragBaseEventArgs {\n    /** Set if the the dragging should be canceled. */\n    cancel: boolean;\n}\n\n@Directive({\n    selector: '[igxDrag]'\n})\nexport class IgxDragDirective implements OnInit, OnDestroy {\n\n    /**\n     * - Save data inside the `igxDrag` directive. This can be set when instancing `igxDrag` on an element.\n     * ```html\n     * <div [igxDrag]=\"{ source: myElement }\"></div>\n     * ```\n     */\n    @Input('igxDrag')\n    public data: any;\n\n    /**\n     * An @Input property that indicates when the drag should start\n     * By default the drag starts after the draggable element is moved by 5px\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public dragTolerance = 5;\n\n    /**\n     * Sets a custom class that will be added to the `dragGhost` element.\n     * ```html\n     * <div igxDrag [ghostImageClass]=\"'dragGhost'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public ghostImageClass = '';\n\n    /**\n     * An @Input property that hides the draggable element.\n     * By default it's set to false.\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\" [hideBaseOnDrag]=\"'true'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public hideBaseOnDrag = false;\n\n    /**\n     * An @Input property that enables/disables the draggable element animation\n     * when the element is released.\n     * By default it's set to false.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public animateOnRelease = false;\n\n    /**\n     * An @Input property that sets the element to which the dragged element will be appended.\n     * By default it's set to null and the dragged element is appended to the body.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [dragGhostHost]=\"hostDiv\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public dragGhostHost = null;\n\n    /**\n     * Event triggered when the draggable element drag starts.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (dragStart)=\"onDragStart()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragStart(){\n     *      alert(\"The drag has stared!\");\n     * }\n     * ```\n     */\n    @Output()\n    public dragStart = new EventEmitter<IDragStartEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is released.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (dragEnd)=\"onDragEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragEnd(){\n     *      alert(\"The drag has ended!\");\n     * }\n     * ```\n     */\n    @Output()\n    public dragEnd = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered after the draggable element is released and after its animation has finished.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (returnMoveEnd)=\"onMoveEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onMoveEnd(){\n     *      alert(\"The move has ended!\");\n     * }\n     * ```\n     */\n    @Output()\n    public returnMoveEnd = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is clicked.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (dragClicked)=\"dragClicked()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public dragClicked(){\n     *      alert(\"The elemented has been clicked!\");\n     * }\n     * ```\n     */\n    @Output()\n    public dragClicked = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.touchAction')\n    public touch = 'none';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.transitionProperty')\n    public transitionProperty = 'top, left';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.visibility')\n    public _visibility = 'visible';\n\n    /**\n     * Sets the visibility of the draggable element.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     this.myDrag.visible = false;\n     * }\n     * ```\n     */\n    public set visible(bVisible) {\n        this._visibility = bVisible ? 'visible' : 'hidden';\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns the visibility state of the draggable element.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let dragVisibilty = this.myDrag.visible;\n     * }\n     * ```\n     */\n    public get visible() {\n        return this._visibility === 'visible';\n    }\n\n    /**\n     * @hidden\n     */\n    public set left(val: number) {\n        requestAnimationFrame(() => {\n            if (this._dragGhost) {\n                this._dragGhost.style.left = val + 'px';\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public get left() {\n        return parseInt(this._dragGhost.style.left, 10);\n    }\n\n    /**\n     * @hidden\n     */\n    public set top(val: number) {\n        requestAnimationFrame(() => {\n            if (this._dragGhost) {\n                this._dragGhost.style.top = val + 'px';\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public get top() {\n        return parseInt(this._dragGhost.style.top, 10);\n    }\n\n    /**\n     * Returns if the browser supports pointer events.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let pointerEvents = this.myDrag.pointerEventsEnabled;\n     * }\n     * ```\n     */\n    public get pointerEventsEnabled() {\n        return typeof PointerEvent !== 'undefined';\n    }\n\n    /**\n     * Returns if the browser supports touch events.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let touchEvents = this.myDrag.pointerEventsEnabled;\n     * }\n     * ```\n     */\n    public get touchEventsEnabled() {\n        return 'ontouchstart' in window;\n    }\n\n    /**\n     * @hidden\n     */\n    public defaultReturnDuration = '0.5s';\n\n    /**\n     * @hidden\n     */\n    protected _startX = 0;\n    /**\n     * @hidden\n     */\n    protected _startY = 0;\n\n    /**\n     * @hidden\n     */\n    protected _dragGhost;\n    /**\n     * @hidden\n     */\n    protected _dragStarted = false;\n    /**\n     * @hidden\n     */\n    protected _dragOffsetX;\n    /**\n     * @hidden\n     */\n    protected _dragOffsetY;\n    /**\n     * @hidden\n     */\n    protected _dragStartX;\n    /**\n     * @hidden\n     */\n    protected _dragStartY;\n    /**\n     * @hidden\n     */\n    protected _pointerDownId = null;\n\n    /**\n     * @hidden\n     */\n    protected _clicked = false;\n    /**\n     * @hidden\n     */\n    protected _lastDropArea = null;\n\n    /**\n     * @hidden\n     */\n    protected _destroy = new Subject<boolean>();\n\n    /**\n     * @hidden\n     */\n    protected _removeOnDestroy = true;\n\n    constructor(public cdr: ChangeDetectorRef, public element: ElementRef, public zone: NgZone, public renderer: Renderer2) {\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            if (this.pointerEventsEnabled) {\n                fromEvent(this.element.nativeElement, 'pointerdown').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onPointerDown(res));\n\n                fromEvent(this.element.nativeElement, 'pointermove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(this.element.nativeElement, 'pointerup').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            } else if (this.touchEventsEnabled) {\n                // We don't have pointer events and touch events. Use then mouse events.\n                fromEvent(this.element.nativeElement, 'touchstart').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onPointerDown(res));\n\n                fromEvent(document.defaultView, 'touchmove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'touchend').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            } else {\n                // We don't have pointer events and touch events. Use then mouse events.\n                fromEvent(this.element.nativeElement, 'mousedown').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onPointerDown(res));\n\n                fromEvent(document.defaultView, 'mousemove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n\n        if (this._dragGhost && this._removeOnDestroy) {\n            this._dragGhost.parentNode.removeChild(this._dragGhost);\n            this._dragGhost = null;\n        }\n    }\n\n    /**\n     * @hidden\n     * Method bound to the PointerDown event of the base element igxDrag is initialized.\n     * @param event PointerDown event captured\n     */\n    public onPointerDown(event) {\n        this._clicked = true;\n        this._pointerDownId = event.pointerId;\n\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n            this._startX = event.pageX;\n            this._startY = event.pageY;\n        } else if (this.touchEventsEnabled) {\n            this._startX = event.touches[0].pageX;\n            this._startY = event.touches[0].pageY;\n        }\n\n        // Take margins because getBoundingClientRect() doesn't include margins of the element\n        const marginTop = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-top'], 10);\n        const marginLeft = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-left'], 10);\n\n        this._dragOffsetX =\n            (this._startX - this.element.nativeElement.getBoundingClientRect().left - this.getWindowScrollLeft()) + marginLeft;\n        this._dragOffsetY =\n            (this._startY - this.element.nativeElement.getBoundingClientRect().top - this.getWindowScrollTop()) + marginTop;\n        this._dragStartX = this._startX - this._dragOffsetX;\n        this._dragStartY = this._startY - this._dragOffsetY;\n\n        // Set pointer capture so we detect pointermove even if mouse is out of bounds until dragGhost is created.\n        if (this.pointerEventsEnabled) {\n            this.element.nativeElement.setPointerCapture(this._pointerDownId);\n        } else {\n            this.element.nativeElement.focus();\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * @hidden\n     * Perfmorm drag move logic when dragging and dispatching events if there is igxDrop under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the dragGhost is rendered the pointerId is reassigned to the dragGhost. Then this method is bound to it.\n     * @param event PointerMove event captured\n     */\n    public onPointerMove(event) {\n        if (this._clicked) {\n            const dragStartArgs: IDragStartEventArgs = {\n                originalEvent: event,\n                owner: this,\n                cancel: false\n            };\n            let pageX, pageY;\n            if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n                // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n                pageX = event.pageX;\n                pageY = event.pageY;\n            } else if (this.touchEventsEnabled) {\n                pageX = event.touches[0].pageX;\n                pageY = event.touches[0].pageY;\n\n                // Prevent scrolling on touch while dragging\n                event.preventDefault();\n            }\n\n            const totalMovedX = pageX - this._startX;\n            const totalMovedY = pageY - this._startY;\n            if (!this._dragStarted &&\n                (Math.abs(totalMovedX) > this.dragTolerance || Math.abs(totalMovedY) > this.dragTolerance)) {\n                this.zone.run(() => {\n                    this.dragStart.emit(dragStartArgs);\n                });\n\n                if (!dragStartArgs.cancel) {\n                    this._dragStarted = true;\n                    // We moved enough so dragGhost can be rendered and actual dragging to start.\n                    this.createDragGhost(event);\n                }\n                return;\n            } else if (!this._dragStarted) {\n                return;\n            }\n\n            this.left = this._dragStartX + totalMovedX;\n            this.top = this._dragStartY + totalMovedY;\n\n            this.dispatchDragEvents(pageX, pageY, event);\n        }\n    }\n\n    /**\n     * @hidden\n     * Perform drag end logic when releasing the dragGhost and dispatchind drop event if igxDrop is under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the dragGhost is rendered the pointerId is reassigned to the dragGhost. Then this method is bound to it.\n     * @param event PointerUp event captured\n     */\n    public onPointerUp(event) {\n        if (!this._clicked) {\n            return;\n        }\n\n        const eventArgs = {\n            originalEvent: event,\n            owner: this\n        };\n        this._clicked = false;\n        if (this._dragStarted) {\n            if (this._lastDropArea && this._lastDropArea !== this.element.nativeElement) {\n                if (!this.animateOnRelease) {\n                    this.onTransitionEnd(null);\n                }\n\n                // dragging ended over a drop area. Call this after transition because onDrop might remove the element.\n                this.dispatchDropEvent(event.pageX, event.pageY, event);\n                // else the drop directive needs to call the dropFinished() method so the animation can perform\n            } else if (this.animateOnRelease &&\n                    (this.left !== Math.floor(this._dragStartX) || this.top !== Math.floor(this._dragStartY))) {\n                // If the start positions are the same as the current the transition will not execute.\n                // return the ghost to start position before removing it. See onTransitionEnd.\n                this._dragGhost.style.transitionDuration = this.defaultReturnDuration;\n                this.left = this._dragStartX;\n                this.top = this._dragStartY;\n            } else {\n                this.onTransitionEnd(null);\n            }\n\n            this.zone.run(() => {\n                this.dragEnd.emit(eventArgs);\n            });\n        } else {\n            this.zone.run(() => {\n                this.dragClicked.emit(eventArgs);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * Create dragGhost element - if a Node object is provided it creates a clone of that node,\n     * otherwise it clones the host element.\n     * Bind all needed events.\n     * @param event Pointer event required when the dragGhost is being initialized.\n     * @param node The Node object to be cloned.\n     */\n    protected createDragGhost(event, node: any = null) {\n        this._dragGhost = node ? node.cloneNode(true) : this.element.nativeElement.cloneNode(true);\n        this._dragGhost.style.transitionDuration = '0.0s';\n        this._dragGhost.style.position = 'absolute';\n        const hostLeft = this.dragGhostHost ? this.dragGhostHost.getBoundingClientRect().left : 0;\n        const hostTop = this.dragGhostHost ? this.dragGhostHost.getBoundingClientRect().top : 0;\n        this._dragGhost.style.top = this._dragStartY - hostTop + 'px';\n        this._dragGhost.style.left = this._dragStartX - hostLeft + 'px';\n\n        if (this.ghostImageClass) {\n            this.renderer.addClass(this._dragGhost, this.ghostImageClass);\n        }\n\n        if (this.dragGhostHost) {\n            this.dragGhostHost.appendChild(this._dragGhost);\n        } else {\n            document.body.appendChild(this._dragGhost);\n        }\n\n        if (this.pointerEventsEnabled) {\n            // The dragGhost takes control for moving and dragging after it has been shown.\n            this._dragGhost.setPointerCapture(this._pointerDownId);\n            this._dragGhost.addEventListener('pointermove', (args) => {\n                this.onPointerMove(args);\n            });\n            this._dragGhost.addEventListener('pointerup', (args) => {\n                this.onPointerUp(args);\n            });\n        }\n\n        if (this.animateOnRelease) {\n            // Transition animation when the dragGhost is released and it returns to it's original position.\n            this._dragGhost.addEventListener('transitionend', (args) => {\n                this.onTransitionEnd(args);\n            });\n        }\n\n        // Hide the base after the dragGhost is created, because otherwise the dragGhost will be not visible.\n        if (this.hideBaseOnDrag) {\n            this.visible = false;\n        }\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDragEnter/igxDragLeave events based on current pointer position and if drop area is under.\n     */\n    protected dispatchDragEvents(pageX: number, pageY: number, originalEvent) {\n        let topDropArea;\n        const eventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this,\n            originalEvent: originalEvent\n        };\n\n        const elementsFromPoint = this.getElementsAtPoint(pageX, pageY);\n        for (let i = 0; i < elementsFromPoint.length; i++) {\n            if (elementsFromPoint[i].getAttribute('droppable') === 'true' && elementsFromPoint[i] !== this._dragGhost) {\n                topDropArea = elementsFromPoint[i];\n                break;\n            }\n        }\n\n        if (topDropArea) {\n            this.dispatchEvent(topDropArea, 'igxDragOver', eventArgs);\n        }\n\n        if (topDropArea &&\n            (!this._lastDropArea || (this._lastDropArea && this._lastDropArea !== topDropArea))) {\n            if (this._lastDropArea) {\n                this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n            }\n\n            this._lastDropArea = topDropArea;\n            this.dispatchEvent(this._lastDropArea, 'igxDragEnter', eventArgs);\n        } else if (!topDropArea && this._lastDropArea) {\n            this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n            this._lastDropArea = null;\n        }\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDrop event based on current pointer position if there is last recorder drop area under the pointer.\n     * Last recorder drop area is updated in @dispatchDragEvents method.\n     */\n    protected dispatchDropEvent(pageX: number, pageY: number, originalEvent) {\n        const eventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this,\n            originalEvent: originalEvent\n        };\n\n        this.dispatchEvent(this._lastDropArea, 'igxDrop', eventArgs);\n        this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n        this._lastDropArea = null;\n    }\n\n    /**\n     * @hidden\n     * Update relative positions\n     */\n    public updateDragRelativePos() {\n        if (!this._dragGhost) {\n            return;\n        }\n\n        // Calculate the new dragGhost position to remain where the mouse is, so it doesn't jump\n        const totalDraggedX = this.left - this._dragStartX;\n        const totalDraggedY = this.top - this._dragStartY;\n        const newPosX = this.element.nativeElement.getBoundingClientRect().left;\n        const newPosY = this.element.nativeElement.getBoundingClientRect().top;\n        const diffStartX = this._dragStartX - newPosX;\n        const diffStartY = this._dragStartY - newPosY;\n        this.top = newPosX + totalDraggedX - diffStartX;\n        this.left = newPosY + totalDraggedY - diffStartY;\n    }\n\n    /**\n     * Informs the `igxDrag` directive that it has been dropped/released.\n     * This should usully be called when `animateOnRelease` is set to `true`.\n     * When canceling or defining custom drop logic this tells the igxDrag to update it's positions and\n     * animate correctly to the new position.\n     * ```typescript\n     * public onDropElem(event) {\n     *     // Function bound to the igxDrop directive event `onDrop`\n     *     // This cancels the default drop logic of the `igxDrop`\n     *     event.cancel = true;\n     *     event.drag.dropFinished();\n     * }\n     * ```\n     */\n    public dropFinished() {\n        if (this.animateOnRelease && this._dragGhost) {\n            this.updateDragRelativePos();\n\n            // Return the dragged element to the start. See onTransitionEnd next.\n            // Take margins becuase getBoundingClientRect() doesn't include margins\n            const marginTop = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-top'], 10);\n            const marginLeft = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-left'], 10);\n            const newPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n            const newPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n\n            this._dragGhost.style.transitionDuration = this.defaultReturnDuration;\n            this.left = newPosX - marginLeft;\n            this.top = newPosY - marginTop;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onTransitionEnd(event) {\n        if (this._dragStarted && !this._clicked) {\n            if (this.hideBaseOnDrag) {\n                this.visible = true;\n            }\n\n            this._dragGhost.parentNode.removeChild(this._dragGhost);\n            this._dragGhost = null;\n\n            this.element.nativeElement.style.transitionDuration = '0.0s';\n            this._dragStarted = false;\n            this.zone.run(() => {\n                this.returnMoveEnd.emit({\n                    originalEvent: event,\n                    owner: this\n                });\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElementsAtPoint(pageX: number, pageY: number) {\n        // correct the coordinates with the current scroll position, because\n        // document.elementsFromPoint conider position within the current viewport\n        // window.pageXOffset == window.scrollX; // always true\n        // using window.pageXOffset for IE9 compatibility\n        const viewPortX = pageX - window.pageXOffset;\n        const viewPortY = pageY - window.pageYOffset;\n        if (document['msElementsFromPoint']) {\n            // Edge and IE special snowflakes\n            return document['msElementsFromPoint'](viewPortX, viewPortY);\n        } else {\n            // Other browsers like Chrome, Firefox, Opera\n            return document.elementsFromPoint(viewPortX, viewPortY);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected dispatchEvent(target, eventName: string, eventArgs: IgxDragCustomEventDetails) {\n        // This way is IE11 compatible.\n        const dragLeaveEvent = document.createEvent('CustomEvent');\n        dragLeaveEvent.initCustomEvent(eventName, false, false, eventArgs);\n        target.dispatchEvent(dragLeaveEvent);\n        // Othersie can be used `target.dispatchEvent(new CustomEvent(eventName, eventArgs));`\n    }\n\n    protected getWindowScrollTop() {\n        return window.scrollY ? window.scrollY : (window.pageYOffset ? window.pageYOffset : 0);\n    }\n\n    protected getWindowScrollLeft() {\n        return window.scrollX ? window.scrollX : (window.pageXOffset ? window.pageXOffset : 0);\n    }\n}\n\n@Directive({\n    selector: '[igxDrop]'\n})\nexport class IgxDropDirective implements OnInit, OnDestroy {\n\n    /**\n     * - Save data inside the `igxDrop` directive. This can be set when instancing `igxDrop` on an element.\n     * ```html\n     * <div [igxDrop]=\"{ source: myElement }\"></div>\n     * ```\n     */\n    @Input('igxDrop')\n    public data: any;\n\n    /** Event triggered when dragged element enters the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (onEnter)=\"dragEnter()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragEnter(){\n     *     alert(\"A draggable elemente has entered the chip area!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onEnter = new EventEmitter<IgxDropEnterEventArgs>();\n\n    /** Event triggered when dragged element leaves the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (onLeave)=\"dragLeave()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragLeave(){\n     *     alert(\"A draggable elemente has left the chip area!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onLeave = new EventEmitter<IgxDropLeaveEventArgs>();\n\n    /** Event triggered when dragged element is dropped in the area of the element.\n     * Since the `igxDrop` has default logic that appends the dropped element as a child, it can be canceled here.\n     * To cancel the default logic the `cancel` property of the event needs to be set to true.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (onDrop)=\"dragDrop()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragDrop(){\n     *     alert(\"A draggable elemente has been dropped in the chip area!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onDrop = new EventEmitter<IgxDropEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.droppable')\n    public droppable = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.dragOver')\n    public dragover = false;\n\n    /**\n     * @hidden\n     */\n    protected _destroy = new Subject<boolean>();\n\n    constructor(public element: ElementRef, private _renderer: Renderer2, private _zone: NgZone) {\n    }\n\n    ngOnInit() {\n        this._zone.runOutsideAngular(() => {\n            fromEvent(this.element.nativeElement, 'igxDragEnter').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onDragEnter(res as CustomEvent<IgxDragCustomEventDetails>));\n\n            fromEvent(this.element.nativeElement, 'igxDragLeave').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragLeave(res));\n            fromEvent(this.element.nativeElement, 'igxDragOver').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragOver(res));\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragOver(event) { }\n\n    /**\n     * @hidden\n     */\n    public onDragEnter(event: CustomEvent<IgxDragCustomEventDetails>) {\n        this.dragover = true;\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IgxDropEnterEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n        this._zone.run(() => {\n            this.onEnter.emit(eventArgs);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragLeave(event) {\n        this.dragover = false;\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IgxDropLeaveEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n        this._zone.run(() => {\n            this.onLeave.emit(eventArgs);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('igxDrop', ['$event'])\n    public onDragDrop(event) {\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const args: IgxDropEventArgs = {\n            owner: this,\n            originalEvent: event.detail.originalEvent,\n            drag: event.detail.owner,\n            offsetX: offsetX,\n            offsetY: offsetY,\n            cancel: false\n        };\n        this._zone.run(() => {\n            this.onDrop.emit(args);\n        });\n\n        if (!args.cancel) {\n            // To do for generic scenario\n            this._renderer.removeChild(event.detail.owner.element.nativeElement.parentNode, event.detail.owner.element.nativeElement);\n            this._renderer.appendChild(this.element.nativeElement, event.detail.owner.element.nativeElement);\n\n            setTimeout(() => {\n                event.detail.owner.dropFinished();\n            }, 0);\n        }\n    }\n\n    protected getWindowScrollTop() {\n        return window.scrollY ? window.scrollY : (window.pageYOffset ? window.pageYOffset : 0);\n    }\n\n    protected getWindowScrollLeft() {\n        return window.scrollX ? window.scrollX : (window.pageXOffset ? window.pageXOffset : 0);\n    }\n}\n\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDragDirective, IgxDropDirective],\n    exports: [IgxDragDirective, IgxDropDirective]\n})\nexport class IgxDragDropModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    Output,\n    Pipe,\n    PipeTransform,\n    Renderer2,\n    SimpleChanges\n} from '@angular/core';\n\nexport class IgxFilterOptions {\n    // Input text value that will be used as a filtering pattern (matching condition is based on it)\n    public inputValue = '';\n\n    // Item property, which value should be used for filtering\n    public key: string;\n\n    // Represent items of the list. It should be used to handle decalaratevely defined widgets\n    public items: any[];\n\n    // Function - get value to be tested from the item\n    // item - single item of the list to be filtered\n    // key - property name of item, which value should be tested\n    // Default behavior - returns \"key\"- named property value of item if key si provided,\n    // otherwise textContent of the item's html element\n    public get_value(item: any, key: string): string {\n        let result = '';\n\n        if (key && item[key]) {\n            result = item[key].toString();\n        } else if (item.element) {\n            if (item.element.nativeElement) {\n                result = item.element.nativeElement.textContent.trim();\n            // Check if element doesn't return the DOM element directly\n            } else if (item.element.textContent) {\n                result = item.element.textContent.trim();\n            }\n        }\n\n        return result;\n    }\n\n    // Function - formats the original text before matching process\n    // Default behavior - returns text to lower case\n    public formatter(valueToTest: string): string {\n        return valueToTest.toLowerCase();\n    }\n\n    // Function - determines whether the item met the condition\n    // valueToTest - text value that should be tested\n    // inputValue - text value from input that condition is based on\n    // Default behavior - \"contains\"\n    public matchFn(valueToTest: string, inputValue: string): boolean {\n        return valueToTest.indexOf(inputValue && inputValue.toLowerCase() || '') > -1;\n    }\n\n    // Function - executed after matching test for every matched item\n    // Default behavior - shows the item\n    public metConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = false;\n        }\n    }\n\n    // Function - executed for every NOT matched item after matching test\n    // Default behavior - hides the item\n    public overdueConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = true;\n        }\n    }\n}\n\n\n@Directive({\n    selector: '[igxFilter]'\n})\nexport class IgxFilterDirective implements OnChanges {\n    @Output() public filtering = new EventEmitter(false); // synchronous event emitter\n    @Output() public filtered = new EventEmitter();\n\n    @Input('igxFilter') public filterOptions: IgxFilterOptions;\n\n    constructor(private element: ElementRef, renderer: Renderer2) {\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        // Detect only changes of input value\n        if (changes.filterOptions &&\n            changes.filterOptions.currentValue &&\n            changes.filterOptions.currentValue.inputValue !== undefined &&\n            changes.filterOptions.previousValue &&\n            changes.filterOptions.currentValue.inputValue !== changes.filterOptions.previousValue.inputValue) {\n            this.filter();\n        }\n    }\n\n    private filter() {\n        if (!this.filterOptions.items) {\n            return;\n        }\n\n        const args = { cancel: false, items: this.filterOptions.items };\n        this.filtering.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n\n        const pipe = new IgxFilterPipe();\n\n        const filtered = pipe.transform(this.filterOptions.items, this.filterOptions);\n        this.filtered.emit({ filteredItems: filtered });\n    }\n}\n\n@Pipe({\n    name: 'igxFilter',\n    pure: false\n})\n\nexport class IgxFilterPipe implements PipeTransform {\n    public transform(items: any[],\n                     // options - initial settings of filter functionality\n                     options: IgxFilterOptions) {\n\n        let result = [];\n\n        if (!items || !items.length || !options) {\n            return;\n        }\n\n        if (options.items) {\n            items = options.items;\n        }\n\n        result = items.filter((item: any) => {\n            const match = options.matchFn(options.formatter(options.get_value(item, options.key)), options.inputValue);\n\n            if (match) {\n                if (options.metConditionFn) {\n                    options.metConditionFn(item);\n                }\n            } else {\n                if (options.overdueConditionFn) {\n                    options.overdueConditionFn(item);\n                }\n            }\n\n            return match;\n        });\n\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFilterDirective, IgxFilterPipe],\n    exports: [IgxFilterDirective, IgxFilterPipe],\n    imports: [CommonModule]\n})\nexport class IgxFilterModule {\n}\n","import { Directive, ElementRef, Input, NgModule, Optional, Inject, Self } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { EditorProvider } from '../../core/edit-provider';\n\n@Directive({\n    exportAs: 'igxFocus',\n    selector: '[igxFocus]'\n})\nexport class IgxFocusDirective {\n\n    private focusState = true;\n    /**\n     * Returns the state of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let isFocusOn = this.igxFocus.focused;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    @Input('igxFocus')\n    get focused(): boolean {\n        return this.focusState;\n    }\n    /**\n     * Sets the state of the igxFocus.\n     * ```html\n     * <igx-input-group >\n     *  <input #focusContainer igxInput [igxFocus]=\"true\"/>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    set focused(val: boolean) {\n        this.focusState = val;\n        this.trigger();\n    }\n    /**\n     * Gets the native element of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let igxFocusNativeElement = this.igxFocus.nativeElement;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    get nativeElement() {\n        if (this.comp && this.comp[0] && this.comp[0].getEditElement) {\n            return (this.comp[0] as EditorProvider).getEditElement();\n        }\n        return this.element.nativeElement;\n    }\n\n    constructor(private element: ElementRef, @Inject(NG_VALUE_ACCESSOR) @Self() @Optional() private comp?: any[]) { }\n    /**\n     * Triggers the igxFocus state.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * this.igxFocus.trigger();\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    trigger() {\n        if (this.focusState) {\n            requestAnimationFrame(() => this.nativeElement.focus());\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFocusDirective],\n    exports: [IgxFocusDirective]\n})\nexport class IgxFocusModule { }\n","import {\n    ChangeDetectorRef,\n    Component,\n    HostBinding,\n    ViewChild,\n    ViewContainerRef\n} from '@angular/core';\n\n@Component({\n    selector: 'igx-display-container',\n    template: `\n        <ng-template\n            #display_container\n            igxScrollInertia\n            [IgxScrollInertiaScrollContainer]=\"scrollContainer\"\n            [IgxScrollInertiaDirection]=\"scrollDirection\">\n        </ng-template>\n    `\n})\nexport class DisplayContainerComponent {\n    @ViewChild('display_container', { read: ViewContainerRef })\n    public _vcr;\n\n    public scrollDirection: string;\n\n    @HostBinding('class')\n    public cssClass = 'igx-display-container';\n\n    @HostBinding('class.igx-display-container--inactive')\n    public notVirtual = true;\n\n    public scrollContainer;\n\n    constructor(public cdr: ChangeDetectorRef, public _viewContainer: ViewContainerRef) { }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef } from '@angular/core';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-horizontal-virtual-helper',\n    template: '<div #horizontal_container class=\"igx-vhelper__placeholder-content\" [style.width.px]=\"width\"></div>'\n})\nexport class HVirtualHelperComponent {\n    @ViewChild('horizontal_container', { read: ViewContainerRef }) public _vcr;\n    @Input() public width: number;\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--horizontal';\n\n    constructor(public elementRef: ElementRef) { }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef, ChangeDetectorRef, OnDestroy } from '@angular/core';\n\n@Component({\n    selector: 'igx-virtual-helper',\n    template: '<div #container class=\"igx-vhelper__placeholder-content\" [style.height.px]=\"height\"></div>'\n})\nexport class VirtualHelperComponent implements OnDestroy {\n    @HostBinding('scrollTop')\n    public scrollTop;\n\n    @ViewChild('container', { read: ViewContainerRef }) public _vcr;\n    @Input() public itemsLength: number;\n\n    public set height(value) {\n        if (this.destroyed) {\n            return;\n        }\n        this._height = value;\n        this.cdr.detectChanges();\n    }\n\n    public get height() {\n        return this._height;\n    }\n\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--vertical';\n\n    public destroyed;\n    private _height: number;\n\n    constructor(public elementRef: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    public ngOnDestroy() {\n        this.destroyed = true;\n    }\n\n}\n","import { Directive, Input, ElementRef, NgZone, OnInit, NgModule, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @hidden\n */\n@Directive({ selector: '[igxScrollInertia]' })\nexport class IgxScrollInertiaDirective implements OnInit, OnDestroy {\n\n    constructor(private element: ElementRef, private _zone: NgZone) {\n\n    }\n\n    @Input()\n    public IgxScrollInertiaDirection: string;\n\n    @Input()\n    public IgxScrollInertiaScrollContainer: any;\n\n    @Input()\n    public wheelStep = 50;\n\n    @Input()\n    public inertiaStep = 1.5;\n\n    @Input()\n    public swipeToleranceX = 20;\n\n    @Input()\n    public inertiaDeltaY = 3;\n\n    @Input()\n    public inertiaDeltaX = 2;\n\n    @Input()\n    public inertiaDuration = 0.5;\n\n    private _touchInertiaAnimID;\n    private _startX;\n    private _startY;\n    private _touchStartX;\n    private _touchStartY;\n    private _lastTouchEnd;\n    private _lastTouchX;\n    private _lastTouchY;\n    private _savedSpeedsX = [];\n    private _savedSpeedsY;\n    private _totalMovedX;\n    private _offsetRecorded;\n    private _offsetDirection;\n    private _touchPrevented;\n    private _lastMovedX;\n    private _lastMovedY;\n    private _gestureObject;\n    private setPointerCaptureFName = typeof Element.prototype['msSetPointerCapture'] === 'function' ?\n    'msSetPointerCapture' :\n    'setPointerCapture';\n    private releasePointerCaptureFName = typeof Element.prototype['msReleasePointerCapture'] === 'function' ?\n    'msReleasePointerCapture' :\n    'releasePointerCapture';\n    private _pointer;\n    private _nextX;\n    private _nextY;\n\n    ngOnInit(): void {\n        this._zone.runOutsideAngular(() => {\n            const targetElem = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n            targetElem.addEventListener('wheel',\n                    (evt) => { this.onWheel(evt); });\n            targetElem.addEventListener('touchstart',\n                    (evt) => { this.onTouchStart(evt); });\n            targetElem.addEventListener('touchmove',\n                    (evt) => { this.onTouchMove(evt); });\n            targetElem.addEventListener('touchend',\n                    (evt) => { this.onTouchEnd(evt); });\n            targetElem.addEventListener('pointerdown',\n                    (evt) => { this.onPointerDown(evt); });\n            targetElem.addEventListener('pointerup',\n                     (evt) => { this.onPointerUp(evt); });\n            targetElem.addEventListener('MSGestureStart',\n                    (evt) => { this.onMSGestureStart(evt); });\n            targetElem.addEventListener('MSGestureChange',\n                    (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n     /**\n     * @hidden\n     * Function that is called when scrolling with the mouse wheel or using touchpad\n     */\n    protected onWheel(evt) {\n        // if no scrollbar return\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        let scrollDeltaX;\n        let scrollDeltaY;\n        const scrollStep = this.wheelStep;\n        const minWheelStep = 1 / this.wheelStep;\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        if (evt.wheelDeltaX) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaX = -evt.wheelDeltaX / 120;\n\n            if (-minWheelStep < scrollDeltaX && scrollDeltaX < minWheelStep) {\n                scrollDeltaX = Math.sign(scrollDeltaX) * minWheelStep;\n            }\n        } else if (evt.deltaX) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            scrollDeltaX = this.calcAxisCoords(evt.deltaX, -1, 1);\n        }\n\n        /** Get delta for the Y axis*/\n        if (evt.wheelDeltaY) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaY = -evt.wheelDeltaY / 120;\n\n            if (-minWheelStep < scrollDeltaY && scrollDeltaY < minWheelStep) {\n                scrollDeltaY = Math.sign(scrollDeltaY) * minWheelStep;\n            }\n        } else if (evt.deltaY) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            scrollDeltaY = this.calcAxisCoords(evt.deltaY, -1, 1);\n        }\n        if (scrollDeltaX && this.IgxScrollInertiaDirection === 'horizontal') {\n            this._scrollToX(\n                this._startX + scrollDeltaX * scrollStep\n            );\n            const curScrollLeft = this.IgxScrollInertiaScrollContainer.scrollLeft;\n            const maxScrollLeft = parseInt(this.IgxScrollInertiaScrollContainer.children[0].style.width, 10);\n            if (0 < curScrollLeft && curScrollLeft < maxScrollLeft) {\n                // Prevent navigating through pages when scrolling on Mac\n                evt.preventDefault();\n            }\n        } else if (scrollDeltaY && this.IgxScrollInertiaDirection === 'vertical') {\n            this._scrollToY(\n                this._startY + scrollDeltaY * scrollStep\n            );\n            this.preventParentScroll(evt, true);\n        }\n    }\n\n    /**\n     * @hidden\n     * When there is still room to scroll up/down prevent the parent elements from scrolling too.\n     */\n    protected preventParentScroll(evt, preventDefault) {\n        const curScrollTop = this.IgxScrollInertiaScrollContainer.scrollTop;\n        const maxScrollTop = this.IgxScrollInertiaScrollContainer.children[0].scrollHeight -\n            this.IgxScrollInertiaScrollContainer.offsetHeight;\n        if (0 < curScrollTop && curScrollTop < maxScrollTop) {\n            if (preventDefault) {\n                 evt.preventDefault();\n            }\n            if (evt.stopPropagation) {\n                evt.stopPropagation();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called the first moment we start interacting with the content on a touch device\n     */\n    protected onTouchStart(event) {\n        if (typeof MSGesture === 'function' || !this.IgxScrollInertiaScrollContainer) {\n            return false;\n        }\n\n        // stops any current ongoing inertia\n        cancelAnimationFrame(this._touchInertiaAnimID);\n\n        const touch = event.touches[ 0 ];\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        this._touchStartX = touch.pageX;\n        this._touchStartY = touch.pageY;\n\n        this._lastTouchEnd = new Date().getTime();\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n        this._savedSpeedsX = [];\n        this._savedSpeedsY = [];\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n\n        this._touchPrevented = false;\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event, false);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to scroll the content based on touch interactions\n     */\n    protected onTouchMove(event) {\n        if (typeof MSGesture === 'function') {\n            this._touchPrevented = false;\n            return false;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n\n        const touch = event.touches[ 0 ];\n        const destX = this._startX + (this._touchStartX - touch.pageX) * Math.sign(this.inertiaStep);\n        const destY = this._startY + (this._touchStartY - touch.pageY) * Math.sign(this.inertiaStep);\n\n        /* Handle complex touchmoves when swipe stops but the toch doesn't end and then a swipe is initiated again */\n        /* **********************************************************/\n\n\n        const timeFromLastTouch = (new Date().getTime()) - this._lastTouchEnd;\n        if (timeFromLastTouch !== 0 && timeFromLastTouch < 100) {\n            const speedX = (this._lastTouchX - touch.pageX) / timeFromLastTouch;\n            const speedY = (this._lastTouchY - touch.pageY) / timeFromLastTouch;\n\n            // Save the last 5 speeds between two touchmoves on X axis\n            if (this._savedSpeedsX.length < 5) {\n                this._savedSpeedsX.push(speedX);\n            } else {\n                this._savedSpeedsX.shift();\n                this._savedSpeedsX.push(speedX);\n            }\n\n            // Save the last 5 speeds between two touchmoves on Y axis\n            if (this._savedSpeedsY.length < 5) {\n                this._savedSpeedsY.push(speedY);\n            } else {\n                this._savedSpeedsY.shift();\n                this._savedSpeedsY.push(speedY);\n            }\n        }\n        this._lastTouchEnd = new Date().getTime();\n        this._lastMovedX = this._lastTouchX - touch.pageX;\n        this._lastMovedY = this._lastTouchY - touch.pageY;\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n\n        this._totalMovedX += this._lastMovedX;\n\n        let scrolledXY; // Object: {x, y}\n        /*\tDo not scroll using touch untill out of the swipeToleranceX bounds */\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            scrolledXY = this._scrollTo(this._startX, destY);\n        } else {\n            /*\tRecord the direction the first time we are out of the swipeToleranceX bounds.\n\t\t\t*\tThat way we know which direction we apply the offset so it doesn't hickup when moving out of the swipeToleranceX bounds */\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n\n            /*\tScroll with offset ammout of swipeToleranceX in the direction we have exited the bounds and\n            don't change it after that ever until touchend and again touchstart */\n            scrolledXY = this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX,\n                destY);\n        }\n\n        if (scrolledXY.x === 0 && scrolledXY.y === 0) {\n            this._touchPrevented = true;\n        }\n\n        // On Safari preventing the touchmove would prevent default page scroll behaviour even if there is the element doesn't have overflow\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event, true);\n        }\n    }\n\n    protected onTouchEnd(event) {\n        if (typeof MSGesture === 'function') {\n            return;\n        }\n        let speedX = 0;\n        let speedY = 0;\n\n        // savedSpeedsX and savedSpeedsY have same length\n        for (let i = 0; i < this._savedSpeedsX.length; i++) {\n            speedX += this._savedSpeedsX[ i ];\n            speedY += this._savedSpeedsY[ i ];\n        }\n        speedX = this._savedSpeedsX.length ? speedX / this._savedSpeedsX.length : 0;\n        speedY = this._savedSpeedsX.length ? speedY / this._savedSpeedsY.length : 0;\n\n         // Use the lastMovedX and lastMovedY to determine if the swipe stops without lifting the finger so we don't start inertia\n        if ((Math.abs(speedX) > 0.1 || Math.abs(speedY) > 0.1) &&\n                        (Math.abs(this._lastMovedX) > 2 || Math.abs(this._lastMovedY) > 2)) {\n                    this._inertiaInit(speedX, speedY);\n        }\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event, false);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch starting on a touch device on IE/Edge\n     */\n    protected onPointerDown(event) {\n        if (!event || (event.pointerType !== 2 && event.pointerType !== 'touch') ||\n            typeof MSGesture !== 'function') {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        // setPointerCaptureFName is the name of the function that is supported\n        event.target[this.setPointerCaptureFName](this._pointer = event.pointerId);\n\n        // create gestureObject only one time to prevent overlapping during intertia\n        if (!this._gestureObject) {\n            this._gestureObject = new MSGesture();\n            this._gestureObject.target = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n        }\n        this._gestureObject.addPointer(this._pointer);\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch ending on a touch device on IE/Edge\n     */\n    protected onPointerUp(event) {\n        if (!this._pointer) {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        /* releasePointerCaptureFName is the name of the function that is supported */\n        event.target[ this.releasePointerCaptureFName ](this._pointer);\n\n        delete this._pointer;\n    }\n\n    /**\n     * @hidden\n     *  Function that is called when a gesture begins on IE/Edge\n     */\n    protected onMSGestureStart(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n\n        this._touchStartX = event.screenX;\n        this._touchStartY = event.screenY;\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n        return false;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when a we need to scroll based on the gesture performed on IE/Edge\n     */\n    protected onMSGestureChange(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        const touchPos = event,\n            destX = this._startX + this._touchStartX - touchPos.screenX,\n            destY = this._startY + this._touchStartY - touchPos.screenY;\n        /* Logic regarding x tolerance to prevent accidental horizontal scrolling when scrolling vertically */\n        this._totalMovedX = this._touchStartX - touchPos.screenX;\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            /* Do not scroll horizontally yet while in the tolerance range */\n            this._scrollToY(destY);\n        } else {\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n            /* Once the tolerance is exceeded it can be scrolled horizontally */\n            this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX, destY);\n        }\n\n        return false;\n    }\n\n    private calcAxisCoords(target, min, max) {\n        if (target === undefined || target < min) {\n            target = min;\n        } else if (target > max) {\n            target = max;\n        }\n\n        return target;\n    }\n\n    private _scrollTo(destX, destY) {\n        const curPosX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        const curPosY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n         // TODO Trigger scrolling event?\n        const scrolledX = this._scrollToX(destX);\n        const scrolledY = this._scrollToY(destY);\n\n        return { x: scrolledX, y: scrolledY };\n    }\n    private _scrollToX(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollLeft = dest;\n    }\n    private _scrollToY(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollTop = dest;\n    }\n\n   protected _inertiaInit(speedX, speedY) {\n    const stepModifer = this.inertiaStep,\n        inertiaDuration = this.inertiaDuration;\n    let x = 0;\n    this._nextX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n    this._nextY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n    // Sets timeout until executing next movement iteration of the inertia\n    const inertiaStep = () => {\n        if (x > 6) {\n            cancelAnimationFrame(this._touchInertiaAnimID);\n            return;\n        }\n\n        if (Math.abs(speedX) > Math.abs(speedY)) {\n            x += 0.05 / (1 * inertiaDuration);\n        } else {\n            x += 0.05 / (1 * inertiaDuration);\n        }\n\n        if (x <= 1) {\n            // We use constant quation to determine the offset without speed falloff befor x reaches 1\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += 1 * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += 1 * speedY * 15 * stepModifer;\n            }\n        } else {\n            // We use the quation \"y = 2 / (x + 0.55) - 0.3\" to determine the offset\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += Math.abs(2 / (x + 0.55) - 0.3) * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += Math.abs(2 / (x + 0.55) - 0.3) * speedY * 15 * stepModifer;\n            }\n        }\n\n        // If we have mixed environment we use the default behaviour. i.e. touchscreen + mouse\n        this._scrollTo(this._nextX, this._nextY);\n\n        this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n    };\n\n    // Start inertia and continue it recursively\n    this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n   }\n\n    ngOnDestroy() {\n        this._zone.runOutsideAngular(() => {\n            const targetElem = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n            targetElem.removeEventListener('wheel',\n                (evt) => { this.onWheel(evt); });\n            targetElem.removeEventListener('touchstart',\n                (evt) => { this.onTouchStart(evt); });\n            targetElem.removeEventListener('touchmove',\n                (evt) => { this.onTouchMove(evt); });\n            targetElem.removeEventListener('touchend',\n                (evt) => { this.onTouchEnd(evt); });\n            targetElem.removeEventListener('pointerdown',\n                (evt) => { this.onPointerDown(evt); });\n            targetElem.removeEventListener('pointerup',\n                (evt) => { this.onPointerUp(evt); });\n            targetElem.removeEventListener('MSGestureStart',\n                (evt) => { this.onMSGestureStart(evt); });\n            targetElem.removeEventListener('MSGestureChange',\n                (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxScrollInertiaDirective],\n    exports: [IgxScrollInertiaDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxScrollInertiaModule {\n}\n\n","import { Injectable } from '@angular/core';\nimport { IgxGridForOfDirective } from './for_of.directive';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxForOfSyncService {\n\n    private _master: Map<string, IgxGridForOfDirective<any>> = new Map<string, IgxGridForOfDirective<any>>();\n\n    /**\n     * @hidden\n     */\n    public isMaster(directive: IgxGridForOfDirective<any>): boolean {\n        return this._master.get(directive.igxForScrollOrientation) === directive;\n    }\n\n    /**\n     * @hidden\n     */\n    public setMaster(directive: IgxGridForOfDirective<any>, forced = false) {\n        const orientation = directive.igxForScrollOrientation;\n        if (orientation && (forced || !this._master.has(orientation))) {\n            this._master.set(orientation, directive);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public resetMaster() {\n        this._master.clear();\n    }\n\n    /**\n     * @hidden\n     */\n    public sizesCache(dir: string): number[] {\n        return this._master.get(dir).sizesCache;\n    }\n\n    /**\n     * @hidden\n     */\n    public chunkSize(dir: string): number {\n        return this._master.get(dir).state.chunkSize;\n    }\n}\n","import { CommonModule, NgForOfContext } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    Directive,\n    DoCheck,\n    EmbeddedViewRef,\n    EventEmitter,\n    Input,\n    IterableChanges,\n    IterableDiffer,\n    IterableDiffers,\n    NgModule,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    TrackByFunction,\n    ViewContainerRef,\n    ViewRef\n} from '@angular/core';\n\nimport { DisplayContainerComponent } from './display.container';\nimport { HVirtualHelperComponent } from './horizontal.virtual.helper.component';\nimport { VirtualHelperComponent } from './virtual.helper.component';\nimport { IgxScrollInertiaModule } from './../scroll-inertia/scroll_inertia.directive';\nimport { IgxForOfSyncService } from './for_of.sync.service';\n\n@Directive({ selector: '[igxFor][igxForOf]' })\nexport class IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck, OnDestroy {\n\n    /**\n     * An @Input property that sets the data to be rendered.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForOf: any[];\n\n    /**\n     * An @Input property that sets the property name from which to read the size in the data object.\n     */\n    @Input()\n    public igxForSizePropName;\n\n    /**\n     * An @Input property that specifies the scroll orientation.\n     * Scroll orientation can be \"vertical\" or \"horizontal\".\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollOrientation: string;\n\n    /**\n     * Optionally pass the parent `igxFor` instance to create a virtual template scrolling both horizontally and vertically.\n     * ```html\n     * <ng-template #scrollContainer igxFor let-rowData [igxForOf]=\"data\"\n     *       [igxForScrollOrientation]=\"'vertical'\"\n     *       [igxForContainerSize]=\"'500px'\"\n     *       [igxForItemSize]=\"'50px'\"\n     *       let-rowIndex=\"index\">\n     *       <div [style.display]=\"'flex'\" [style.height]=\"'50px'\">\n     *           <ng-template #childContainer igxFor let-item [igxForOf]=\"data\"\n     *               [igxForScrollOrientation]=\"'horizontal'\"\n     *               [igxForScrollContainer]=\"parentVirtDir\"\n     *               [igxForContainerSize]=\"'500px'\">\n     *                   <div [style.min-width]=\"'50px'\">{{rowIndex}} : {{item.text}}</div>\n     *           </ng-template>\n     *       </div>\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollContainer: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the container along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the container and for \"vertical\" is the height.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForContainerSize]=\"'500px'\"\n     *      [igxForScrollOrientation]=\"'horizontal'\">\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForContainerSize: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the item along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the column and for \"vertical\" is the height or the row.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" [igxForItemSize]=\"'50px'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForItemSize: any;\n\n    /**\n     * @hidden\n     */\n    public dc: ComponentRef<DisplayContainerComponent>;\n\n    /**\n     * The current state of the directive. It contains `startIndex` and `chunkSize`.\n     * state.startIndex - The index of the item at which the current visible chunk begins.\n     * state.chunkSize - The number of items the current visible chunk holds.\n     * These options can be used when implementing remote virtualization as they provide the necessary state information.\n     * ```typescript\n     * const gridState = this.parentVirtDir.state;\n     * ```\n     */\n    public state: IForOfState = {\n        startIndex: 0,\n        chunkSize: 0\n    };\n    /**\n     * The total count of the virtual data items, when using remote service.\n     * ```typescript\n     * this.parentVirtDir.totalItemCount = data.Count;\n     * ```\n     */\n    public totalItemCount: number = null;\n\n    /**\n     * An event that is emitted after a new chunk has been loaded.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkLoad)=\"chunkLoad($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkLoad(e){\n     * alert(\"chunk loaded!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * An event that is emitted after data has been changed.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onDataChanged)=\"dataChanged($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * dataChanged(e){\n     * alert(\"data changed!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onDataChanged = new EventEmitter<any>();\n\n    @Output()\n    public onBeforeViewDestroyed = new EventEmitter<EmbeddedViewRef<any>>();\n\n    /**\n     * An event that is emitted on chunk loading to emit the current state information - startIndex, endIndex, totalCount.\n     * Can be used for implementing remote load on demand for the igxFor data.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkPreload)=\"chunkPreload($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkPreload(e){\n     * alert(\"chunk is loading!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkPreload = new EventEmitter<IForOfState>();\n\n    protected hScroll;\n    protected func;\n    protected _sizesCache: number[] = [];\n    protected vh: ComponentRef<VirtualHelperComponent>;\n    protected hvh: ComponentRef<HVirtualHelperComponent>;\n    protected _differ: IterableDiffer<T> | null = null;\n    protected _trackByFn: TrackByFunction<T>;\n    protected heightCache = [];\n    private _adjustToIndex;\n    private MAX_PERF_SCROLL_DIFF = 4;\n\n    protected get sizesCache(): number[] {\n        return this._sizesCache;\n    }\n    protected set sizesCache(value: number[]) {\n        this._sizesCache = value;\n    }\n\n    private get _isScrolledToBottom() {\n        if (!this.getVerticalScroll()) {\n            return true;\n        }\n        const scrollHeight = this.getVerticalScroll().scrollHeight;\n        // Use === and not >= because `scrollTop + container size` can't be bigger than `scrollHeight`, unless something isn't updated.\n        // Also use Math.round because Chrome has some inconsistencies and `scrollTop + container` can be float when zooming the page.\n        return Math.round(this.scrollPosition + this.igxForContainerSize) === scrollHeight;\n    }\n\n    private get _isAtBottomIndex() {\n        return this.igxForOf && this.state.startIndex + this.state.chunkSize > this.igxForOf.length;\n    }\n\n    // Start properties related to virtual height handling due to browser limitation\n    /** Maximum height for an element of the browser. */\n    private _maxHeight;\n\n    /** Height that is being virtualized. */\n    protected _virtHeight = 0;\n\n    /**\n     * Ratio for height that's being virtualizaed and the one visible\n     * If _virtHeightRatio = 1, the visible height and the virtualized are the same, also _maxHeight > _virtHeight.\n     */\n    private _virtHeightRatio = 1;\n\n    /** Internal track for scroll top that is being virtualized */\n    protected _virtScrollTop = 0;\n\n    /** If the next onScroll event is triggered due to internal setting of scrollTop */\n    protected _bScrollInternal = false;\n    // End properties related to virtual height handling\n\n    /** caching scroll position reduces reflows */\n    protected _scrollPosition = 0;\n\n    protected _embeddedViews: Array<EmbeddedViewRef<any>> = [];\n\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        protected _template: TemplateRef<NgForOfContext<T>>,\n        protected _differs: IterableDiffers,\n        private resolver: ComponentFactoryResolver,\n        public cdr: ChangeDetectorRef,\n        protected _zone: NgZone) { }\n\n    /**\n     * @hidden\n     */\n    protected get isRemote(): boolean {\n        return this.totalItemCount !== null;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get scrollPosition(): number {\n        return this._scrollPosition;\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public set scrollPosition(val: number) {\n        this._scrollPosition = val;\n        if (this.igxForScrollOrientation === 'horizontal' && this.hScroll) {\n            this.hScroll.scrollLeft = val;\n        } else if (this.vh) {\n            this.vh.instance.elementRef.nativeElement.scrollTop = val;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected removeScrollEventListeners() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._zone.runOutsideAngular(() =>\n                this.getHorizontalScroll().removeEventListener('scroll', this.func)\n            );\n        } else {\n            const vertical = this.getVerticalScroll();\n            if (vertical) {\n                this._zone.runOutsideAngular(() =>\n                    vertical.removeEventListener('scroll', this.verticalScrollHandler)\n                );\n            }\n        }\n    }\n\n    public verticalScrollHandler(event) {\n        this.onScroll(event);\n    }\n\n    public isScrollable() {\n        return this.vh.instance.height > parseInt(this.igxForContainerSize, 10);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        let totalSize = 0;\n        const vc = this.igxForScrollContainer ? this.igxForScrollContainer._viewContainer : this._viewContainer;\n        this.igxForSizePropName = this.igxForSizePropName || 'width';\n\n        const dcFactory: ComponentFactory<DisplayContainerComponent> = this.resolver.resolveComponentFactory(DisplayContainerComponent);\n        this.dc = this._viewContainer.createComponent(dcFactory, 0);\n        this.dc.instance.scrollDirection = this.igxForScrollOrientation;\n        if (typeof MSGesture === 'function') {\n            // On Edge and IE when scrolling on touch the page scroll instead of the grid.\n            this.dc.instance._viewContainer.element.nativeElement.style.touchAction = 'none';\n        }\n        if (this.igxForOf && this.igxForOf.length) {\n            totalSize = this.initSizesCache(this.igxForOf);\n            this.hScroll = this.getElement(vc, 'igx-horizontal-virtual-helper');\n            this.state.chunkSize = this._calculateChunkSize();\n            this.dc.instance.notVirtual = !(this.igxForContainerSize && this.state.chunkSize < this.igxForOf.length);\n            if (this.hScroll) {\n                this._scrollPosition = this.hScroll.scrollLeft;\n                this.state.startIndex = Math.min(this.getIndexAt(this.scrollPosition, this.sizesCache, 0),\n                    this.igxForOf.length - this.state.chunkSize);\n            }\n            for (let i = this.state.startIndex; i < this.state.startIndex + this.state.chunkSize &&\n                    this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n                    this._template,\n                    { $implicit: input, index: this.igxForOf.indexOf(input) }\n                );\n                this._embeddedViews.push(embeddedView);\n            }\n        }\n\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n            const factory: ComponentFactory<VirtualHelperComponent> = this.resolver.resolveComponentFactory(VirtualHelperComponent);\n            this.vh = vc.createComponent(factory);\n\n            this._maxHeight = this._calcMaxBrowserHeight();\n            this.vh.instance.height = this.igxForOf ? this._calcHeight() : 0;\n            this._zone.runOutsideAngular(() => {\n                this.verticalScrollHandler = this.verticalScrollHandler.bind(this);\n                this.vh.instance.elementRef.nativeElement.addEventListener('scroll', this.verticalScrollHandler);\n                this.dc.instance.scrollContainer = this.vh.instance.elementRef.nativeElement;\n            });\n        }\n\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.func = (evt) => { this.onHScroll(evt); };\n            this.hScroll = this.getElement(vc, 'igx-horizontal-virtual-helper');\n            if (!this.hScroll) {\n                const hvFactory: ComponentFactory<HVirtualHelperComponent> =\n                    this.resolver.resolveComponentFactory(HVirtualHelperComponent);\n                this.hvh = vc.createComponent(hvFactory);\n                this.hvh.instance.width = totalSize;\n                this.hScroll = this.hvh.instance.elementRef.nativeElement;\n                this._zone.runOutsideAngular(() => {\n                    this.hvh.instance.elementRef.nativeElement.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.hScroll;\n                });\n            } else {\n                this._zone.runOutsideAngular(() => {\n                    this.hScroll.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.hScroll;\n                });\n            }\n            this._updateHScrollOffset();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.removeScrollEventListeners();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        const forOf = 'igxForOf';\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange && this.igxForScrollOrientation === 'vertical') {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    return;\n                }\n                this._updateSizeCache();\n                this._zone.run(() => {\n                    this._applyChanges();\n                    this.cdr.markForCheck();\n                    this._updateScrollOffset();\n                    this.onDataChanged.emit();\n                });\n            }\n        }\n    }\n\n    /**\n     * Shifts the scroll thumb position.\n     * ```typescript\n     * this.parentVirtDir.addScrollTop(5);\n     * ```\n     * @param addTop negative value to scroll up and positive to scroll down;\n     */\n    public addScrollTop(addTop: number): boolean {\n        if (addTop === 0 && this.igxForScrollOrientation === 'horizontal') {\n            return false;\n        }\n        const originalVirtScrollTop = this._virtScrollTop;\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxVirtScrollTop = this._virtHeight - containerSize;\n\n        this._bScrollInternal = true;\n        this._virtScrollTop += addTop;\n        this._virtScrollTop = this._virtScrollTop > 0 ?\n            (this._virtScrollTop < maxVirtScrollTop ? this._virtScrollTop : maxVirtScrollTop) :\n            0;\n\n        this.scrollPosition += addTop / this._virtHeightRatio;\n        if (Math.abs(addTop / this._virtHeightRatio) < 1) {\n            // Actual scroll delta that was added is smaller than 1 and onScroll handler doesn't trigger when scrolling < 1px\n            const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n            // scrollOffset = scrollOffset !== parseInt(this.igxForItemSize, 10) ? scrollOffset : 0;\n            this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n        }\n\n        const maxRealScrollTop = this.vh.instance.elementRef.nativeElement.scrollHeight - containerSize;\n        if ((this._virtScrollTop > 0 && this.scrollPosition === 0) ||\n            (this._virtScrollTop < maxVirtScrollTop && this.scrollPosition === maxRealScrollTop)) {\n            // Actual scroll position is at the top or bottom, but virtual one is not at the top or bottom (there's more to scroll)\n            // Recalculate actual scroll position based on the virtual scroll.\n            this.scrollPosition = this._virtScrollTop / this._virtHeightRatio;\n        } else if (this._virtScrollTop === 0 && this.scrollPosition > 0) {\n            // Actual scroll position is not at the top, but virtual scroll is. Just update the actual scroll\n            this.scrollPosition = 0;\n        } else if (this._virtScrollTop === maxVirtScrollTop && this.scrollPosition < maxRealScrollTop) {\n            // Actual scroll position is not at the bottom, but virtual scroll is. Just update the acual scroll\n            this.scrollPosition = maxRealScrollTop;\n        }\n        return this._virtScrollTop !== originalVirtScrollTop;\n    }\n\n    /**\n     * Scrolls to the specified index.\n     * ```typescript\n     * this.parentVirtDir.scrollTo(5);\n     * ```\n     * @param index\n     */\n    public scrollTo(index) {\n        if (index < 0 || index > (this.isRemote ? this.totalItemCount : this.igxForOf.length) - 1) {\n            return;\n        }\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const isPrevItem = index < this.state.startIndex || this.scrollPosition > this.sizesCache[index];\n        let nextScroll = isPrevItem ? this.sizesCache[index] : this.sizesCache[index + 1] - containerSize;\n        if (nextScroll < 0) {\n            return;\n        }\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.scrollPosition = nextScroll;\n        } else {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            if (nextScroll > maxVirtScrollTop) {\n                nextScroll = maxVirtScrollTop;\n            }\n            this._bScrollInternal = true;\n            this._virtScrollTop = nextScroll;\n            this.scrollPosition = this._virtScrollTop / this._virtHeightRatio;\n            this._adjustToIndex = !isPrevItem ? index : null;\n        }\n    }\n\n    /**\n     * Scrolls by one item into the appropriate next direction.\n     * For \"horizontal\" orientation that will be the right column and for \"vertical\" that is the lower row.\n     * ```typescript\n     * this.parentVirtDir.scrollNext();\n     * ```\n     */\n    public scrollNext() {\n        const scr = Math.ceil(this.scrollPosition);\n        const endIndex = this.getIndexAt(\n            scr + parseInt(this.igxForContainerSize, 10),\n            this.sizesCache,\n            0\n        );\n        this.scrollTo(endIndex);\n    }\n\n    /**\n     * Scrolls by one item into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be the left column and for \"vertical\" that is the upper row.\n     * ```typescript\n     * this.parentVirtDir.scrollPrev();\n     * ```\n     */\n    public scrollPrev() {\n        this.scrollTo(this.state.startIndex - 1);\n    }\n\n    /**\n     * Scrolls by one page into the appropriate next direction.\n     * For \"horizontal\" orientation that will be one view to the right and for \"vertical\" that is one view to the bottom.\n     * ```typescript\n     * this.parentVirtDir.scrollNextPage();\n     * ```\n     */\n    public scrollNextPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.scrollPosition += parseInt(this.igxForContainerSize, 10);\n        } else {\n            this.addScrollTop(parseInt(this.igxForContainerSize, 10));\n        }\n    }\n\n    /**\n     * Scrolls by one page into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be one view to the left and for \"vertical\" that is one view to the top.\n     * ```typescript\n     * this.parentVirtDir.scrollPrevPage();\n     * ```\n     */\n    public scrollPrevPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.scrollPosition -= parseInt(this.igxForContainerSize, 10);\n        } else {\n            const containerSize = (parseInt(this.igxForContainerSize, 10));\n            this.addScrollTop(-containerSize);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getColumnScrollLeft(colIndex) {\n        return this.sizesCache[colIndex];\n    }\n\n    /**\n     * Returns a reference to the vertical scrollbar DOM element.\n     * ```typescript\n     * this.parentVirtDir.getVerticalScroll();\n     * ```\n     */\n    public getVerticalScroll() {\n        if (this.vh) {\n            return this.vh.instance.elementRef.nativeElement;\n        }\n        return null;\n    }\n\n    /**\n     * Returns the total number of items that are fully visible.\n     * ```typescript\n     * this.parentVirtDir.getItemCountInView();\n     * ```\n     */\n    public getItemCountInView() {\n        let startIndex = this.getIndexAt(\n            this.scrollPosition,\n            this.sizesCache,\n            0\n        );\n        if (this.scrollPosition - this.sizesCache[startIndex] > 0) {\n            // fisrt item is not fully in view\n            startIndex++;\n        }\n        const endIndex = this.getIndexAt(\n            this.scrollPosition + parseInt(this.igxForContainerSize, 10),\n            this.sizesCache,\n            0\n        );\n        return endIndex - startIndex;\n    }\n\n    /**\n     * Returns a reference to the horizontal scrollbar DOM element.\n     * ```typescript\n     * this.parentVirtDir.getHorizontalScroll();\n     * ```\n     */\n    public getHorizontalScroll() {\n        return this.getElement(this._viewContainer, 'igx-horizontal-virtual-helper') || this.hScroll;\n    }\n\n    /**\n     * Returns the size of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getSizeAt(1);\n     * ```\n     */\n    public getSizeAt(index: number) {\n        return this.sizesCache[index + 1] - this.sizesCache[index];\n    }\n\n    /**\n     * Returns the scroll offset of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getScrollForIndex(1);\n     * ```\n     */\n    public getScrollForIndex(index: number, bottom?: boolean) {\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const scroll = bottom ? this.sizesCache[index + 1] - containerSize : this.sizesCache[index];\n        return scroll;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling vertically\n     */\n    protected onScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.vh.instance.elementRef.nativeElement.style.height, 10)) {\n            return;\n        }\n\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxRealScrollTop = event.target.children[0].scrollHeight - containerSize;\n        const realPercentScrolled = event.target.scrollTop / maxRealScrollTop;\n        if (!this._bScrollInternal) {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;\n        } else {\n            this._bScrollInternal = false;\n        }\n        this._scrollPosition = this._virtScrollTop;\n        const prevStartIndex = this.state.startIndex;\n        const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n\n        requestAnimationFrame(() => {\n            // check if height/width has changes in views.\n            this.recalcUpdateSizes();\n        });\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that recaculates and updates cache sizes.\n     */\n    public recalcUpdateSizes() {\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        const diffs = [];\n        let totalDiff = 0;\n        for (let i = 0; i < this._embeddedViews.length; i++) {\n            const view = this._embeddedViews[i];\n            const rNode = view.rootNodes.find((node) => node.nodeType === Node.ELEMENT_NODE);\n            if (rNode) {\n                const h = rNode.offsetHeight ? rNode.offsetHeight : parseInt(this.igxForItemSize, 10);\n                const index = this.state.startIndex + i;\n                if (!this.isRemote && !this.igxForOf[index]) {\n                    continue;\n                }\n                const oldVal = dimension === 'height' ? this.heightCache[index] : this.igxForOf[index][dimension];\n                const newVal = dimension === 'height' ? h : rNode.clientWidth;\n                if (dimension === 'height') {\n                    this.heightCache[index] = newVal;\n                } else {\n                    this.igxForOf[index][dimension] = newVal;\n                }\n                const currDiff = newVal - oldVal;\n                diffs.push(currDiff);\n                totalDiff += currDiff;\n                this.sizesCache[index + 1] += totalDiff;\n            }\n        }\n        // update cache\n        if (Math.abs(totalDiff) > 0) {\n            for (let j = this.state.startIndex + this.state.chunkSize + 1; j < this.sizesCache.length; j++) {\n                this.sizesCache[j] += totalDiff;\n            }\n\n            // update scrBar heights/widths\n            if (this.igxForScrollOrientation === 'horizontal') {\n                const totalWidth = parseInt(this.hScroll.children[0].style.width, 10) + totalDiff;\n                this.hScroll.children[0].style.width = totalWidth + 'px';\n            }\n            const reducer = (acc, val) => acc + val;\n            if (this.igxForScrollOrientation === 'vertical') {\n                const scrToBottom = this._isScrolledToBottom && !this.dc.instance.notVirtual;\n                const hSum = this.heightCache.reduce(reducer);\n                if (hSum > this._maxHeight) {\n                    this._virtHeightRatio = hSum / this._maxHeight;\n                }\n                this.vh.instance.height = Math.min(this.vh.instance.height + totalDiff, this._maxHeight);\n                this._virtHeight = hSum;\n                if (!this.vh.instance.destroyed) {\n                    this.vh.instance.cdr.detectChanges();\n                }\n                if (scrToBottom && !this._isAtBottomIndex) {\n                    const containerSize = parseInt(this.igxForContainerSize, 10);\n                    const maxVirtScrollTop = this._virtHeight - containerSize;\n                    this._bScrollInternal = true;\n                    this._virtScrollTop = maxVirtScrollTop;\n                    this.scrollPosition = maxVirtScrollTop;\n                    return;\n                }\n                if (this._adjustToIndex) {\n                    // in case scrolled to specific index where after scroll heights are changed\n                    // need to adjust the offsets so that item is last in view.\n                    const updatesToIndex = this._adjustToIndex - this.state.startIndex + 1;\n                    const sumDiffs = diffs.slice(0, updatesToIndex).reduce(reducer);\n                    const currOffset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n                    this.dc.instance._viewContainer.element.nativeElement.style.top = (currOffset - sumDiffs) + 'px';\n                    this._adjustToIndex = null;\n                }\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected fixedUpdateAllElements(inScrollTop: number): number {\n        const count = this.isRemote ? this.totalItemCount : this.igxForOf.length;\n        let newStart = this.getIndexAt(\n            inScrollTop,\n            this.sizesCache,\n            0\n        );\n        if (newStart + this.state.chunkSize > count) {\n            newStart = count - this.state.chunkSize;\n        }\n        const prevStart = this.state.startIndex;\n        const diff = newStart - this.state.startIndex;\n        this.state.startIndex = newStart;\n        if (diff) {\n            this.onChunkPreload.emit(this.state);\n            if (!this.isRemote) {\n                /*recalculate and apply page size.*/\n                if (diff > 0 && diff <= this.MAX_PERF_SCROLL_DIFF) {\n                    this.moveApplyScrollNext(prevStart);\n                } else if (diff < 0 && Math.abs(diff) <= this.MAX_PERF_SCROLL_DIFF) {\n                    this.moveApplyScrollPrev(prevStart);\n                } else {\n                    this.fixedApplyScroll();\n                }\n            }\n        }\n        return inScrollTop - this.sizesCache[this.state.startIndex];\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change for scrolling down/right employing context change with view rearrangement\n     */\n    protected moveApplyScrollNext(prevIndex: number): void {\n        const start = prevIndex + this.state.chunkSize;\n        for (let i = start; i < start + this.state.startIndex - prevIndex && this.igxForOf[i] !== undefined; i++) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews.shift();\n            const cntx = embView.context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            const view: ViewRef = this.dc.instance._vcr.detach(0);\n            this.dc.instance._vcr.insert(view);\n            this._embeddedViews.push(embView);\n        }\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change for scrolling up/left employing context change with view rearrangement\n     */\n    protected moveApplyScrollPrev(prevIndex: number): void {\n        for (let i = prevIndex - 1; i >= this.state.startIndex && this.igxForOf[i] !== undefined; i--) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews.pop();\n            const cntx = embView.context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            const view: ViewRef = this.dc.instance._vcr.detach(this.dc.instance._vcr.length - 1);\n            this.dc.instance._vcr.insert(view, 0);\n            this._embeddedViews.unshift(embView);\n        }\n    }\n\n    /**\n     * @hidden\n    */\n    protected getContextIndex(input) {\n        return this.isRemote ? this.state.startIndex + this.igxForOf.indexOf(input) : this.igxForOf.indexOf(input);\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change through context change for each view\n     */\n    protected fixedApplyScroll(): void {\n        let j = 0;\n        const endIndex = this.state.startIndex + this.state.chunkSize;\n        for (let i = this.state.startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews[j++];\n            const cntx = (embView as EmbeddedViewRef<any>).context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling horizontally\n     */\n    protected onHScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.hScroll.children[0].style.width, 10)) {\n            return;\n        }\n        this._scrollPosition = event.target.scrollLeft;\n        const prevStartIndex = this.state.startIndex;\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllElements(this._scrollPosition);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    /**\n     * Gets the function used to track changes in the items collection.\n     * By default the object references are compared. However this can be optimized if you have unique identifier\n     * value that can be used for the comparison instead of the object ref or if you have some other property values\n     * in the item object that should be tracked for changes.\n     * This option is similar to ngForTrackBy.\n     * ```typescript\n     * const trackFunc = this.parentVirtDir.igxForTrackBy;\n     * ```\n     */\n    @Input()\n    get igxForTrackBy(): TrackByFunction<T> { return this._trackByFn; }\n\n    /**\n     * Sets the function used to track changes in the items collection.\n     * This function can be set in scenarios where you want to optimize or\n     * customize the tracking of changes for the items in the collection.\n     * The igxForTrackBy function takes the index and the current item as arguments and needs to return the unique identifier for this item.\n     * ```typescript\n     * this.parentVirtDir.igxForTrackBy = (index, item) => {\n     *      return item.id + item.width;\n     * };\n     * ```\n     */\n    set igxForTrackBy(fn: TrackByFunction<T>) { this._trackByFn = fn; }\n\n    /**\n     * @hidden\n     */\n    protected _applyChanges() {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex = this.state.startIndex;\n            let endIndex = this.state.chunkSize + this.state.startIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            }\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embView = embeddedViewCopy.shift();\n                const cntx = (embView as EmbeddedViewRef<any>).context;\n                cntx.$implicit = input;\n                cntx.index = this.getContextIndex(input);\n            }\n            this.dc.changeDetectorRef.detectChanges();\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n            if (this.igxForScrollOrientation === 'vertical') {\n                this.recalcUpdateSizes();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxBrowserHeight(): number {\n        const div = document.createElement('div');\n        const style = div.style;\n        style.position = 'absolute';\n        style.top = '9999999999999999px';\n        document.body.appendChild(div);\n        const size = Math.abs(div.getBoundingClientRect()['top']);\n        document.body.removeChild(div);\n        return size;\n    }\n\n    /**\n     * @hidden\n     * Recalculates the chunkSize based on current startIndex and returns the new size.\n     * This should be called after this.state.startIndex is updated, not before.\n     */\n    protected _calculateChunkSize(): number {\n        let chunkSize = 0;\n        if (this.igxForContainerSize !== null && this.igxForContainerSize !== undefined) {\n            if (!this.sizesCache) {\n                this.initSizesCache(this.igxForOf);\n            }\n            chunkSize = this._calcMaxChunkSize();\n            if (this.igxForOf && chunkSize > this.igxForOf.length) {\n                chunkSize = this.igxForOf.length;\n            }\n        } else {\n            if (this.igxForOf) {\n                chunkSize = this.igxForOf.length;\n            }\n        }\n        return chunkSize;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElement(viewref, nodeName) {\n        const elem = viewref.element.nativeElement.parentNode.getElementsByTagName(nodeName);\n        return elem.length > 0 ? elem[0] : null;\n    }\n\n    /**\n     * @hidden\n     */\n    protected initSizesCache(items: any[]): number {\n        let totalSize = 0;\n        let size = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        let i = 0;\n        this.sizesCache = [];\n        this.heightCache = [];\n        this.sizesCache.push(0);\n        const count = this.isRemote ? this.totalItemCount : items.length;\n        for (i; i < count; i++) {\n            if (dimension === 'height') {\n                // cols[i][dimension] = parseInt(this.igxForItemSize, 10) || 0;\n                size = parseInt(this.igxForItemSize, 10) || 0;\n                this.heightCache.push(size);\n            } else {\n                size = this._getItemSize(items[i], dimension);\n            }\n            totalSize += size;\n            this.sizesCache.push(totalSize);\n        }\n        return totalSize;\n    }\n\n    protected _updateSizeCache() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.initSizesCache(this.igxForOf);\n            return;\n        }\n        const oldHeight = this.heightCache.length > 0 ? this.heightCache.reduce((acc, val) => acc + val) : 0;\n        const newHeight = this.initSizesCache(this.igxForOf);\n\n        const diff = oldHeight - newHeight;\n\n        // if data has been changed while container is scrolled\n        // should update scroll top/left according to change so that same startIndex is in view\n        if (Math.abs(diff) > 0 && this.scrollPosition > 0) {\n            this.recalcUpdateSizes();\n            const offset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n            this.scrollPosition = this.sizesCache[this.state.startIndex] - offset;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize(): number {\n        let i = 0;\n        let length = 0;\n        let maxLength = 0;\n        const arr = [];\n        let sum = 0;\n        const availableSize = parseInt(this.igxForContainerSize, 10);\n        if (!availableSize) {\n            return 0;\n        }\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        const reducer = (accumulator, currentItem) => accumulator + this._getItemSize(currentItem, dimension);\n        for (i; i < this.igxForOf.length; i++) {\n            let item = this.igxForOf[i];\n            if (dimension === 'height') {\n                item = { value: this.igxForOf[i], height: this.heightCache[i] };\n            }\n            const size = dimension === 'height' ?\n                this.heightCache[i] :\n                this._getItemSize(item, dimension);\n            sum = arr.reduce(reducer, size);\n            if (sum < availableSize) {\n                arr.push(item);\n                length = arr.length;\n                if (i === this.igxForOf.length - 1) {\n                    // reached end without exceeding\n                    // include prev items until size is filled or first item is reached.\n                    let curItem = dimension === 'height' ? arr[0].value : arr[0];\n                    let prevIndex = this.igxForOf.indexOf(curItem) - 1;\n                    while (prevIndex >= 0 && sum <= availableSize) {\n                        curItem = dimension === 'height' ? arr[0].value : arr[0];\n                        prevIndex = this.igxForOf.indexOf(curItem) - 1;\n                        const prevItem = this.igxForOf[prevIndex];\n                        const prevSize = dimension === 'height' ?\n                            this.heightCache[prevIndex] :\n                            parseInt(prevItem[dimension], 10);\n                        sum = arr.reduce(reducer, prevSize);\n                        arr.unshift(prevItem);\n                        length = arr.length;\n                    }\n                }\n            } else {\n                arr.push(item);\n                length = arr.length + 1;\n                arr.shift();\n            }\n            if (length > maxLength) {\n                maxLength = length;\n            }\n        }\n        return maxLength;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getIndexAt(left, set, index) {\n        let start = 0;\n        let end = set.length - 1;\n        if (left === 0) {\n            return 0;\n        }\n        while (start <= end) {\n            const midIdx = Math.floor((start + end) / 2);\n            const midLeft = set[midIdx];\n            const cmp = left - midLeft;\n            if (cmp > 0) {\n                start = midIdx + 1;\n            } else if (cmp < 0) {\n                end = midIdx - 1;\n            } else {\n                return midIdx;\n            }\n        }\n        return end;\n    }\n\n    protected _recalcScrollBarSize() {\n        const count = this.isRemote ? this.totalItemCount : (this.igxForOf ? this.igxForOf.length : 0);\n        this.dc.instance.notVirtual = !(this.igxForContainerSize && this.dc && this.state.chunkSize < count);\n        if (this.igxForScrollOrientation === 'horizontal') {\n            const totalWidth = this.igxForContainerSize ? this.initSizesCache(this.igxForOf) : 0;\n            this.hScroll.style.width = this.igxForContainerSize + 'px';\n            this.hScroll.children[0].style.width = totalWidth + 'px';\n            if (totalWidth <= parseInt(this.igxForContainerSize, 10)) {\n                this.scrollPosition = 0;\n            }\n        }\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.vh.instance.elementRef.nativeElement.style.height = parseInt(this.igxForContainerSize, 10) + 'px';\n            this.vh.instance.height = this._calcHeight();\n            if (this.vh.instance.height <= parseInt(this.igxForContainerSize, 10)) {\n                this.scrollPosition = 0;\n            }\n        }\n    }\n\n    protected _calcHeight(): number {\n        let height;\n        if (this.heightCache) {\n            height = this.heightCache.reduce((acc, val) => acc + val, 0);\n        } else {\n            height = this.initSizesCache(this.igxForOf);\n        }\n        this._virtHeight = height;\n        if (height > this._maxHeight) {\n            this._virtHeightRatio = height / this._maxHeight;\n            height = this._maxHeight;\n        }\n        return height;\n    }\n\n    protected _recalcOnContainerChange(changes: SimpleChanges) {\n        this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n        this.dc.instance._viewContainer.element.nativeElement.style.left = '0px';\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (prevChunkSize !== this.state.chunkSize) {\n            this.onChunkLoad.emit(this.state);\n        }\n        if (this.sizesCache && this.hScroll) {\n            // Updating horizontal chunks and offsets based on the new scrollLeft\n            const scrollOffset = this.fixedUpdateAllElements(this.scrollPosition);\n            this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n        }\n    }\n\n    /**\n     * @hidden\n     * Removes an elemenet from the embedded views and updates chunkSize.\n     */\n    protected removeLastElem() {\n        const oldElem = this._embeddedViews.pop();\n        this.onBeforeViewDestroyed.emit(oldElem);\n        oldElem.destroy();\n\n        this.state.chunkSize--;\n    }\n\n    /**\n     * @hidden\n     * If there exists an element that we can create embedded view for creates it, appends it and updates chunkSize\n     */\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            { $implicit: input, index: elemIndex }\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n\n        this._zone.run(() => {\n            this.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * Recalculates chunkSize and adds/removes elements if need due to the change.\n     * this.state.chunkSize is updated in @addLastElem() or @removeLastElem()\n     */\n    protected applyChunkSizeChange() {\n        const chunkSize = this.isRemote ? (this.igxForOf ? this.igxForOf.length : 0) : this._calculateChunkSize();\n        if (chunkSize > this.state.chunkSize) {\n            const diff = chunkSize - this.state.chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.addLastElem();\n            }\n        } else if (chunkSize < this.state.chunkSize) {\n            const diff = this.state.chunkSize - chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.removeLastElem();\n            }\n        }\n    }\n\n    protected _updateScrollOffset() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._updateHScrollOffset();\n        } else {\n            this._updateVScrollOffset();\n        }\n    }\n    private _updateVScrollOffset() {\n        let scrollOffset = 0;\n        const vScroll = this.vh.instance.elementRef.nativeElement;\n        scrollOffset = vScroll && parseInt(vScroll.style.height, 10) ?\n            this.scrollPosition - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n    }\n    private _updateHScrollOffset() {\n        let scrollOffset = 0;\n        scrollOffset = this.hScroll && parseInt(this.hScroll.children[0].style.width, 10) ?\n            this.scrollPosition - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n\n    private _getItemSize(item, dimension: string): number {\n        const dim = item[dimension];\n        return typeof dim === 'number' ? dim : parseInt(this.igxForItemSize, 10) || 0;\n    }\n}\n\nexport function getTypeNameForDebugging(type: any): string {\n    const name = 'name';\n    return type[name] || typeof type;\n}\n\nexport interface IForOfState {\n    startIndex?: number;\n    chunkSize?: number;\n}\n\nexport interface IForOfDataChangingEventArgs {\n    containerSize: number;\n}\n\n@Directive({\n    selector: '[igxGridFor][igxGridForOf]'\n})\nexport class IgxGridForOfDirective<T> extends IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck {\n\n    constructor(\n        _viewContainer: ViewContainerRef,\n        _template: TemplateRef<NgForOfContext<T>>,\n        _differs: IterableDiffers,\n        resolver: ComponentFactoryResolver,\n        cdr: ChangeDetectorRef,\n        _zone: NgZone,\n        protected syncService: IgxForOfSyncService) {\n        super(_viewContainer, _template, _differs, resolver, cdr, _zone);\n    }\n\n    @Input()\n    set igxGridForOf(value) {\n        this.igxForOf = value;\n    }\n\n    get igxGridForOf() {\n        return this.igxForOf;\n    }\n\n    /**\n     * @hidden @internal\n     * An event that is emitted after data has been changed but before the view is refreshed\n     */\n    @Output()\n    public onDataChanging = new EventEmitter<IForOfDataChangingEventArgs>();\n\n    ngOnInit() {\n        this.syncService.setMaster(this);\n        super.ngOnInit();\n        this.removeScrollEventListeners();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const forOf = 'igxGridForOf';\n        this.syncService.setMaster(this);\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange && this.igxForScrollOrientation === 'vertical') {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get sizesCache(): number[] {\n        if (this.syncService.isMaster(this)) {\n            return this._sizesCache;\n        }\n        return this.syncService.sizesCache(this.igxForScrollOrientation);\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public set sizesCache(value: number[]) {\n        this._sizesCache = value;\n    }\n\n    protected get itemsDimension() {\n        return this.igxForScrollOrientation === 'horizontal' ? this.igxForSizePropName : 'height';\n    }\n\n    protected getItemSize(item) {\n        let size = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        if (dimension === 'height') {\n            size = parseInt(this.igxForItemSize, 10) || 0;\n            if (item && item.summaries) {\n                size = item.max;\n            } else if (item && item.groups && item.height) {\n                size = item.height;\n            }\n        } else {\n            size = parseInt(item[dimension], 10) || 0;\n        }\n        return size;\n    }\n\n    protected initSizesCache(items: any[]): number {\n        if (!this.syncService.isMaster(this)) {\n            const masterSizesCache = this.syncService.sizesCache(this.igxForScrollOrientation);\n            return masterSizesCache[masterSizesCache.length - 1];\n        }\n        let totalSize = 0;\n        let size = 0;\n        let i = 0;\n        this.sizesCache = [];\n        this.heightCache = [];\n        this.sizesCache.push(0);\n        const count = this.isRemote ? this.totalItemCount : items.length;\n        for (i; i < count; i++) {\n            size = this.getItemSize(items[i]);\n            if (this.itemsDimension === 'height') {\n                this.heightCache.push(size);\n            }\n            totalSize += size;\n            this.sizesCache.push(totalSize);\n        }\n        return totalSize;\n    }\n\n    protected _updateSizeCache(changes: IterableChanges<T> = null) {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.initSizesCache(this.igxForOf);\n            return;\n        }\n\n        const oldHeight = this.heightCache.length > 0 ? this.heightCache.reduce((acc, val) => acc + val) : 0;\n        let newHeight = oldHeight;\n        if (changes && !this.isRemote) {\n            newHeight = this.handleCacheChanges(changes);\n        } else {\n            newHeight = this.initSizesCache(this.igxForOf);\n        }\n\n        const diff = oldHeight - newHeight;\n\n        // if data has been changed while container is scrolled\n        // should update scroll top/left according to change so that same startIndex is in view\n        if (Math.abs(diff) > 0) {\n            requestAnimationFrame(() => {\n                this.recalcUpdateSizes();\n                const offset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n                if (this.scrollPosition !== 0) {\n                    this.scrollPosition = this.sizesCache[this.state.startIndex] - offset;\n                } else {\n                    this._updateScrollOffset();\n                }\n            });\n        }\n    }\n\n    protected handleCacheChanges(changes: IterableChanges<T>) {\n        const identityChanges = [];\n        const newHeightCache = [];\n        const newSizesCache = [];\n        newSizesCache.push(0);\n        let newHeight = 0;\n\n        // When there are more than one removed items the changes are not reliable so those with identity change should be default size.\n        let numRemovedItems = 0;\n        changes.forEachRemovedItem(() => numRemovedItems++);\n\n        // Get the identity changes to determine later if those that have changed their indexes should be assigned default item size.\n        changes.forEachIdentityChange((item) => {\n            if (item.currentIndex !== item.previousIndex) {\n                // Filter out ones that have not changed their index.\n                identityChanges[item.currentIndex] = item;\n            }\n        });\n\n        // Processing each item that is passed to the igxForOf so far seem to be most reliable. We parse the updated list of items.\n        changes.forEachItem((item) => {\n            if (item.previousIndex !== null &&\n                (numRemovedItems < 2 || !identityChanges.length || identityChanges[item.currentIndex])) {\n                // Reuse cache on those who have previousIndex.\n                // When there are more than one removed items currently the changes are not readable so ones with identity change\n                // should be racalculated.\n                newHeightCache[item.currentIndex] = this.heightCache[item.previousIndex];\n            } else {\n                // Assign default item size.\n                newHeightCache[item.currentIndex] = this.getItemSize(item.item);\n            }\n            newSizesCache[item.currentIndex + 1] = newSizesCache[item.currentIndex] + newHeightCache[item.currentIndex];\n            newHeight += newHeightCache[item.currentIndex];\n        });\n        this.heightCache = newHeightCache;\n        this.sizesCache = newSizesCache;\n        return newHeight;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public assumeMaster(): void {\n        this._sizesCache = this.syncService.sizesCache(this.igxForScrollOrientation);\n        this.syncService.setMaster(this, true);\n    }\n\n    ngDoCheck() {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                const args: IForOfDataChangingEventArgs = {\n                    containerSize: this.igxForContainerSize\n                };\n                this.onDataChanging.emit(args);\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    return;\n                }\n                /* we need to reset the master dir if all rows are removed\n                (e.g. because of filtering); if all columns are hidden, rows are\n                still rendered empty, so we should not reset master */\n                if (!this.igxForOf.length &&\n                    this.igxForScrollOrientation === 'vertical') {\n                    this.syncService.resetMaster();\n                }\n                this.syncService.setMaster(this);\n                this.igxForContainerSize = args.containerSize;\n                this._updateSizeCache(changes);\n                this._applyChanges();\n                this._updateScrollOffset();\n                this.onDataChanged.emit();\n            }\n        }\n    }\n\n    onScroll(event) {\n        if (!parseInt(this.vh.instance.elementRef.nativeElement.style.height, 10)) {\n            return;\n        }\n\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxRealScrollTop = event.target.children[0].scrollHeight - containerSize;\n        const realPercentScrolled = event.target.scrollTop / maxRealScrollTop;\n        if (!this._bScrollInternal) {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;\n        } else {\n            this._bScrollInternal = false;\n        }\n        this._scrollPosition = this._virtScrollTop;\n        const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n        requestAnimationFrame(() => {\n            this.recalcUpdateSizes();\n        });\n    }\n\n    onHScroll(scrollAmount) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!this.hScroll || !parseInt(this.hScroll.children[0].style.width, 10)) {\n            return;\n        }\n        this._scrollPosition = scrollAmount;\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllElements(scrollAmount);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            { $implicit: input, index: elemIndex }\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n    }\n\n    protected _updateViews(prevChunkSize) {\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex;\n            let endIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            } else {\n                startIndex = this.getIndexAt(\n                    this.scrollPosition,\n                    this.sizesCache,\n                    0\n                );\n                if (startIndex + this.state.chunkSize > this.igxForOf.length) {\n                    startIndex = this.igxForOf.length - this.state.chunkSize;\n                }\n                this.state.startIndex = startIndex;\n                endIndex = this.state.chunkSize + this.state.startIndex;\n            }\n\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embView = embeddedViewCopy.shift();\n                const cntx = (embView as EmbeddedViewRef<any>).context;\n                cntx.$implicit = input;\n                cntx.index = this.getContextIndex(input);\n            }\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n            if (this.igxForScrollOrientation === 'vertical') {\n                requestAnimationFrame(() => {\n                    this.recalcUpdateSizes();\n                });\n            }\n        }\n    }\n    protected _applyChanges() {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        this._updateViews(prevChunkSize);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize(): number {\n        if (this.syncService.isMaster(this)) {\n            return super._calcMaxChunkSize();\n        }\n        return this.syncService.chunkSize(this.igxForScrollOrientation);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxForOfDirective, IgxGridForOfDirective, DisplayContainerComponent, VirtualHelperComponent, HVirtualHelperComponent],\n    entryComponents: [DisplayContainerComponent, VirtualHelperComponent, HVirtualHelperComponent],\n    exports: [IgxForOfDirective, IgxGridForOfDirective],\n    imports: [IgxScrollInertiaModule, CommonModule]\n})\n\nexport class IgxForOfModule {\n}\n","import { Directive, HostBinding, Input, NgModule } from '@angular/core';\n\n@Directive({\n    selector: '[igxLayout]'\n})\nexport class IgxLayoutDirective {\n    /**\n     * Sets the default flow direction of the container's children.\n     *\n     * Defaults to `rows`.\n     *\n     * ```html\n     *  <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     *  </div>\n     * ```\n     */\n    @Input('igxLayoutDir') public dir = 'row';\n\n    /**\n     * Defines the direction flex children are placed in the flex container.\n     *\n     * When set to `true`, the `rows` direction goes right to left and `columns` goes bottom to top.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutReverse=\"true\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutReverse') public reverse = false;\n\n    /**\n     * By default the immediate children will all try to fit onto one line.\n     *\n     * The default value `nowrap` sets this behavior.\n     *\n     * Other accepted values are `wrap` and `wrap-reverse`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\"\n     *   igxLayoutWrap=\"wrap\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutWrap') public wrap = 'nowrap';\n\n    /**\n     * Defines the alignment along the main axis.\n     *\n     * Defaults to `flex-start` which packs the children toward the start line.\n     *\n     * Other possible values are `flex-end`, `center`, `space-between`, `space-around`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutJustify=\"space-between\">\n     *    <div>1</div>\n     *    <div>2</div>\n     *    <div>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutJustify') public justify = 'flex-start';\n\n    /**\n     * Defines the default behavior for how children are laid out along the corss axis of the current line.\n     *\n     * Defaults to `flex-start`.\n     *\n     * Other possible values are `flex-end`, `center`, `baseline`, and `stretch`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutItemAlign=\"start\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutItemAlign') public itemAlign = 'stretch';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.display') public display = 'flex';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-wrap') get flexwrap() { return this.wrap; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.justify-content') get justifycontent() { return this.justify; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.align-items') get align() { return this.itemAlign; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-direction')\n    get direction() {\n        if (this.reverse) {\n            return (this.dir === 'row') ? 'row-reverse' : 'column-reverse';\n        }\n        return (this.dir === 'row') ? 'row' : 'column';\n    }\n}\n\n@Directive({\n    selector: '[igxFlex]'\n})\nexport class IgxFlexDirective {\n\n    /**\n     * Applies the `grow` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content1</div>\n     *    <div igxFlex igxFlexGrow=\"1\">Content2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexGrow') public grow = 1;\n\n    /**\n     * Applies the `shrink` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content1</div>\n     *    <div igxFlex igxFlexShrink=\"0\">Content2</div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexShrink') public shrink = 1;\n\n    /**\n     * Applies the directive to an element.\n     *\n     * Possible values include `igxFlexGrow`, `igxFlexShrink`, `igxFlexOrder`, `igxFlexBasis`.\n     *\n     * ```html\n     * <div igxFlex>Content</div>\n     * ```\n     */\n    @Input('igxFlex') public flex = '';\n\n    /**\n     * Applies the `order` attribute to an element that uses the directive.\n     *\n     * Default value is `0`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexOrder=\"1\">Content1</div>\n     *    <div igxFlex igxFlexOrder=\"0\">Content2</div>\n     *    <div igxFlex igxFlexOrder=\"2\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexOrder') public order = 0;\n\n    /**\n     * Applies the `flex-basis` attribute to an element that uses the directive.\n     *\n     * Default value is `auto`.\n     *\n     * Other possible values include `content`, `max-content`, `min-content`, `fit-content`.\n     *\n     * ```html\n     * <div igxFlex igxFlexBasis=\"fit-content\">Content</div>\n     * ```\n     */\n    @Input('igxFlexBasis') public basis = 'auto';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex')\n    get style() {\n        if (this.flex) {\n            return `${this.flex}`;\n        }\n        return `${this.grow} ${this.shrink} ${this.basis}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.order')\n    get itemorder() {\n        return this.order || 0;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFlexDirective, IgxLayoutDirective],\n    exports: [IgxFlexDirective, IgxLayoutDirective]\n})\nexport class IgxLayoutModule { }\n","/**\n * @hidden\n */\nexport const MASK_FLAGS = [ 'C', '&', 'a', 'A', '?', 'L', '9', '0', '#' ];\n\n/**\n * @hidden\n */\nexport const KEYS = {\n    Ctrl : 17,\n    Z : 90,\n    Y : 89,\n    X : 88,\n    BACKSPACE : 8,\n    DELETE : 46\n  };\n\n\n/**\n * @hidden\n */\nexport class MaskHelper {\n    private _cursor;\n    public get cursor() {\n        return this._cursor;\n    }\n    public data: boolean;\n\n    public parseValueByMask(value, maskOptions, cursor): string {\n        let inputValue: string = value;\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        if (inputValue.length < mask.length) { // BACKSPACE, DELETE\n            if (inputValue === '' && cursor === -1) {\n                this._cursor = 0;\n                return this.parseValueByMaskOnInit(value, maskOptions);\n            } // workaround for IE 'x' button\n\n            if (nonLiteralIndeces.indexOf(cursor + 1) !== -1) {\n                inputValue = this.insertCharAt(inputValue, cursor + 1, maskOptions.promptChar);\n                this._cursor = cursor + 1;\n            } else {\n                inputValue = this.insertCharAt(inputValue, cursor + 1, mask[cursor + 1]);\n                this._cursor = cursor + 1;\n                for (let i = this._cursor; i < 0; i--) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor--;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        } else {\n            const char = inputValue[cursor];\n            let isCharValid = this.validateCharOnPostion(char, cursor, mask);\n            if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                inputValue = this.replaceCharAt(inputValue, cursor, '');\n                if (isCharValid) {\n                    inputValue = this.replaceCharAt(inputValue, cursor, char);\n                    this._cursor = cursor + 1;\n                } else {\n                    this._cursor = cursor;\n                }\n            } else {\n                inputValue = this.replaceCharAt(inputValue, cursor, '');\n                this._cursor = ++cursor;\n                for (let i = cursor; i < mask.length; i++) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor = ++cursor;\n                    } else {\n                        isCharValid = this.validateCharOnPostion(char, cursor, mask);\n                        if (isCharValid) {\n                            inputValue = this.replaceCharAt(inputValue, cursor, char);\n                            this._cursor = ++cursor;\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    public parseMask(maskOptions): string {\n        let outputVal = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n\n        for (const maskSym of mask) {\n            outputVal += maskOptions.promptChar;\n        }\n\n        literals.forEach((val: string, key: number) => {\n            outputVal = this.replaceCharAt(outputVal, key, val);\n        });\n\n        return outputVal;\n    }\n\n    public parseValueByMaskOnInit(inputVal, maskOptions): string {\n        let outputVal = '';\n        let value = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n        const literalValues: string[] = Array.from(literals.values());\n\n        if (inputVal != null) {\n            value = inputVal.toString();\n        }\n\n        for (const maskSym of mask) {\n            outputVal += maskOptions.promptChar;\n        }\n\n        literals.forEach((val: string, key: number) => {\n            outputVal = this.replaceCharAt(outputVal, key, val);\n        });\n\n        if (!value) {\n            return outputVal;\n        }\n\n        const nonLiteralValues: string[] = this.getNonLiteralValues(value, literalValues);\n\n        for (let i = 0; i < nonLiteralValues.length; i++) {\n            const char = nonLiteralValues[i];\n            const isCharValid = this.validateCharOnPostion(char, nonLiteralIndeces[i], mask);\n\n            if (!isCharValid && char !== maskOptions.promptChar) {\n                nonLiteralValues[i] = maskOptions.promptChar;\n            }\n        }\n\n        if (nonLiteralValues.length > nonLiteralIndeces.length) {\n            nonLiteralValues.splice(nonLiteralIndeces.length);\n        }\n\n        let pos = 0;\n        for (const nonLiteralValue of nonLiteralValues) {\n            const char = nonLiteralValue;\n            outputVal = this.replaceCharAt(outputVal, nonLiteralIndeces[pos++], char);\n        }\n\n        return outputVal;\n    }\n\n    public restoreValueFromMask(value, maskOptions): string {\n        let outputVal = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalValues: string[] = Array.from(literals.values());\n\n        for (const val of value) {\n            if (literalValues.indexOf(val) === -1) {\n                if (val !== maskOptions.promptChar) {\n                    outputVal += val;\n                }\n            }\n        }\n\n        return outputVal;\n    }\n\n    public parseValueByMaskUponSelection(value, maskOptions, cursor, selection): string {\n        let isCharValid: boolean;\n        let inputValue: string = value;\n        const char: string = inputValue[cursor];\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        if (!this.data) {\n            this._cursor = cursor < 0 ? ++cursor : cursor;\n            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {\n                isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                inputValue = isCharValid ? this.replaceCharAt(inputValue, this._cursor++, char) :\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);\n                selection--;\n                if (selection > 0) {\n                    for (let i = 0; i < selection; i++) {\n                        cursor++;\n                        inputValue = nonLiteralIndeces.indexOf(cursor) !== -1 ?\n                            this.insertCharAt(inputValue, cursor, maskOptions.promptChar) :\n                            this.insertCharAt(inputValue, cursor, mask[cursor]);\n                    }\n                }\n            } else {\n                inputValue = this.replaceCharAt(inputValue, this._cursor, mask[this._cursor]);\n                this._cursor++;\n                selection--;\n                let isMarked = false;\n                if (selection > 0) {\n                    cursor = this._cursor;\n                    for (let i = 0; i < selection; i++) {\n                        if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                            isCharValid = this.validateCharOnPostion(char, cursor, mask);\n                            if (isCharValid && !isMarked) {\n                                inputValue = this.insertCharAt(inputValue, cursor, char);\n                                cursor++;\n                                this._cursor++;\n                                isMarked = true;\n                            } else {\n                                inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);\n                                cursor++;\n                            }\n                        } else {\n                            inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);\n                            if (cursor === this._cursor) {\n                                this._cursor++;\n                            }\n                            cursor++;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (inputValue === '' && cursor === -1) {\n                this._cursor = 0;\n                return this.parseValueByMaskOnInit(value, maskOptions);\n            } // workaround for IE 'x' button\n\n            if (this._cursor < 0) {\n                this._cursor++;\n                cursor++;\n            }\n            cursor++;\n            this._cursor = cursor;\n            for (let i = 0; i < selection; i++) {\n                if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                    inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);\n                    cursor++;\n                } else {\n                    inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);\n                    cursor++;\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    public parseValueByMaskUponCopyPaste(value, maskOptions, cursor, clipboardData, selection): string {\n        let inputValue: string = value;\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        const selectionEnd = cursor + selection;\n\n        this._cursor = cursor;\n        for (const clipboardSym of clipboardData) {\n            const char = clipboardSym;\n\n            if (this._cursor > mask.length) {\n                return inputValue;\n            }\n\n            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {\n                const isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                if (isCharValid) {\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, char);\n                }\n            } else {\n                for (let i = cursor; i < mask.length; i++) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor++;\n                    } else {\n                        const isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                        if (isCharValid) {\n                            inputValue = this.replaceCharAt(inputValue, this._cursor++, char);\n                        }\n                        break;\n                    }\n                }\n            }\n\n            selection--;\n        }\n\n        if (selection > 0) {\n            for (let i = this._cursor; i < selectionEnd; i++) {\n                if (literalKeys.indexOf(this._cursor) !== -1) {\n                    this._cursor++;\n                } else {\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    private validateCharOnPostion(inputChar: string, position: number, mask: string): boolean {\n        let regex: RegExp;\n        let isValid: boolean;\n        const letterOrDigitRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letterDigitOrSpaceRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const letterRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letteSpaceRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const digitRegEx = '[\\\\d]';\n        const digitSpaceRegEx = '[\\\\d\\\\u0020]';\n        const digitSpecialRegEx = '[\\\\d-\\\\+]';\n\n        switch (mask.charAt(position)) {\n            case 'C':\n                isValid = inputChar !== '';\n                break;\n            case '&':\n                regex = new RegExp('[\\\\u0020]');\n                isValid = !regex.test(inputChar);\n                break;\n            case 'a':\n                regex = new RegExp(letterDigitOrSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'A':\n                regex = new RegExp(letterOrDigitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '?':\n                regex = new RegExp(letteSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'L':\n                regex = new RegExp(letterRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '0':\n                regex = new RegExp(digitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '9':\n                regex = new RegExp(digitSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '#':\n                regex = new RegExp(digitSpecialRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            default: {\n                isValid = null;\n            }\n        }\n\n        return isValid;\n    }\n    private replaceCharAt(strValue: string, index: number, char: string): string {\n        if (strValue !== undefined) {\n            return strValue.substring(0, index) + char + strValue.substring(index + 1);\n        }\n    }\n    private insertCharAt(strValue: string, index: number, char: string): string {\n        if (strValue !== undefined) {\n            return strValue.substring(0, index) + char + strValue.substring(index);\n        }\n    }\n    private getMaskLiterals(mask: string): Map<number, string> {\n        const literals = new Map<number, string>();\n\n        for (let i = 0; i < mask.length; i++) {\n            const char = mask.charAt(i);\n            if (MASK_FLAGS.indexOf(char) === -1) {\n                literals.set(i, char);\n            }\n        }\n\n        return literals;\n    }\n    private getNonLiteralIndeces(mask: string, literalKeys: number[]): number[] {\n        const nonLiteralsIndeces: number[] = new Array();\n\n        for (let i = 0; i < mask.length; i++) {\n            if (literalKeys.indexOf(i) === -1) {\n                nonLiteralsIndeces.push(i);\n            }\n        }\n\n        return nonLiteralsIndeces;\n    }\n    private getNonLiteralValues(value: string, literalValues: string[]): string[] {\n        const nonLiteralValues: string[] = new Array();\n\n        for (const val of value) {\n            if (literalValues.indexOf(val) === -1) {\n                nonLiteralValues.push(val);\n            }\n        }\n\n        return nonLiteralValues;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    NgModule,\n    OnInit,\n    Output,\n    PipeTransform\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { KEYS, MaskHelper } from './mask-helper';\nimport { isIE } from '../../core/utils';\n\nconst noop = () => { };\n\n@Directive({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMaskDirective, multi: true }],\n    selector: '[igxMask]'\n})\nexport class IgxMaskDirective implements OnInit, ControlValueAccessor {\n    /**\n     * Sets the input mask.\n     * ```html\n     * <input [igxMask] = \"'00/00/0000'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input('igxMask')\n    public mask: string;\n\n    /**\n     * Sets the character representing a fillable spot in the input mask.\n     * Default value is \"'_'\".\n     * ```html\n     * <input [promptChar] = \"'/'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public promptChar: string;\n\n    /**\n     * Specifies if the bound value includes the formatting symbols.\n     * ```html\n     * <input [includeLiterals] = \"true\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public includeLiterals: boolean;\n\n    /**\n     * Specifies a placeholder.\n     * ```html\n     * <input placeholder = \"enter text...\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public placeholder: string;\n\n    /**\n     * Specifies a pipe to be used on blur.\n     * ```html\n     * <input [displayValuePipe] = \"displayFormatPipe\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public displayValuePipe: PipeTransform;\n\n    /**\n     * Specifies a pipe to be used on focus.\n     * ```html\n     * <input [focusedValuePipe] = \"inputFormatPipe\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public focusedValuePipe: PipeTransform;\n\n    /**\n     *@hidden\n     */\n    @Input()\n    private dataValue: string;\n\n    /**\n     * Emits an event each time the value changes.\n     * Provides `rawValue: string` and `formattedValue: string` as event arguments.\n     * ```html\n     * <input (onValueChange) = \"onValueChange(rawValue: string, formattedValue: string)\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<IMaskEventArgs>();\n\n    /**\n     *@hidden\n     */\n    private get value() {\n        return this.nativeElement.value;\n    }\n\n    /**\n     *@hidden\n     */\n    private set value(val) {\n        this.nativeElement.value = val;\n    }\n\n    /**\n     *@hidden\n     */\n    private get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     *@hidden\n     */\n    private get selectionStart() {\n        return this.nativeElement.selectionStart;\n    }\n\n    /**\n     *@hidden\n     */\n    private get selectionEnd() {\n        return this.nativeElement.selectionEnd;\n    }\n\n    /**\n     *@hidden\n     */\n    private _ctrlDown: boolean;\n\n    /**\n     *@hidden\n     */\n    private _paste: boolean;\n\n    /**\n     *@hidden\n     */\n    private _selection: number;\n\n    /**\n     *@hidden\n     */\n    private _maskOptions = {\n        format: '',\n        promptChar: ''\n    };\n\n    /**\n     *@hidden\n     */\n    private _key;\n\n    /**\n     *@hidden\n     */\n    private _cursorOnPaste;\n\n    /**\n     *@hidden\n     */\n    private _valOnPaste;\n\n    private _stopPropagation: boolean;\n\n    /**\n     *@hidden\n     */\n    private maskHelper: MaskHelper;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n\n    constructor(private elementRef: ElementRef) {\n        this.maskHelper = new MaskHelper();\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnInit(): void {\n        if (this.promptChar && this.promptChar.length > 1) {\n            this._maskOptions.promptChar = this.promptChar = this.promptChar.substring(0, 1);\n        }\n\n        this._maskOptions.format = this.mask ? this.mask : 'CCCCCCCCCC';\n        this._maskOptions.promptChar = this.promptChar ? this.promptChar : '_';\n        this.nativeElement.setAttribute('placeholder', this.placeholder ? this.placeholder : this._maskOptions.format);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event): void {\n        const key = event.keyCode || event.charCode;\n\n        if (isIE() && this._stopPropagation) {\n            this._stopPropagation = false;\n        }\n\n        if (key === KEYS.Ctrl) {\n            this._ctrlDown = true;\n        }\n\n        if ((this._ctrlDown && key === KEYS.Z) || (this._ctrlDown && key === KEYS.Y)) {\n            event.preventDefault();\n        }\n\n        this._key = key;\n        this._selection = Math.abs(this.selectionEnd - this.selectionStart);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('keyup', ['$event'])\n    public onKeyup(event): void {\n        const key = event.keyCode || event.charCode;\n\n        if (key === KEYS.Ctrl) {\n            this._ctrlDown = false;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('paste', ['$event'])\n    public onPaste(event): void {\n        this._paste = true;\n\n        this._valOnPaste = this.value;\n        this._cursorOnPaste = this.getCursorPosition();\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('input', ['$event'])\n    public onInputChanged(event): void {\n        if (isIE() && this._stopPropagation) {\n            this._stopPropagation = false;\n            return;\n        }\n\n        if (this._paste) {\n            this._paste = false;\n\n            const clipboardData = this.value.substring(this._cursorOnPaste, this.getCursorPosition());\n            this.value = this.maskHelper.parseValueByMaskUponCopyPaste(\n                this._valOnPaste, this._maskOptions, this._cursorOnPaste, clipboardData, this._selection);\n\n            this.setCursorPosition(this.maskHelper.cursor);\n        } else {\n            const currentCursorPos = this.getCursorPosition();\n\n            this.maskHelper.data = (this._key === KEYS.BACKSPACE) || (this._key === KEYS.DELETE);\n\n            this.value = this._selection && this._selection !== 0 ?\n                this.maskHelper.parseValueByMaskUponSelection(this.value, this._maskOptions, currentCursorPos - 1, this._selection) :\n                this.maskHelper.parseValueByMask(this.value, this._maskOptions, currentCursorPos - 1);\n\n            this.setCursorPosition(this.maskHelper.cursor);\n        }\n\n        const rawVal = this.maskHelper.restoreValueFromMask(this.value, this._maskOptions);\n\n        this.dataValue = this.includeLiterals ? this.value : rawVal;\n        this._onChangeCallback(this.dataValue);\n\n        this.onValueChange.emit({ rawValue: rawVal, formattedValue: this.value });\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('focus', ['$event.target.value'])\n    public onFocus(value) {\n        if (this.focusedValuePipe) {\n            if (isIE()) {\n                this._stopPropagation = true;\n            }\n            this.value = this.focusedValuePipe.transform(value);\n        } else {\n            this.value = this.maskHelper.parseValueByMaskOnInit(this.value, this._maskOptions);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('blur', ['$event.target.value'])\n    public onBlur(value) {\n        if (this.displayValuePipe) {\n            this.value = this.displayValuePipe.transform(value);\n        } else if (value === this.maskHelper.parseMask(this._maskOptions)) {\n            this.value = '';\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private getCursorPosition(): number {\n        return this.nativeElement.selectionStart;\n    }\n\n    /**\n     *@hidden\n     */\n    private setCursorPosition(start: number, end: number = start): void {\n        this.nativeElement.setSelectionRange(start, end);\n    }\n\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        if (this.promptChar && this.promptChar.length > 1) {\n            this._maskOptions.promptChar = this.promptChar.substring(0, 1);\n        }\n\n        this.value = value ? this.maskHelper.parseValueByMaskOnInit(value, this._maskOptions) : '';\n        if (this.displayValuePipe) {\n            this.value = this.displayValuePipe.transform(this.value);\n        }\n\n        this.dataValue = this.includeLiterals ? this.value : value;\n        this._onChangeCallback(this.dataValue);\n\n        this.onValueChange.emit({ rawValue: value, formattedValue: this.value });\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n\n/**\n * The IgxMaskModule provides the {@link IgxMaskDirective} inside your application.\n */\nexport interface IMaskEventArgs {\n    rawValue: string;\n    formattedValue: string;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxMaskDirective],\n    exports: [IgxMaskDirective],\n    imports: [CommonModule]\n})\nexport class IgxMaskModule { }\n","import {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { isIE } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport interface IChangeRadioEventArgs {\n    value: any;\n    radio: IgxRadioComponent;\n}\n\nexport enum RadioLabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nlet nextId = 0;\nconst noop = () => { };\n/**\n * **Ignite UI for Angular Radio Button** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)\n *\n * The Ignite UI Radio Button allows the user to select a single option from an available set of options that are listed side by side.\n *\n * Example:\n * ```html\n * <igx-radio>\n *   Simple radio button\n * </igx-radio>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioComponent, multi: true }],\n    selector: 'igx-radio',\n    templateUrl: 'radio.component.html'\n})\n\nexport class IgxRadioComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     * Returns reference to native radio element.\n     * ```typescript\n     * let radioElement =  this.radio.nativeRadio;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('radio') public nativeRadio: ElementRef;\n    /**\n     * Returns reference to native label element.\n     * ```typescript\n     * let labelElement =  this.radio.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('nativeLabel') public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.radio.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel') public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the radio component.\n     * If not set, the `id` of the first radio component will be `\"igx-radio-0\"`.\n     * ```html\n     * <igx-radio id = \"my-first-radio\"></igx-radio>\n     * ```\n     * ```typescript\n     * let radioId =  this.radio.id;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-radio-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element in the radio component.\n     * If not set, the id of the `label` in the first radio component will be `\"igx-radio-0-label\"`.\n     * ```html\n     * <igx-radio labelId = \"Label1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelId =  this.radio.labelId;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the position of the `label` in the radio component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-radio labelPosition = \"before\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.radio.labelPosition;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-radio [value] = \"'radioButtonValue'\"></igx-radio>\n     * ```\n     * ```typescript\n     * let value =  this.radio.value;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the radio component.\n     * ```html\n     * <igx-radio name = \"Radio1\"></igx-radio>\n     *  ```\n     * ```typescript\n     * let name =  this.radio.name;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-radio [tabindex] = \"1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.radio.tabindex;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Enables/disables the ripple effect on the radio button..\n     * If not set, the `disableRipple` will have value `false`.\n     * ```html\n     * <igx-radio [disableRipple] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabledRipple =  this.radio.disableRipple;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the radio button is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-radio [required] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isRequired =  this.radio.required;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute of the radio component.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-radio aria-labelledby = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy = this.radio.ariaLabelledBy;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the `aria-label` attribute of the radio component.\n     * ```html\n     * <igx-radio aria-label = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabel =  this.radio.ariaLabel;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the radio `value` is changed.\n     * Provides references to the `IgxRadioComponent` and the `value` property as event arguments.\n     * @memberof IgxRadioComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n    /**\n     * Returns the class of the radio component.\n     * ```typescript\n     * let radioClass = this.radio.cssClass;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio')\n    public cssClass = 'igx-radio';\n    /**\n     * Sets/gets  the `checked` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [checked] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isChecked =  this.radio.checked;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets  the `disabled` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [disabled] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabled =  this.radio.disabled;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the radio component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.radio.focus = true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.radio.focused;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--focused')\n    public focused = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     *@hidden\n     */\n    protected _value: any = null;\n\n    constructor() { }\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     *@hidden\n     */\n    public _onRadioChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onRadioClick(event) {\n        event.stopPropagation();\n        this.select();\n\n        if (isIE()) {\n            this.nativeRadio.nativeElement.blur();\n        }\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick() {\n        this.select();\n    }\n    /**\n     * Selects the current radio button.\n     * ```typescript\n     * this.radio.select();\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    public select() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = true;\n        this.focused = false;\n        this.change.emit({ value: this.value, radio: this });\n        this._onChangeCallback(this.value);\n    }\n    /**\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true`;\n     * ```typescript\n     * this.radio.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this._value = value;\n        this.checked = (this._value === this.value);\n    }\n    /** @hidden */\n    getEditElement() {\n        return this.nativeRadio.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case RadioLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case RadioLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n","import { Directive, ElementRef, HostListener, Input, NgModule, NgZone, Renderer2 } from '@angular/core';\nimport { AnimationBuilder, style, animate } from '@angular/animations';\n\n@Directive({\n    selector: '[igxRipple]'\n})\nexport class IgxRippleDirective {\n    /**\n     * Sets/gets the ripple target.\n     * ```html\n     * <div  #rippleContainer class=\"div-1\" igxRipple [igxRippleTarget] = \"'.div-1'\"></div>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleTarget = this.ripple.rippleTarget;\n     * ```\n     * Can set the ripple to activate on a child element inside the parent where igxRipple is defined.\n     * ```html\n     * <div #rippleContainer [igxRippleTarget] = \"'#child\"'>\n     *  <button id=\"child\">Click</button>\n     * </div>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleTarget')\n    public rippleTarget = '';\n    /**\n     * Sets/gets the ripple color.\n     * ```html\n     * <button #rippleContainer [igxRipple] = \"'red'\" ></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleColor = this.ripple.rippleColor;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRipple')\n    public rippleColor: string;\n    /**\n     * Sets/gets the ripple duration(in milliseconds).\n     * Default value is `600`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDuration] = \"800\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleDuration = this.ripple.rippleDuration;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDuration')\n    public rippleDuration = 600;\n    /**\n     * Enables/disables the ripple to be centered.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleCentered] = \"true\"></button>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleCentered') set centered(value: boolean) {\n        this._centered = value || this.centered;\n    }\n    /**\n     * Sets/gets whether the ripple is disabled.\n     * Default value is `false`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDisabled] = \"true\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let isRippleDisabled = this.ripple.rippleDisabled;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDisabled')\n    public rippleDisabled = false;\n\n    protected get nativeElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    private rippleElementClass = 'igx-ripple__inner';\n    private rippleHostClass = 'igx-ripple';\n    private _centered = false;\n    private animationQueue = [];\n\n    constructor(\n        protected builder: AnimationBuilder,\n        protected elementRef: ElementRef,\n        protected renderer: Renderer2,\n        private zone: NgZone) { }\n    /**\n     *@hidden\n     */\n    @HostListener('mousedown', ['$event'])\n    public onMouseDown(event) {\n        this.zone.runOutsideAngular(() => this._ripple(event));\n    }\n\n    private setStyles(rippleElement: HTMLElement, styleParams: any) {\n        this.renderer.addClass(rippleElement, this.rippleElementClass);\n        this.renderer.setStyle(rippleElement, 'width', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'height', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'top', `${styleParams.top}px`);\n        this.renderer.setStyle(rippleElement, 'left', `${styleParams.left}px`);\n        if (this.rippleColor) {\n            this.renderer.setStyle(rippleElement, 'background', this.rippleColor);\n        }\n    }\n\n    private _ripple(event) {\n        if (this.rippleDisabled) {\n            return;\n        }\n\n        const target = (this.rippleTarget ? this.nativeElement.querySelector(this.rippleTarget) || this.nativeElement : this.nativeElement);\n\n        const rectBounds = target.getBoundingClientRect();\n        const radius = Math.max(rectBounds.width, rectBounds.height);\n        let left = event.clientX - rectBounds.left - radius / 2;\n        let top = event.clientY - rectBounds.top - radius / 2;\n\n        if (this._centered) {\n            left = top = 0;\n        }\n\n        const dimensions = {\n            radius,\n            top,\n            left\n        };\n\n        const rippleElement = this.renderer.createElement('span');\n\n        this.setStyles(rippleElement, dimensions);\n        this.renderer.addClass(target, this.rippleHostClass);\n        this.renderer.appendChild(target, rippleElement);\n\n        const animation = this.builder.build([\n            style({ opacity: 0.5, transform: 'scale(.3)' }),\n            animate(this.rippleDuration, style({ opacity: 0, transform: 'scale(2)' }))\n        ]).create(rippleElement);\n\n        this.animationQueue.push(animation);\n\n        animation.onDone(() => {\n            this.animationQueue.splice(this.animationQueue.indexOf(animation), 1);\n            target.removeChild(rippleElement);\n            if (this.animationQueue.length < 1) {\n                this.renderer.removeClass(target, this.rippleHostClass);\n            }\n        });\n\n        animation.play();\n\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxRippleDirective],\n    exports: [IgxRippleDirective]\n})\nexport class IgxRippleModule { }\n","import {\n    Directive,\n    NgModule,\n    Input,\n    QueryList,\n    Output,\n    EventEmitter,\n    AfterContentInit,\n    ContentChildren,\n    OnDestroy,\n    HostBinding\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRadioComponent, RadioLabelPosition, IChangeRadioEventArgs } from '../../radio/radio.component';\nimport { IgxRippleModule } from '../ripple/ripple.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nconst noop = () => { };\nlet nextId = 0;\n\n/**\n * **Ignite UI for Angular Radio Group** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)\n *\n * The Ignite UI Radio Group allows the user to select a single option from an available set of options that are listed side by side.\n *\n * Example:\n * ```html\n * <igx-radio-group name=\"radioGroup\">\n *   <igx-radio *ngFor=\"let item of ['Foo', 'Bar', 'Baz']\" value=\"{{item}}\">\n *      {{item}}\n *   </igx-radio>\n * </igx-radio-group>\n * ```\n */\n@Directive({\n    selector: 'igx-radio-group, [igxRadioGroup]',\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioGroupDirective, multi: true }]\n})\nexport class IgxRadioGroupDirective implements AfterContentInit, ControlValueAccessor, OnDestroy {\n    /**\n     * Returns reference to the child radio buttons.\n     * ```typescript\n     * let radioButtons =  this.radioGroup.radioButtons;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @ContentChildren(IgxRadioComponent) public radioButtons: QueryList<IgxRadioComponent>;\n\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-radio-group [value] = \"'radioButtonValue'\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let value =  this.radioGroup.value;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            this._value = newValue;\n            this._selectRadioButton();\n        }\n    }\n\n    /**\n     * Sets/gets the `name` attribute of the radio group component. All child radio buttons inherits this name.\n     * ```html\n     * <igx-radio-group name = \"Radio1\"></igx-radio-group>\n     *  ```\n     * ```typescript\n     * let name =  this.radioGroup.name;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get name(): string { return this._name; }\n    set name(newValue: string) {\n        if (this._name !== newValue) {\n            this._name = newValue;\n            this._setRadioButtonNames();\n        }\n    }\n\n    /**\n     * Sets/gets whether the radio group is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-radio-group [required] = \"true\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let isRequired =  this.radioGroup.required;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(newValue: boolean) {\n        if (this._required !== newValue) {\n            this._required = newValue;\n            this._setRadioButtonsRequired();\n        }\n    }\n\n    /**\n     * An @Input property that allows you to disable the radio group. By default it's false.\n     * ```html\n     * <igx-radio-group [disabled]=\"true\"></igx-radio-group>\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(newValue: boolean) {\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this._disableRadioButtons();\n        }\n    }\n\n    /**\n     * Sets/gets the position of the `label` in the child radio buttons.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-radio-group labelPosition = \"before\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.radioGroup.labelPosition;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get labelPosition(): RadioLabelPosition | string { return this._labelPosition; }\n    set labelPosition(newValue: RadioLabelPosition | string) {\n        if (this._labelPosition !== newValue) {\n            this._labelPosition = newValue === RadioLabelPosition.BEFORE ? RadioLabelPosition.BEFORE : RadioLabelPosition.AFTER;\n            this._setRadioButtonLabelPosition();\n        }\n    }\n\n    /**\n     * Sets/gets the selected child radio button.\n     * ```typescript\n     * let selectedButton = this.radioGroup.selected;\n     * this.radioGroup.selected = selectedButton;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: IgxRadioComponent | null) {\n        if (this._selected !== selected) {\n            this._selected = selected;\n            this.value = selected ? selected.value : null;\n        }\n    }\n\n    /**\n     * An event that is emitted after the radio group `value` is changed.\n     * Provides references to the selected `IgxRadioComponent` and the `value` property as event arguments.\n     * @memberof IgxRadioGroupDirective\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-radio-group')\n    public cssClass = 'igx-radio-group';\n\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     *@hidden\n     */\n    private _name = `igx-radio-group-${nextId++}`;\n    /**\n     *@hidden\n     */\n    private _value: any = null;\n    /**\n     *@hidden\n     */\n    private _selected: IgxRadioComponent | null = null;\n    /**\n     *@hidden\n     */\n    private _isInitialized = false;\n    /**\n     *@hidden\n     */\n    private _labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     *@hidden\n     */\n    private _disabled = false;\n    /**\n     *@hidden\n     */\n    private _required = false;\n    /**\n     *@hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    ngAfterContentInit() {\n        // The initial value can possibly be set by NgModel and it is possible that\n        // the OnInit of the NgModel occurs after the OnInit of this class.\n        this._isInitialized = true;\n\n        setTimeout(() => { this._initRadioButtons(); });\n    }\n\n    /**\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true` and selected property will contain the selected `IgxRadioComponent`.\n     * ```typescript\n     * this.radioGroup.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this.value = value;\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.registerOnTouched(fn);\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     *@hidden\n     */\n    private _initRadioButtons() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.name = this._name;\n                button.labelPosition = this._labelPosition;\n                button.disabled = this._disabled;\n                button.required = this._required;\n\n                if (this._value && button.value === this._value) {\n                    button.checked = true;\n                    this._selected = button;\n                }\n\n                button.change.pipe(takeUntil(this.destroy$)).subscribe((ev) => this._selectedRadioButtonChanged(ev));\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _selectedRadioButtonChanged(args: IChangeRadioEventArgs) {\n        if (this._selected !== args.radio) {\n            if (this._selected) {\n                this._selected.checked = false;\n            }\n            this._selected = args.radio;\n        }\n\n        this._value = args.value;\n\n        if (this._isInitialized) {\n            this.change.emit(args);\n            this._onChangeCallback(this.value);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonNames() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.name = this._name;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _selectRadioButton() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                if (!this._value) {\n                    // no value - uncheck all radio buttons\n                    if (button.checked) {\n                        button.checked = false;\n                    }\n                } else {\n                    if (this._value === button.value) {\n                        // selected button\n                        if (this._selected !== button) {\n                            this._selected = button;\n                        }\n\n                        if (!button.checked) {\n                            button.select();\n                        }\n                    } else {\n                        // non-selected button\n                        if (button.checked) {\n                            button.checked = false;\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonLabelPosition() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.labelPosition = this._labelPosition;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _disableRadioButtons() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.disabled = this._disabled;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonsRequired() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.required = this._required;\n            });\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxRadioGroupDirective, IgxRadioComponent],\n    exports: [IgxRadioGroupDirective, IgxRadioComponent],\n    imports: [IgxRippleModule]\n})\nexport class IgxRadioModule { }\n","import {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    OnDestroy,\n    Renderer2,\n    SimpleChanges,\n    AfterViewChecked\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\n\ninterface ISearchInfo {\n    searchedText: string;\n    content: string;\n    matchCount: number;\n    caseSensitive: boolean;\n    exactMatch: boolean;\n}\n\n/**\n * An interface describing information for the active highlight.\n */\nexport interface IActiveHighlightInfo {\n    /**\n     * The row index of the highlight. This property is deprecated, use `row` instead.\n     */\n    rowIndex?: number;\n    /**\n     * The column index of the highlight. This property is deprecated, use `column` instead.\n     */\n    columnIndex?: number;\n    /**\n     * The page index of the highlight. This property is deprecated.\n     */\n    page?: number;\n    /**\n     * The row of the highlight.\n     */\n    row?: any;\n    /**\n     * The column of the highlight.\n     */\n    column?: any;\n    /**\n     * The index of the highlight.\n     */\n    index: number;\n}\n\n@Directive({\n    selector: '[igxTextHighlight]'\n})\nexport class IgxTextHighlightDirective implements AfterViewInit, AfterViewChecked, OnDestroy, OnChanges {\n    private static onActiveElementChanged = new EventEmitter<string>();\n    public static highlightGroupsMap = new Map<string, IActiveHighlightInfo>();\n\n    private _lastSearchInfo: ISearchInfo;\n    private _div = null;\n    private _observer: MutationObserver = null;\n    private _nodeWasRemoved = false;\n    private _forceEvaluation = false;\n    private _activeElementIndex = -1;\n    private _valueChanged: boolean;\n\n    /**\n     * Determines the `CSS` class of the highlight elements.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [cssClass]=\"myClass\">\n     * </div>\n     * ```\n     */\n    @Input('cssClass')\n    public cssClass: string;\n\n    /**\n     * Determines the `CSS` class of the active highlight element.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [activeCssClass]=\"activeHighlightClass\">\n     * </div>\n     * ```\n     */\n    @Input('activeCssClass')\n    public activeCssClass: string;\n\n    /**\n     * @hidden\n     */\n    @Input('containerClass')\n    public containerClass: string;\n\n    /**\n     * Identifies the highlight within a unique group.\n     * This allows it to have several different highlight groups,\n     * with each of them having their own active highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [groupName]=\"myGroupName\">\n     * </div>\n     * ```\n     */\n    @Input('groupName')\n    public groupName = '';\n\n    private _value = '';\n\n    /**\n     * The underlying value of the element that will be highlighted.\n     *\n     * ```typescript\n     * // get\n     * const elementValue = this.textHighlight.value;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <div\n     *   igxTextHighlight\n     *   [value]=\"newValue\">\n     * </div>\n     * ```\n     */\n    @Input('value')\n    public get value(): any {\n        return this._value;\n    }\n    public set value(value: any) {\n        if (value === undefined || value === null) {\n            this._value = '';\n        } else {\n            this._value = value;\n        }\n    }\n\n    /**\n     * The identifier of the row on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [row]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('row')\n    public row: any;\n\n    /**\n     * The identifier of the column on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [column]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('column')\n    public column: any;\n\n    @Input('page')\n    @DeprecateProperty(`IgxTextHighlightDirective 'page' input property is deprecated.`)\n    public page: number;\n\n    /**\n     * @hidden\n     */\n    public get lastSearchInfo(): ISearchInfo {\n        return this._lastSearchInfo;\n    }\n\n    /**\n     * @hidden\n     */\n    public parentElement: any;\n\n    private _container: any;\n\n    private destroy$ = new Subject<boolean>();\n\n    /**\n     * Activates the highlight at a given index.\n     * (if such index exists)\n     */\n    public static setActiveHighlight(groupName: string, highlight: IActiveHighlightInfo) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, highlight);\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public static clearActiveHighlight(groupName) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, {\n            index: -1\n        });\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    constructor(private element: ElementRef, public renderer: Renderer2) {\n        IgxTextHighlightDirective.onActiveElementChanged.pipe(takeUntil(this.destroy$)).subscribe((groupName) => {\n            if (this.groupName === groupName) {\n                if (this._activeElementIndex !== -1) {\n                    this.deactivate();\n                }\n                this.activateIfNecessary();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        this.clearHighlight();\n\n        if (this._observer !== null) {\n            this._observer.disconnect();\n        }\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.value && !changes.value.firstChange) {\n            this._valueChanged = true;\n        } else if ((changes.row !== undefined && !changes.row.firstChange) ||\n            (changes.column !== undefined && !changes.column.firstChange) ||\n            (changes.page !== undefined && !changes.page.firstChange)) {\n            if (this._activeElementIndex !== -1) {\n                this.deactivate();\n            }\n            this.activateIfNecessary();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.parentElement = this.renderer.parentNode(this.element.nativeElement);\n\n        if (IgxTextHighlightDirective.highlightGroupsMap.has(this.groupName) === false) {\n            IgxTextHighlightDirective.highlightGroupsMap.set(this.groupName, {\n                index: -1\n            });\n        }\n\n        this._lastSearchInfo = {\n            searchedText: '',\n            content: this.value,\n            matchCount: 0,\n            caseSensitive: false,\n            exactMatch: false\n        };\n\n        this._container = this.parentElement.firstElementChild;\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewChecked() {\n        if (this._valueChanged) {\n            this.highlight(this._lastSearchInfo.searchedText, this._lastSearchInfo.caseSensitive, this._lastSearchInfo.exactMatch);\n            this.activateIfNecessary();\n            this._valueChanged = false;\n        }\n    }\n\n    /**\n     * Clears the existing highlight and highlights the searched text.\n     * Returns how many times the element contains the searched text.\n     */\n    public highlight(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n\n        if (this.searchNeedsEvaluation(text, caseSensitiveResolved, exactMatchResolved)) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n            this._lastSearchInfo.content = this.value;\n\n            if (text === '' || text === undefined || text === null) {\n                this.clearHighlight();\n            } else {\n                this.clearChildElements(true);\n                this._lastSearchInfo.matchCount = this.getHighlightedText(text, caseSensitive, exactMatch);\n            }\n        } else if (this._nodeWasRemoved) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n        }\n\n        return this._lastSearchInfo.matchCount;\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public clearHighlight(): void {\n        this.clearChildElements(false);\n\n        this._lastSearchInfo.searchedText = '';\n        this._lastSearchInfo.matchCount = 0;\n    }\n\n    /**\n     * Activates the highlight if it is on the currently active row, column and page.\n     */\n    public activateIfNecessary(): void {\n        const group = IgxTextHighlightDirective.highlightGroupsMap.get(this.groupName);\n        const column = group.columnIndex === undefined ? group.column : group.columnIndex;\n        const row = group.rowIndex === undefined ? group.row : group.rowIndex;\n\n        if (column === this.column && row === this.row && group.page === this.page) {\n            this.activate(group.index);\n        }\n    }\n\n    /**\n     * Attaches a MutationObserver to the parentElement and watches for when the container element is removed/readded to the DOM.\n     * Should be used only when necessary as using many observers may lead to performance degradation.\n     */\n    public observe(): void {\n        if (this._observer === null) {\n            const callback = (mutationList) => {\n                mutationList.forEach((mutation) => {\n                    const removedNodes = Array.from(mutation.removedNodes);\n                    removedNodes.forEach((n) => {\n                        if (n === this._container) {\n                            this._nodeWasRemoved = true;\n                            this.clearChildElements(false);\n                        }\n                    });\n\n                    const addedNodes = Array.from(mutation.addedNodes);\n                    addedNodes.forEach((n) => {\n                        if (n === this.parentElement.firstElementChild && this._nodeWasRemoved) {\n                            this._container = this.parentElement.firstElementChild;\n                            this._nodeWasRemoved = false;\n\n                            this._forceEvaluation = true;\n                            this.highlight(this._lastSearchInfo.searchedText,\n                                this._lastSearchInfo.caseSensitive,\n                                this._lastSearchInfo.exactMatch);\n                            this._forceEvaluation = false;\n\n                            this.activateIfNecessary();\n                            this._observer.disconnect();\n                            this._observer = null;\n                        }\n                    });\n                });\n            };\n\n            this._observer = new MutationObserver(callback);\n            this._observer.observe(this.parentElement, {childList: true});\n        }\n    }\n\n    private activate(index: number) {\n        this.deactivate();\n\n        if (this._div !== null) {\n            const spans = this._div.querySelectorAll('span');\n            this._activeElementIndex = index;\n\n            if (spans.length <= index) {\n                return;\n            }\n\n            const elementToActivate = spans[index];\n            this.renderer.addClass(elementToActivate, this.activeCssClass);\n            this.renderer.setAttribute(elementToActivate, 'style', 'background:orange;color:black');\n        }\n    }\n\n    private deactivate() {\n        if (this._activeElementIndex === -1) {\n            return;\n        }\n\n        const spans = this._div.querySelectorAll('span');\n\n        if (spans.length <= this._activeElementIndex) {\n            this._activeElementIndex = -1;\n            return;\n        }\n\n        const elementToDeactivate = spans[this._activeElementIndex];\n        this.renderer.removeClass(elementToDeactivate, this.activeCssClass);\n        this.renderer.setAttribute(elementToDeactivate, 'style', 'background:yellow;color:black');\n        this._activeElementIndex = -1;\n    }\n\n    private clearChildElements(originalContentHidden: boolean): void {\n        this.renderer.setProperty(this.element.nativeElement, 'hidden', originalContentHidden);\n\n        if (this._div !== null) {\n            this.renderer.removeChild(this.parentElement, this._div);\n\n            this._div = null;\n            this._activeElementIndex = -1;\n        }\n    }\n\n    private getHighlightedText(searchText: string, caseSensitive: boolean, exactMatch: boolean) {\n        this.appendDiv();\n\n        const stringValue = String(this.value);\n        const contentStringResolved = !caseSensitive ? stringValue.toLowerCase() : stringValue;\n        const searchTextResolved = !caseSensitive ? searchText.toLowerCase() : searchText;\n\n        let matchCount = 0;\n\n        if (exactMatch) {\n            if (contentStringResolved === searchTextResolved) {\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this.cssClass}\" style=\"background:yellow;color:black\">${stringValue}</span>`);\n                matchCount++;\n            } else {\n                this.appendText(stringValue);\n            }\n        } else {\n            let foundIndex = contentStringResolved.indexOf(searchTextResolved, 0);\n            let previousMatchEnd = 0;\n\n            while (foundIndex !== -1) {\n                const start = foundIndex;\n                const end = foundIndex + searchTextResolved.length;\n\n                this.appendText(stringValue.substring(previousMatchEnd, start));\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this.cssClass}\" style=\"background:yellow;color:black\">${stringValue.substring(start, end)}</span>`);\n\n                previousMatchEnd = end;\n                matchCount++;\n\n                foundIndex = contentStringResolved.indexOf(searchTextResolved, end);\n            }\n\n            this.appendText(stringValue.substring(previousMatchEnd, stringValue.length));\n        }\n\n        return matchCount;\n    }\n\n    private appendText(text: string) {\n        const textElement = this.renderer.createText(text);\n        this.renderer.appendChild(this._div, textElement);\n    }\n\n    private appendSpan(outerHTML: string) {\n        const span = this.renderer.createElement('span');\n        this.renderer.appendChild(this._div, span);\n        this.renderer.setProperty(span, 'outerHTML', outerHTML);\n    }\n\n    private appendDiv() {\n        this._div = this.renderer.createElement('div');\n        if ( this.containerClass) {\n            this.renderer.addClass(this._div, this.containerClass);\n        }\n        this.renderer.appendChild(this.parentElement, this._div);\n    }\n\n    private searchNeedsEvaluation(text: string, caseSensitive: boolean, exactMatch: boolean): boolean {\n        const searchedText = this._lastSearchInfo.searchedText;\n\n        return !this._nodeWasRemoved &&\n            (searchedText === null ||\n                searchedText !== text ||\n                this._lastSearchInfo.content !== this.value ||\n                this._lastSearchInfo.caseSensitive !== caseSensitive ||\n                this._lastSearchInfo.exactMatch !== exactMatch ||\n                this._forceEvaluation);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTextHighlightDirective],\n    exports: [IgxTextHighlightDirective]\n})\nexport class IgxTextHighlightModule { }\n","import { Directive, ElementRef, HostListener, Input, NgModule } from '@angular/core';\n\n@Directive({\n    exportAs: 'igxTextSelection',\n    selector: '[igxTextSelection]'\n})\nexport class IgxTextSelectionDirective {\n\n    private selectionState = true;\n\n    /**\n     * Returns whether the input element is selectable through the directive.\n     *\n     * ```typescript\n     * // get\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public firstName: IgxTextSelectionDirective;\n     *\n     * public getFirstNameSelectionStatus() {\n     *  return this.firstName.selected;\n     * }\n     * ```\n     */\n    @Input('igxTextSelection')\n    get selected(): boolean {\n        return this.selectionState;\n    }\n\n    /**\n     *  Determines whether the input element could be selected through the directive.\n     *\n     *```html\n     * <!--set-->\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   [igxTextSelection]=\"true\">\n     * </input>\n     *\n     * <input\n     *   type=\"text\"\n     *   id=\"lastName\"\n     *   igxTextSelection\n     *   [selected]=\"true\">\n     * </input>\n     * ```\n     */\n    set selected(val: boolean) {\n        this.selectionState = val;\n    }\n\n    /**\n     * Returns the nativeElement of the element where the directive was applied.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n    *    id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public getNativeElement() {\n     *  return this.inputElement.nativeElement;\n     * }\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('focus')\n    onFocus() {\n        this.trigger();\n    }\n\n    constructor(private element: ElementRef) { }\n\n    /**\n     * Triggers the selection of the element if it is marked as selectable.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public triggerElementSelection() {\n     *  this.inputElement.trigger();\n     * }\n     * ```\n     */\n    trigger() {\n        if (this.selected && this.nativeElement.value.length) {\n            requestAnimationFrame(() => this.nativeElement.setSelectionRange(0, this.nativeElement.value.length));\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTextSelectionDirective],\n    exports: [IgxTextSelectionDirective]\n})\nexport class IgxTextSelectionModule { }\n","import {\n    Directive, ElementRef, HostListener, Input, NgModule, ChangeDetectorRef, OnInit,\n    Output, EventEmitter, Optional, HostBinding, OnDestroy, Inject\n} from '@angular/core';\nimport { useAnimation } from '@angular/animations';\nimport { scaleInCenter } from '../../animations/scale/index';\nimport { fadeOut } from '../../animations/fade/index';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { HorizontalAlignment, AutoPositionStrategy, PositionSettings, OverlaySettings } from '../../services';\nimport { CommonModule } from '@angular/common';\nimport { IgxNavigationService } from '../../core/navigation';\nimport { IgxToggleDirective, IgxToggleActionDirective } from '../toggle/toggle.directive';\nimport { Subscription } from 'rxjs';\n\nexport interface ITooltipShowEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\nexport interface ITooltipHideEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\n\n/**\n * **Ignite UI for Angular Tooltip Target** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)\n *\n * The Ignite UI for Angular Tooltip Target directive is used to mark an HTML element in the markup as one that has a tooltip.\n * The tooltip target is used in combination with the Ignite UI for Angular Tooltip by assigning the exported tooltip reference to the\n * target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltipTarget',\n    selector: '[igxTooltipTarget]'\n})\nexport class IgxTooltipTargetDirective extends IgxToggleActionDirective implements OnInit {\n    /**\n     * Gets/sets the amount of milliseconds that should pass before showing the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipShowDelay = this.tooltipTarget.showDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" showDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('showDelay')\n    public showDelay = 500;\n\n    /**\n     * Gets/sets the amount of milliseconds that should pass before hiding the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipHideDelay = this.tooltipTarget.hideDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" hideDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('hideDelay')\n    public hideDelay = 500;\n\n    /**\n     * Specifies if the tooltip should not show when hovering its target with the mouse. (defaults to false)\n     * While setting this property to 'true' will disable the user interactions that shows/hides the tooltip,\n     * the developer will still be able to show/hide the tooltip through the API.\n     *\n     * ```typescript\n     * // get\n     * let tooltipDisabledValue = this.tooltipTarget.tooltipDisabled;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" [tooltipDisabled]=\"true\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('tooltipDisabled')\n    public tooltipDisabled = false;\n\n    /**\n     * @hidden\n     */\n    @Input('igxTooltipTarget')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this._navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    /**\n     * Gets the respective native element of the directive.\n     *\n     * ```typescript\n     * let tooltipTargetElement = this.tooltipTarget.nativeElement;\n     * ```\n     */\n    public get nativeElement() {\n        return this._element.nativeElement;\n    }\n\n    /**\n     * Indicates if the tooltip that is is associated with this target is currently hidden.\n     *\n     * ```typescript\n     * let tooltipHiddenValue = this.tooltipTarget.tooltipHidden;\n     * ```\n     */\n    public get tooltipHidden(): boolean {\n        return !this.target || this.target.collapsed;\n    }\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts showing.\n     * This event is fired before the start of the countdown to showing the tooltip.\n     *\n     * ```typescript\n     * tooltipShowing(args: ITooltipShowEventArgs) {\n     *    alert(\"Tooltip started showing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipShow)='tooltipShowing($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipShow = new EventEmitter<ITooltipShowEventArgs>();\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts hiding.\n     * This event is fired before the start of the countdown to hiding the tooltip.\n     *\n     * ```typescript\n     * tooltipHiding(args: ITooltipHideEventArgs) {\n     *    alert(\"Tooltip started hiding!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipHide)='tooltipHiding($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipHide = new EventEmitter<ITooltipHideEventArgs>();\n\n    constructor(private _element: ElementRef,\n        @Optional() private _navigationService: IgxNavigationService) {\n        super(_element, _navigationService);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n\n        const positionSettings: PositionSettings = {\n            target: this.nativeElement,\n            horizontalDirection: HorizontalAlignment.Center,\n            horizontalStartPoint: HorizontalAlignment.Center,\n            openAnimation: useAnimation(scaleInCenter, { params: { duration: '150ms' } }),\n            closeAnimation: useAnimation(fadeOut, { params: { duration: '75ms' } })\n        };\n\n        this._overlayDefaults.positionStrategy = new AutoPositionStrategy(positionSettings);\n        this._overlayDefaults.closeOnOutsideClick = false;\n    }\n\n    private checkOutletAndOutsideClick() {\n        if (this.closeOnOutsideClick !== undefined) {\n            this._overlayDefaults.closeOnOutsideClick = this.closeOnOutsideClick;\n        }\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n    }\n\n    private get mergedOverlaySettings() {\n        return Object.assign({}, this._overlayDefaults, this.overlaySettings);\n    }\n\n    // Return true if the execution in onMouseEnter should be terminated after this method\n    private preMouseEnterCheck() {\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n            this.target.toBeShown = false;\n        }\n\n        // If Tooltip is opened or about to be hidden\n        if (!this.target.collapsed || this.target.toBeHidden) {\n            clearTimeout(this.target.timeoutId);\n\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return true;\n            }\n\n            //  if close animation has started finish it, or close the tooltip with no animation\n            this.target.forceClose(this.mergedOverlaySettings);\n            this.target.toBeHidden = false;\n        }\n\n        return false;\n    }\n\n    // Return true if the execution in onMouseLeave should be terminated after this method\n    private preMouseLeaveCheck(): boolean {\n        clearTimeout(this.target.timeoutId);\n\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            this.target.toBeShown = false;\n            this.target.toBeHidden = false;\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:keydown.escape', ['$event'])\n    public onKeydownEscape() {\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.close();\n        this.target.toBeHidden = false;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (!this.target.collapsed) {\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return;\n            }\n\n            this.target.forceClose(this.mergedOverlaySettings);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseenter')\n    public onMouseEnter() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseEnterCheck();\n        if (shouldReturn) {\n            return;\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseleave')\n    public onMouseLeave() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseLeaveCheck();\n        if (shouldReturn || this.target.collapsed) {\n            return;\n        }\n\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('touchstart', ['$event'])\n    public onTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        event.preventDefault();\n        this.showTooltip();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:touchstart', ['$event'])\n    public onDocumentTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        if (this.nativeElement !== event.target &&\n            !this.nativeElement.contains(event.target)\n        ) {\n            this.hideTooltip();\n        }\n    }\n\n    /**\n     * Shows the tooltip by respecting the 'showDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.showTooltip();\n     * ```\n     */\n    public showTooltip() {\n        clearTimeout(this.target.timeoutId);\n\n        if (!this.target.collapsed) {\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return;\n            }\n            //  if close animation has started finish it, or close the tooltip with no animation\n            this.target.forceClose(this.mergedOverlaySettings);\n            this.target.toBeHidden = false;\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * Hides the tooltip by respecting the 'hideDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.hideTooltip();\n     * ```\n     */\n    public hideTooltip() {\n        if (this.target.collapsed && this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n        }\n\n        if (this.target.collapsed || this.target.toBeHidden) {\n            return;\n        }\n\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n    }\n}\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Tooltip** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)\n *\n * The Ignite UI for Angular Tooltip directive is used to mark an HTML element in the markup as one that should behave as a tooltip.\n * The tooltip is used in combination with the Ignite UI for Angular Tooltip Target by assigning the exported tooltip reference to the\n * respective target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltip',\n    selector: '[igxTooltip]'\n})\nexport class IgxTooltipDirective extends IgxToggleDirective {\n\n    /**\n     * @hidden\n     */\n    public timeoutId;\n\n    /**\n     * @hidden\n     * Returns whether close time out has started\n     */\n    public toBeHidden = false;\n\n    /**\n     * @hidden\n     * Returns whether open time out has started\n     */\n    public toBeShown = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--desktop')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * Gets/sets any tooltip related data.\n     * The 'context' can be used for storing any information that is necessary\n     * to access when working with the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipContext = this.tooltip.context;\n     * ```\n     *\n     * ```typescript\n     * // set\n     * this.tooltip.context = \"Tooltip's context\";\n     * ```\n     */\n    @Input('context')\n    public context;\n\n    /**\n     * Identifier for the tooltip.\n     * If this is property is not explicitly set, it will be automatically generated.\n     *\n     * ```typescript\n     * let tooltipId = this.tooltip.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-tooltip-${NEXT_ID++}`;\n\n    /**\n     * Get the role attribute of the tooltip.\n     *\n     * ```typescript\n     * let tooltipRole = this.tooltip.role;\n     * ```\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'tooltip';\n    }\n\n    /** @hidden */\n    constructor(\n        elementRef: ElementRef,\n        cdr: ChangeDetectorRef,\n        @Inject(IgxOverlayService) overlayService: IgxOverlayService,\n        @Optional() navigationService: IgxNavigationService) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(elementRef, cdr, overlayService, navigationService);\n    }\n\n    /**\n     * If there is open animation in progress this method will finish is.\n     * If there is no open animation in progress this method will open the toggle with no animation.\n     * @param overlaySettings setting to use for opening the toggle\n     */\n    protected forceOpen(overlaySettings?: OverlaySettings) {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasOpenAnimation = info ? info.openAnimationPlayer : false;\n        if (hasOpenAnimation) {\n            info.openAnimationPlayer.finish();\n            info.openAnimationPlayer.reset();\n            info.openAnimationPlayer = null;\n        } else if (this.collapsed) {\n            const animation = overlaySettings.positionStrategy.settings.openAnimation;\n            overlaySettings.positionStrategy.settings.openAnimation = null;\n            this.open(overlaySettings);\n            overlaySettings.positionStrategy.settings.openAnimation = animation;\n        }\n    }\n\n    /**\n     * If there is close animation in progress this method will finish is.\n     * If there is no close animation in progress this method will close the toggle with no animation.\n     * @param overlaySettings settings to use for closing the toggle\n     */\n    protected forceClose(overlaySettings?: OverlaySettings) {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n\n        if (hasCloseAnimation) {\n            info.closeAnimationPlayer.finish();\n            info.closeAnimationPlayer.reset();\n            info.closeAnimationPlayer = null;\n        } else if (!this.collapsed) {\n            const animation = overlaySettings.positionStrategy.settings.closeAnimation;\n            overlaySettings.positionStrategy.settings.closeAnimation = null;\n            this.close();\n            overlaySettings.positionStrategy.settings.closeAnimation = animation;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    exports: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    imports: [CommonModule],\n    providers: [IgxOverlayService]\n})\nexport class IgxTooltipModule { }\n\n","/**\n * Provides base filtering operations\n * Implementations should be Singleton\n *\n * @export\n */\nexport class IgxFilteringOperand {\n    public operations: IFilteringOperation[];\n\n    public constructor() {\n        this.operations = [{\n            name: 'null',\n            isUnary: true,\n            iconName: 'is_null',\n            logic: (target: any) => {\n                return target === null;\n            }\n        }, {\n            name: 'notNull',\n            isUnary: true,\n            iconName: 'is_not_null',\n            logic: (target: any) => {\n                return target !== null;\n            }\n        }, {\n            name: 'in',\n            isUnary: false,\n            iconName: 'is_in',\n            hidden: true,\n            logic: (target: any, searchVal: Set<any>) => {\n                return this.findValueInSet(target, searchVal);\n            }\n        }];\n    }\n\n    /**\n     * @hidden\n     */\n    protected findValueInSet(target: any, searchVal: Set<any>) {\n        return searchVal.has(target);\n    }\n\n    /**\n     * Returns an array of names of the conditions which are visible in the UI\n     */\n    public conditionList(): string[] {\n        return this.operations.filter(f => !f.hidden).map((element) => element.name);\n    }\n\n    /**\n     * Returns an instance of the condition with the specified name.\n     * @param name The name of the condition.\n     */\n    public condition(name: string): IFilteringOperation {\n        return this.operations.find((element) => element.name === name);\n    }\n\n    /**\n     * Adds a new condition to the filtering operations.\n     * @param operation The filtering operation.\n     */\n    public append(operation: IFilteringOperation) {\n        this.operations.push(operation);\n    }\n}\n\n/**\n * Provides filtering operations for booleans\n *\n * @export\n */\nexport class IgxBooleanFilteringOperand extends IgxFilteringOperand {\n    private static _instance: IgxBooleanFilteringOperand = null;\n\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'all',\n            isUnary: true,\n            iconName: 'all',\n            logic: (target: boolean) => {\n                return true;\n            }\n        }, {\n            name: 'true',\n            isUnary: true,\n            iconName: 'is_true',\n            logic: (target: boolean) => {\n                return !!(target && target !== null && target !== undefined);\n            }\n        }, {\n            name: 'false',\n            isUnary: true,\n            iconName: 'is_false',\n            logic: (target: boolean) => {\n                return !target && target !== null && target !== undefined;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: boolean) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: boolean) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n\n    public static instance(): IgxBooleanFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n}\n\n/**\n * Provides filtering operations for Dates\n *\n * @export\n */\nexport class IgxDateFilteringOperand extends IgxFilteringOperand {\n    private static _instance: IgxDateFilteringOperand = null;\n\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year === searchp.year &&\n                    targetp.month === searchp.month &&\n                    targetp.day === searchp.day;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return true;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year !== searchp.year ||\n                    targetp.month !== searchp.month ||\n                    targetp.day !== searchp.day;\n            }\n        }, {\n            name: 'before',\n            isUnary: false,\n            iconName: 'is_before',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target < searchVal;\n            }\n        }, {\n            name: 'after',\n            isUnary: false,\n            iconName: 'is_after',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target > searchVal;\n            }\n        }, {\n            name: 'today',\n            isUnary: true,\n            iconName: 'today',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yMd');\n                return d.year === now.year &&\n                    d.month === now.month &&\n                    d.day === now.day;\n            }\n        }, {\n            name: 'yesterday',\n            isUnary: true,\n            iconName: 'yesterday',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const td = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const y = ((d) => new Date(d.setDate(d.getDate() - 1)))(new Date());\n                const yesterday = IgxDateFilteringOperand.getDateParts(y, 'yMd');\n                return td.year === yesterday.year &&\n                    td.month === yesterday.month &&\n                    td.day === yesterday.day;\n            }\n        }, {\n            name: 'thisMonth',\n            isUnary: true,\n            iconName: 'this_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'lastMonth',\n            isUnary: true,\n            iconName: 'last_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (!now.month) {\n                    now.month = 11;\n                    now.year -= 1;\n                } else {\n                    now.month--;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'nextMonth',\n            isUnary: true,\n            iconName: 'next_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (now.month === 11) {\n                    now.month = 0;\n                    now.year += 1;\n                } else {\n                    now.month++;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'thisYear',\n            isUnary: true,\n            iconName: 'this_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year;\n            }\n        }, {\n            name: 'lastYear',\n            isUnary: true,\n            iconName: 'last_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year - 1;\n            }\n        }, {\n            name: 'nextYear',\n            isUnary: true,\n            iconName: 'next_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year + 1;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: Date) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: Date) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n\n    public static instance(): IgxDateFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n\n    /**\n     * Splits a Date object into parts\n     *\n     * @memberof IgxDateFilteringOperand\n     */\n    public static getDateParts(date: Date, dateFormat?: string): IDateParts {\n        const res = {\n            day: null,\n            hours: null,\n            milliseconds: null,\n            minutes: null,\n            month: null,\n            seconds: null,\n            year: null\n        };\n        if (!date || !dateFormat) {\n            return res;\n        }\n        if (dateFormat.indexOf('y') >= 0) {\n            res.year = date.getFullYear();\n        }\n        if (dateFormat.indexOf('M') >= 0) {\n            res.month = date.getMonth();\n        }\n        if (dateFormat.indexOf('d') >= 0) {\n            res.day = date.getDate();\n        }\n        if (dateFormat.indexOf('h') >= 0) {\n            res.hours = date.getHours();\n        }\n        if (dateFormat.indexOf('m') >= 0) {\n            res.minutes = date.getMinutes();\n        }\n        if (dateFormat.indexOf('s') >= 0) {\n            res.seconds = date.getSeconds();\n        }\n        if (dateFormat.indexOf('f') >= 0) {\n            res.milliseconds = date.getMilliseconds();\n        }\n        return res;\n    }\n\n    private validateInputData(target: Date) {\n        if (!(target instanceof Date)) {\n            throw new Error('Could not perform filtering on \\'date\\' column because the datasource object type is not \\'Date\\'.');\n        }\n    }\n\n    protected findValueInSet(target: any, searchVal: Set<any>) {\n        return searchVal.has(new Date(target.getFullYear(), target.getMonth(), target.getDate()).toISOString());\n    }\n}\n\n/**\n * Provides filtering operations for numbers\n *\n * @export\n */\nexport class IgxNumberFilteringOperand extends IgxFilteringOperand {\n    private static _instance: IgxNumberFilteringOperand = null;\n\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: number, searchVal: number) => {\n                return target === searchVal;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: number, searchVal: number) => {\n                return target !== searchVal;\n            }\n        }, {\n            name: 'greaterThan',\n            isUnary: false,\n            iconName: 'greater_than',\n            logic: (target: number, searchVal: number) => {\n                return target > searchVal;\n            }\n        }, {\n            name: 'lessThan',\n            isUnary: false,\n            iconName: 'less_than',\n            logic: (target: number, searchVal: number) => {\n                return target < searchVal;\n            }\n        }, {\n            name: 'greaterThanOrEqualTo',\n            isUnary: false,\n            iconName: 'greater_than_or_equal',\n            logic: (target: number, searchVal: number) => {\n                return target >= searchVal;\n            }\n        }, {\n            name: 'lessThanOrEqualTo',\n            isUnary: false,\n            iconName: 'less_than_or_equal',\n            logic: (target: number, searchVal: number) => {\n                return target <= searchVal;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: number) => {\n                return target === null || target === undefined || isNaN(target);\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: number) => {\n                return target !== null && target !== undefined && !isNaN(target);\n            }\n        }].concat(this.operations);\n    }\n\n    public static instance(): IgxNumberFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n}\n\n/**\n * Provides filtering operations for strings\n *\n * @export\n */\nexport class IgxStringFilteringOperand extends IgxFilteringOperand {\n    private static _instance: IgxStringFilteringOperand = null;\n\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'contains',\n            isUnary: false,\n            iconName: 'contains',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) !== -1;\n            }\n        }, {\n            name: 'doesNotContain',\n            isUnary: false,\n            iconName: 'does_not_contain',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) === -1;\n            }\n        }, {\n            name: 'startsWith',\n            isUnary: false,\n            iconName: 'starts_with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.startsWith(search);\n            }\n        }, {\n            name: 'endsWith',\n            isUnary: false,\n            iconName: 'ends_with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.endsWith(search);\n            }\n        }, {\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target === search;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target !== search;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: string) => {\n                return target === null || target === undefined || target.length === 0;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: string) => {\n                return target !== null && target !== undefined && target.length > 0;\n            }\n        }].concat(this.operations);\n    }\n\n    public static instance(): IgxStringFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n\n    /**\n     * Applies case sensitivity on strings if provided\n     *\n     * @memberof IgxStringFilteringOperand\n     */\n    public static applyIgnoreCase(a: string, ignoreCase: boolean): string {\n        a = a || '';\n        // bulletproof\n        return ignoreCase ? ('' + a).toLowerCase() : a;\n    }\n}\n\n/**\n * Interface describing filtering operations\n *\n * @export\n */\nexport interface IFilteringOperation {\n    name: string;\n    isUnary: boolean;\n    iconName: string;\n    hidden?: boolean;\n    logic: (value: any, searchVal?: any, ignoreCase?: boolean) => boolean;\n}\n\n/**\n * Interface describing Date object in parts\n *\n * @export\n */\nexport interface IDateParts {\n    year: number;\n    month: number;\n    day: number;\n    hours: number;\n    minutes: number;\n    seconds: number;\n    milliseconds: number;\n}\n","import { IFilteringExpressionsTree } from './filtering-expressions-tree';\nimport { FilteringStrategy, IFilteringStrategy } from './filtering-strategy';\n\nexport const filteringStateDefaults = {\n    strategy: new FilteringStrategy()\n};\n\nexport declare interface IFilteringState {\n    expressionsTree: IFilteringExpressionsTree;\n    strategy?: IFilteringStrategy;\n}\n","import { ISortingExpression } from './sorting-expression.interface';\n\n/**\n * @hidden\n */\nexport class GroupedRecords extends Array<any> {}\n\nexport interface IGroupByRecord {\n    expression: ISortingExpression;\n    level: number;\n    records: GroupedRecords;\n    value: any;\n    groupParent: IGroupByRecord;\n    groups?: IGroupByRecord[];\n    height: number;\n }\n","import { Injectable, SecurityContext, Inject } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { HttpClient } from '@angular/common/http';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * **Ignite UI for Angular Icon Service** -\n *\n * The Ignite UI Icon Service makes it easy for developers to include custom SVG images and use them with IgxIconComponent.\n * In addition it could be used to associate a custom class to be applied on IgxIconComponent according to given fontSet.\n *\n * Example:\n * ```typescript\n * this.iconService.registerFontSetAlias('material', 'material-icons');\n * this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n * ```\n */\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class IgxIconService {\n    private _fontSet = 'material-icons';\n    private _fontSetAliases = new Map<string, string>();\n    private _svgContainer: HTMLElement;\n    private _cachedSvgIcons: Set<string> = new Set<string>();\n\n    constructor (private _sanitizer: DomSanitizer, private _httpClient: HttpClient, @Inject(DOCUMENT) private _document: any) { }\n\n    /**\n     *  Returns the default font set.\n     *```typescript\n     *   const defaultFontSet = this.iconService.defaultFontSet;\n     * ```\n     */\n    get defaultFontSet(): string {\n        return this._fontSet;\n    }\n\n    /**\n     *  Sets the default font set.\n     *```typescript\n     *   this.iconService.defaultFontSet = 'svg-flags';\n     * ```\n     */\n    set defaultFontSet(className: string) {\n        this._fontSet = className;\n    }\n\n    /**\n     *  Registers a custom class to be applied to IgxIconComponent for a given fontSet.\n     *```typescript\n     *   this.iconService.registerFontSetAlias('material', 'material-icons');\n     * ```\n     */\n    public registerFontSetAlias(alias: string, className: string = alias): this {\n        this._fontSetAliases.set(alias, className);\n        return this;\n    }\n\n    /**\n     *  Returns the custom class, if any, associated to a given fontSet.\n     *```typescript\n     *   const fontSetClass = this.iconService.fontSetClassName('material');\n     * ```\n     */\n    public fontSetClassName(alias: string): string {\n        return this._fontSetAliases.get(alias) || alias;\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is an url.\n     *```typescript\n     *   this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n     * ```\n     */\n    public addSvgIcon(iconName: string, url: string, fontSet: string = '') {\n        if (iconName && url) {\n            const safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(url);\n            if (!safeUrl) {\n                throw new Error(`The provided URL could not be processed as trusted resource URL by Angular's DomSanitizer: \"${url}\".`);\n            }\n\n            const sanitizedUrl = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n            if (!sanitizedUrl) {\n                throw new Error(`The URL provided was not trusted as a resource URL: \"${url}\".`);\n            }\n\n            this.fetchSvg(iconName, url, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `url` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is its text.\n     *```typescript\n     *   this.iconService.addSvgIcon('simple', '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 200 200\">\n     *   <path d=\"M74 74h54v54H74\" /></svg>', 'svg-flags');\n     * ```\n     */\n    public addSvgIconFromText(iconName: string, iconText: string, fontSet: string = '') {\n        if (iconName && iconText) {\n            this.cacheSvgIcon(iconName, iconText, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `iconText` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Returns wheather a given SVG image is present in the cache.\n     *```typescript\n     *   const isSvgCached = this.iconService.isSvgIconCached('aruba', 'svg-flags');\n     * ```\n     */\n    public isSvgIconCached(iconName: string, fontSet: string = ''): boolean {\n        const iconKey = this.getSvgIconKey(iconName, fontSet);\n        return this._cachedSvgIcons.has(iconKey);\n    }\n\n    /**\n     *  Returns the key of a cached SVG image.\n     *```typescript\n     *   const svgIconKey = this.iconService.getSvgIconKey('aruba', 'svg-flags');\n     * ```\n     */\n    public getSvgIconKey(iconName: string, fontSet: string = '') {\n        return fontSet + '_' + iconName;\n    }\n\n    /**\n     * @hidden\n     */\n    private fetchSvg(iconName: string, url: string, fontSet: string = '') {\n        const request = this._httpClient.get(url, { responseType: 'text' });\n        const subscription = request.subscribe((value: string) => {\n            this.cacheSvgIcon(iconName, value, fontSet);\n        }, (error) => {\n            throw new Error(`Could not fetch SVG from url: ${url}; error: ${error.message}`);\n        }, () => {\n            subscription.unsubscribe();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    private cacheSvgIcon(iconName: string, value: string, fontSet: string = '') {\n        if (iconName && value) {\n            this.ensureSvgContainerCreated();\n\n            const div = this._document.createElement('DIV');\n            div.innerHTML = value;\n            const svg = div.querySelector('svg') as SVGElement;\n\n            if (svg) {\n                const iconKey = this.getSvgIconKey(iconName, fontSet);\n\n                svg.setAttribute('id', iconKey);\n                svg.setAttribute('fit', '');\n                svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n                svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n                if (this._cachedSvgIcons.has(iconKey)) {\n                    const oldChild = this._svgContainer.querySelector(`svg[id='${iconKey}']`);\n                    this._svgContainer.removeChild(oldChild);\n                }\n\n                this._svgContainer.appendChild(svg);\n                this._cachedSvgIcons.add(iconKey);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private ensureSvgContainerCreated() {\n        if (!this._svgContainer) {\n            this._svgContainer = this._document.documentElement.querySelector('.igx-svg-container');\n            if (!this._svgContainer) {\n                this._svgContainer = this._document.createElement('DIV');\n                this._svgContainer.classList.add('igx-svg-container');\n                this._document.documentElement.appendChild(this._svgContainer);\n            }\n        }\n    }\n}\n","import { Component, ElementRef, HostBinding, Input, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { IgxIconService } from './icon.service';\n\n/**\n * **Ignite UI for Angular Icon** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/icon.html)\n *\n * The Ignite UI Icon makes it easy for developers to include material design icons directly in their markup. The icons\n * support custom colors and can be marked as active or disabled using the `isActive` property. This will change the appearence\n * of the icon.\n *\n * Example:\n * ```html\n * <igx-icon color=\"#00ff00\" isActive=\"true\">home</igx-icon>\n * ```\n */\nlet NEXT_ID = 0;\n\n@Component({\n    selector: 'igx-icon',\n    templateUrl: 'icon.component.html'\n})\n\nexport class IgxIconComponent implements OnInit {\n    @ViewChild('noLigature', { read: TemplateRef })\n    private noLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('explicitLigature', { read: TemplateRef })\n    private explicitLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('svgImage', { read: TemplateRef })\n    private svgImage: TemplateRef<HTMLElement>;\n\n    /**\n     *  This allows you to change the value of `class.igx-icon`. By default it's `igx-icon`.\n     *```typescript\n     *@ViewChild(\"MyIcon\") public icon: IgxIconComponent;\n     *constructor(private cdRef:ChangeDetectorRef) {}\n     *ngAfterViewInit() {\n     *    this.icon.cssClass = \"\";\n     *    this.cdRef.detectChanges();\n     *}\n     * ```\n     */\n    @HostBinding('class.igx-icon')\n    public cssClass = 'igx-icon';\n\n    /**\n     *  This allows you to disable the `aria-hidden` attribute. By default it's applied.\n     *```typescript\n     *@ViewChild(\"MyIcon\") public icon: IgxIconComponent;\n     *constructor(private cdRef:ChangeDetectorRef) {}\n     *ngAfterViewInit() {\n     *    this.icon.ariaHidden = false;\n     *    this.cdRef.detectChanges();\n     *}\n     * ```\n     */\n    @HostBinding('attr.aria-hidden')\n    public ariaHidden = true;\n\n    /**\n    *  An @Input property that sets the value of the `id` attribute.\n    *```html\n    *<igx-icon id=\"igx-icon-1\" fontSet=\"material\" color=\"blue\" [isActive]=\"false\">settings</igx-icon>\n    *```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-icon-${NEXT_ID++}`;\n\n    /**\n    *  An @Input property that sets the value of the `fontSet`. By default it's \"material\".\n    *```html\n    *<igx-icon fontSet=\"material\" color=\"blue\" [isActive]=\"false\">settings</igx-icon>\n    *```\n    */\n    @Input('fontSet')\n    public font: string;\n\n    /**\n    *  An @Input property that allows you to disable the `active` property. By default it's applied.\n    *```html\n    *<igx-icon [isActive]=\"false\" fontSet=\"material\" color=\"blue\">settings</igx-icon>\n    *```\n    */\n    @Input('isActive')\n    public active = true;\n\n    /**\n    *  An @Input property that allows you to change the `iconColor` of the icon.\n    *```html\n    *<igx-icon color=\"blue\" [isActive]=\"true\" fontSet=\"material\">settings</igx-icon>\n    *```\n    */\n    @Input('color')\n    public iconColor: string;\n\n    /**\n    *  An @Input property that allows you to set the `iconName` of the icon.\n    *  The `iconName` can be set using the `name` property.\n    *```html\n    *<igx-icon color=\"blue\" [isActive]=\"true\" fontSet=\"material\">question_answer</igx-icon>\n    *```\n    */\n    @Input('name')\n    public iconName: string;\n\n    /**\n     * An ElementRef property of the `igx-icon` component.\n     */\n    public el: ElementRef;\n\n    constructor(private _el: ElementRef, private iconService: IgxIconService) {\n        this.el = _el;\n        this.font = this.iconService.defaultFontSet;\n        this.iconService.registerFontSetAlias('material', 'material-icons');\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.updateIconClass();\n    }\n\n    /**\n     *  An accessor that returns the value of the font property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconFont = this.icon.getFontSet;\n     * }\n     * ```\n     */\n    get getFontSet(): string {\n        return this.font;\n    }\n\n    /**\n     *  An accessor that returns the value of the active property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconActive = this.icon.getActive;\n     * }\n     * ```\n     */\n    get getActive(): boolean {\n        return this.active;\n    }\n\n    /**\n     *  An accessor that returns inactive property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconActive = this.icon.getInactive;\n     * }\n     * ```\n     */\n    @HostBinding('class.igx-icon--inactive')\n    get getInactive(): boolean {\n        return !this.active;\n    }\n\n    /**\n     *  An accessor that returns the opposite value of the `iconColor` property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconColor = this.icon.getIconColor;\n     * }\n     * ```\n     */\n    @HostBinding('style.color')\n    get getIconColor(): string {\n        return this.iconColor;\n    }\n\n    /**\n     *  An accessor that returns the value of the iconName property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconName = this.icon.getIconName;\n     * }\n     * ```\n     */\n    get getIconName(): string {\n        return this.iconName;\n    }\n\n    /**\n     *  An accessor that returns the key of the SVG image.\n     *  The key consists of the fontSet and the iconName separated by underscore.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let svgKey = this.icon.getSvgKey;\n     * }\n     * ```\n     */\n    get getSvgKey(): string {\n        if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            return '#' + this.iconService.getSvgIconKey(this.iconName, this.font);\n        }\n\n        return null;\n    }\n\n    /**\n     *   An accessor that returns a TemplateRef to explicit, svg or no ligature.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconTemplate = this.icon.template;\n     * }\n     * ```\n     */\n    get template(): TemplateRef<HTMLElement> {\n        if (this.iconName) {\n            if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n                return this.svgImage;\n            }\n\n            return this.noLigature;\n        }\n\n        return this.explicitLigature;\n    }\n\n    /**\n     * @hidden\n     */\n    private updateIconClass() {\n        const className = this.iconService.fontSetClassName(this.font);\n        this.el.nativeElement.classList.add(className);\n\n        if (this.iconName && !this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            this.el.nativeElement.classList.add(this.iconName);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { IgxIconComponent } from './icon.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { DeprecateMethod } from '../core/deprecateDecorators';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxIconComponent],\n    exports: [IgxIconComponent],\n    imports: [CommonModule, HttpClientModule]\n})\nexport class IgxIconModule {\n    @DeprecateMethod('IgxIconModule.forRoot method is deprecated. Use IgxIconModule instead.')\n    public static forRoot() {\n        return {\n            ngModule: IgxIconModule\n        };\n    }\n}\n\nexport * from './icon.component';\nexport * from './icon.service';\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    NgModule,\n    OnInit,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Size {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large'\n}\n\nexport enum AvatarType {\n    DEFAULT = 'default',\n    INITIALS = 'initials',\n    IMAGE = 'image',\n    ICON = 'icon'\n}\n\n/**\n * **Ignite UI for Angular Avatar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/avatar.html)\n *\n * The Ignite UI Avatar provides an easy way to add an avatar icon to your application.  This icon can be an\n * image, someone's initials or a material icon from the google material icon set.\n *\n * Example:\n * ```html\n * <igx-avatar initials=\"MS\" roundShape=\"true\" size=\"large\">\n * </igx-avatar>\n * ```\n */\n@Component({\n    selector: 'igx-avatar',\n    templateUrl: 'avatar.component.html'\n})\nexport class IgxAvatarComponent implements OnInit, AfterViewInit {\n\n    /**\n     * This is a reference to the avatar `image` element in the DOM.\n     *\n     * ```typescript\n     *  let image =  this.avatar.image;\n     * ```\n     * @memberof IgxAvatarComponent\n     */\n    @ViewChild('image')\n    public image: ElementRef;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('defaultTemplate', { read: TemplateRef })\n    protected defaultTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('imageTemplate', { read: TemplateRef })\n    protected imageTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('initialsTemplate', { read: TemplateRef })\n    protected initialsTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('iconTemplate', { read: TemplateRef })\n    protected iconTemplate: TemplateRef<any>;\n\n    /**\n     * Returns the `aria-label` of the avatar.\n     *\n     * ```typescript\n     * let ariaLabel = this.avatar.ariaLabel;\n     * ```\n     *\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = 'avatar';\n\n    /**\n     * Returns the `role` attribute of the avatar.\n     *\n     * ```typescript\n     * let avatarRole = this.avatar.role;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'img';\n\n    /**\n     * Returns the class of the avatar.\n     *\n     * ```typescript\n     * let avatarCLass =  this.avatar.cssClass;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('class.igx-avatar')\n    public cssClass = 'igx-avatar';\n\n    /**\n     * Returns the type of the avatar.\n     * The avatar can be: `\"initials type avatar\"`, `\"icon type avatar\"` or `\"image type avatar\"`.\n     *\n     * ```typescript\n     * let avatarDescription = this.avatar.roleDescription;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('attr.aria-roledescription')\n    public roleDescription: string;\n\n    /**\n     * @hidden\n     */\n    private _size: string | Size = 'small';\n\n    /**\n     * Sets the `id` of the avatar. If not set, the first avatar component will have `id` = `\"igx-avatar-0\"`.\n     *\n     * ```html\n     * <igx-avatar id=\"my-first-avatar\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-avatar-${NEXT_ID++}`;\n\n    /**\n     * Sets a round shape to the avatar if `roundShape` is `\"true\"`.\n     * By default the shape of the avatar is a square.\n     *\n     * ```html\n     * <igx-avatar roundShape = \"true\" ></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('class.igx-avatar--rounded')\n    @Input()\n    public roundShape = false;\n\n    /**\n     * Sets the avatar's `initials`/`icon` color.\n     *\n     *```html\n     *<igx-avatar color=\"blue\"></igx-avatar>\n     *```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('style.color')\n    @Input()\n    public color: string;\n\n    /**\n     * Sets the background color of the avatar.\n     *\n     * ```html\n     * <igx-avatar bgColor=\"yellow\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('style.background')\n    @Input()\n    public bgColor: string;\n\n    /**\n     * Sets `initials` to the avatar.\n     *\n     * ```html\n     * <igx-avatar initials=\"MN\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public initials: string;\n\n    /**\n     * Sets an `icon` to the avatar. All icons from the material icon set are supported.\n     *\n     * ```html\n     * <igx-avatar icon=\"phone\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * Sets the `image` source of the avatar.\n     *\n     * ```html\n     * <igx-avatar src=\"images/picture.jpg\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public src: string;\n\n    /**\n     * Returns the `size` of the avatar.\n     *\n     * ```typescript\n     *let avatarSize =  this.avatar.size;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public get size(): string | Size {\n        return this._size;\n    }\n\n    /**\n     * Sets the `size`  of the avatar.\n     * By default the `size` is `\"small\"`. It can be set to `\"medium\"` or `\"large\"`.\n     *\n     * ```\n     * <igx-avatar size=\"large\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public set size(value: string | Size) {\n        switch (value) {\n            case 'small':\n            case 'medium':\n            case 'large':\n                this._size = value;\n                break;\n            default:\n                this._size = 'small';\n        }\n    }\n\n    /**\n     * Returns the type of the avatar.\n     *\n     * ```typescript\n     * let avatarType = this.avatar.type;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    get type(): AvatarType {\n        if (this.src) {\n            return AvatarType.IMAGE;\n        }\n\n        if (this.icon) {\n            return AvatarType.ICON;\n        }\n\n        if (this.initials) {\n            return AvatarType.INITIALS;\n        }\n\n        return AvatarType.DEFAULT;\n    }\n\n    /**\n     * Returns the template of the avatar.\n     *\n     * ```typescript\n     * let template = this.avatar.template;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    get template(): TemplateRef<any> {\n        switch (this.type) {\n            case AvatarType.IMAGE:\n                return this.imageTemplate;\n            case AvatarType.INITIALS:\n                return this.initialsTemplate;\n            case AvatarType.ICON:\n                return this.iconTemplate;\n            default:\n                return this.defaultTemplate;\n        }\n    }\n\n    constructor(public elementRef: ElementRef) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.roleDescription = this.getRole();\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        this.elementRef.nativeElement.classList\n            .add(`igx-avatar--${this._size}`, `igx-avatar--${this.type}`);\n    }\n\n    /**\n     * @hidden\n     */\n    private getRole(): string {\n        switch (this.type) {\n            case AvatarType.IMAGE:\n                return 'image avatar';\n            case AvatarType.ICON:\n                return 'icon avatar';\n            case AvatarType.INITIALS:\n                return 'initials avatar';\n            default:\n                return 'custom avatar';\n        }\n    }\n\n    /**\n     * Returns the url of the `image`.\n     *\n     * ```typescript\n     * let imageSourceUrl = this.avatar.getSrcUrl();\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public getSrcUrl() {\n        return `url(${this.src})`;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxAvatarComponent],\n    exports: [IgxAvatarComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxAvatarModule { }\n","import { CommonModule } from '@angular/common';\nimport { Component, HostBinding, Input, NgModule } from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Type {\n    DEFAULT = 'default',\n    INFO = 'info',\n    SUCCESS = 'success',\n    WARNING = 'warning',\n    ERROR = 'error'\n}\n/**\n * **Ignite UI for Angular Badge** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/badge.html)\n *\n * The Ignite UI Badge is used to decorate avatars, navigation menus, or other components in the\n * application when visual notification is needed. They are usually designed as icons with a predefined\n * style to communicate information, success, warnings, or errors.\n *\n * Example:\n * ```html\n * <igx-avatar icon=\"person\" roundShape=\"true\" size=\"small\">\n *   <igx-badge icon=\"check\" type=\"success\" class=\"badge-style\">\n *   </igx-badge>\n * </igx-avatar>\n * ```\n * The `badge-style` class is used to position the badge:\n * ```css\n * .badge-style {\n *   position: absolute;\n *   bottom: -6px;\n *   right:-50px;\n * }\n * ```\n */\n@Component({\n    selector: 'igx-badge',\n    templateUrl: 'badge.component.html'\n})\nexport class IgxBadgeComponent {\n\n    /**\n    * An @Input property that sets the value of the `id` attribute.\n    * ```html\n    *<igx-badge id=\"igx-badge-2\" icon=\"check\" type=\"success\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-badge-${NEXT_ID++}`;\n\n    /**\n    * An @Input property controlling the type of the badge.\n    * Allowed values are `default`, `info`, `success`, `warning`, `error`.\n    * Providing an invalid value won't display a badge.\n    * ```html\n    *<igx-badge type=\"success\" icon=\"check\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public type: string | Type = 'default';\n\n    /**\n    * An @Input property that sets the value to be displayed inside the badge.\n    * If an `icon` property is already set the `icon` will be displayed.\n    * If neither a `value` nor an `icon` is set the contentent of the badge will be empty.\n    * ```html\n    *<igx-badge value=\"11\" type=\"success\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public value = '';\n\n    /**\n     * Set an icon for the badge from the material icons set.\n     * Has priority over the `value` property.\n     * If neither a `value` nor an `icon` is set the content of the badge will be empty.\n     * Providing an invalid value won't display anything.\n     * ```html\n     *<igx-badge icon=\"check\" type=\"success\" class=\"badge-style\" value=\"11\"></igx-badge>\n     * ```\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * This allows you to set value to role attribute.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.label = \"badge-status\";\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'status';\n\n    /**\n     * This allows you to disable igx-badge class. The default it's applied.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.cssClass = false;\n     * ```\n     */\n    @HostBinding('class.igx-badge')\n    public cssClass = 'igx-badge';\n\n    /**\n     * This allows you to set value to aria-label attribute.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.label = \"icon-badge\";\n     * ```\n     */\n    @HostBinding('attr.aria-label')\n    public label = 'badge';\n\n    /**\n     * @hidden\n     * Defines a human-readable, accessor, author-localized description for the `type` and the `icon` or `value` of the element.\n     */\n    get roleDescription() {\n        let message;\n\n        // tslint:disable-next-line:prefer-conditional-expression\n        if (this.icon) {\n            message = this.type + ' type badge with icon type ' + this.icon;\n        } else if (this.value) {\n            message = this.type + ' badge type with value ' + this.value;\n        } else {\n            message = this.type + ' badge type without value';\n        }\n\n        return message;\n    }\n\n    /**\n     * @hidden\n     * Method which makes the name of the class more descriptive.\n     * This helps the styling of the badges.\n     */\n    public setClasses() {\n        let classes = {};\n\n        switch (Type[this.type.toUpperCase()]) {\n            case Type.DEFAULT:\n                classes = {\n                    [`${this.cssClass}__circle--default`]: true\n                };\n                break;\n            case Type.INFO:\n                classes = {\n                    [`${this.cssClass}__circle--info`]: true\n                };\n                break;\n            case Type.SUCCESS:\n                classes = {\n                    [`${this.cssClass}__circle--success`]: true\n                };\n                break;\n            case Type.WARNING:\n                classes = {\n                    [`${this.cssClass}__circle--warning`]: true\n                };\n                break;\n            case Type.ERROR:\n                classes = {\n                    [`${this.cssClass}__circle--error`]: true\n                };\n                break;\n        }\n\n        return classes;\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBadgeComponent],\n    exports: [IgxBadgeComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxBadgeModule {\n}\n","import { EventEmitter } from '@angular/core';\nimport { AnimationReferenceMetadata } from '@angular/animations';\n\nexport interface IgxExpansionPanelBase {\n    id: string;\n    cssClass: string;\n    /** @hidden @internal */\n    headerId: string;\n    collapsed: boolean;\n    animationSettings: { openAnimation: AnimationReferenceMetadata, closeAnimation: AnimationReferenceMetadata };\n    onCollapsed: EventEmitter<any>;\n    onExpanded: EventEmitter<any>;\n    collapse(evt?: Event);\n    expand(evt?: Event);\n    toggle(evt?: Event);\n}\n\n/** @hidden */\nexport const IGX_EXPANSION_PANEL_COMPONENT = 'IgxExpansionPanelToken';\n\nexport interface IExpansionPanelEventArgs {\n    event: Event;\n    panel: IgxExpansionPanelBase;\n}\n","import { Component, HostBinding, ElementRef, Input, ChangeDetectorRef, OnInit, Inject } from '@angular/core';\nimport { IgxExpansionPanelBase, IGX_EXPANSION_PANEL_COMPONENT } from './expansion-panel.common';\n\n@Component({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-body',\n    template: `<ng-content></ng-content>`\n})\nexport class IgxExpansionPanelBodyComponent implements OnInit {\n    private _labelledBy = '';\n    private _label = '';\n    constructor(\n        @Inject(IGX_EXPANSION_PANEL_COMPONENT) public panel: IgxExpansionPanelBase,\n        public element: ElementRef, public cdr: ChangeDetectorRef) {\n    }\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-expansion-panel__body')\n    public cssClass = `igx-expansion-panel__body`;\n\n    /**\n     * Gets the `aria-label` attribute of the panel body\n     * Defaults to the panel id with '-region' in the end;\n     * Get\n     * ```typescript\n     *  const currentLabel = this.panel.body.label;\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-label')\n    public get label(): string {\n        return this._label || this.panel.id + '-region';\n    }\n    /**\n     * Sets the `aria-label` attribute of the panel body\n     * ```typescript\n     *  this.panel.body.label = 'my-custom-label';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [label]=\"'my-custom-label'\"></igx-expansion-panel-body>\n     * ```\n     */\n    public set label(val: string) {\n        this._label = val;\n    }\n\n    /**\n     * Gets the `aria-labelledby` attribute of the panel body\n     * Defaults to the panel header id;\n     * Get\n     * ```typescript\n     *  const currentLabel = this.panel.body.labelledBy;\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-labelledby')\n    public get labelledBy(): string {\n        return this._labelledBy;\n    }\n    /**\n     * Sets the `aria-labelledby` attribute of the panel body\n     * ```typescript\n     *  this.panel.body.labelledBy = 'my-custom-id';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [labelledBy]=\"'my-custom-id'\"></igx-expansion-panel-body>\n     * ```\n     */\n    public set labelledBy(val: string) {\n        this._labelledBy = val;\n    }\n\n    /**\n     * Gets/sets the `role` attribute of the panel body\n     * Default is 'region';\n     * Get\n     * ```typescript\n     *  const currentRole = this.panel.body.role;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.body.role = 'content';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [role]=\"'custom'\"></igx-expansion-panel-body>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.role')\n    public role = 'region';\n\n    ngOnInit() {\n        this.labelledBy = this.panel.headerId;\n        this.label = this.panel.id + '-region';\n    }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-title'\n})\nexport class IgxExpansionPanelTitleDirective {\n    @HostBinding('class.igx-expansion-panel__header-title')\n    public cssClass = `igx-expansion-panel__header-title`;\n}\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-description'\n})\nexport class IgxExpansionPanelDescriptionDirective {\n    @HostBinding('class.igx-expansion-panel__header-description')\n    public cssClass = `igx-expansion-panel__header-description`;\n}\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-icon'\n})\nexport class IgxExpansionPanelIconDirective {\n}\n","import {\n    Component,\n    ChangeDetectorRef,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    Host,\n    EventEmitter,\n    Output,\n    ContentChild,\n    Inject\n} from '@angular/core';\nimport { IgxExpansionPanelIconDirective } from './expansion-panel.directives';\nimport { IExpansionPanelEventArgs, IGX_EXPANSION_PANEL_COMPONENT, IgxExpansionPanelBase } from './expansion-panel.common';\n\n/**\n * @hidden\n */\nexport enum ICON_POSITION {\n    LEFT = 'left',\n    NONE = 'none',\n    RIGHT = 'right'\n}\n\n\n@Component({\n    selector: 'igx-expansion-panel-header',\n    templateUrl: 'expansion-panel-header.component.html'\n})\nexport class IgxExpansionPanelHeaderComponent {\n     // properties section\n    private _iconTemplate = false;\n    /**\n     * Sets/gets the `id` of the expansion panel header.\n     * ```typescript\n     * let panelHeaderId =  this.panel.header.id;\n     * ```\n     * @memberof IgxExpansionPanelComponent\n     */\n    public id = '';\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxExpansionPanelIconDirective)\n    public set iconTemplate(val: any) {\n        this._iconTemplate = <boolean>val;\n    }\n\n    /**\n     * @hidden\n     */\n    public get iconTemplate(): any {\n        return this._iconTemplate;\n    }\n\n    /**\n     * Gets/sets the `aria-level` attribute of the header\n     * Get\n     * ```typescript\n     *  const currentAriaLevel = this.panel.header.lv;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.lv = '5';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [lv]=\"myCustomLevel\"></igx-expansion-panel-header>\n     * ```\n     */\n    @HostBinding('attr.aria-level')\n    @Input()\n    public lv = '3';\n\n    /**\n     * Gets/sets the `role` attribute of the header\n     * Get\n     * ```typescript\n     *  const currentRole = this.panel.header.role;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.role = '5';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [role]=\"'custom'\"></igx-expansion-panel-header>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'heading';\n\n    /**\n     * @hidden\n     */\n    public get controls (): string {\n        return this.panel.id;\n    }\n\n    /**\n     * Gets/sets the position of the expansion-panel-header expand/collapse icon\n     * Accepts `left`, `right` or `none`\n     * ```typescript\n     *  const currentIconPosition = this.panel.header.iconPosition;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.iconPosition = 'left';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [iconPosition]=\"'right'\"></igx-expansion-panel-header>\n     * ```\n     */\n    @Input()\n    public iconPosition: ICON_POSITION = ICON_POSITION.LEFT;\n\n    /**\n     * Emitted whenever a user interacts with the header host\n     * ```typescript\n     *  handleInteraction(event: IExpansionPanelEventArgs) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header (onInteraction)=\"handleInteraction($event)\">\n     *      ...\n     *  </igx-expansion-panel-header>\n     * ```\n     */\n    @Output()\n    public onInteraction = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * @hidden\n     */\n     @HostBinding('class.igx-expansion-panel__header')\n     public cssClass = 'igx-expansion-panel__header';\n\n     /**\n     * @hidden\n     */\n     @HostBinding('class.igx-expansion-panel__header--expanded')\n     public get isExpanded () {\n            return !this.panel.collapsed;\n         }\n\n    /**\n     * Gets/sets the whether the header is disabled\n     * When disabled, the header will not handle user events and will stop their propagation\n     *\n     * ```typescript\n     *  const isDisabled = this.panel.header.disabled;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.disabled = true;\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [disabled]=\"true\">\n     *     ...\n     *  </igx-expansion-panel-header>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-expansion-panel--disabled')\n    public disabled = false;\n\n    constructor(@Host() @Inject(IGX_EXPANSION_PANEL_COMPONENT) public panel: IgxExpansionPanelBase, public cdr: ChangeDetectorRef,\n     public elementRef: ElementRef) {\n         this.id = `${this.panel.id}-header`;\n     }\n\n     /**\n     * @hidden\n     */\n     @HostListener('keydown.Enter', ['$event'])\n     @HostListener('keydown.Space', ['$event'])\n     @HostListener('keydown.Spacebar', ['$event'])\n     @HostListener('click', ['$event'])\n     public onAction(evt?: Event) {\n         if (this.disabled) {\n            evt.stopPropagation();\n            return;\n         }\n         this.onInteraction.emit({ event: evt, panel: this.panel });\n         this.panel.toggle(evt);\n         evt.preventDefault();\n     }\n\n    /** @hidden @internal */\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    public openPanel(event: KeyboardEvent) {\n        if (event.altKey) {\n            this.panel.expand(event);\n            this.onInteraction.emit({ event: event, panel: this.panel });\n        }\n     }\n\n     /** @hidden @internal */\n     @HostListener('keydown.Alt.ArrowUp', ['$event'])\n     public closePanel(event: KeyboardEvent) {\n        if (event.altKey) {\n            this.panel.collapse(event);\n            this.onInteraction.emit({ event: event, panel: this.panel });\n        }\n     }\n\n     /**\n     * @hidden\n     */\n     public get iconPositionClass(): string {\n        switch (this.iconPosition) {\n            case (ICON_POSITION.LEFT):\n                return `igx-expansion-panel__header-icon--start`;\n            case (ICON_POSITION.RIGHT):\n                return `igx-expansion-panel__header-icon--end`;\n            case (ICON_POSITION.NONE):\n                return `igx-expansion-panel__header-icon--none`;\n            default:\n                return '';\n        }\n     }\n}\n","import {\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    ElementRef,\n    HostBinding,\n    Input,\n    Output,\n    ContentChild,\n    forwardRef,\n} from '@angular/core';\nimport { AnimationBuilder, AnimationReferenceMetadata, useAnimation, AnimationAnimateRefMetadata } from '@angular/animations';\nimport { growVerOut, growVerIn } from '../animations/main';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\nimport { IGX_EXPANSION_PANEL_COMPONENT, IgxExpansionPanelBase, IExpansionPanelEventArgs } from './expansion-panel.common';\n\nlet NEXT_ID = 0;\n\nexport interface AnimationSettings {\n    openAnimation: AnimationReferenceMetadata;\n    closeAnimation: AnimationReferenceMetadata;\n}\n@Component({\n    selector: 'igx-expansion-panel',\n    templateUrl: 'expansion-panel.component.html',\n    providers: [{ provide: IGX_EXPANSION_PANEL_COMPONENT, useExisting: IgxExpansionPanelComponent }]\n})\nexport class IgxExpansionPanelComponent implements IgxExpansionPanelBase {\n\n    /**\n     * Sets/gets the animation settings of the expansion panel component\n     * Open and Close animation should be passed\n     *\n     * Get\n     * ```typescript\n     *  const currentAnimations = this.panel.animationSettings;\n     * ```\n     * Set\n     * ```typescript\n     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     *  ...\n     *  this.panel.animationsSettings = {\n     *      openAnimation: slideInLeft,\n     *      closeAnimation: slideOutRight\n     * };\n     * ```\n     * or via template\n     * ```typescript\n     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     *  ...\n     *  myCustomAnimationObject = {\n     *      openAnimation: slideInLeft,\n     *      closeAnimation: slideOutRight\n     * };\n     * ```html\n     *  <igx-expansion-panel [animationSettings]='myCustomAnimationObject'>\n     *  ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Input()\n    public animationSettings: AnimationSettings = {\n        openAnimation: growVerIn,\n        closeAnimation: growVerOut\n    };\n\n    /**\n     * Sets/gets the `id` of the expansion panel component.\n     * If not set, `id` will have value `\"igx-expansion-panel-0\"`;\n     * ```html\n     * <igx-expansion-panel id = \"my-first-expansion-panel\"></igx-expansion-panel>\n     * ```\n     * ```typescript\n     * let panelId =  this.panel.id;\n     * ```\n     * @memberof IgxExpansionPanelComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-expansion-panel-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-expansion-panel')\n    public cssClass = 'igx-expansion-panel';\n\n    /**\n     * Gets/sets whether the component is collapsed (its content is hidden)\n     * Get\n     * ```typescript\n     *  const myPanelState: boolean = this.panel.collapsed;\n     * ```\n     * Set\n     * ```html\n     *  this.panel.collapsed = true;\n     * ```\n     */\n    @Input()\n    public collapsed = true;\n\n    /**\n     * Emitted when the expansion panel finishes collapsing\n     * ```typescript\n     *  handleCollapsed(event: {\n     *  panel: IgxExpansionPanelComponent,\n     *  event: Event\n     * })\n     * ```\n     * ```html\n     *  <igx-expansion-panel (onCollapsed)=\"handleCollapsed($event)\">\n     *      ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Output()\n    public onCollapsed = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * Emitted when the expansion panel finishes expanding\n     * ```typescript\n     *  handleExpanded(event: {\n     *  panel: IgxExpansionPanelComponent,\n     *  event: Event\n     * })\n     * ```\n     * ```html\n     *  <igx-expansion-panel (onExpanded)=\"handleExpanded($event)\">\n     *      ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Output()\n    public onExpanded = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * @hidden\n     */\n    public get headerId() {\n        return this.header ? `${this.id}-header` : '';\n    }\n    constructor(private cdr: ChangeDetectorRef, private builder: AnimationBuilder) { }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxExpansionPanelBodyComponent), { read: forwardRef(() => IgxExpansionPanelBodyComponent) })\n    public body: IgxExpansionPanelBodyComponent;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxExpansionPanelHeaderComponent), { read: forwardRef(() => IgxExpansionPanelHeaderComponent) })\n    public header: IgxExpansionPanelHeaderComponent;\n\n\n    private playOpenAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.openAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const openAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n\n        openAnimationPlayer.onDone(() => {\n            cb();\n            openAnimationPlayer.reset();\n        });\n\n        openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.closeAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const closeAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n        closeAnimationPlayer.onDone(() => {\n            cb();\n            closeAnimationPlayer.reset();\n        });\n\n        closeAnimationPlayer.play();\n    }\n\n    /**\n     * Collapses the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.collapse($event)\">Collpase Panel</button>\n     * ```\n     */\n    collapse(evt?: Event) {\n        if (this.collapsed) { // If expansion panel is already collapsed, do nothing\n            return;\n        }\n        this.playCloseAnimation(\n            () => {\n                this.onCollapsed.emit({ event: evt, panel: this });\n                this.collapsed = true;\n            }\n        );\n    }\n\n    /**\n     * Expands the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.expand($event)\">Expand Panel</button>\n     * ```\n     */\n    expand(evt?: Event) {\n        if (!this.collapsed) { // If the panel is already opened, do nothing\n            return;\n        }\n        this.collapsed = false;\n        this.cdr.detectChanges();\n        this.playOpenAnimation(\n            () => {\n                this.onExpanded.emit({ event: evt, panel: this });\n            }\n        );\n    }\n\n    /**\n     * Toggles the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.toggle($event)\">Expand Panel</button>\n     * ```\n     */\n    toggle(evt?: Event) {\n        if (this.collapsed) {\n            this.open(evt);\n        } else {\n            this.close(evt);\n        }\n    }\n\n    open(evt?: Event) {\n        this.expand(evt);\n    }\n    close(evt?: Event) {\n        this.collapse(evt);\n    }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxExpansionPanelComponent } from './expansion-panel.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport { IgxExpansionPanelDescriptionDirective, IgxExpansionPanelTitleDirective,\n  IgxExpansionPanelIconDirective } from './expansion-panel.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n    IgxExpansionPanelIconDirective\n  ],\n  entryComponents: [\n  ],\n  exports: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n      IgxExpansionPanelIconDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule\n  ]\n})\nexport class IgxExpansionPanelModule {\n}\n","import { Directive } from '@angular/core';\n\n// tslint:disable:directive-selector\n@Directive({\n    selector: 'igx-banner-actions'\n})\nexport class IgxBannerActionsDirective {\n}\n","import { Component, NgModule, EventEmitter, Output, Input, ViewChild, ElementRef,\n    ContentChild, HostBinding } from '@angular/core';\nimport { IgxExpansionPanelModule } from '../expansion-panel/expansion-panel.module';\nimport { AnimationSettings } from '../expansion-panel/expansion-panel.component';\nimport { IgxExpansionPanelComponent } from '../expansion-panel';\nimport { IgxIconModule, IgxIconComponent } from '../icon/index';\nimport { IToggleView } from '../core/navigation';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxBannerActionsDirective } from './banner.directives';\nimport { CommonModule } from '@angular/common';\nimport { CancelableEventArgs } from '../core/utils';\n\nexport interface BannerEventArgs {\n    banner: IgxBannerComponent;\n    event?: Event;\n}\n\nexport interface BannerCancelEventArgs extends BannerEventArgs, CancelableEventArgs {\n}\n/**\n * **Ignite UI for Angular Banner** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/banner.html)\n *\n * The Ignite UI Banner provides a highly templateable and easy to use banner that can be shown in your application.\n *\n * Usage:\n *\n * ```html\n * <igx-banner #banner>\n *   Our privacy settings have changed.\n *  <igx-banner-actions>\n *      <button igxButton=\"raised\">Read More</button>\n *      <button igxButton=\"raised\">Accept and Continue</button>\n *  </igx-banner-actions>\n * </igx-banner>\n * ```\n */\n@Component({\n    selector: 'igx-banner',\n    templateUrl: 'banner.component.html'\n})\nexport class IgxBannerComponent implements IToggleView {\n    private _bannerEvent: BannerEventArgs;\n    private _animationSettings: AnimationSettings;\n\n    @ViewChild('expansionPanel')\n    private _expansionPanel: IgxExpansionPanelComponent;\n\n    @ContentChild(IgxBannerActionsDirective)\n    private _bannerActionTemplate: any;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxIconComponent)\n    public bannerIcon: any;\n\n    /**\n     * Fires after the banner shows up\n     * ```typescript\n     * public handleOpened(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onOpened)=\"handleOpened($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<BannerEventArgs>();\n\n    /**\n     * Fires before the banner shows up\n     * ```typescript\n     * public handleOpening(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onOpening)=\"handleOpening($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<BannerCancelEventArgs>();\n\n    /**\n     * Fires after the banner hides\n     * ```typescript\n     * public handleClosed(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onClosed)=\"handleClosed($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<BannerEventArgs>();\n\n    /**\n     * Fires before the banner hides\n     * ```typescript\n     * public handleClosing(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onClosing)=\"handleClosing($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<BannerCancelEventArgs>();\n\n    /** @hidden */\n    public get useDefaultTemplate(): boolean {\n        return !this._bannerActionTemplate;\n    }\n\n    /**\n     * Get the animation settings used by the banner open/close methods\n     * ```typescript\n     * let currentAnimations: AnimationSettings = banner.animationSettings\n     * ```\n     */\n    @Input()\n    public get animationSettings(): AnimationSettings {\n        return this._animationSettings ? this._animationSettings : this._expansionPanel.animationSettings;\n    }\n\n    /**\n     * Set the animation settings used by the banner open/close methods\n     * ```typescript\n     * import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     * ...\n     * banner.animationSettings: AnimationSettings = { openAnimation: slideInLeft, closeAnimation: slideOutRight };\n     * ```\n     */\n    public set animationSettings(settings: AnimationSettings) {\n        this._animationSettings = settings;\n    }\n    /**\n     * Gets whether banner is collapsed\n     *\n     * ```typescript\n     * const isCollapsed: boolean = banner.collapsed;\n     * ```\n     */\n    public get collapsed() {\n        return this._expansionPanel.collapsed;\n    }\n\n    /**\n     * Returns the native element of the banner component\n     * ```typescript\n     *  const myBannerElement: HTMLElement = banner.element;\n     * ```\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.display')\n    public get displayStyle(): string {\n        return this.collapsed ? '' : 'block';\n    }\n\n    constructor(public elementRef: ElementRef) { }\n\n    /**\n     * Opens the banner\n     *\n     * ```typescript\n     *  myBanner.open();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.open()\">Open Banner</button>\n     * ```\n     */\n    public open(event?: Event) {\n        this._bannerEvent = { banner: this, event};\n        const openingArgs = {\n            banner: this,\n            event,\n            cancel: false\n        };\n        this.onOpening.emit(openingArgs);\n        if (openingArgs.cancel) {\n            return;\n        }\n        this._expansionPanel.open(event);\n    }\n\n    /**\n     * Closes the banner\n     *\n     * ```typescript\n     *  myBanner.close();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.close()\">Close Banner</button>\n     * ```\n     */\n    public close(event?: Event) {\n        this._bannerEvent = { banner: this, event};\n        const closingArgs = {\n            banner: this,\n            event,\n            cancel: false\n        };\n        this.onClosing.emit(closingArgs);\n        if (closingArgs.cancel) {\n            return;\n        }\n        this._expansionPanel.close(event);\n    }\n\n    /**\n     * Toggles the banner\n     *\n     * ```typescript\n     *  myBanner.toggle();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.toggle()\">Toggle Banner</button>\n     * ```\n     */\n    toggle(event?: Event) {\n        if (this.collapsed) {\n            this.open(event);\n        } else {\n            this.close(event);\n        }\n    }\n\n    /** @hidden */\n    public onExpansionPanelOpen() {\n        this.onOpened.emit(this._bannerEvent);\n    }\n\n    /** @hidden */\n    public onExpansionPanelClose() {\n        this.onClosed.emit(this._bannerEvent);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBannerComponent, IgxBannerActionsDirective],\n    exports: [IgxBannerComponent, IgxBannerActionsDirective],\n    imports: [CommonModule, IgxExpansionPanelModule, IgxIconModule, IgxButtonModule, IgxRippleModule]\n})\nexport class IgxBannerModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    Renderer2,\n    ViewChildren,\n    OnDestroy\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { IgxButtonDirective, IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { takeUntil } from 'rxjs/operators';\n\nexport enum ButtonGroupAlignment { horizontal, vertical }\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Button Group** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/buttongroup.html)\n *\n * The Ignite UI Button Group displays a group of buttons either vertically or horizontally.  The group supports\n * single, multiple and toggle selection.\n *\n * Example:\n * ```html\n * <igx-buttongroup multiSelection=\"true\" [values]=\"fontOptions\">\n * </igx-buttongroup>\n * ```\n * The `fontOptions` value shown above is defined as:\n * ```typescript\n * this.fontOptions = [\n *   { icon: 'format_bold', selected: false },\n *   { icon: 'format_italic', selected: false },\n *   { icon: 'format_underlined', selected: false }];\n * ```\n */\n@Component({\n    selector: 'igx-buttongroup',\n    templateUrl: 'buttongroup-content.component.html'\n})\n\nexport class IgxButtonGroupComponent implements AfterViewInit, OnDestroy {\n    private _disabled = false;\n    protected buttonClickNotifier$ = new Subject<boolean>();\n    protected queryListNotifier$ = new Subject<boolean>();\n\n    @ViewChildren(IgxButtonDirective) private viewButtons: QueryList<IgxButtonDirective>;\n    @ContentChildren(IgxButtonDirective) private templateButtons: QueryList<IgxButtonDirective>;\n\n    /**\n     * A collection containing all buttons inside the button group.\n     */\n    public get buttons(): IgxButtonDirective[] {\n        return [...this.viewButtons.toArray(), ...this.templateButtons.toArray()];\n    }\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not set it will be automatically generated.\n     * ```html\n     *  <igx-buttongroup [id]=\"'igx-dialog-56'\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-buttongroup-${NEXT_ID++}`;\n\n    /**\n     * Allows you to set a style using the `itemContentCssClass` input.\n     * The value should be the CSS class name that will be applied to the button group.\n     *```typescript\n     *public style1 = \"styleClass\";\n     * //..\n     *```\n     * ```html\n     *<igx-buttongroup [itemContentCssClass]=\"style1\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     *```\n     */\n    @Input() set itemContentCssClass(value: string) {\n        this._itemContentCssClass = value || this._itemContentCssClass;\n    }\n\n    /**\n     * Returns the CSS class of the item content of the `IgxButtonGroup`.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *   let buttonSelect = this.buttonG.itemContentCssClass;\n     *}\n     *```\n     */\n    get itemContentCssClass(): string {\n        return this._itemContentCssClass;\n    }\n\n    /**\n     * An @Input property that enables selecting multiple buttons. By default, multi-selection is false.\n     * ```html\n     * <igx-buttongroup [multiSelection]=\"false\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public multiSelection = false;\n    /**\n     * An @Input property that allows setting the buttons in the button group.\n     * ```typescript\n     *  public ngOnInit() {\n     *      this.cities = [\n     *        new Button({\n     *          label: \"Sofia\"\n     *      }),\n     *        new Button({\n     *          label: \"London\"\n     *      }),\n     *        new Button({\n     *          label: \"New York\",\n     *          selected: true\n     *      }),\n     *        new Button({\n     *          label: \"Tokyo\"\n     *      })\n     *  ];\n     *  }\n     *  //..\n     * ```\n     * ```html\n     *  <igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public values: any;\n    /**\n     * An @Input property that allows you to disable the `igx-buttongroup` component. By default it's false.\n     * ```html\n     * <igx-buttongroup [disabled]=\"true\" [multiSelection]=\"multi\" [values]=\"fontOptions\"></igx-buttongroup>\n     * ```\n     */\n    @Input()\n    public get disabled(): boolean {\n        return this._disabled;\n    }\n    public set disabled(value: boolean) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this.viewButtons && this.templateButtons) {\n                this.buttons.forEach((b) => b.disabled = this._disabled);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectedIndexes: number[] = [];\n\n    /**\n     * Allows you to set the button group alignment.\n     * Available options are `ButtonGroupAlignment.horizontal` (default) and `ButtonGroupAlignment.vertical`.\n     * ```typescript\n     *public alignment = ButtonGroupAlignment.vertical;\n     * //..\n     * ```\n     * ```html\n     *<igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() set alignment(value: ButtonGroupAlignment) {\n        this._isVertical = value === ButtonGroupAlignment.vertical;\n    }\n    /**\n     * Returns the alignment of the `igx-buttongroup`.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let buttonAlignment = this.buttonG.alignment;\n     *}\n     *```\n     */\n    get alignment(): ButtonGroupAlignment {\n        return this._isVertical ? ButtonGroupAlignment.vertical : ButtonGroupAlignment.horizontal;\n    }\n\n    /**\n     * An @Ouput property that emits an event when a button is selected.\n     *```typescript\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onSelect(buttongroup){\n     *    this.toast.show()\n     *}\n     * //...\n     *```\n     *```html\n     * <igx-buttongroup #MyChild [multiSelection]=\"!multi\" (onSelect)=\"onSelect($event)\"></igx-buttongroup>\n     *<igx-toast #toast message=\"You have made a selection!\"></igx-toast>\n     *```\n     */\n    @Output() public onSelect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * An @Ouput property that emits an event when a button is deselected.\n     *```typescript\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onUnselect(buttongroup){\n     *    this.toast.show()\n     *}\n     * //...\n     *```\n     *```html\n     * igx-buttongroup #MyChild [multiSelection]=\"multi\" (onUnselect)=\"onUnselect($event)\"></igx-buttongroup>\n     *<igx-toast #toast message=\"You have deselected a button!\"></igx-toast>\n     *```\n     */\n    @Output() public onUnselect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * Returns true if the `igx-buttongroup` alignment is vertical.\n     * Note that in order for the accessor to work correctly the property should be set explicitly.\n     * ```html\n     * <igx-buttongroup #MyChild [alignment]=\"alignment\" [values]=\"alignOptions\">\n     * ```\n     * ```typescript\n     * //...\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let orientation = this.buttonG.isVertical;\n     *}\n     *```\n     */\n    public get isVertical(): boolean {\n        return this._isVertical;\n    }\n    private _isVertical: boolean;\n    private _itemContentCssClass: string;\n\n    constructor(private _cdr: ChangeDetectorRef, private _renderer: Renderer2) {\n    }\n\n    /**\n     * Gets the selected button/buttons.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let selectedButton = this.buttonG.selectedButtons;\n     *}\n     *```\n     */\n    get selectedButtons(): IgxButtonDirective[] {\n        return this.buttons.filter((b, i) => {\n            return this.selectedIndexes.indexOf(i) !== -1;\n        });\n\n    }\n\n    /**\n     * Selects a button by its index.\n     * @memberOf {@link IgxButtonGroupComponent}\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    this.buttonG.selectButton(2);\n     *    this.cdr.detectChanges();\n     *}\n     *```\n     */\n    public selectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        if (buttonElement.classList.contains('igx-button--disabled')) {\n            return;\n        }\n\n        this.selectedIndexes.push(index);\n        button.selected = true;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'true');\n        this._renderer.addClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onSelect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = true;\n        }\n\n        // deselect other buttons if multiSelection is not enabled\n        if (!this.multiSelection && this.selectedIndexes.length > 1) {\n            this.buttons.forEach((b, i) => {\n                if (i !== index && this.selectedIndexes.indexOf(i) !== -1) {\n                    this.deselectButton(i);\n                }\n            });\n        }\n    }\n\n    /**\n     * Deselects a button by its index.\n     * @memberOf {@link IgxButtonGroupComponent}\n     * ```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    this.buttonG.deselectButton(2);\n     *    this.cdr.detectChanges();\n     *}\n     * ```\n     */\n    public deselectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        if (buttonElement.classList.contains('igx-button--disabled')) {\n            return;\n        }\n\n        this.selectedIndexes.splice(this.selectedIndexes.indexOf(index), 1);\n        button.selected = false;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'false');\n        this._renderer.removeClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onUnselect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = false;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        const initButtons = () => {\n            // Cancel any existing buttonClick subscriptions\n            this.buttonClickNotifier$.next();\n\n            this.selectedIndexes.splice(0, this.selectedIndexes.length);\n\n            // initial configuration\n            this.buttons.forEach((button, index) => {\n                const buttonElement = button.nativeElement;\n\n                if (this.disabled) {\n                    button.disabled = true;\n                }\n\n                if (!button.disabled && button.selected) {\n                    this.selectButton(index);\n                }\n\n                button.buttonClick.pipe(takeUntil(this.buttonClickNotifier$)).subscribe((ev) => this._clickHandler(ev, index));\n                this._renderer.addClass(buttonElement, 'igx-button-group__item');\n            });\n        };\n\n        this.viewButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        this.templateButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        initButtons();\n\n        this._cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.buttonClickNotifier$.next();\n        this.buttonClickNotifier$.complete();\n\n        this.queryListNotifier$.next();\n        this.queryListNotifier$.complete();\n    }\n\n    /**\n     *@hidden\n     */\n    public _clickHandler(event, i) {\n        if (this.selectedIndexes.indexOf(i) !== -1) {\n            this.deselectButton(i);\n        } else {\n            this.selectButton(i);\n        }\n    }\n}\n\nexport interface IButtonGroupEventArgs {\n    button: IgxButtonDirective;\n    index: number;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxButtonGroupComponent],\n    exports: [IgxButtonGroupComponent],\n    imports: [IgxButtonModule, CommonModule, IgxRippleModule, IgxIconModule]\n})\n\nexport class IgxButtonGroupModule {\n}\n","export interface DateRangeDescriptor {\n    type: DateRangeType;\n    dateRange?: Date[];\n}\n\nexport enum DateRangeType {\n    After,\n    Before,\n    Between,\n    Specific,\n    Weekdays,\n    Weekends\n}\n","import { DateRangeDescriptor, DateRangeType } from '../core/dates';\n\nconst MDAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst FEBRUARY = 1;\n\nexport function range(start = 0, stop, step = 1) {\n    const res = [];\n    const cur = (stop === undefined) ? 0 : start;\n    const max = (stop === undefined) ? start : stop;\n    for (let i = cur; step < 0 ? i > max : i < max; i += step) {\n        res.push(i);\n    }\n    return res;\n}\n\n/**\n * Returns true for leap years, false for non-leap years.\n *\n * @export\n * @param year\n * @returns\n */\nexport function isLeap(year: number): boolean {\n    return (year % 4 === 0) && ((year % 100 !== 0) || (year % 400 === 0));\n}\n\nexport function weekDay(year: number, month: number, day: number): number {\n    return new Date(year, month, day).getDay();\n}\n\n/**\n * Return weekday and number of days for year, month.\n *\n * @export\n * @param year\n * @param month\n * @returns\n */\nexport function monthRange(year: number, month: number): number[] {\n    if ((month < 0) || (month > 11)) {\n        throw new Error('Invalid month specified');\n    }\n    const day = weekDay(year, month, 1);\n    let nDays = MDAYS[month];\n    if ((month === FEBRUARY) && (isLeap(year))) {\n        nDays++;\n    }\n    return [day, nDays];\n}\n\nexport function isDateInRanges(date: Date, ranges: DateRangeDescriptor[]): boolean {\n    date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    const dateInMs = date.getTime();\n\n    for (const descriptor of ranges) {\n        const dRanges = descriptor.dateRange ? descriptor.dateRange.map(\n            r => new Date(r.getFullYear(), r.getMonth(), r.getDate())) : undefined;\n        switch (descriptor.type) {\n            case (DateRangeType.After):\n                if (dateInMs > dRanges[0].getTime()) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Before):\n                if (dateInMs < dRanges[0].getTime()) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Between):\n                const dRange = dRanges.map(d => d.getTime());\n                const min = Math.min(dRange[0], dRange[1]);\n                const max = Math.max(dRange[0], dRange[1]);\n                if (dateInMs >= min && dateInMs <= max) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Specific):\n                const datesInMs = dRanges.map(d => d.getTime());\n                for (const specificDateInMs of datesInMs) {\n                    if (dateInMs === specificDateInMs) {\n                        return true;\n                    }\n                }\n\n                break;\n            case (DateRangeType.Weekdays):\n                const day = date.getDay();\n                if (day % 6 !== 0) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Weekends):\n                const weekday = date.getDay();\n                if (weekday % 6 === 0) {\n                    return true;\n                }\n\n                break;\n            default:\n                return false;\n        }\n    }\n\n    return false;\n}\n\nexport interface ICalendarDate {\n    date: Date;\n    isCurrentMonth: boolean;\n    isPrevMonth: boolean;\n    isNextMonth: boolean;\n}\n\nexport interface IFormattedParts {\n    value: string;\n    literal?: string;\n    combined: string;\n}\n\nexport interface IFormattingOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\n\n\nexport interface IFormattingViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n\nexport enum WEEKDAYS {\n    SUNDAY = 0,\n    MONDAY = 1,\n    TUESDAY = 2,\n    WEDNESDAY = 3,\n    THURSDAY = 4,\n    FRIDAY = 5,\n    SATURDAY = 6\n}\n\nexport class Calendar {\n\n    private _firstWeekDay: number | WEEKDAYS;\n\n    constructor(firstWeekDay: number | WEEKDAYS = WEEKDAYS.SUNDAY) {\n        this._firstWeekDay = firstWeekDay;\n    }\n\n    public get firstWeekDay(): number {\n        return this._firstWeekDay % 7;\n    }\n\n    public set firstWeekDay(value: number) {\n        this._firstWeekDay = value;\n    }\n\n    /**\n     * Returns an array of weekdays for one week starting\n     * with the currently set `firstWeekDay`\n     *\n     * this.firstWeekDay = 0 (Sunday) --> [0, 1, 2, 3, 4, 5, 6]\n     * this.firstWeekDay = 1 (Monday) --> [1, 2, 3, 4, 5, 6, 0]\n     *\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public weekdays(): number[] {\n        const res = [];\n        for (const i of range(this.firstWeekDay, this.firstWeekDay + 7)) {\n            res.push(i % 7);\n        }\n        return res;\n    }\n\n    /**\n     * Returns the date values for one month. It will always iterate throught\n     * complete weeks, so it will contain dates outside the specified month.\n     *\n     * @param year\n     * @param month\n     * @param boolean\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdates(year: number, month: number, extraWeek: boolean = false): ICalendarDate[] {\n        let date = new Date(year, month, 1);\n        let days = (date.getDay() - this.firstWeekDay) % 7;\n        if (days < 0) {\n            days = 7 - Math.abs(days);\n        }\n        date = this.timedelta(date, 'day', -days);\n        const res = [];\n        let value: ICalendarDate;\n\n        while (true) {\n\n            value = this.generateICalendarDate(date, year, month);\n            res.push(value);\n\n            date = this.timedelta(date, 'day', 1);\n\n            if ((date.getMonth() !== month) && (date.getDay() === this.firstWeekDay)) {\n                if (extraWeek && res.length <= 35) {\n                    for (const i of range(0, 7)) {\n                        value = this.generateICalendarDate(date, year, month);\n                        res.push(value);\n                        date = this.timedelta(date, 'day', 1);\n                    }\n                }\n                break;\n            }\n        }\n        return res;\n    }\n\n    /**\n     * Returns a matrix (array of arrays) representing a month's calendar.\n     * Each row represents a full week; week entries are ICalendarDate objects.\n     *\n     * @param year\n     * @param month\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdatescalendar(year: number, month: number, extraWeek: boolean = false): ICalendarDate[][] {\n        const dates = this.monthdates(year, month, extraWeek);\n        const res = [];\n        for (const i of range(0, dates.length, 7)) {\n            res.push(dates.slice(i, i + 7));\n        }\n        return res;\n    }\n\n    public timedelta(date: Date, interval: string, units: number): Date {\n        const ret = new Date(date);\n\n        const checkRollover = () => {\n            if (ret.getDate() !== date.getDate()) {\n                ret.setDate(0);\n            }\n        };\n\n        switch (interval.toLowerCase()) {\n            case 'year':\n                ret.setFullYear(ret.getFullYear() + units);\n                checkRollover();\n                break;\n            case 'quarter':\n                ret.setMonth(ret.getMonth() + 3 * units);\n                checkRollover();\n                break;\n            case 'month':\n                ret.setMonth(ret.getMonth() + units);\n                checkRollover();\n                break;\n            case 'week':\n                ret.setDate(ret.getDate() + 7 * units);\n                break;\n            case 'day':\n                ret.setDate(ret.getDate() + units);\n                break;\n            case 'hour':\n                ret.setTime(ret.getTime() + units * 3600000);\n                break;\n            case 'minute':\n                ret.setTime(ret.getTime() + units * 60000);\n                break;\n            case 'second':\n                ret.setTime(ret.getTime() + units * 1000);\n                break;\n            default:\n                throw new Error('Invalid interval specifier');\n        }\n        return ret;\n    }\n\n    public formatToParts(date: Date, locale: string, options: any, parts: string[]) {\n        const formatter = new Intl.DateTimeFormat(locale, options);\n        const result = {\n            date,\n            full: formatter.format(date)\n        };\n\n        if ((formatter as any).formatToParts) {\n            const formattedParts = (formatter as any).formatToParts(date);\n\n            const toType = (partType: string) => {\n                const index = formattedParts.findIndex(({ type }) => type === partType);\n                const o: IFormattedParts = { value: '', literal: '', combined: ''};\n\n                if (partType === 'era' && index > -1) {\n                    o.value = formattedParts[index].value;\n                    return o;\n                } else if (partType === 'era' && index === -1) {\n                    return o;\n                }\n\n                o.value = formattedParts[index].value;\n                o.literal = formattedParts[index + 1] ? formattedParts[index + 1].value : '';\n                o.combined = [o.value, o.literal].join('');\n                return o;\n            };\n\n            for (const each of parts) {\n                result[each] = toType(each);\n            }\n        } else {\n            for (const each of parts) {\n                result[each] = { value: '', literal: '', combined: ''};\n            }\n        }\n        return result;\n    }\n\n    private generateICalendarDate(date: Date, year: number, month: number): ICalendarDate {\n        return {\n            date,\n            isCurrentMonth: date.getFullYear() === year && date.getMonth() === month,\n            isNextMonth: this.isNextMonth(date, year, month),\n            isPrevMonth: this.isPreviousMonth(date, year, month)\n        };\n    }\n\n    private isPreviousMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() < month;\n        }\n        return date.getFullYear() < year;\n    }\n\n    private isNextMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() > month;\n        }\n\n        return date.getFullYear() > year;\n    }\n}\n","/**\n * This file contains all the directives used by the @link IgxCalendarComponent.\n * Except for the directives which are used for templating the calendar itself\n * you should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    Output,\n    TemplateRef,\n    ElementRef\n} from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarYear]'\n})\nexport class IgxCalendarYearDirective {\n\n    @Input('igxCalendarYear')\n    public value: Date;\n\n    @Input()\n    public date: Date;\n\n    @Output()\n    public onYearSelection = new EventEmitter<Date>();\n\n    @HostBinding('class.igx-calendar__year')\n    public get defaultCSS(): boolean {\n        return !this.isCurrentYear;\n    }\n\n    @HostBinding('class.igx-calendar__year--current')\n    public get currentCSS(): boolean {\n        return this.isCurrentYear;\n    }\n\n    public get isCurrentYear(): boolean {\n        return this.date.getFullYear() === this.value.getFullYear();\n    }\n\n    @HostListener('click')\n    public onClick() {\n        this.onYearSelection.emit(this.value);\n    }\n}\n\n@Directive({\n    selector: '[igxCalendarMonth]'\n})\nexport class IgxCalendarMonthDirective {\n\n    @Input('igxCalendarMonth')\n    public value: Date;\n\n    @Input()\n    public date: Date;\n\n    @Input()\n    public index;\n\n    @Output()\n    public onMonthSelection = new EventEmitter<Date>();\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-calendar__month')\n    public get defaultCSS(): boolean {\n        return !this.isCurrentMonth;\n    }\n\n    @HostBinding('class.igx-calendar__month--current')\n    public get currentCSS(): boolean {\n        return this.isCurrentMonth;\n    }\n\n    public get isCurrentMonth(): boolean {\n        return this.date.getMonth() === this.value.getMonth();\n    }\n\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    constructor(public elementRef: ElementRef) {}\n\n    @HostListener('click')\n    public onClick() {\n        const date = new Date(this.value.getFullYear(), this.value.getMonth(), this.date.getDate());\n        this.onMonthSelection.emit(date);\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarHeader]'\n})\nexport class IgxCalendarHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarSubheader]'\n})\nexport class IgxCalendarSubheaderTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n","import { Input, Output, EventEmitter } from '@angular/core';\nimport { WEEKDAYS, Calendar, isDateInRanges, IFormattingOptions, IFormattingViews } from './calendar';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { DateRangeDescriptor } from '../core/dates';\n\n\n/**\n * Sets the selction type - single, multi or range.\n */\nexport enum CalendarSelection {\n    SINGLE = 'single',\n    MULTI = 'multi',\n    RANGE = 'range'\n}\n\nexport class IgxCalendarBase implements ControlValueAccessor {\n    /**\n     * Gets the start day of the week.\n     * Can return a numeric or an enum representation of the week day.\n     * Defaults to `Sunday` / `0`.\n     */\n    @Input()\n    public get weekStart(): WEEKDAYS | number {\n        return this.calendarModel.firstWeekDay;\n    }\n\n    /**\n     * Sets the start day of the week.\n     * Can be assigned to a numeric value or to `WEEKDAYS` enum value.\n     */\n    public set weekStart(value: WEEKDAYS | number) {\n        this.calendarModel.firstWeekDay = value;\n    }\n\n    /**\n     * Gets the `locale` of the calendar.\n     * Default value is `\"en\"`.\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the calendar.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initFormatters();\n    }\n\n    /**\n     * Gets the date format options of the days view.\n     */\n    @Input()\n    public get formatOptions(): IFormattingOptions {\n        return this._formatOptions;\n    }\n\n    /**\n     * Sets the date format options of the days view.\n     * Default is { day: 'numeric', month: 'short', weekday: 'short', year: 'numeric' }\n     */\n    public set formatOptions(formatOptions: IFormattingOptions) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n        this.initFormatters();\n    }\n\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     */\n    @Input()\n    public get formatViews(): IFormattingViews {\n        return this._formatViews;\n    }\n\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     */\n    public set formatViews(formatViews: IFormattingViews) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     *\n     * Gets the selection type.\n     * Default value is `\"single\"`.\n     * Changing the type of selection resets the currently\n     * selected values if any.\n     */\n    @Input()\n    public get selection(): string {\n        return this._selection;\n    }\n\n    /**\n     * Sets the selection.\n     */\n    public set selection(value: string) {\n        switch (value) {\n            case CalendarSelection.SINGLE:\n                this.selectedDates = null;\n                break;\n            case CalendarSelection.MULTI:\n            case CalendarSelection.RANGE:\n                this.selectedDates = [];\n                break;\n            default:\n                throw new Error('Invalid selection value');\n        }\n        this._onChangeCallback(this.selectedDates);\n        this.rangeStarted = false;\n        this._selection = value;\n    }\n\n    /**\n     * Gets the selected date(s).\n     *\n     * When selection is set to `single`, it returns\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     */\n    @Input()\n    public get value(): Date | Date[] {\n        return this.selectedDates;\n    }\n\n    /**\n     * Sets the selected date(s).\n     *\n     * When selection is set to `single`, it accepts\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     */\n    public set value(value: Date | Date[]) {\n        this.selectDate(value);\n    }\n\n    /**\n     * Gets the date that is presented.\n     * By default it is the current date.\n     */\n    @Input()\n    public get viewDate(): Date {\n        return this._viewDate;\n    }\n\n    /**\n     * Sets the date that will be presented in the default view when the component renders.\n     */\n    public set viewDate(value: Date) {\n        this._viewDate = this.getDateOnly(value);\n    }\n\n    /**\n     * Gets the disabled dates descriptors.\n     */\n    @Input()\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n\n    /**\n     * Sets the disabled dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyCalendar\")\n     *public calendar: IgxCalendarComponent;\n     *ngOnInit(){\n     *    this.calendar.disabledDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n    }\n\n    /**\n     * Gets the special dates descriptors.\n     */\n    @Input()\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n\n    /**\n     * Sets the special dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyCalendar\")\n     *public calendar: IgxCalendarComponent;\n     *ngOnInit(){\n     *    this.calendar.specialDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    /**\n     * Emits an event when a date is selected.\n     * Provides reference the `selectedDates` property.\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date | Date[]>();\n\n    /**\n     *@hidden\n     */\n    private _selection: CalendarSelection | string = CalendarSelection.SINGLE;\n\n    /**\n     *@hidden\n     */\n    private rangeStarted = false;\n\n    /**\n    *@hidden\n    */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _viewDate: Date;\n\n    /**\n     *@hidden\n     */\n    private _disabledDates: DateRangeDescriptor[] = null;\n\n    /**\n     *@hidden\n     */\n    private _specialDates: DateRangeDescriptor[] = null;\n\n    /**\n     *@hidden\n     */\n    private _formatOptions: IFormattingOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n\n    /**\n     *@hidden\n     */\n    private _formatViews: IFormattingViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n\n    /**\n     *@hidden\n     */\n    protected formatterWeekday;\n\n    /**\n     *@hidden\n     */\n    protected formatterDay;\n\n    /**\n     *@hidden\n     */\n    protected formatterMonth;\n\n    /**\n     *@hidden\n     */\n    protected formatterYear;\n\n    /**\n     *@hidden\n     */\n    protected formatterMonthday;\n\n    /**\n     *@hidden\n     */\n    public calendarModel: Calendar;\n\n    /**\n     *@hidden\n     */\n    public selectedDates;\n\n    /**\n     *@hidden\n     */\n    protected _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    protected _onChangeCallback: (_: Date) => void = () => { };\n\n    /**\n     * @hidden\n     */\n    constructor() {\n        this.calendarModel = new Calendar();\n\n        this.viewDate = this.viewDate ? this.viewDate : new Date();\n\n        this.calendarModel.firstWeekDay = this.weekStart;\n        this.initFormatters();\n    }\n\n    /**\n     *@hidden\n     */\n    private getDateOnlyInMs(date: Date) {\n        return this.getDateOnly(date).getTime();\n    }\n\n    /**\n     *@hidden\n     */\n    private generateDateRange(start: Date, end: Date): Date[] {\n        const result = [];\n        start = this.getDateOnly(start);\n        end = this.getDateOnly(end);\n        while (start.getTime() !== end.getTime()) {\n            start = this.calendarModel.timedelta(start, 'day', 1);\n            result.push(start);\n        }\n\n        return result;\n    }\n\n    /**\n     * Performs a single selection.\n     * @hidden\n     */\n    private selectSingle(value: Date) {\n        this.selectedDates = this.getDateOnly(value);\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a multiple selection\n     * @hidden\n     */\n    private selectMultiple(value: Date | Date[]) {\n        if (Array.isArray(value)) {\n            this.selectedDates = this.selectedDates.concat(value.map(v => this.getDateOnly(v)));\n        } else {\n            const valueDateOnly = this.getDateOnly(value);\n            const newSelection = [];\n            if (this.selectedDates.every((date: Date) => date.getTime() !== valueDateOnly.getTime())) {\n                newSelection.push(valueDateOnly);\n            } else {\n                this.selectedDates = this.selectedDates.filter(\n                    (date: Date) => date.getTime() !== valueDateOnly.getTime()\n                );\n            }\n\n            if (newSelection.length > 0) {\n                this.selectedDates = this.selectedDates.concat(newSelection);\n            }\n        }\n\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     *@hidden\n     */\n    private selectRange(value: Date | Date[], excludeDisabledDates: boolean = false) {\n        let start: Date;\n        let end: Date;\n\n        if (Array.isArray(value)) {\n            // this.rangeStarted = false;\n            value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n            start = this.getDateOnly(value[0]);\n            end = this.getDateOnly(value[value.length - 1]);\n            this.selectedDates = [start, ...this.generateDateRange(start, end)];\n        } else {\n            if (!this.rangeStarted) {\n                this.rangeStarted = true;\n                this.selectedDates = [value];\n            } else {\n                this.rangeStarted = false;\n\n                if (this.selectedDates[0].getTime() === value.getTime()) {\n                    this.selectedDates = [];\n                    this._onChangeCallback(this.selectedDates);\n                    return;\n                }\n\n                this.selectedDates.push(value);\n                this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n\n                start = this.selectedDates.shift();\n                end = this.selectedDates.pop();\n                this.selectedDates = [start, ...this.generateDateRange(start, end)];\n            }\n        }\n\n        if (excludeDisabledDates) {\n            this.selectedDates = this.selectedDates.filter(d => !this.isDateDisabled(d));\n        }\n\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a single deselection.\n     * @hidden\n     */\n    private deselectSingle(value: Date) {\n        if (this.selectedDates !== null &&\n            this.getDateOnlyInMs(value as Date) === this.getDateOnlyInMs(this.selectedDates)) {\n            this.selectedDates = null;\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs a multiple deselection.\n     * @hidden\n     */\n    private deselectMultiple(value: Date[]) {\n        value = value.filter(v => v !== null);\n        const selectedDatesCount = this.selectedDates.length;\n        const datesInMsToDeselect: Set<number> = new Set<number>(\n            value.map(v => this.getDateOnlyInMs(v)));\n\n        for (let i = this.selectedDates.length - 1; i >= 0; i--) {\n            if (datesInMsToDeselect.has(this.getDateOnlyInMs(this.selectedDates[i]))) {\n                this.selectedDates.splice(i, 1);\n            }\n        }\n\n        if (this.selectedDates.length !== selectedDatesCount) {\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs a range deselection.\n     * @hidden\n     */\n    private deselectRange(value: Date[]) {\n        value = value.filter(v => v !== null);\n        if (value.length < 1) {\n            return;\n        }\n\n        value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const valueStart = this.getDateOnlyInMs(value[0]);\n        const valueEnd = this.getDateOnlyInMs(value[value.length - 1]);\n\n        this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const selectedDatesStart = this.getDateOnlyInMs(this.selectedDates[0]);\n        const selectedDatesEnd = this.getDateOnlyInMs(this.selectedDates[this.selectedDates.length - 1]);\n\n        if (!(valueEnd < selectedDatesStart) && !(valueStart > selectedDatesEnd)) {\n            this.selectedDates = [];\n            this.rangeStarted = false;\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected initFormatters() {\n        this.formatterDay = new Intl.DateTimeFormat(this._locale, { day: this._formatOptions.day });\n        this.formatterWeekday = new Intl.DateTimeFormat(this._locale, { weekday: this._formatOptions.weekday });\n        this.formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month });\n        this.formatterYear = new Intl.DateTimeFormat(this._locale, { year: this._formatOptions.year });\n        this.formatterMonthday = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month, day: this._formatOptions.day });\n    }\n\n    /**\n     *@hidden\n     */\n    protected getDateOnly(date: Date) {\n        return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date | Date[]) {\n        this.selectedDates = value;\n    }\n\n    /**\n     * Checks whether a date is disabled.\n     * @hidden\n     */\n    public isDateDisabled(date: Date) {\n        if (this.disabledDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(date, this.disabledDates);\n    }\n\n    /**\n     * Selects date(s) (based on the selection type).\n     */\n    public selectDate(value: Date | Date[]) {\n        if (value === null || value === undefined || (Array.isArray(value) && value.length === 0)) {\n            return new Date();\n        }\n\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n                this.selectSingle(value as Date);\n                break;\n            case CalendarSelection.MULTI:\n                this.selectMultiple(value);\n                break;\n            case CalendarSelection.RANGE:\n                this.selectRange(value, true);\n                break;\n        }\n    }\n\n    /**\n     * Deselects date(s) (based on the selection type).\n     */\n    public deselectDate(value?: Date | Date[]) {\n        if (this.selectedDates === null || this.selectedDates === []) {\n            return;\n        }\n\n        if (value === null || value === undefined) {\n            this.selectedDates = this.selection === CalendarSelection.SINGLE ? null : [];\n            this.rangeStarted = false;\n            this._onChangeCallback(this.selectedDates);\n            return;\n        }\n\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n                this.deselectSingle(value as Date);\n                break;\n            case CalendarSelection.MULTI:\n                this.deselectMultiple(value as Date[]);\n                break;\n            case CalendarSelection.RANGE:\n                this.deselectRange(value as Date[]);\n                break;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectDateFromClient(value: Date) {\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n            case CalendarSelection.MULTI:\n                if (!this.isDateDisabled(value)) {\n                    this.selectDate(value);\n                }\n\n                break;\n            case CalendarSelection.RANGE:\n                this.selectRange(value, true);\n                break;\n        }\n    }\n}\n","import { IgxCalendarBase } from './calendar-base';\nimport { ViewChild, ElementRef, HostBinding } from '@angular/core';\nimport { KEYS } from '../core/utils';\n\n/**\n * Sets the calender view - days, months or years.\n */\nexport enum CalendarView {\n    DEFAULT,\n    YEAR,\n    DECADE\n}\nexport class IgxMonthPickerBase extends IgxCalendarBase {\n\n    /**\n     * @hidden\n     */\n    @ViewChild('yearsBtn')\n    public yearsBtn: ElementRef;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Gets the current active view.\n     */\n    public get activeView(): CalendarView {\n        return this._activeView;\n    }\n\n    /**\n     * Sets the current active view.\n     */\n    public set activeView(val: CalendarView) {\n        this._activeView = val;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isDefaultView(): boolean {\n        return this._activeView === CalendarView.DEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isDecadeView(): boolean {\n        return this._activeView === CalendarView.DECADE;\n    }\n\n    /**\n     *@hidden\n     */\n    private _activeView = CalendarView.DEFAULT;\n\n    /**\n     * @hidden\n     */\n    public changeYear(event: Date) {\n        this.viewDate = new Date(event.getFullYear(), this.viewDate.getMonth());\n        this._activeView = CalendarView.DEFAULT;\n\n        requestAnimationFrame(() => {\n            this.yearsBtn.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade(): void {\n        this._activeView = CalendarView.DECADE;\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            this.activeViewDecade();\n        }\n    }\n\n    /**\n     * Returns the locale representation of the year in the year view if enabled,\n     * otherwise returns the default `Date.getFullYear()` value.\n     *\n     * @hidden\n     */\n    public formattedYear(value: Date): string {\n        if (this.formatViews.year) {\n            return this.formatterYear.format(value);\n        }\n        return `${value.getFullYear()}`;\n    }\n}\n","import {\n    Component,\n    Output,\n    EventEmitter,\n    Input,\n    HostBinding,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    ElementRef\n} from '@angular/core';\nimport { Calendar } from '../calendar';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxCalendarMonthDirective } from '../calendar.directives';\n\nlet NEXT_ID = 0;\n\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMonthsViewComponent, multi: true }],\n    selector: 'igx-months-view',\n    templateUrl: 'months-view.component.html'\n})\nexport class IgxMonthsViewComponent implements ControlValueAccessor {\n\n    /**\n     * Sets/gets the `id` of the months view.\n     * If not set, the `id` will have value `\"igx-months-view-0\"`.\n     * ```html\n     * <igx-months-view id=\"my-months-view\"></igx-months-view>\n     * ```\n     * ```typescript\n     * let monthsViewId =  this.monthsView.id;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-months-view-${NEXT_ID++}`;\n\n    /**\n     * Gets/sets the selected date of the months view.\n     * By default it is the current date.\n     * ```html\n     * <igx-months-view [date]=\"myDate\"></igx-months-view>\n     * ```\n     * ```typescript\n     * let date =  this.monthsView.date;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Input()\n    public date = new Date();\n\n    /**\n     * Gets the month format option of the months view.\n     * ```typescript\n     * let monthFormat = this.monthsView.monthFormat.\n     * ```\n     */\n    @Input()\n    public get monthFormat(): string {\n        return this._monthFormat;\n    }\n\n    /**\n     * Sets the month format option of the months view.\n     * ```html\n     * <igx-months-view> [monthFormat] = \"short'\"</igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    public set monthFormat(value: string) {\n        this._monthFormat = value;\n        this.initMonthFormatter();\n    }\n\n    /**\n     * Gets the `locale` of the months view.\n     * Default value is `\"en\"`.\n     * ```typescript\n     * let locale =  this.monthsView.locale;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the months view.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     * ```html\n     * <igx-months-view [locale]=\"de\"></igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initMonthFormatter();\n    }\n\n    /**\n     * Gets/sets whether the view should be rendered\n     * according to the locale and monthFormat, if any.\n     */\n    @Input()\n    public formatView = true;\n\n    /**\n     * Emits an event when a selection is made in the months view.\n     * Provides reference the `date` property in the `IgxMonthsViewComponent`.\n     * ```html\n     * <igx-months-view (onSelection)=\"onSelection($event)\"></igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxCalendarMonthDirective, { read: IgxCalendarMonthDirective })\n    public dates: QueryList<IgxCalendarMonthDirective>;\n\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Returns an array of date objects which are then used to\n     * properly render the month names.\n     *\n     * Used in the template of the component\n     *\n     * @hidden\n     */\n    get months(): Date[] {\n        let start = new Date(this.date.getFullYear(), 0, 1);\n        const result = [];\n\n        for (let i = 0; i < 12; i++) {\n            result.push(start);\n            start = this._calendarModel.timedelta(start, 'month', 1);\n        }\n\n        return result;\n    }\n\n    /**\n     *@hidden\n     */\n    private _formatterMonth: any;\n\n    /**\n     *@hidden\n     */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _monthFormat = 'short';\n\n    /**\n     *@hidden\n     */\n    private _calendarModel: Calendar;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    constructor(public el: ElementRef) {\n        this.initMonthFormatter();\n        this._calendarModel = new Calendar();\n    }\n\n    /**\n     * Returns the locale representation of the month in the months view.\n     *\n     * @hidden\n     */\n    public formattedMonth(value: Date): string {\n        if (this.formatView) {\n            return this._formatterMonth.format(value);\n        }\n        return `${value.getMonth()}`;\n    }\n\n    /**\n     *@hidden\n     */\n    public selectMonth(event) {\n        this.onSelection.emit(event);\n\n        this.date = event;\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        if (value) {\n            this.date = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public monthTracker(index, item): string {\n        return `${item.getMonth()}}`;\n    }\n\n    /**\n     *@hidden\n     */\n    private initMonthFormatter() {\n        this._formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this.monthFormat });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) {\n            return;\n        }\n\n        const months = this.dates.toArray();\n        const nodeRect = node.nativeElement.getBoundingClientRect();\n\n        for (let index = months.indexOf(node) - 1; index >= 0; index--) {\n            const nextNodeRect = months[index].nativeElement.getBoundingClientRect();\n            if (nodeRect.top !== nextNodeRect.top && nodeRect.left === nextNodeRect.left) {\n                months[index].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) {\n            return;\n        }\n\n        const months = this.dates.toArray();\n        const nodeRect = node.nativeElement.getBoundingClientRect();\n\n        for (let index = months.indexOf(node) + 1; index < months.length; index++) {\n            const nextNodeRect = months[index].nativeElement.getBoundingClientRect();\n            if (nodeRect.top !== nextNodeRect.top && nodeRect.left === nextNodeRect.left) {\n                months[index].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n\n        const months = this.dates.toArray();\n        if (months.indexOf(node) + 1 < months.length) {\n            const month = months[months.indexOf(node) + 1];\n\n            month.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n\n        const months = this.dates.toArray();\n        if (months.indexOf(node) - 1 >= 0) {\n            const month = months[months.indexOf(node) - 1];\n\n            month.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const month = this.dates.toArray()[0];\n\n        month.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const months = this.dates.toArray();\n        const month = months[months.length - 1];\n\n        month.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter', ['$event'])\n    public onKeydownEnter(event) {\n        const value = this.dates.find((date) => date.nativeElement === event.target).value;\n        this.date = new Date(value.getFullYear(), value.getMonth(), this.date.getDate());\n\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n}\n","import { Component, Output, EventEmitter, Input, HostBinding, HostListener, ElementRef, Injectable} from '@angular/core';\nimport { range, Calendar } from '../calendar';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { HammerGestureConfig, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n\nlet NEXT_ID = 0;\n\n@Injectable()\nexport class CalendarHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\n@Component({\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxYearsViewComponent,\n            multi: true\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: CalendarHammerConfig\n        }\n    ],\n    selector: 'igx-years-view',\n    templateUrl: 'years-view.component.html'\n})\nexport class IgxYearsViewComponent implements ControlValueAccessor {\n\n    /**\n     * Sets/gets the `id` of the years view.\n     * If not set, the `id` will have value `\"igx-years-view-0\"`.\n     * ```html\n     * <igx-years-view id = \"my-years-view\"></igx-years-view>\n     * ```\n     * ```typescript\n     * let yearsViewId =  this.yearsView.id;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-years-view-${NEXT_ID++}`;\n\n    /**\n     * Gets/sets the selected date of the years view.\n     * By default it is the current date.\n     * ```html\n     * <igx-years-view [date]=\"myDate\"></igx-years-view>\n     * ```\n     * ```typescript\n     * let date =  this.yearsView.date;\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Input()\n    public date = new Date();\n\n    /**\n     * Gets the year format option of the years view.\n     * ```typescript\n     * let yearFormat = this.yearsView.yearFormat.\n     * ```\n     */\n    @Input()\n    public get yearFormat(): string {\n        return this._yearFormat;\n    }\n\n    /**\n     * Sets the year format option of the years view.\n     * ```html\n     * <igx-years-view [yearFormat]=\"numeric\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    public set yearFormat(value: string) {\n        this._yearFormat = value;\n        this.initYearFormatter();\n    }\n\n    /**\n     * Gets the `locale` of the years view.\n     * Default value is `\"en\"`.\n     * ```typescript\n     * let locale =  this.yearsView.locale;\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the years view.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     * ```html\n     * <igx-years-view [locale]=\"de\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initYearFormatter();\n    }\n\n    /**\n     * Gets/sets whether the view should be rendered\n     * according to the locale and yearFormat, if any.\n     */\n    @Input()\n    public formatView: boolean;\n\n    /**\n     * Emits an event when a selection is made in the years view.\n     * Provides reference the `date` property in the `IgxYearsViewComponent`.\n     * ```html\n     * <igx-years-view (onSelection)=\"onSelection($event)\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Returns an array of date objects which are then used to properly\n     * render the years.\n     *\n     * Used in the template of the component.\n     *\n     * @hidden\n     */\n    get decade(): number[] {\n        const result = [];\n        const start = this.date.getFullYear() - 3;\n        const end = this.date.getFullYear() + 4;\n\n        for (const year of range(start, end)) {\n            result.push(new Date(year, this.date.getMonth(), this.date.getDate()));\n        }\n\n        return result;\n    }\n\n    /**\n     *@hidden\n     */\n    private _formatterYear: any;\n\n    /**\n     *@hidden\n     */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _yearFormat = 'numeric';\n\n    /**\n     *@hidden\n     */\n    private _calendarModel: Calendar;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    constructor(public el: ElementRef) {\n        this.initYearFormatter();\n        this._calendarModel = new Calendar();\n    }\n\n    /**\n     * Returns the locale representation of the year in the years view.\n     *\n     * @hidden\n     */\n    public formattedYear(value: Date): string {\n        if (this.formatView) {\n            return this._formatterYear.format(value);\n        }\n        return `${value.getFullYear()}`;\n    }\n\n    /**\n     *@hidden\n     */\n    public selectYear(event) {\n        this.date = event;\n\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     *@hidden\n     */\n    public scroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const delta = event.deltaY < 0 ? -1 : 1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     *@hidden\n     */\n    public pan(event) {\n        const delta = event.deltaY < 0 ? 1 : -1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public yearTracker(index, item): string {\n        return `${item.getFullYear()}}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        if (value) {\n            this.date = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.generateYearRange(1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.generateYearRange(-1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter')\n    public onKeydownEnter() {\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     *@hidden\n     */\n    private initYearFormatter() {\n        this._formatterYear = new Intl.DateTimeFormat(this._locale, { year: this.yearFormat });\n    }\n\n    /**\n     *@hidden\n     */\n    private generateYearRange(delta: number) {\n        const currentYear = new Date().getFullYear();\n\n        if ((delta > 0 && this.date.getFullYear() - currentYear >= 95) ||\n            (delta < 0 && currentYear - this.date.getFullYear() >= 95)) {\n            return;\n        }\n        this.date = this._calendarModel.timedelta(this.date, 'year', delta);\n    }\n}\n","import { Component, Input, Output, EventEmitter, HostBinding, ElementRef, HostListener } from '@angular/core';\nimport { ICalendarDate, isDateInRanges } from '../calendar';\nimport { DateRangeDescriptor } from '../../core/dates';\nimport { CalendarSelection } from '../calendar-base';\n\n/**\n *@hidden\n*/\n@Component({\n    selector: 'igx-day-item',\n    templateUrl: 'day-item.component.html'\n})\nexport class IgxDayItemComponent {\n    @Input()\n    public date: ICalendarDate;\n\n    @Input()\n    public selection: string;\n\n    @Input()\n    public value: Date | Date[];\n\n    @Input()\n    public disabledDates: DateRangeDescriptor[];\n\n    @Input()\n    public outOfRangeDates: DateRangeDescriptor[];\n\n    @Input()\n    public specialDates: DateRangeDescriptor[];\n\n    @Output()\n    public onDateSelection = new EventEmitter<ICalendarDate>();\n\n    public get selected(): boolean {\n        const date = this.date.date;\n\n        if (!this.value) {\n            return;\n        }\n\n        if (this.selection === CalendarSelection.SINGLE) {\n        this._selected = (this.value as Date).getTime() === date.getTime();\n        } else {\n        this._selected = (this.value as Date[])\n            .some((each) => each.getTime() === date.getTime());\n        }\n\n        return this._selected;\n    }\n\n    public set selected(value: boolean) {\n        this._selected = value;\n    }\n\n    public get isCurrentMonth(): boolean {\n        return this.date.isCurrentMonth;\n    }\n\n    public get isPreviousMonth(): boolean {\n        return this.date.isPrevMonth;\n    }\n\n    public get isNextMonth(): boolean {\n        return this.date.isNextMonth;\n    }\n\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    public get isInactive(): boolean {\n        return this.date.isNextMonth || this.date.isPrevMonth;\n    }\n\n    public get isToday(): boolean {\n        const today = new Date(Date.now());\n        const date = this.date.date;\n        return (date.getFullYear() === today.getFullYear() &&\n            date.getMonth() === today.getMonth() &&\n            date.getDate() === today.getDate()\n        );\n    }\n\n    public get isWeekend(): boolean {\n        const day = this.date.date.getDay();\n        return day === 0 || day === 6;\n    }\n\n    public get isDisabled(): boolean {\n        if (this.disabledDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.disabledDates);\n    }\n\n    public get isOutOfRange(): boolean {\n        if (!this.outOfRangeDates) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.outOfRangeDates);\n    }\n\n    public get isSpecial(): boolean {\n        if (this.specialDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.specialDates);\n    }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-calendar__date')\n    public get defaultCSS(): boolean {\n        return this.date.isCurrentMonth && !(this.isWeekend && this.selected);\n    }\n\n    @HostBinding('class.igx-calendar__date--inactive')\n    public get isInactiveCSS(): boolean {\n        return this.isInactive;\n    }\n\n    @HostBinding('class.igx-calendar__date--current')\n    public get isTodayCSS(): boolean {\n        return this.isToday && !this.selected;\n    }\n\n    @HostBinding('class.igx-calendar__date--selected')\n    public get isSelectedCSS(): boolean {\n        return this.selected;\n    }\n\n    @HostBinding('class.igx-calendar__date--weekend')\n    public get isWeekendCSS(): boolean {\n        return this.isWeekend;\n    }\n\n    @HostBinding('class.igx-calendar__date--disabled')\n    public get isDisabledCSS(): boolean {\n        return this.isDisabled || this.isOutOfRange;\n    }\n\n    @HostBinding('class.igx-calendar__date--special')\n    public get isSpecialCSS(): boolean {\n        return this.isSpecial;\n    }\n\n    private _selected = false;\n\n    constructor(private elementRef: ElementRef) { }\n\n    @HostListener('click')\n    @HostListener('keydown.enter')\n    public onSelect() {\n        this.onDateSelection.emit(this.date);\n    }\n}\n","import {\n    Component,\n    Output,\n    EventEmitter,\n    Input,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    HostBinding,\n    DoCheck\n} from '@angular/core';\nimport { ICalendarDate } from '../../calendar';\nimport { trigger, transition, useAnimation } from '@angular/animations';\nimport { slideInLeft, slideInRight } from '../../animations/main';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxDayItemComponent } from './day-item.component';\nimport { DateRangeDescriptor, DateRangeType } from '../../core/dates';\nimport { IgxCalendarBase } from '../calendar-base';\n\nlet NEXT_ID = 0;\n\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxDaysViewComponent\n        }\n    ],\n    animations: [\n        trigger('animateChange', [\n            transition('* => prev', useAnimation(slideInLeft, {\n                params: {\n                    fromPosition: 'translateX(-30%)'\n                }\n            })),\n            transition('* => next', useAnimation(slideInRight, {\n                params: {\n                    fromPosition: 'translateX(30%)'\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-days-view',\n    templateUrl: 'days-view.component.html'\n})\nexport class IgxDaysViewComponent extends IgxCalendarBase implements DoCheck {\n    /**\n     * Sets/gets the `id` of the days view.\n     * If not set, the `id` will have value `\"igx-days-view-0\"`.\n     * ```html\n     * <igx-days-view id=\"my-days-view\"></igx-days-view>\n     * ```\n     * ```typescript\n     * let daysViewId =  this.daysView.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-days-view-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public animationAction: any = '';\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public changeDaysView = false;\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onDateSelection = new EventEmitter<ICalendarDate>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onViewChanged = new EventEmitter<Date>();\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxDayItemComponent, { read: IgxDayItemComponent })\n    public dates: QueryList<IgxDayItemComponent>;\n\n    /**\n     * @hidden\n     */\n    public nextDate: Date;\n\n    /**\n     * @hidden\n     */\n    public callback: (dates?, next?) => void;\n\n    /**\n     * @hidden\n     */\n    public isKeydownTrigger = false;\n\n    /**\n     * @hidden\n     */\n    public outOfRangeDates: DateRangeDescriptor[];\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    public get getCalendarMonth(): ICalendarDate[][] {\n        return this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth(), true);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        if (!this.changeDaysView && this.dates) {\n            this.disableOutOfRangeDates();\n        }\n    }\n\n    /**\n     * Returns the locale representation of the date in the days view.\n     *\n     * @hidden\n     */\n    public formattedDate(value: Date): string {\n        if (this.formatViews.day) {\n            return this.formatterDay.format(value);\n        }\n        return `${value.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public generateWeekHeader(): string[] {\n        const dayNames = [];\n        const rv = this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth())[0];\n        for (const day of rv) {\n            dayNames.push(this.formatterWeekday.format(day.date));\n        }\n\n        return dayNames;\n    }\n\n    /**\n     * @hidden\n     */\n    public rowTracker(index, item): string {\n        return `${item[index].date.getMonth()}${item[index].date.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public dateTracker(index, item): string {\n        return `${item.date.getMonth()}--${item.date.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentMonth(value: Date): boolean {\n        return this.viewDate.getMonth() === value.getMonth();\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentYear(value: Date): boolean {\n        return this.viewDate.getFullYear() === value.getFullYear();\n    }\n\n    /**\n     *@hidden\n     */\n    public focusActiveDate() {\n        let date = this.dates.find((d) => d.selected);\n\n        if (!date) {\n            date = this.dates.find((d) => d.isToday);\n        }\n\n        if (date) {\n            date.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectDay(event) {\n        this.selectDateFromClient(event.date);\n        this.onDateSelection.emit(event);\n\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public animationDone(event, isLast: boolean) {\n        if (isLast) {\n            const date = this.dates.find((d) => d.selected);\n            if (date && !this.isKeydownTrigger) {\n                setTimeout(() => {\n                    date.nativeElement.focus();\n                }, parseInt(slideInRight.options.params.duration, 10));\n            } else if (this.callback && (event.toState === 'next' || event.toState === 'prev')) {\n                this.callback(this.dates, this.nextDate);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private focusPreviousUpDate(target, prevView = false) {\n        const node = this.dates.find((date) => date.nativeElement === target);\n        if (!node) { return; }\n\n        const dates = this.dates.toArray();\n        for (let index = dates.indexOf(node); index - 7 > -1; index -= 7) {\n            const date = prevView ? dates[index] : dates[index - 7];\n            if (!date.isDisabled) {\n                if (!date.isOutOfRange) {\n                    date.nativeElement.focus();\n                    break;\n                }\n            }\n        }\n\n        if (this.changeDaysView && dates.indexOf(node) - 7 < 0) {\n            const dayItem = dates[dates.indexOf(node)];\n            this.nextDate = new Date(dayItem.date.date);\n\n            this.nextDate.setDate(this.nextDate.getDate() - 7);\n\n            this.isKeydownTrigger = true;\n            this.animationAction = 'prev';\n\n            this.callback = (items?, next?) => {\n                const day = items.find((item) => item.date.date.getTime() === next.getTime());\n                if (day) {\n                    this.focusPreviousUpDate(day.nativeElement, true);\n                }\n            };\n\n            this.onViewChanged.emit(this.nextDate);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private focusNextDownDate(target, nextView = false) {\n        const node = this.dates.find((date) => date.nativeElement === target);\n        if (!node) { return; }\n\n        const dates = this.dates.toArray();\n        for (let index = dates.indexOf(node); index + 7 < this.dates.length; index += 7) {\n            const date = nextView ? dates[index] : dates[index + 7];\n            if (!date.isDisabled) {\n                if (!date.isOutOfRange) {\n                    date.nativeElement.focus();\n                    break;\n                }\n            }\n        }\n\n        if (this.changeDaysView && dates.indexOf(node) + 7 > this.dates.length - 1) {\n            const dayItem = dates[dates.indexOf(node)];\n            this.nextDate = new Date(dayItem.date.date);\n\n            this.nextDate.setDate(this.nextDate.getDate() + 7);\n\n            this.isKeydownTrigger = true;\n            this.animationAction = 'next';\n\n            this.callback = (items?, next?) => {\n                const day = items.find((item) => item.date.date.getTime() === next.getTime());\n                if (day) {\n                    this.focusNextDownDate(day.nativeElement, true);\n                }\n            };\n\n            this.onViewChanged.emit(this.nextDate);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private focusPreviousDate(target) {\n        const node = this.dates.find((date) => date.nativeElement === target);\n        if (!node) { return; }\n\n        const dates = this.dates.toArray();\n        for (let index = dates.indexOf(node); index > 0; index--) {\n            const date = dates[index - 1];\n            if (!date.isDisabled) {\n                if (!date.isOutOfRange) {\n                    date.nativeElement.focus();\n                    break;\n                }\n            }\n        }\n\n        if (this.changeDaysView && dates.indexOf(node) === 0) {\n            const dayItem = dates[dates.indexOf(node)];\n            this.nextDate = new Date(dayItem.date.date);\n\n            this.isKeydownTrigger = true;\n            this.animationAction = 'prev';\n\n            this.callback = (items?, next?) => {\n                const day = items.find((item) => item.date.date.getTime() === next.getTime());\n                if (day) {\n                    this.focusPreviousDate(day.nativeElement);\n                }\n            };\n\n            this.onViewChanged.emit(this.nextDate);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private focusNextDate(target) {\n        const node = this.dates.find((date) => date.nativeElement === target);\n        if (!node) { return; }\n\n        const dates = this.dates.toArray();\n\n        for (let index = dates.indexOf(node); index < this.dates.length - 1; index++) {\n            const date = dates[index + 1];\n            if (!date.isDisabled) {\n                if (!date.isOutOfRange) {\n                    date.nativeElement.focus();\n                    break;\n                }\n            }\n        }\n\n        if (this.changeDaysView && dates.indexOf(node) === this.dates.length - 1) {\n            const dayItem = dates[dates.indexOf(node)];\n            this.nextDate = new Date(dayItem.date.date);\n\n            this.isKeydownTrigger = true;\n            this.animationAction = 'next';\n\n            this.callback = (items?, next?) => {\n                const day = items.find((item) => item.date.date.getTime() === next.getTime());\n                if (day) {\n                    this.focusNextDate(day.nativeElement);\n                }\n            };\n\n            this.onViewChanged.emit(this.nextDate);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private disableOutOfRangeDates() {\n        const dateRange = [];\n        this.dates.toArray().forEach((date) => {\n            if (!date.isCurrentMonth) {\n                dateRange.push(date.date.date);\n            }\n        });\n\n        this.outOfRangeDates = [{\n            type: DateRangeType.Specific,\n            dateRange: dateRange\n        }];\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.focusPreviousUpDate(event.target);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.focusNextDownDate(event.target);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.focusPreviousDate(event.target);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.focusNextDate(event.target);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const dates = this.dates.filter(d => d.isCurrentMonth);\n        for (let i = 0; i < dates.length; i++) {\n            if (!dates[i].isDisabled) {\n                dates[i].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const dates = this.dates.filter(d => d.isCurrentMonth);\n        for (let i = dates.length - 1; i >= 0; i--) {\n            if (!dates[i].isDisabled) {\n                dates[i].nativeElement.focus();\n                break;\n            }\n        }\n    }\n}\n","import { transition, trigger, useAnimation } from '@angular/animations';\nimport {\n    Component,\n    ContentChild,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { fadeIn, scaleInCenter } from '../animations/main';\nimport {\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarSubheaderTemplateDirective\n} from './calendar.directives';\nimport { KEYS } from '../core/utils';\nimport { ICalendarDate, monthRange } from './calendar';\nimport { CalendarView, IgxMonthPickerBase } from './month-picker-base';\nimport { IgxMonthsViewComponent } from './months-view/months-view.component';\nimport { IgxYearsViewComponent } from './years-view/years-view.component';\nimport { IgxDaysViewComponent } from './days-view/days-view.component';\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Calendar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/calendar.html)\n *\n * The Ignite UI Calendar provides an easy way to display a calendar and allow users to select dates using single, multiple\n * or range selection.\n *\n * Example:\n * ```html\n * <igx-calendar selection=\"range\"></igx-calendar>\n * ```\n */\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxCalendarComponent\n        }\n    ],\n    animations: [\n        trigger('animateView', [\n            transition('void => 0', useAnimation(fadeIn)),\n            transition('void => *', useAnimation(scaleInCenter, {\n                params: {\n                    duration: '.2s',\n                    fromScale: .9\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-calendar',\n    templateUrl: 'calendar.component.html'\n})\nexport class IgxCalendarComponent extends IgxMonthPickerBase {\n    /**\n     * Sets/gets the `id` of the calendar.\n     * If not set, the `id` will have value `\"igx-calendar-0\"`.\n     * ```html\n     * <igx-calendar id = \"my-first-calendar\"></igx-calendar>\n     * ```\n     * ```typescript\n     * let calendarId =  this.calendar.id;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-calendar-${NEXT_ID++}`;\n\n    @Input()\n    public hasHeader = true;\n\n    /**\n     * Sets/gets whether the calendar header will be in vertical position.\n     * Default value is `false`.\n     * ```html\n     * <igx-calendar [vertical] = \"true\"></igx-calendar>\n     * ```\n     * ```typescript\n     * let isVertical = this.calendar.vertical;\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * The default aria role attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'grid';\n\n    /**\n     * The default aria lebelled by attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.aria-labelledby')\n    public ariaLabelledBy = 'calendar';\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar--vertical')\n    get styleVerticalClass(): boolean {\n        return this.vertical;\n    }\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('months', { read: IgxMonthsViewComponent })\n    public monthsView: IgxMonthsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('monthsBtn')\n    public monthsBtn: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('decade', { read: IgxYearsViewComponent })\n    public dacadeView: IgxYearsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('days', {read: IgxDaysViewComponent})\n    public daysView: IgxDaysViewComponent;\n\n    /**\n     * @hidden\n     */\n    get isYearView(): boolean {\n        return this.activeView === CalendarView.YEAR;\n    }\n\n    /**\n     * @hidden\n     */\n    get monthAction(): string {\n        return this._monthAction;\n    }\n    /**\n     * @hidden\n     */\n    set monthAction(val: string) {\n        this._monthAction = val;\n    }\n\n    /**\n     * Gets the header template.\n     * ```typescript\n     * let headerTemplate =  this.calendar.headerTeamplate;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    get headerTemplate(): any {\n        if (this.headerTemplateDirective) {\n            return this.headerTemplateDirective.template;\n        }\n        return null;\n    }\n\n    /**\n     * Sets the header template.\n     * ```html\n     * <igx-calendar headerTemplateDirective = \"igxCalendarHeader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set headerTemplate(directive: any) {\n        this.headerTemplateDirective = directive;\n    }\n\n    /**\n     * Gets the subheader template.\n     * ```typescript\n     * let subheaderTemplate = this.calendar.subheaderTemplate;\n     * ```\n     */\n    get subheaderTemplate(): any {\n        if (this.subheaderTemplateDirective) {\n            return this.subheaderTemplateDirective.template;\n        }\n        return null;\n    }\n\n    /**\n     * Sets the subheader template.\n     * ```html\n     * <igx-calendar subheaderTemplate = \"igxCalendarSubheader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set subheaderTemplate(directive: any) {\n        this.subheaderTemplateDirective = directive;\n    }\n\n    /**\n     * Gets the context for the template marked with the `igxCalendarHeader` directive.\n     * ```typescript\n     * let headerContext =  this.calendar.headerContext;\n     * ```\n     */\n    get headerContext() {\n        const date: Date = this.headerDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * Gets the context for the template marked with either `igxCalendarSubHeaderMonth`\n     * or `igxCalendarSubHeaderYear` directive.\n     * ```typescript\n     * let context =  this.calendar.context;\n     * ```\n     */\n    get context() {\n        const date: Date = this.viewDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * @hidden\n     */\n    get headerDate(): Date {\n        return this.selectedDates ? this.selectedDates : new Date();\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxCalendarHeaderTemplateDirective), { read: IgxCalendarHeaderTemplateDirective })\n    private headerTemplateDirective: IgxCalendarHeaderTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:max-line-length\n    @ContentChild(forwardRef(() => IgxCalendarSubheaderTemplateDirective), { read: IgxCalendarSubheaderTemplateDirective })\n    private subheaderTemplateDirective: IgxCalendarSubheaderTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    private _monthAction = '';\n\n    /**\n     * Returns the locale representation of the month in the month view if enabled,\n     * otherwise returns the default `Date.getMonth()` value.\n     *\n     * @hidden\n     */\n    public formattedMonth(value: Date): string {\n        if (this.formatViews.month) {\n            return this.formatterMonth.format(value);\n        }\n        return `${value.getMonth()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public previousMonth(isKeydownTrigger: boolean = false) {\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'month', -1);\n        this._monthAction = 'prev';\n\n        if (this.daysView) {\n            this.daysView.isKeydownTrigger = isKeydownTrigger;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public previousMonthKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            this.previousMonth(true);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public nextMonth(isKeydownTrigger: boolean = false) {\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'month', 1);\n        this._monthAction = 'next';\n\n        if (this.daysView) {\n            this.daysView.isKeydownTrigger = isKeydownTrigger;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public nextMonthKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            this.nextMonth(true);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade() {\n        super.activeViewDecade();\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) {\n                this.dacadeView.el.nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event) {\n        super.activeViewDecadeKB(event);\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) {\n                this.dacadeView.el.nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public getFormattedDate(): { weekday: string, monthday: string } {\n\n        const date = this.headerDate;\n\n        return {\n            monthday: this.formatterMonthday.format(date),\n            weekday: this.formatterWeekday.format(date),\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    public childClicked(instance: ICalendarDate) {\n        if (instance.isPrevMonth) {\n            this.previousMonth();\n        }\n\n        if (instance.isNextMonth) {\n            this.nextMonth();\n        }\n\n        this.selectDateFromClient(instance.date);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public viewChanged(event) {\n        this.viewDate = this.calendarModel.timedelta(event, 'month', 0);\n    }\n\n    /**\n     * @hidden\n     */\n    public changeMonth(event: Date) {\n        this.viewDate = new Date(this.viewDate.getFullYear(), event.getMonth());\n        this.activeView = CalendarView.DEFAULT;\n\n        requestAnimationFrame(() => {\n            this.monthsBtn.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewYear(): void {\n        this.activeView = CalendarView.YEAR;\n        requestAnimationFrame(() => {\n            this.monthsView.dates.find((date) => date.isCurrentMonth).nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewYearKB(event): void {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            this.activeViewYear();\n        }\n    }\n\n    /**\n     * Deselects date(s) (based on the selection type).\n     *```typescript\n     * this.calendar.deselectDate(new Date(`2018-06-12`));\n     *````\n     */\n    public deselectDate(value?: Date | Date[]) {\n        super.deselectDate(value);\n\n        this.daysView.selectedDates = this.selectedDates;\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pageup', ['$event'])\n    public onKeydownPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const activeDate = this.daysView.dates.find((date) => date.nativeElement === document.activeElement);\n        if (activeDate) {\n            this.daysView.nextDate = new Date(activeDate.date.date);\n\n            let year = this.daysView.nextDate.getFullYear();\n\n            let month = this.daysView.nextDate.getMonth() - 1;\n            if (month < 0) { month = 11; year -= 1; }\n\n            const range = monthRange(this.daysView.nextDate.getFullYear(), month);\n\n            let day = this.daysView.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.daysView.nextDate.setDate(day);\n            this.daysView.nextDate.setMonth(month);\n            this.daysView.nextDate.setFullYear(year);\n\n            this.daysView.callback = (dates?, next?) => {\n                const dayItem = dates.find((d) => d.date.date.getTime() === next.getTime());\n                if (dayItem) { dayItem.nativeElement.focus(); }\n            };\n        }\n\n        this.previousMonth(true);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pagedown', ['$event'])\n    public onKeydownPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.nextMonth(true);\n\n        const activeDate = this.daysView.dates.find((date) => date.nativeElement === document.activeElement);\n        if (activeDate) {\n            this.daysView.nextDate = new Date(activeDate.date.date);\n\n            let year = this.daysView.nextDate.getFullYear();\n\n            let month = this.daysView.nextDate.getMonth() + 1;\n            if (month > 11) { month = 0; year += 1; }\n\n            const range = monthRange(this.daysView.nextDate.getFullYear(), month);\n\n            let day = this.daysView.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.daysView.nextDate.setDate(day);\n            this.daysView.nextDate.setMonth(month);\n            this.daysView.nextDate.setFullYear(year);\n\n            this.daysView.callback = (dates?, next?) => {\n                const dayItem = dates.find((d) => d.date.date.getTime() === next.getTime());\n                if (dayItem) { dayItem.nativeElement.focus(); }\n            };\n        }\n\n        // this.nextMonth(true);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.shift.pageup', ['$event'])\n    public onKeydownShiftPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', -1);\n\n        this.daysView.animationAction = 'prev';\n        this.daysView.isKeydownTrigger = true;\n\n        const activeDate = this.daysView.dates.find((date) => date.nativeElement === document.activeElement);\n        if (activeDate) {\n            this.daysView.nextDate = new Date(activeDate.date.date);\n\n            const year = this.daysView.nextDate.getFullYear() - 1;\n\n            const range = monthRange(year, this.daysView.nextDate.getMonth());\n\n            let day = this.daysView.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.daysView.nextDate.setDate(day);\n            this.daysView.nextDate.setFullYear(year);\n\n            this.daysView.callback = (dates?, next?) => {\n                const dayItem = dates.find((d) => d.date.date.getTime() === next.getTime());\n                if (dayItem) { dayItem.nativeElement.focus(); }\n            };\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.shift.pagedown', ['$event'])\n    public onKeydownShiftPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', 1);\n\n        this.daysView.animationAction = 'next';\n        this.daysView.isKeydownTrigger = true;\n\n        const activeDate = this.daysView.dates.find((date) => date.nativeElement === document.activeElement);\n        if (activeDate) {\n            this.daysView.nextDate = new Date(activeDate.date.date);\n\n            const year = this.daysView.nextDate.getFullYear() + 1;\n\n            const range = monthRange(year, this.daysView.nextDate.getMonth());\n\n            let day = this.daysView.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.daysView.nextDate.setDate(day);\n            this.daysView.nextDate.setFullYear(year);\n\n            this.daysView.callback = (dates?, next?) => {\n                const dayItem = dates.find((d) => d.date.date.getTime() === next.getTime());\n                if (dayItem) { dayItem.nativeElement.focus(); }\n            };\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        if (this.daysView) {\n            this.daysView.onKeydownHome(event);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        if (this.daysView) {\n            this.daysView.onKeydownEnd(event);\n        }\n    }\n\n    /**\n     * Helper method building and returning the context object inside\n     * the calendar templates.\n     * @hidden\n     */\n    private generateContext(value: Date) {\n        const formatObject = {\n            monthView: () => this.activeViewYear(),\n            yearView: () => this.activeViewDecade(),\n            ...this.calendarModel.formatToParts(value, this.locale, this.formatOptions,\n                ['era', 'year', 'month', 'day', 'weekday'])\n        };\n        return { $implicit: formatObject };\n    }\n}\n","import {\n    Component,\n    HostListener,\n    ViewChild,\n    HostBinding,\n    Input\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { trigger, transition, useAnimation } from '@angular/animations';\nimport { fadeIn, scaleInCenter, slideInLeft, slideInRight } from '../../animations/main';\nimport { KEYS } from '../../core/utils';\nimport { IgxMonthsViewComponent } from '../months-view/months-view.component';\nimport { IgxMonthPickerBase, CalendarView } from '../month-picker-base';\nimport { IgxYearsViewComponent } from '../years-view/years-view.component';\nimport { IgxDaysViewComponent } from '../days-view/days-view.component';\n\nlet NEXT_ID = 0;\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxMonthPickerComponent\n        }\n    ],\n    animations: [\n        trigger('animateView', [\n            transition('void => 0', useAnimation(fadeIn)),\n            transition('void => *', useAnimation(scaleInCenter, {\n                params: {\n                    duration: '.2s',\n                    fromScale: .9\n                }\n            }))\n        ]),\n        trigger('animateChange', [\n            transition('* => prev', useAnimation(slideInLeft, {\n                params: {\n                    fromPosition: 'translateX(-30%)'\n                }\n            })),\n            transition('* => next', useAnimation(slideInRight, {\n                params: {\n                    fromPosition: 'translateX(30%)'\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-month-picker',\n    templateUrl: 'month-picker.component.html'\n})\nexport class IgxMonthPickerComponent extends IgxMonthPickerBase {\n    /**\n     * Sets/gets the `id` of the month picker.\n     * If not set, the `id` will have value `\"igx-month-picker-0\"`.\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-month-picker-${NEXT_ID++}`;\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('months', {read: IgxMonthsViewComponent})\n    public monthsView: IgxMonthsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('decade', { read: IgxYearsViewComponent })\n    public dacadeView: IgxYearsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('days', {read: IgxDaysViewComponent})\n    public daysView: IgxDaysViewComponent;\n\n    /**\n     * @hidden\n     */\n    public yearAction = '';\n\n    /**\n     * @hidden\n     */\n    public animationDone() {\n        this.yearAction = '';\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event) {\n        super.activeViewDecadeKB(event);\n\n        if (event.key === KEYS.RIGHT_ARROW || event.key === KEYS.RIGHT_ARROW_IE) {\n            event.preventDefault();\n            this.nextYear();\n        }\n\n        if (event.key === KEYS.LEFT_ARROW || event.key === KEYS.LEFT_ARROW_IE) {\n            event.preventDefault();\n            this.previousYear();\n        }\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) { this.dacadeView.el.nativeElement.focus(); }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade() {\n        super.activeViewDecade();\n\n        requestAnimationFrame(() => {\n            this.dacadeView.el.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public nextYear() {\n        this.yearAction = 'next';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', 1);\n\n        this.selectDate(this.viewDate);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public nextYearKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            this.nextYear();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public previousYear() {\n        this.yearAction = 'prev';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', -1);\n\n        this.selectDate(this.viewDate);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public previousYearKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            this.previousYear();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectYear(event: Date) {\n        this.viewDate = new Date(event.getFullYear(), event.getMonth(), event.getDate());\n        this.activeView = CalendarView.DEFAULT;\n\n        this.selectDate(event);\n        this.onSelection.emit(this.selectedDates);\n\n        requestAnimationFrame(() => {\n            this.yearsBtn.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public selectMonth(event: Date) {\n        this.selectDate(event);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * Selects a date.\n     *```typescript\n     * this.monPicker.selectDate(new Date(`2018-06-12`));\n     *```\n     */\n    public selectDate(value: Date) {\n        if (!value) {\n            return new Date();\n        }\n\n        // TO DO: to be refactored after discussion on the desired behavior\n        super.selectDate(value);\n        this.viewDate = value;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n\n        // TO DO: to be refactored after discussion on the desired behavior\n        if (value) {\n            this.viewDate = this.selectedDates = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pageup', ['$event'])\n    public onKeydownPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n        this.yearAction = 'prev';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', -1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pagedown', ['$event'])\n    public onKeydownPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n        this.yearAction = 'next';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', 1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        if (this.monthsView) {\n            this.monthsView.el.nativeElement.focus();\n            this.monthsView.onKeydownHome(event);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        if (this.monthsView) {\n            this.monthsView.el.nativeElement.focus();\n            this.monthsView.onKeydownEnd(event);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxCalendarComponent } from './calendar.component';\nimport {\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarMonthDirective,\n    IgxCalendarSubheaderTemplateDirective,\n    IgxCalendarYearDirective\n} from './calendar.directives';\nimport { IgxMonthsViewComponent } from './months-view/months-view.component';\nimport { IgxYearsViewComponent } from './years-view/years-view.component';\nimport { IgxDaysViewComponent } from './days-view/days-view.component';\nimport { IgxDayItemComponent } from './days-view/day-item.component';\nimport { IgxMonthPickerComponent } from './month-picker/month-picker.component';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxDayItemComponent,\n        IgxDaysViewComponent,\n        IgxCalendarComponent,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective,\n        IgxMonthsViewComponent,\n        IgxYearsViewComponent,\n        IgxMonthPickerComponent\n    ],\n    exports: [\n        IgxCalendarComponent,\n        IgxDaysViewComponent,\n        IgxMonthsViewComponent,\n        IgxYearsViewComponent,\n        IgxMonthPickerComponent,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective\n    ],\n    imports: [CommonModule, FormsModule, IgxIconModule]\n})\nexport class IgxCalendarModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    Directive,\n    HostBinding,\n    Optional,\n    Inject,\n    Input,\n    NgModule,\n    OnInit,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\n\nlet NEXT_ID = 0;\n\n/**\n * IgxCardMedia is container for the card media section.\n * Use it to wrap images and videos.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-media'\n})\nexport class IgxCardMediaDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card__media')\n    public cssClass = 'igx-card__media';\n\n    /**\n     * An @Input property that sets the `width` and `min-width` style property\n     * of the media container. If not provided it will be set to `auto`.\n     * ```html\n     * <igx-card-media width=\"300px\"></igx-card-media>\n     * ```\n     */\n    @HostBinding('style.width')\n    @HostBinding('style.min-width')\n    @Input()\n    public width = 'auto';\n\n    /**\n     * An @Input property that sets the `height` style property of the media container.\n     * If not provided it will be set to `auto`.\n     * ```html\n     * <igx-card-media height=\"50%\"></igx-card-media>\n     * ```\n     */\n    @HostBinding('style.height')\n    @Input()\n    public height = 'auto';\n\n    /**\n     * An @Input property that sets the `role` attribute of the media container.\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'img';\n}\n\n/**\n * IgxCardHeader is container for the card header\n */\n@Component({\n    selector: 'igx-card-header',\n    templateUrl: 'card-header.component.html'\n})\nexport class IgxCardHeaderComponent {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header')\n    public cssClass = 'igx-card-header';\n\n    /**\n     * An @Input property that sets the layout style of the header.\n     * By default the header elements(thumbnail and title/subtitle) are aligned horizontally.\n     * ```html\n     * <igx-card-header [vertical]=\"true\"></igx-card-header>\n     * ```\n     */\n    @HostBinding('class.igx-card-header--vertical')\n    @Input()\n    public vertical = false;\n\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card header.\n     * By default the value is set to `header`.\n     * ```html\n     * <igx-card-header role=\"header\"></igx-card-header>\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'header';\n}\n\n/**\n * IgxCardThumbnail is container for the card thumbnail section.\n * Use it to wrap anything you want to be used as a thumbnail.\n */\n@Directive({\n    selector: '[igxCardThumbnail]'\n})\nexport class IgxCardThumbnailDirective { }\n\n/**\n * igxCardHeaderTitle is used to denote the header title in a card.\n * Use it to tag text nodes.\n */\n@Directive({\n    selector: '[igxCardHeaderTitle]'\n})\nexport class IgxCardHeaderTitleDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header__title')\n    public cssClass = 'igx-card__header__title';\n}\n\n/**\n * igxCardHeaderSubtitle is used to denote the header subtitle in a card.\n * Use it to tag text nodes.\n */\n@Directive({\n    selector: '[igxCardHeaderSubtitle]'\n})\nexport class IgxCardHeaderSubtitleDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header__subtitle')\n    public cssClass = 'igx-card-header__subtitle';\n}\n/**\n * IgxCardContent is container for the card content.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-content'\n})\nexport class IgxCardContentDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-content')\n    public cssClass = 'igx-card-content';\n}\n\n/**\n * IgxCardFooter is container for the card footer\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-footer'\n})\nexport class IgxCardFooterDirective {\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card footer.\n     * By default the value is set to `footer`.\n     * ```html\n     * <igx-card-footer role=\"footer\"></igx-card-footer>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'footer';\n}\n\n/**\n * **Ignite UI for Angular Card** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/card.html)\n *\n * The Ignite UI Card serves as a container that allows custom content to be organized in an appealing way. There are\n * five sections in a card that you can use to organize your content. These are header, media, content, actions, and footer.\n *\n * Example:\n * ```html\n * <igx-card>\n *   <igx-card-header>\n *     <h3 igxCardHeaderTitle>{{title}}</h3>\n *     <h5 igxCardHeaderSubtitle>{{subtitle}}</h5>\n *   </igx-card-header>\n *   <igx-card-actions>\n *       <button igxButton igxRipple>Share</button>\n *       <button igxButton igxRipple>Play Album</button>\n *   </igx-card-actions>\n * </igx-card>\n * ```\n */\n\nexport enum IgxCardType {\n    DEFAULT = 'default',\n    OUTLINED = 'outlined'\n}\n\n@Component({\n    selector: 'igx-card',\n    templateUrl: 'card.component.html'\n})\nexport class IgxCardComponent {\n    /**\n     * Sets/gets the `id` of the card.\n     * If not set, `id` will have value `\"igx-card-0\"`;\n     * ```html\n     * <igx-card id = \"my-first-card\"></igx-card>\n     * ```\n     * ```typescript\n     * let cardId =  this.card.id;\n     * ```\n     * @memberof IgxCardComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-card-${NEXT_ID++}`;\n\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card.\n     * By default the value is set to `group`.\n     * ```html\n     * <igx-card role=\"group\"></igx-card>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'group';\n\n    /**\n     * An @Input property that sets the value of the `type` attribute of the card.\n     * By default the value is set to `default`. You can make the card use the\n     * outlined style by setting the value to `outlined`.\n     * ```html\n     * <igx-card type=\"outlined\"></igx-card>\n     * ```\n     */\n    @HostBinding('class.igx-card')\n    @Input()\n    public type: IgxCardType | string = IgxCardType.DEFAULT;\n\n    /**\n     * A getter which will return true if the card type is `outlined`.\n     */\n    @HostBinding('class.igx-card--outlined')\n    get isOutlinedCard() {\n        return this.type === IgxCardType.OUTLINED;\n    }\n\n    /**\n     * An @Input property that sets the value of the `horizontal` attribute of the card.\n     * Setting this to `true` will make the different card sections align horizontally,\n     * essentially flipping the card to the side.\n     * ```html\n     * <igx-card [horizontal]=\"true\"></igx-card>\n     * ```\n     */\n    @HostBinding('class.igx-card--horizontal')\n    @Input()\n    public horizontal = false;\n}\n\nexport enum IgxCardActionsLayout {\n    DEFAULT = 'default',\n    JUSTIFY = 'justify',\n}\n\n/**\n * IgxCardActions is container for the card actions.\n */\n@Component({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-actions',\n    templateUrl: 'card-actions.component.html'\n})\nexport class IgxCardActionsComponent implements OnInit, OnChanges {\n    private isVerticalSet = false;\n\n    constructor(@Optional() @Inject(IgxCardComponent) public card: IgxCardComponent) { }\n\n    /**\n     * An @Input property that sets the layout style of the actions.\n     * By default icons and icon buttons, as well as regular buttons\n     * are split into two containers, which are then positioned on both ends\n     * of the card-actions area.\n     * You can justify the elements in those groups so they are positioned equally\n     * from one another taking up all the space available along the card actions axis.\n     * ```html\n     * <igx-card-actions layout=\"justify\"></igx-card-actions>\n     * ```\n     */\n    @HostBinding('class.igx-card-actions')\n    @Input()\n    public layout: IgxCardActionsLayout | string = 'default';\n\n    /**\n     * An @Input property that sets the vertical attribute of the actions.\n     * When set to `true` the actions will be layed out vertically.\n     */\n    @HostBinding('class.igx-card-actions--vertical')\n    @Input()\n    public vertical: boolean;\n\n    /**\n     * A getter that returns `true` when the layout has been\n     * set to `justify`.\n     */\n    @HostBinding('class.igx-card-actions--justify')\n    get isJustifyLayout() {\n        return this.layout === IgxCardActionsLayout.JUSTIFY;\n    }\n\n    /**\n     * An @Input property that sets order of the buttons the actions area.\n     * By default all icons/icon buttons are placed at the end of the action\n     * area. Any regular buttons(flat, raised) will appear before the icons/icon buttons\n     * placed in the actions area.\n     * If you want to reverse their positions so that icons appear first, use the `reverse`\n     * attribute.\n     * ```html\n     * <igx-card-actions [reverse]=\"true\"></igx-card-actions>\n     * ```\n     */\n    @HostBinding('class.igx-card-actions--reverse')\n    @Input()\n    public reverse = false;\n\n    ngOnChanges(changes: SimpleChanges) {\n        for (const prop in changes) {\n            if (prop === 'vertical') {\n                this.isVerticalSet = true;\n            }\n        }\n    }\n\n    ngOnInit() {\n        this.vertical = !this.isVerticalSet && this.card.horizontal;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxCardComponent,\n        IgxCardHeaderComponent,\n        IgxCardMediaDirective,\n        IgxCardContentDirective,\n        IgxCardActionsComponent,\n        IgxCardFooterDirective,\n        IgxCardHeaderTitleDirective,\n        IgxCardHeaderSubtitleDirective,\n        IgxCardThumbnailDirective,\n    ],\n    exports: [\n        IgxCardComponent,\n        IgxCardHeaderComponent,\n        IgxCardMediaDirective,\n        IgxCardContentDirective,\n        IgxCardActionsComponent,\n        IgxCardFooterDirective,\n        IgxCardHeaderTitleDirective,\n        IgxCardHeaderSubtitleDirective,\n        IgxCardThumbnailDirective,\n    ],\n    imports: [CommonModule, IgxButtonModule]\n})\nexport class IgxCardModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Direction { NONE, NEXT, PREV }\n\n/**\n * **Ignite UI for Angular Carousel** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/carousel.html)\n *\n * The Ignite UI Carousel is used to browse or navigate through a collection of slides. Slides can contain custom\n * content such as images or cards and be used for things such as on-boarding tutorials or page-based interfaces.\n * It can be used as a separate fullscreen element or inside another component.\n *\n * Example:\n * ```html\n * <igx-carousel>\n *   <igx-slide>\n *     <h3>First Slide Header</h3>\n *     <p>First slide Content</p>\n *   <igx-slide>\n *   <igx-slide>\n *     <h3>Second Slide Header</h3>\n *     <p>Second Slide Content</p>\n * </igx-carousel>\n * ```\n */\n@Component({\n    selector: 'igx-carousel',\n    templateUrl: 'carousel.component.html',\n    styles: [`\n    :host {\n        display: block;\n        outline-style: none;\n    }`]\n})\n\nexport class IgxCarouselComponent implements OnDestroy {\n    /**\n     * Returns the `role` attribute of the carousel.\n     * ```typescript\n     * let carouselRole =  this.carousel.role;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.role') public role = 'region';\n\n    /**\n     * Sets the `id` of the carousel.\n     * If not set, the `id` of the first carousel component will be `\"igx-carousel-0\"`.\n     * ```html\n     * <igx-carousel id=\"my-first-carousel\"></igx-carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-carousel-${NEXT_ID++}`;\n\n    /**\n     * Sets whether the carousel should `loop` back to the first slide after reaching the last slide.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [loop]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public loop = true;\n\n    /**\n     * Sets whether the carousel will `pause` the slide transitions on user interactions.\n     * Default value is `true`.\n     * ```html\n     *  <igx-carousel [pause]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public pause = true;\n\n    /**\n     * Returns the time `interval` in milliseconds before the slide changes.\n     * ```typescript\n     * let timeInterval = this.carousel.interval;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @Input()\n    get interval(): number {\n        return this._interval;\n    }\n\n    /**\n     * Sets the time `interval` in milliseconds before the slide changes.\n     * If not set, the carousel will not change `slides` automatically.\n     * ```html\n     * <igx-carousel [interval] = \"1000\"></carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    set interval(value: number) {\n        this._interval = +value;\n        this._restartInterval();\n    }\n    /**\n     * Returns the `tabIndex` of the carousel component.\n     * ```typescript\n     * let tabIndex =  this.carousel.tabIndex;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.tabindex')\n    get tabIndex() {\n        return 0;\n    }\n\n    /**\n     * Controls whether the carousel should render the left/right `navigation` buttons.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [navigation] = \"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public navigation = true;\n\n    /**\n     * An event that is emitted after a slide transition has happened.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideChanged)=\"onSlideChanged($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideChanged = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been added to the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideAdded)=\"onSlideAdded($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideAdded = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been removed from the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideRemoved)=\"onSlideRemoved($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideRemoved = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after the carousel has been paused.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPaused)=\"onCarouselPaused($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPaused = new EventEmitter<IgxCarouselComponent>();\n\n    /**\n     * An event that is emitted after the carousel has resumed transitioning between `slides`.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPlaying)=\"onCarouselPlaying($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPlaying = new EventEmitter<IgxCarouselComponent>();\n\n    /**\n     * The collection of `slides` currently in the carousel.\n     * ```typescript\n     * let slides: IgxSlideComponent[] = this.carousel.slides;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public slides: IgxSlideComponent[] = [];\n    private _interval: number;\n    private _lastInterval: any;\n    private _playing: boolean;\n    private _currentSlide: IgxSlideComponent;\n    private _destroyed: boolean;\n    private _total = 0;\n\n    constructor(private element: ElementRef) { }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        this._destroyed = true;\n        if (this._lastInterval) {\n            clearInterval(this._lastInterval);\n        }\n    }\n    /**\n     * @hidden\n     * @memberof IgxCarouselComponent\n     */\n    public setAriaLabel(slide) {\n        return `Item ${slide.index + 1} of ${this.total}`;\n    }\n\n    /**\n     * Returns the total number of `slides` in the carousel.\n     * ```typescript\n     * let slideCount =  this.carousel.total;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get total(): number {\n        return this._total;\n    }\n\n    /**\n     * The index of the slide being currently shown.\n     * ```typescript\n     * let currentSlideNumber =  this.carousel.current;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get current(): number {\n        return !this._currentSlide ? 0 : this._currentSlide.index;\n    }\n\n    /**\n     * Returns a boolean indicating if the carousel is playing.\n     * ```typescript\n     * let isPlaying =  this.carousel.isPlaying;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isPlaying(): boolean {\n        return this._playing;\n    }\n\n    /**\n     * Returns Ð° boolean indicating if the carousel is destroyed.\n     * ```typescript\n     * let isDestroyed =  this.carousel.isDestroyed;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isDestroyed(): boolean {\n        return this._destroyed;\n    }\n    /**\n     * Returns a reference to the carousel element in the DOM.\n     * ```typescript\n     * let nativeElement =  this.carousel.nativeElement;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Returns the slide corresponding to the provided `index` or null.\n     * ```typescript\n     * let slide1 =  this.carousel.get(1);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get(index: number): IgxSlideComponent {\n        for (const each of this.slides) {\n            if (each.index === index) {\n                return each;\n            }\n        }\n    }\n\n    /**\n     * Adds a new slide to the carousel.\n     * ```typescript\n     * this.carousel.add(newSlide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public add(slide: IgxSlideComponent) {\n        slide.index = this.total;\n        this.slides.push(slide);\n        this._total += 1;\n\n        if (this.total === 1 || slide.active) {\n            this.select(slide);\n            if (this.total === 1) {\n                this.play();\n            }\n        } else {\n            slide.active = false;\n        }\n\n        this.onSlideAdded.emit({ carousel: this, slide });\n    }\n\n    /**\n     * Removes a slide from the carousel.\n     * ```typescript\n     * this.carousel.remove(slide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public remove(slide: IgxSlideComponent) {\n        if (slide && slide === this.get(slide.index)) { // check if the requested slide for delete is present in the carousel\n            if (slide.index === this.current) {\n                slide.active = false;\n                this.next();\n            }\n\n            this.slides.splice(slide.index, 1);\n            this._total -= 1;\n\n            if (!this.total) {\n                this._currentSlide = null;\n                return;\n            }\n\n            for (let i = 0; i < this.total; i++) {\n                this.slides[i].index = i;\n            }\n\n            this.onSlideRemoved.emit({ carousel: this, slide });\n        }\n    }\n\n    /**\n     * Kicks in a transition for a given slide with a given `direction`.\n     * ```typescript\n     * this.carousel.select(this.carousel.get(2), Direction.NEXT);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public select(slide: IgxSlideComponent, direction: Direction = Direction.NONE) {\n        const newIndex = slide.index;\n        if (direction === Direction.NONE) {\n            direction = newIndex > this.current ? Direction.NEXT : Direction.PREV;\n        }\n\n        if (slide && slide !== this._currentSlide) {\n            this._moveTo(slide, direction);\n        }\n    }\n\n    /**\n     * Transitions to the next slide in the carousel.\n     * ```typescript\n     * this.carousel.next();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public next() {\n        const index = (this.current + 1) % this.total;\n\n        if (index === 0 && !this.loop) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.NEXT);\n    }\n\n    /**\n     * Transitions to the previous slide in the carousel.\n     * ```typescript\n     * this.carousel.prev();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public prev() {\n        const index = this.current - 1 < 0 ?\n            this.total - 1 : this.current - 1;\n\n        if (!this.loop && index === this.total - 1) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.PREV);\n    }\n\n    /**\n     * Resumes playing of the carousel if in paused state.\n     * No operation otherwise.\n     * ```typescript\n     * this.carousel.play();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public play() {\n        if (!this._playing) {\n            this._playing = true;\n            this.onCarouselPlaying.emit(this);\n            this._restartInterval();\n        }\n    }\n\n    /**\n     * Stops slide transitions if the `pause` option is set to `true`.\n     * No operation otherwise.\n     * ```typescript\n     *  this.carousel.stop();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public stop() {\n        if (this.pause) {\n            this._playing = false;\n            this.onCarouselPaused.emit(this);\n            this._resetInterval();\n        }\n    }\n    /**\n     *@hidden\n     */\n    private _moveTo(slide: IgxSlideComponent, direction: Direction) {\n        if (this._destroyed) {\n            return;\n        }\n\n        slide.direction = direction;\n        slide.active = true;\n\n        if (this._currentSlide) {\n            this._currentSlide.direction = direction;\n            this._currentSlide.active = false;\n        }\n\n        this._currentSlide = slide;\n\n        this.onSlideChanged.emit({ carousel: this, slide });\n        this._restartInterval();\n    }\n    /**\n     *@hidden\n     */\n    private _resetInterval() {\n        if (this._lastInterval) {\n            clearInterval(this._lastInterval);\n            this._lastInterval = null;\n        }\n    }\n    /**\n     *@hidden\n     */\n    private _restartInterval() {\n        this._resetInterval();\n\n        if (!isNaN(this.interval) && this.interval > 0) {\n            this._lastInterval = setInterval(() => {\n                const tick = +this.interval;\n                if (this._playing && this.total && !isNaN(tick) && tick > 0) {\n                    this.next();\n                } else {\n                    this.stop();\n                }\n            }, this.interval);\n        }\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('keydown.arrowright')\n    public onKeydownArrowRight() {\n        this.next();\n        requestAnimationFrame(() => this.nativeElement.focus());\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('keydown.arrowleft')\n    public onKeydownArrowLeft() {\n        this.prev();\n        requestAnimationFrame(() => this.nativeElement.focus());\n    }\n}\n\n/**\n * A slide component that usually holds an image and/or a caption text.\n * IgxSlideComponent is usually a child component of an IgxCarouselComponent.\n *\n * ```\n * <igx-slide [input bindings] >\n *    <ng-content></ng-content>\n * </igx-slide>\n * ```\n *\n * @export\n */\n@Component({\n    selector: 'igx-slide',\n    templateUrl: 'slide.component.html'\n})\n\nexport class IgxSlideComponent implements OnInit, OnDestroy {\n\n    /**\n     * Gets/sets the `index` of the slide inside the carousel.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide index = \"1\"</igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public index: number;\n\n    /**\n     * Gets/sets the target `direction` for the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide direction=\"NEXT\"</igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public direction: Direction;\n    /**\n     * Gets/sets the `active` state of the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide [active] =\"false\"</igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberof IgxSlideComponent\n     */\n    @HostBinding('class.active')\n    @Input() public active: boolean;\n\n    constructor(private carousel: IgxCarouselComponent) { }\n    /**\n     *@hidden\n     */\n    public ngOnInit() {\n        this.carousel.add(this);\n    }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        this.carousel.remove(this);\n    }\n}\n\nexport interface ISlideEventArgs {\n    carousel: IgxCarouselComponent;\n    slide: IgxSlideComponent;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxCarouselComponent, IgxSlideComponent],\n    exports: [IgxCarouselComponent, IgxSlideComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxCarouselModule {\n}\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum LabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nexport interface IChangeCheckboxEventArgs {\n    checked: boolean;\n    checkbox: IgxCheckboxComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n * **Ignite UI for Angular Checkbox** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/checkbox.html)\n *\n * The Ignite UI Checkbox is a selection control that allows users to make a binary choice. It behaves similarly\n * to the native browser checkbox.\n *\n * Example:\n * ```html\n * <igx-checkbox checked=\"true\">\n *   simple checkbox\n * </igx-checkbox>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxCheckboxComponent, multi: true }],\n    selector: 'igx-checkbox',\n    preserveWhitespaces: false,\n    templateUrl: 'checkbox.component.html'\n})\nexport class IgxCheckboxComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     *@hidden\n     */\n    protected _value: any;\n    /**\n     * Returns reference to the native checkbox element.\n     * ```typescript\n     * let checkboxElement =  this.checkbox.checkboxElement;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('checkbox') public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     * ```typescript\n     * let labelElement =  this.checkbox.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('label') public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.checkbox.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel') public placeholderLabel;\n    /**\n     * Sets/gets the `id` of the checkbox component.\n     * If not set, the `id` of the first checkbox component will be `\"igx-checkbox-0\"`.\n     * ```html\n     * <igx-checkbox id=\"my-first-checkbox\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let checkboxId =  this.checkbox.id;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-checkbox-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element.\n     * If not set, the id of the `label` in the first checkbox component will be `\"igx-checkbox-0-label\"`.\n     * ```html\n     * <igx-checkbox labelId = \"Label1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelId =  this.checkbox.labelId;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-checkbox [value] = \"'CheckboxValue'\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let value =  this.checkbox.value;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute.\n     * ```html\n     * <igx-checkbox name = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let name =  this.checkbox.name;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-checkbox [tabindex] = \"1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.checkbox.tabindex;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     *  Sets/gets the position of the `label`.\n     *  If not set, the `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-checkbox labelPosition = \"before\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.checkbox.labelPosition;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public labelPosition: LabelPosition | string = LabelPosition.AFTER;\n    /**\n     * Enables/Disables the ripple effect.\n     * If not set, `disableRipple` will have value `false`.\n     * ```html\n     * <igx-checkbox [disableRipple] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRippleDisabled = this.checkbox.desableRipple;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the checkbox is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-checkbox [required] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRequired =  this.checkbox.required;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-checkbox aria-labelledby = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy =  this.checkbox.ariaLabelledBy;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     * ```html\n     * <igx-checkbox aria-label = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabel = this.checkbox.aruaLabel;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the checkbox state is changed.\n     * Provides references to the `IgxCheckboxComponent` and the `checked` property as event arguments.\n     * @memberof IgxCheckboxComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeCheckboxEventArgs> = new EventEmitter<IChangeCheckboxEventArgs>();\n    /**\n     * Returns the class of the checkbox component.\n     * ```typescript\n     * let class =  this.checkbox.cssClass;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox')\n    public cssClass = 'igx-checkbox';\n    /**\n     * Sets/gets whether the checkbox component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.checkbox.focused =  true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.checkbox.focused;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--focused')\n    public focused = false;\n    /**\n     * Sets/gets the checkbox indeterminate visual state.\n     * Default value is `false`;\n     * ```html\n     * <igx-checkbox [indeterminate] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isIndeterminate = this.checkbox.indeterminate;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--indeterminate')\n    @Input() public indeterminate = false;\n    /**\n     * Sets/gets whether the checkbox is checked.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [checked] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isChecked =  this.checkbox.checked;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets whether the checkbox is disabled.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [disabled] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isDesabled = this.checkbox.disabled;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the checkbox should disable all css transitions.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [disableTransitions]=\"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let disableTransitions = this.checkbox.disableTransitions;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--plain')\n    @Input() public disableTransitions = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     * @hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * If `disabled` is `false`, switches the `checked` state.\n     * ```typescript\n     * this.checkbox.toggle();\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    public toggle() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.indeterminate = false;\n        this.focused = false;\n        this.checked = !this.checked;\n\n        this.change.emit({ checked: this.checked, checkbox: this });\n        this._onChangeCallback(this.checked);\n    }\n    /**\n     *@hidden\n     */\n    public _onCheckboxChange(event) {\n        // We have to stop the original checkbox change event\n        // from bubbling up since we emit our own change event\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onCheckboxClick(event) {\n        // Since the original checkbox is hidden and the label\n        // is used for styling and to change the checked state of the checkbox,\n        // we need to prevent the checkbox click event from bubbling up\n        // as it gets triggered on label click\n        event.stopPropagation();\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick(event) {\n        // We use a span element as a placeholder label\n        // in place of the native label, we need to emit\n        // the change event separately here alongside\n        // the click event emitted on click\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case LabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case LabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden */\n    getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n}\n\nexport const IGX_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxCheckboxRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-checkbox[required][formControlName],\n    igx-checkbox[required][formControl],\n    igx-checkbox[required][ngModel]`,\n    providers: [IGX_CHECKBOX_REQUIRED_VALIDATOR]\n})\nexport class IgxCheckboxRequiredDirective extends CheckboxRequiredValidator { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    exports: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxCheckboxModule { }\n","import {\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    ElementRef,\n    HostBinding,\n    Input,\n    Output,\n    ViewChild,\n    Renderer2,\n    TemplateRef,\n    Inject,\n    Optional\n} from '@angular/core';\nimport { DisplayDensity, IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport {\n    IgxDragDirective,\n    IDragBaseEventArgs,\n    IDragStartEventArgs,\n    IgxDropEnterEventArgs,\n    IgxDropEventArgs\n} from '../directives/dragdrop/dragdrop.directive';\n\n\nexport interface IBaseChipEventArgs {\n    originalEvent: PointerEvent | MouseEvent | TouchEvent | KeyboardEvent | IgxDropEnterEventArgs;\n    owner: IgxChipComponent;\n}\n\nexport interface IChipClickEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n}\n\nexport interface IChipKeyDownEventArgs extends IBaseChipEventArgs {\n    originalEvent: KeyboardEvent;\n    cancel: boolean;\n}\n\nexport interface IChipEnterDragAreaEventArgs extends IBaseChipEventArgs {\n    dragChip: IgxChipComponent;\n}\n\nexport interface IChipSelectEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n    selected: boolean;\n}\n\nlet CHIP_ID = 0;\n\n@Component({\n    selector: 'igx-chip',\n    templateUrl: 'chip.component.html'\n})\nexport class IgxChipComponent extends DisplayDensityBase {\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\"></igx-chip>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-chip-${CHIP_ID++}`;\n\n    /**\n     * An @Input property that stores data related to the chip.\n     * ```html\n     * <igx-chip [data]=\"{ value: 'Country' }\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public data: any;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be dragged in order to change it's position.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public draggable = false;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` should render remove button and throw remove events.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [removable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public removable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies to the remove button.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [removable]=\"true\" [removeIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>delete</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public removeIcon: TemplateRef<any>;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be selected on click or through navigation,\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [draggable]=\"true\" [removable]=\"true\" [selectable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public selectable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies when it is selected.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [selectable]=\"true\" [selectIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>done_outline</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public selectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` is disabled. When disabled it restricts user interactions\n     * like focusing on click or tab, selection on click or Space, dragging.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [disabled]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * Sets the `IgxChipComponent` selected state.\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" [selected]=\"true\">\n     * ```\n     */\n    @Input()\n    public set selected(newValue: boolean) {\n        this.changeSelection(newValue);\n    }\n\n    /**\n     * Returns if the `IgxChipComponent` is selected.\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * selectedChip(){\n     *     let selectedChip = this.chip.selected;\n     * }\n     * ```\n     */\n    public get selected() {\n        return this._selected;\n    }\n\n    /**\n     * An @Input property that sets the `IgxChipComponent` background color.\n     * The `color` property supports string, rgb, hex.\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [color]=\"'#ff0000'\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public set color(newColor) {\n        this.chipArea.nativeElement.style.backgroundColor = newColor;\n    }\n\n    /**\n     * Returns the background color of the `IgxChipComponent`.\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * ngAfterViewInit(){\n     *     let chipColor = this.chip.color;\n     * }\n     * ```\n     */\n    public get color() {\n        return this.chipArea.nativeElement.style.backgroundColor;\n    }\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving starts.\n     * Returns the moving `IgxChipComponent`.\n     * ```typescript\n     * moveStarted(event: IBaseChipEventArgs){\n     *     let movingChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveStart)=\"moveStarted($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving ends.\n     * Returns the moved `IgxChipComponent`.\n     * ```typescript\n     * moveEnded(event: IBaseChipEventArgs){\n     *     let movedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveEnd)=\"moveEnded($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is removed.\n     * Returns the removed `IgxChipComponent`.\n     * ```typescript\n     * remove(event: IBaseChipEventArgs){\n     *     let removedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onRemove)=\"remove($event)\">\n     * ```\n     */\n    @Output()\n    public onRemove = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is clicked.\n     * Returns the clicked `IgxChipComponent`, whether the event should be canceled.\n     * ```typescript\n     * chipClick(event: IChipClickEventArgs){\n     *     let clickedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onClick)=\"chipClick($event)\">\n     * ```\n     */\n    @Output()\n    public onClick = new EventEmitter<IChipClickEventArgs>();\n\n    /**\n     * Emits event when the `IgxChipComponent` is selected/deselected.\n     * Returns the selected chip reference, whether the event should be canceled, what is the next selection state and\n     * when the event is triggered by interaction `originalEvent` is provided, otherwise `originalEvent` is `null`.\n     * ```typescript\n     * chipSelect(event: IChipSelectEventArgs){\n     *     let selectedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onSelection)=\"chipSelect($event)\">\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipSelectEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` keyboard navigation is being used.\n     * Returns the focused/selected `IgxChipComponent`, whether the event should be canceled,\n     * if the `alt`, `shift` or `control` key is pressed and the pressed key name.\n     * ```typescript\n     * chipKeyDown(event: IChipKeyDownEventArgs){\n     *     let keyDown = event.key;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onKeyDown)=\"chipKeyDown($event)\">\n     * ```\n     */\n    @Output()\n    public onKeyDown = new EventEmitter<IChipKeyDownEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` has entered the `IgxChipsAreaComponent`.\n     * Returns the target `IgxChipComponent`, the drag `IgxChipComponent`, as  well as\n     * the original drop event arguments.\n     * ```typescript\n     * chipEnter(event: IChipEnterDragAreaEventArgs){\n     *     let targetChip = event.targetChip;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onDragEnter)=\"chipEnter($event)\">\n     * ```\n     */\n    @Output()\n    public onDragEnter = new EventEmitter<IChipEnterDragAreaEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        const classes = [this.getComponentDensityClass('igx-chip')];\n        classes.push(this.disabled ? 'igx-chip--disabled' : '');\n        // The custom classes should be at the end.\n        classes.push(this.class);\n        return classes.join(' ');\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('chipArea', { read: ElementRef })\n    public chipArea: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('chipArea', { read: IgxDragDirective })\n    public dragDir: IgxDragDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultRemoveIcon', { read: TemplateRef })\n    public defaultRemoveIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultSelectIcon', { read: TemplateRef })\n    public defaultSelectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public get removeButtonTemplate() {\n        return this.removeIcon || this.defaultRemoveIcon;\n    }\n\n    /**\n     * @hidden\n     */\n    public get selectIconTemplate() {\n        return this.selectIcon || this.defaultSelectIcon;\n    }\n\n    /**\n     * @hidden\n     */\n    public get ghostClass(): string {\n        return this.getComponentDensityClass('igx-chip__ghost');\n    }\n\n    public get chipTabindex() {\n        return !this.disabled ? 0 : '';\n    }\n\n    protected _selected = false;\n    protected _selectedItemClass = 'igx-chip__item--selected';\n    protected _movedWhileRemoving = false;\n\n    constructor(public cdr: ChangeDetectorRef, public elementRef: ElementRef, private renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n        }\n\n    /**\n     * @hidden\n     */\n    public selectClass(condition: boolean): object {\n        const SELECT_CLASS = 'igx-chip__select';\n\n        return {\n            [SELECT_CLASS]: condition,\n            [`${SELECT_CLASS}--hidden`]: !condition\n        };\n    }\n\n    protected changeSelection(newValue: boolean, srcEvent = null) {\n        const onSelectArgs: IChipSelectEventArgs = {\n            originalEvent: srcEvent,\n            owner: this,\n            selected: false,\n            cancel: false\n        };\n\n        if (newValue && !this._selected) {\n            onSelectArgs.selected = true;\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.addClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n            }\n        } else if (!newValue && this._selected) {\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.removeClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipKeyDown(event: KeyboardEvent) {\n        const keyDownArgs: IChipKeyDownEventArgs = {\n            originalEvent: event,\n            owner: this,\n            cancel: false\n        };\n\n        this.onKeyDown.emit(keyDownArgs);\n        if (keyDownArgs.cancel) {\n            return;\n        }\n\n        if ((event.key === 'Delete' || event.key === 'Del') && this.removable) {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n        }\n\n        if ((event.key === ' ' || event.key === 'Spacebar') && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event);\n        }\n\n        if (event.key !== 'Tab') {\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveBtnKeyDown(event: KeyboardEvent) {\n        if (event.key === ' ' || event.key === 'Spacebar' || event.key === 'Enter') {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    public onRemoveMouseDown(event: PointerEvent | MouseEvent) {\n        event.stopPropagation();\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveClick(event: MouseEvent | TouchEvent) {\n        this.onRemove.emit({\n            originalEvent: event,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveTouchMove() {\n        // We don't remove chip if user starting touch interacting on the remove button moves the chip\n        this._movedWhileRemoving = true;\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveTouchEnd(event: TouchEvent) {\n        if (!this._movedWhileRemoving) {\n            this.onRemoveClick(event);\n        }\n        this._movedWhileRemoving = false;\n    }\n\n    /**\n     * @hidden\n     */\n    // -----------------------------\n    // Start chip igxDrag behaviour\n    public onChipDragStart(event: IDragStartEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n        event.cancel = !this.draggable || this.disabled;\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDragEnd() {\n        this.dragDir.dropFinished();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipMoveEnd(event: IDragBaseEventArgs) {\n        // moveEnd is triggered after return animation has finished. This happen when we drag and release the chip.\n        this.onMoveEnd.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n\n        if (this.selected) {\n            this.chipArea.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDragClicked(event: IDragBaseEventArgs) {\n        const clickEventArgs: IChipClickEventArgs = {\n            originalEvent: event.originalEvent,\n            owner: this,\n            cancel: false\n        };\n        this.onClick.emit(clickEventArgs);\n\n        if (!clickEventArgs.cancel && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event.originalEvent);\n        }\n    }\n    // End chip igxDrag behaviour\n\n    /**\n     * @hidden\n     */\n    // -----------------------------\n    // Start chip igxDrop behaviour\n    public onChipDragEnterHandler(event: IgxDropEnterEventArgs) {\n        if (this.dragDir === event.drag || !event.dragData || !event.dragData.chip) {\n            return;\n        }\n\n        const eventArgs: IChipEnterDragAreaEventArgs = {\n            owner: this,\n            dragChip: event.dragData.chip,\n            originalEvent: event\n        };\n        this.onDragEnter.emit(eventArgs);\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDrop(event: IgxDropEventArgs) {\n        // Cancel the default drop logic\n        event.cancel = true;\n    }\n    // End chip igxDrop behaviour\n}\n","import {\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    Output,\n    QueryList,\n    DoCheck,\n    AfterViewInit,\n    OnDestroy,\n    ElementRef\n} from '@angular/core';\nimport {\n    IgxChipComponent,\n    IChipSelectEventArgs,\n    IChipKeyDownEventArgs,\n    IChipEnterDragAreaEventArgs,\n    IBaseChipEventArgs\n} from './chip.component';\nimport {\n    IgxDropEnterEventArgs\n} from '../directives/dragdrop/dragdrop.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/internal/Subject';\n\nexport interface IBaseChipsAreaEventArgs {\n    originalEvent: PointerEvent | MouseEvent | TouchEvent | KeyboardEvent | IgxDropEnterEventArgs;\n    owner: IgxChipsAreaComponent;\n}\n\nexport interface IChipsAreaReorderEventArgs extends IBaseChipsAreaEventArgs {\n    chipsArray: IgxChipComponent[];\n}\n\nexport interface IChipsAreaSelectEventArgs extends IBaseChipsAreaEventArgs {\n    newSelection: IgxChipComponent[];\n}\n\n@Component({\n    selector: 'igx-chips-area',\n    templateUrl: 'chips-area.component.html',\n})\nexport class IgxChipsAreaComponent implements DoCheck, AfterViewInit, OnDestroy {\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass() {\n        const classes = ['igx-chip-area'];\n        classes.push(this.class);\n\n        return classes.join(' ');\n    }\n\n    /**\n     * An @Input property that sets the width of the `IgxChipsAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.width.px')\n    @Input()\n    public width: number;\n\n    /**\n     * An @Input property that sets the height of the `IgxChipsAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.height.px')\n    @Input()\n    public height: number;\n\n    /**\n     * Emits an event when `IgxChipComponent`s in the `IgxChipsAreaComponent` should be reordered.\n     * Returns an array of `IgxChipComponent`s.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"changedOrder($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * public changedOrder(event: IChipsAreaReorderEventArgs){\n     *      let chips: IgxChipComponent[] = event.chipsArray;\n     * }\n     * ```\n     */\n    @Output()\n    public onReorder = new EventEmitter<IChipsAreaReorderEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is selected/deselected.\n     * Fired after the chips area is initialized if there are initially selected chips as well.\n     * Returns an array of selected `IgxChipComponent`s and the `IgxChipAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onSelection)=\"selection($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * public selection(event: IChipsAreaSelectEventArgs){\n     *      let selectedChips: IgxChipComponent[] = event.newSelection;\n     * }\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipsAreaSelectEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveStart)=\"moveStart($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * moveStart(event: IBaseChipsAreaEventArgs){\n     *      let chipArea = event.owner;\n     * }\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Emits an event after an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveEnd)=\"moveEnd($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * moveEnd(event: IBaseChipsAreaEventArgs){\n     *      let chipArea = event.owner;\n     * }\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Holds the `IgxChipComponent` in the `IgxChipsAreaComponent`.\n     * ```typescript\n     * ngAfterViewInit(){\n     *    let chips = this.chipsArea.chipsList;\n     * }\n     * ```\n     */\n    @ContentChildren(IgxChipComponent)\n    public chipsList: QueryList<IgxChipComponent>;\n\n    private modifiedChipsArray: IgxChipComponent[];\n    private _differ: IterableDiffer<IgxChipComponent> | null = null;\n    private selectedChips: IgxChipComponent[] = [];\n    protected destroy$ = new Subject<boolean>();\n\n    constructor(public cdr: ChangeDetectorRef, public element: ElementRef,\n        private _iterableDiffers: IterableDiffers) {\n        this._differ = this._iterableDiffers.find([]).create(null);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        // If we have initially selected chips through their inputs, we need to get them, because we cannot listen to their events yet.\n        if (this.chipsList.length) {\n            this.selectedChips = this.chipsList.filter((item: IgxChipComponent) => item.selected);\n            if (this.selectedChips.length) {\n                this.onSelection.emit({\n                    originalEvent: null,\n                    newSelection: this.selectedChips,\n                    owner: this\n                });\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck(): void {\n        if (this.chipsList) {\n            const changes = this._differ.diff(this.chipsList.toArray());\n            if (changes) {\n                changes.forEachAddedItem((addedChip) => {\n                    addedChip.item.onMoveStart.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveStart(args);\n                    });\n                    addedChip.item.onMoveEnd.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveEnd(args);\n                    });\n                    addedChip.item.onDragEnter.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipDragEnter(args);\n                    });\n                    addedChip.item.onKeyDown.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipKeyDown(args);\n                    });\n                    if (addedChip.item.selectable) {\n                        addedChip.item.onSelection.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                            this.onChipSelectionChange(args);\n                        });\n                    }\n                });\n                this.modifiedChipsArray = this.chipsList.toArray();\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipKeyDown(event: IChipKeyDownEventArgs) {\n        let orderChanged = false;\n        const chipsArray = this.chipsList.toArray();\n        const dragChipIndex = chipsArray.findIndex((el) => el === event.owner);\n        if (event.originalEvent.shiftKey === true) {\n            if (event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex - 1, false, event.originalEvent);\n                if (orderChanged) {\n                    setTimeout(() => {\n                        this.chipsList.toArray()[dragChipIndex - 1].chipArea.nativeElement.focus();\n                    });\n                }\n            } else if (event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex + 1, true, event.originalEvent);\n            }\n        } else {\n            if ((event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') && dragChipIndex > 0) {\n                chipsArray[dragChipIndex - 1].chipArea.nativeElement.focus();\n            } else if ((event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') &&\n                dragChipIndex < chipsArray.length - 1) {\n                chipsArray[dragChipIndex + 1].chipArea.nativeElement.focus();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipMoveStart(event: IBaseChipEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipMoveEnd(event: IBaseChipEventArgs) {\n        this.onMoveEnd.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipDragEnter(event: IChipEnterDragAreaEventArgs) {\n        const dropChipRect = event.owner.elementRef.nativeElement.getBoundingClientRect();\n        const dropChipIndex = this.chipsList.toArray().findIndex((el) => el === event.owner);\n        const dragChipIndex = this.chipsList.toArray().findIndex((el) => el === event.dragChip);\n        if (dragChipIndex < dropChipIndex) {\n            // from the left to right\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, true, event.originalEvent);\n        } else {\n            // from the right to left\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, false, event.originalEvent);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected positionChipAtIndex(chipIndex, targetIndex, shiftRestLeft, originalEvent) {\n        if (chipIndex < 0 || this.chipsList.length <= chipIndex ||\n            targetIndex < 0 || this.chipsList.length <= targetIndex) {\n            return false;\n        }\n\n        const chipsArray = this.chipsList.toArray();\n        const result: IgxChipComponent[] = [];\n        for (let i = 0; i < chipsArray.length; i++) {\n            if (shiftRestLeft) {\n                if (chipIndex <= i && i < targetIndex) {\n                    result.push(chipsArray[i + 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            } else {\n                if (targetIndex < i && i <= chipIndex) {\n                    result.push(chipsArray[i - 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            }\n        }\n        this.modifiedChipsArray = result;\n\n        const eventData: IChipsAreaReorderEventArgs = {\n            chipsArray: this.modifiedChipsArray,\n            originalEvent: originalEvent,\n            owner: this\n        };\n        this.onReorder.emit(eventData);\n        return true;\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipSelectionChange(event: IChipSelectEventArgs) {\n        if (event.selected) {\n            this.selectedChips.push(event.owner);\n        } else if (!event.selected) {\n            this.selectedChips = this.selectedChips.filter((chip) => {\n                return chip.id !== event.owner.id;\n            });\n        }\n        this.onSelection.emit({\n            originalEvent: event.originalEvent,\n            newSelection: this.selectedChips,\n            owner: this\n        });\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxChipComponent } from './chip.component';\nimport { IgxChipsAreaComponent } from './chips-area.component';\nimport { IgxDragDropModule } from '../directives/dragdrop/dragdrop.directive';\nimport { IgxPrefixModule, IgxPrefixDirective} from '../directives/prefix/prefix.directive';\nimport { IgxSuffixModule, IgxSuffixDirective } from '../directives/suffix/suffix.directive';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxChipsAreaComponent,\n    IgxChipComponent\n  ],\n  exports: [\n    IgxChipsAreaComponent,\n    IgxChipComponent,\n    IgxPrefixDirective,\n    IgxSuffixDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule,\n    IgxDragDropModule,\n    IgxPrefixModule,\n    IgxSuffixModule\n  ]\n})\nexport class IgxChipsModule { }\n","import { Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeader]'\n})\nexport class IgxComboHeaderDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboFooter]'\n})\nexport class IgxComboFooterDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboItem]'\n})\nexport class IgxComboItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboEmpty]'\n})\nexport class IgxComboEmptyDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeaderItem]'\n})\n\nexport class IgxComboHeaderItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboAddItem]'\n})\nexport class IgxComboAddItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboToggleIcon]'\n})\nexport class IgxComboToggleIconDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboClearIcon]'\n})\nexport class IgxComboClearIconDirective {\n}\n\n","import { IgxComboBase } from './combo.common';\n\n/**\n * @hidden\n */\nexport class IgxComboAPIService {\n    protected combo: IgxComboBase;\n\n    public disableTransitions = false;\n\n    public register(combo: IgxComboBase) {\n        this.combo = combo;\n    }\n\n\n    public clear(): void {\n        this.combo = null;\n    }\n\n\n    public get item_focusable(): boolean {\n        return false;\n    }\n    public get isRemote(): boolean {\n        return this.combo.isRemote;\n    }\n\n    public add_custom_item(): void {\n        if (!this.combo) {\n            return;\n        }\n        this.combo.addItemToCollection();\n    }\n\n    public get comboID(): string {\n        return this.combo.id;\n    }\n\n    public set_selected_item(itemID: any, event?: Event): void {\n        const selected = this.combo.isItemSelected(itemID);\n        if (itemID === null || itemID === undefined) {\n            return;\n        }\n        if (!selected) {\n            this.combo.selectItems([itemID], false, event);\n        } else {\n            this.combo.deselectItems([itemID], event);\n        }\n    }\n\n    public is_item_selected(itemID: any): boolean {\n        return this.combo.isItemSelected(itemID);\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    HostBinding,\n    Inject,\n    Input,\n    DoCheck,\n    Host,\n    HostListener\n} from '@angular/core';\nimport { IgxDropDownItemComponent } from '../drop-down/drop-down-item.component';\nimport { IGX_DROPDOWN_BASE, IDropDownBase, Navigate } from '../drop-down/drop-down.common';\nimport { IgxComboAPIService } from './combo.api';\nimport { IgxSelectionAPIService } from '../core/selection';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-item',\n    templateUrl: 'combo-item.component.html'\n})\nexport class IgxComboItemComponent extends IgxDropDownItemComponent implements DoCheck {\n\n    /**\n     * Gets the height of a list item\n     * @hidden\n     */\n    @Input()\n    @HostBinding('style.height.px')\n    public itemHeight = '';\n\n    /**\n     * @hidden\n     */\n    public get itemID() {\n        return this.comboAPI.isRemote ? JSON.stringify(this.value) : this.value;\n    }\n\n    /**\n     * @hidden\n     */\n    public get comboID() {\n        return this.comboAPI.comboID;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get disableTransitions() {\n        return this.comboAPI.disableTransitions;\n    }\n\n    constructor(\n        protected comboAPI: IgxComboAPIService,\n        @Inject(IGX_DROPDOWN_BASE) protected dropDown: IDropDownBase,\n        protected elementRef: ElementRef,\n        @Inject(IgxSelectionAPIService) protected selection: IgxSelectionAPIService\n    ) {\n        super(dropDown, elementRef, null, selection);\n    }\n\n    /**\n     * @hidden\n     */\n    get selected(): boolean {\n        return this.comboAPI.is_item_selected(this.itemID);\n    }\n\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n    }\n\n    /**\n     * @hidden\n     */\n    isVisible(direction: Navigate): boolean {\n        const rect = this.element.nativeElement.getBoundingClientRect();\n        const parentDiv = this.element.nativeElement.parentElement.parentElement.getBoundingClientRect();\n        if (direction === Navigate.Down) {\n            return rect.y + rect.height <= parentDiv.y + parentDiv.height;\n        }\n        return rect.y >= parentDiv.y;\n    }\n\n    @HostListener('click', ['$event'])\n    clicked(event) {\n        this.comboAPI.disableTransitions = false;\n        if (this.disabled || this.isHeader) {\n            const focusedItem = this.dropDown.items.find((item) => item.focused);\n            if (this.dropDown.allowItemsFocus && focusedItem) {\n                focusedItem.element.nativeElement.focus({ preventScroll: true });\n            }\n            return;\n        }\n        this.dropDown.navigateItem(this.itemIndex);\n        this.comboAPI.set_selected_item(this.itemID, event);\n    }\n\n    ngDoCheck() {\n    }\n}\n","import { ElementRef, EventEmitter } from '@angular/core';\nimport { CancelableEventArgs, CancelableBrowserEventArgs } from '../core/utils';\nimport { IFilteringExpression } from '../data-operations/filtering-expression.interface';\n\nexport const IGX_COMBO_COMPONENT = 'IgxComboComponentToken';\n\n/** @hidden @internal TODO: Evaluate */\nexport interface IgxComboBase {\n    id: string;\n    data: any[];\n    valueKey: string;\n    groupKey: string;\n    isRemote: boolean;\n    filteredData: any[];\n    filteringExpressions: IFilteringExpression[];\n    totalItemCount: number;\n    itemsMaxHeight: number;\n    itemHeight: number;\n    searchValue: string;\n    searchInput: ElementRef<HTMLInputElement>;\n    comboInput: ElementRef<HTMLInputElement>;\n    onOpened: EventEmitter<void>;\n    onOpening: EventEmitter<CancelableEventArgs>;\n    onClosing: EventEmitter<CancelableBrowserEventArgs>;\n    onClosed: EventEmitter<void>;\n    focusSearchInput(opening?: boolean): void;\n    triggerCheck(): void;\n    addItemToCollection(): void;\n    isAddButtonVisible(): boolean;\n    handleInputChange(event?: string): void;\n    isItemSelected(itemID: any): boolean;\n    selectItems(itemIDs: any[], clearSelection?: boolean, event?: Event): void;\n    deselectItems(itemIDs: any[], event?: Event): void;\n}\n","import { IgxComboItemComponent } from './combo-item.component';\nimport { Component } from '@angular/core';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-combo-add-item',\n    template: '<ng-content></ng-content>',\n    providers: [{ provide: IgxComboItemComponent, useExisting: IgxComboAddItemComponent}]\n})\nexport class IgxComboAddItemComponent extends IgxComboItemComponent {\n    get selected(): boolean {\n        return false;\n    }\n    set selected(value: boolean) {\n    }\n\n    clicked(event?) {\n        this.comboAPI.disableTransitions = false;\n        this.comboAPI.add_custom_item();\n    }\n}\n","import {\n    ChangeDetectorRef, Component, ElementRef, Inject, QueryList, OnDestroy, AfterViewInit, ContentChild, ContentChildren, Optional,\n    forwardRef\n} from '@angular/core';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { CancelableBrowserEventArgs } from '../core/utils';\nimport { IgxComboBase, IGX_COMBO_COMPONENT } from './combo.common';\nimport { Navigate } from '../drop-down/drop-down.common';\nimport { IDropDownBase, IGX_DROPDOWN_BASE } from '../drop-down/drop-down.common';\nimport { IgxDropDownComponent } from '../drop-down/drop-down.component';\nimport { DropDownActionKey } from '../drop-down/drop-down.common';\nimport { IgxComboAddItemComponent } from './combo-add-item.component';\nimport { IgxComboAPIService } from './combo.api';\nimport { IgxDropDownItemBase } from '../drop-down/drop-down-item.base';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxComboItemComponent } from './combo-item.component';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-drop-down',\n    templateUrl: '../drop-down/drop-down.component.html',\n    providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxComboDropDownComponent }]\n})\nexport class IgxComboDropDownComponent extends IgxDropDownComponent implements IDropDownBase, OnDestroy, AfterViewInit {\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase,\n        protected comboAPI: IgxComboAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(elementRef, cdr, selection, _displayDensityOptions);\n    }\n\n    protected get scrollContainer() {\n        return this.verticalScrollContainer.dc.location.nativeElement;\n    }\n\n    protected get isScrolledToLast(): boolean {\n        const scrollTop = this.verticalScrollContainer.getVerticalScroll().scrollTop;\n        const scrollHeight = this.verticalScrollContainer.getVerticalScroll().scrollHeight;\n        return Math.floor(scrollTop + this.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n    }\n\n    protected get lastVisibleIndex(): number {\n        return this.combo.totalItemCount ?\n            Math.floor(this.combo.itemsMaxHeight / this.combo.itemHeight) :\n            this.items.length - 1;\n    }\n\n    private _scrollPosition = 0;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxComboItemComponent, { descendants: true })\n    public children: QueryList<IgxDropDownItemBase> = null;\n\n    /**\n     * @hidden @internal\n     */\n    @ContentChild(forwardRef(() => IgxForOfDirective), { read: IgxForOfDirective })\n    public verticalScrollContainer: IgxForOfDirective<any>;\n\n    /**\n     * @hidden @internal\n     */\n    public onFocus() {\n        this._focusedItem = this._focusedItem || this.items[0];\n        if (this._focusedItem) {\n            this._focusedItem.focused = true;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onBlur(evt?) {\n        if (this._focusedItem) {\n            this._focusedItem.focused = false;\n            this._focusedItem = null;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpened() {\n        this.onOpened.emit();\n    }\n    /**\n     * @hidden\n     */\n    public navigatePrev() {\n        if (this._focusedItem.itemIndex === 0 && this.verticalScrollContainer.state.startIndex === 0) {\n            this.combo.focusSearchInput(false);\n        } else {\n            super.navigatePrev();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateFirst() {\n        const vContainer = this.verticalScrollContainer;\n        if (vContainer.state.startIndex === 0) {\n            super.navigateItem(0);\n            return;\n        }\n        vContainer.scrollTo(0);\n        this.subscribeNext(vContainer, () => {\n            this.combo.triggerCheck();\n            super.navigateItem(0);\n            this.combo.triggerCheck();\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateLast() {\n        const vContainer = this.verticalScrollContainer;\n        const scrollTarget = this.combo.totalItemCount ?\n            this.combo.totalItemCount - 1 :\n            Math.max(this.combo.data.length - 1, vContainer.igxForOf.length - 1);\n        if (vContainer.igxForOf.length <= vContainer.state.startIndex + vContainer.state.chunkSize) {\n            super.navigateItem(this.items.length - 1);\n            return;\n        }\n        vContainer.scrollTo(scrollTarget);\n        this.subscribeNext(vContainer, () => {\n            this.combo.triggerCheck();\n            super.navigateItem(this.items.length - 1);\n            this.combo.triggerCheck();\n        });\n    }\n\n    private navigateRemoteItem(direction: Navigate) {\n        const vContainer = this.verticalScrollContainer;\n        vContainer.addScrollTop(direction * this.combo.itemHeight);\n        this.subscribeNext(vContainer, () => {\n            if (direction === Navigate.Up) {\n                super.navigateItem(0);\n            } else {\n                super.navigateItem(this.focusedItem.itemIndex);\n            }\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public selectItem(item: IgxDropDownItemBase) {\n        if (item === null || item === undefined) {\n            return;\n        }\n        this.comboAPI.set_selected_item(item.itemID);\n        this._focusedItem = item;\n    }\n\n    private navigateDown(newIndex?: number) {\n        const vContainer = this.verticalScrollContainer;\n        const allData = vContainer.igxForOf;\n        const extraScroll = this.combo.isAddButtonVisible() ? 1 : 0;\n        const focusedItem = this.focusedItem;\n        const items = this.items;\n        const children = this.sortedChildren;\n        if (focusedItem) {\n            if (this.isAddItemFocused()) { return; }\n            if (focusedItem.value === allData[allData.length - 1]) {\n                this.focusAddItemButton();\n                return;\n            }\n        }\n        let targetDataIndex = newIndex === -1 ? this.itemIndexInData(this.focusedItem.itemIndex) + 1 : this.itemIndexInData(newIndex);\n        const lastLoadedIndex = vContainer.state.startIndex + vContainer.state.chunkSize - 1; // Last item is not visible, so require scroll\n        if (targetDataIndex < lastLoadedIndex) { // If no scroll is required\n            if (newIndex !== -1 || newIndex === children.length - 1 - extraScroll) { // Use normal nav for visible items\n                super.navigateItem(newIndex);\n            }\n        } else if (this.isScrolledToLast && targetDataIndex === lastLoadedIndex) { // If already at bottom and target is last item\n            super.navigateItem(items.length - 1 - extraScroll); // Focus the last item (excluding Add Button)\n        } else { // If scroll is required\n            // If item is header, find next non-header index\n            const addedIndex = allData[targetDataIndex].isHeader ? this.findNextFocusableItem(targetDataIndex, Navigate.Down, allData) : 0;\n            targetDataIndex += addedIndex; // Add steps to the target index\n            if (addedIndex === -1) { // If there are no more non-header items & add button is visible\n                this.focusAddItemButton();\n            } else if (targetDataIndex === allData.length - 1 && !this.isScrolledToLast) {\n                // If target is very last loaded item, but scroll is not at the bottom (item is in DOM but not visible)\n                vContainer.scrollTo(targetDataIndex); // This will not trigger `onChunkLoad`\n                super.navigateItem(items.length - 1 - extraScroll); // Target last item (excluding Add Button)\n            } else { // Perform virtual scroll\n                this.subscribeNext(vContainer, () => {\n                    // children = all items in the DD (including addItemButton)\n                    // length - 2 instead of -1, because we do not want to focus the last loaded item (in DOM, but not visible)\n                    // Focus last item (excluding Add Button)\n                    super.navigateItem(!addedIndex ? children[children.length - 1 - extraScroll].itemIndex : this.items.length - 2);\n                });\n                vContainer.scrollTo(targetDataIndex); // Perform virtual scroll\n            }\n        }\n    }\n\n    private navigateUp(newIndex?: number) {\n        const vContainer = this.verticalScrollContainer;\n        const allData = vContainer.igxForOf;\n        const focusedItem = this.focusedItem;\n        if (focusedItem.value === allData.find(e => !e.isHeader && !e.hidden)) { // If this is the very first non-header item\n            this.focusComboSearch(); // Focus combo search\n            return;\n        }\n        let targetDataIndex = newIndex === -1 ? this.itemIndexInData(focusedItem.itemIndex) - 1 : this.itemIndexInData(newIndex);\n        if (newIndex !== -1) { // If no scroll is required\n            if (this.isScrolledToLast && targetDataIndex === vContainer.state.startIndex) {\n                // If virt scrollbar is @ bottom, first item is in DOM but not visible\n                vContainer.scrollTo(targetDataIndex); // This will not trigger `onChunkLoad`\n                super.navigateItem(0); // Focus first visible item\n            } else {\n                super.navigateItem(newIndex); // Use normal navigation\n            }\n        } else { // Perform virtual scroll\n            // If item is header, find next non-header index\n            const addedIndex = allData[targetDataIndex].isHeader ? this.findNextFocusableItem(targetDataIndex, Navigate.Up, allData) : 0;\n            targetDataIndex -= addedIndex; // Add steps to targetDataIndex\n            if (addedIndex === -1) { // If there is no non-header\n                vContainer.scrollTo(0);\n                this.focusComboSearch(); // Focus combo search;\n            } else {\n                this.subscribeNext(vContainer, () => {\n                    super.navigateItem(0); // Focus the first loaded item\n                });\n                vContainer.scrollTo(targetDataIndex); // Perform virtual scroll\n            }\n        }\n    }\n\n    protected navigate(direction: Navigate, currentIndex?: number) {\n        let index = -1;\n        if (this._focusedItem) {\n            index = currentIndex ? currentIndex : this._focusedItem.itemIndex;\n        }\n        const newIndex = this.getNearestSiblingFocusableItemIndex(index, direction);\n        const vContainer = this.verticalScrollContainer;\n        const notVirtual = vContainer.dc.instance.notVirtual;\n        if (notVirtual || !direction) { // If list has no scroll OR no direction is passed\n            super.navigateItem(newIndex); // use default scroll\n        } else if (vContainer && vContainer.totalItemCount && vContainer.totalItemCount !== 0) { // Remote scroll\n            if (newIndex !== -1 &&\n                this.items[newIndex].isVisible(direction)) {\n                this.navigateItem(newIndex);\n            } else {\n                this.navigateRemoteItem(direction);\n            }\n        } else {\n            if (direction === Navigate.Up) { // Navigate UP\n                this.navigateUp(newIndex);\n            } else if (direction === Navigate.Down) { // Navigate DOWN\n                this.navigateDown(newIndex);\n            }\n        }\n    }\n\n    private itemIndexInData(index: number) {\n        return this.sortedChildren.findIndex(e => e.itemIndex === index) + this.verticalScrollContainer.state.startIndex;\n    }\n\n    private findNextFocusableItem(indexInData: number, direction: Navigate, data: any[]): number {\n        if (direction === Navigate.Up) {\n            return [...data].splice(0, indexInData + 1).reverse().findIndex(e => !e.isHeader);\n        }\n        return [...data].splice(indexInData, data.length - 1).findIndex(e => !e.isHeader);\n    }\n\n    private focusComboSearch() {\n        this.combo.focusSearchInput(false);\n        if (this.focusedItem) {\n            this.focusedItem.focused = false;\n        }\n        this.focusedItem = null;\n    }\n\n    private focusAddItemButton() {\n        if (this.combo.isAddButtonVisible()) {\n            super.navigateItem(this.items.length - 1);\n        }\n    }\n\n    private subscribeNext(virtualContainer: any, callback: (elem?) => void) {\n        virtualContainer.onChunkLoad.pipe(take(1), takeUntil(this.destroy$)).subscribe({\n            next: (e: any) => {\n                callback(e);\n            }\n        });\n    }\n\n    protected scrollToHiddenItem(newItem: any): void { }\n\n    protected scrollHandler = () => {\n        this.comboAPI.disableTransitions = true;\n    }\n\n    protected get sortedChildren(): IgxDropDownItemBase[] {\n        if (this.children !== undefined) {\n            return this.children.toArray()\n                .sort((a: IgxDropDownItemBase, b: IgxDropDownItemBase) => {\n                    return a.index - b.index;\n                });\n        }\n        return null;\n    }\n\n    /**\n     * Get all non-header items\n     *\n     * ```typescript\n     * let myDropDownItems = this.dropdown.items;\n     * ```\n     */\n    public get items(): IgxComboItemComponent[] {\n        const items: IgxComboItemComponent[] = [];\n        if (this.children !== undefined) {\n            const sortedChildren = this.sortedChildren as IgxComboItemComponent[];\n            for (const child of sortedChildren) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n\n        return items;\n    }\n\n    protected scrollToItem() {\n    }\n    /**\n     * @hidden @internal\n     */\n    onToggleClosing(e: CancelableBrowserEventArgs) {\n        super.onToggleClosing(e);\n        this._scrollPosition = this.verticalScrollContainer.getVerticalScroll().scrollTop;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    updateScrollPosition() {\n        this.verticalScrollContainer.getVerticalScroll().scrollTop = this._scrollPosition;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onItemActionKey(key: DropDownActionKey) {\n        switch (key) {\n            case DropDownActionKey.ENTER:\n                this.handleEnter();\n                break;\n            case DropDownActionKey.SPACE:\n                this.handleSpace();\n                break;\n            case DropDownActionKey.ESCAPE:\n                this.close();\n        }\n    }\n\n    private handleEnter() {\n        if (this.isAddItemFocused()) {\n            this.combo.addItemToCollection();\n        } else {\n            this.close();\n        }\n    }\n\n    private handleSpace() {\n        if (this.isAddItemFocused()) {\n            return;\n        } else {\n            this.selectItem(this.focusedItem);\n        }\n    }\n\n    private isAddItemFocused(): boolean {\n        return this.focusedItem instanceof IgxComboAddItemComponent;\n    }\n\n    public ngAfterViewInit() {\n        this.verticalScrollContainer.getVerticalScroll().addEventListener('scroll', this.scrollHandler);\n    }\n\n    /**\n     *@hidden @internal\n     */\n    public ngOnDestroy(): void {\n        this.verticalScrollContainer.getVerticalScroll().removeEventListener('scroll', this.scrollHandler);\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import { Inject, Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../core/utils';\nimport { DataUtil } from '../data-operations/data-util';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IFilteringState } from '../data-operations/filtering-state.interface';\nimport { FilteringStrategy } from '../data-operations/filtering-strategy';\nimport { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IGX_COMBO_COMPONENT, IgxComboBase } from './combo.common';\n\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboFiltering'\n})\nexport class IgxComboFilteringPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase) { }\n\n    public transform(collection: any[], expressions: IFilteringExpression[],\n                     logic: FilteringLogic) {\n        const filteringExpressionsTree =  new FilteringExpressionsTree(logic);\n        filteringExpressionsTree.filteringOperands = expressions;\n        const state: IFilteringState = { expressionsTree: filteringExpressionsTree, strategy: new SimpleFilteringStrategy()};\n        state.expressionsTree.filteringOperands = this.combo.filteringExpressions;\n\n        if (!state.expressionsTree.filteringOperands.length) {\n            return collection;\n        }\n\n        const result = DataUtil.filter(cloneArray(collection), state);\n        return result;\n    }\n}\n\n/** @hidden */\nexport class SimpleFilteringStrategy extends FilteringStrategy {\n    public findMatchByExpression(rec: object, expr: IFilteringExpression): boolean {\n        const cond = expr.condition;\n        const val = expr.fieldName === undefined ? rec : rec[expr.fieldName];\n        return cond.logic(val, expr.searchVal, expr.ignoreCase);\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboSorting',\n    pure: true\n})\nexport class IgxComboSortingPipe implements PipeTransform {\n    constructor() { }\n\n    public transform(collection: any[], expressions: ISortingExpression []) {\n        if (!expressions.length) {\n            return collection;\n        }\n        const result = DataUtil.sort(cloneArray(collection), expressions);\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboGrouping'\n})\nexport class IgxComboGroupingPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase) { }\n\n    public transform(collection: any[], groupKey: any) {\n        this.combo.filteredData = collection;\n        if ((!groupKey && groupKey !== 0) || !collection.length) {\n            return collection;\n        }\n        const data = cloneArray(collection);\n        let inserts = 0;\n        let currentHeader = null;\n        for (let i = 0; i < collection.length; i++) {\n            let insertFlag = 0;\n            if (currentHeader !== collection[i][groupKey]) {\n                currentHeader = collection[i][groupKey];\n                insertFlag = 1;\n            }\n            if (insertFlag) {\n                data.splice(i + inserts, 0, {\n                    [this.combo.valueKey]: currentHeader,\n                    [this.combo.groupKey]: currentHeader,\n                    isHeader: true\n                });\n                inserts++;\n            }\n        }\n        return data;\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'filterCondition',\n    pure: true\n})\n\nexport class IgxComboFilterConditionPipe implements PipeTransform {\n\n    public transform(value: string): string {\n        return value.split(/(?=[A-Z])/).join(' ');\n    }\n}\n","import { ConnectedPositioningStrategy } from './../services/overlay/position/connected-positioning-strategy';\nimport { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectorRef, Component, ContentChild, ElementRef, EventEmitter, HostBinding, HostListener,\n    Input, NgModule, OnInit, OnDestroy, Output, TemplateRef, ViewChild, Optional, Inject, Injector, forwardRef\n} from '@angular/core';\nimport {\n    IgxComboItemDirective,\n    IgxComboEmptyDirective,\n    IgxComboHeaderItemDirective,\n    IgxComboHeaderDirective,\n    IgxComboFooterDirective,\n    IgxComboAddItemDirective,\n    IgxComboToggleIconDirective,\n    IgxComboClearIconDirective\n} from './combo.directives';\nimport { FormsModule, ReactiveFormsModule, ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { cloneArray, CancelableEventArgs, CancelableBrowserEventArgs } from '../core/utils';\nimport { IgxStringFilteringOperand, IgxBooleanFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { SortingDirection, ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IgxForOfModule, IForOfState, IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxDropDownModule } from '../drop-down/index';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxComboItemComponent } from './combo-item.component';\nimport { IgxComboDropDownComponent } from './combo-dropdown.component';\nimport { IgxComboFilterConditionPipe, IgxComboFilteringPipe, IgxComboGroupingPipe, IgxComboSortingPipe } from './combo.pipes';\nimport { OverlaySettings, AbsoluteScrollStrategy } from '../services';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { DefaultSortingStrategy, ISortingStrategy } from '../data-operations/sorting-strategy';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\nimport { IGX_COMBO_COMPONENT, IgxComboBase } from './combo.common';\nimport { IgxComboAddItemComponent } from './combo-add-item.component';\nimport { IgxComboAPIService } from './combo.api';\nimport { EditorProvider } from '../core/edit-provider';\nimport { take } from 'rxjs/operators';\n\n/** Custom strategy to provide the combo with callback on initial positioning */\nclass ComboConnectedPositionStrategy extends ConnectedPositioningStrategy {\n    private _callback: () => void;\n    constructor(callback: () => void) {\n        super();\n        this._callback = callback;\n    }\n\n    position(contentElement, size, document?, initialCall?) {\n        if (initialCall) {\n            this._callback();\n        }\n        super.position(contentElement, size);\n    }\n}\n\n/**\n * @hidden\n */\nenum DataTypes {\n    EMPTY = 'empty',\n    PRIMITIVE = 'primitive',\n    COMPLEX = 'complex',\n    PRIMARYKEY = 'valueKey'\n}\n\n/**\n * @hidden\n */\nconst ItemHeights = {\n    'comfortable': 48,\n    'cosy': 32,\n    'compact': 28,\n};\n\nexport enum IgxComboState {\n    /**\n     * Combo with initial state.\n     */\n    INITIAL,\n    /**\n     * Combo with valid state.\n     */\n    VALID,\n    /**\n     * Combo with invalid state.\n     */\n    INVALID\n}\n\nexport interface IComboSelectionChangeEventArgs extends CancelableEventArgs {\n    oldSelection: any[];\n    newSelection: any[];\n    event?: Event;\n}\n\nexport interface IComboItemAdditionEvent {\n    oldCollection: any[];\n    addedItem: any;\n    newCollection: any[];\n}\n\nlet NEXT_ID = 0;\nconst noop = () => { };\n\n@Component({\n    selector: 'igx-combo',\n    templateUrl: 'combo.component.html',\n    providers: [\n        IgxComboAPIService,\n        { provide: IGX_COMBO_COMPONENT, useExisting: IgxComboComponent },\n        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => IgxComboComponent), multi: true }\n    ]\n})\nexport class IgxComboComponent extends DisplayDensityBase implements IgxComboBase, AfterViewInit, ControlValueAccessor, OnInit,\n    OnDestroy, EditorProvider {\n    /**\n     * @hidden @internal\n     */\n    public customValueFlag = true;\n    /**\n     * @hidden @internal\n     */\n    public defaultFallbackGroup = 'Other';\n    protected stringFilters = IgxStringFilteringOperand;\n    protected booleanFilters = IgxBooleanFilteringOperand;\n    protected _filteringLogic = FilteringLogic.Or;\n    protected _filteringExpressions: IFilteringExpression[] = [];\n    protected _sortingExpressions: ISortingExpression[] = [];\n    protected _groupKey = '';\n    protected _displayKey: string;\n    protected _prevInputValue = '';\n    private _dataType = '';\n    private ngControl: NgControl = null;\n    private destroy$ = new Subject<any>();\n    private _data = [];\n    private _filteredData = [];\n    private _itemHeight = null;\n    private _positionCallback: () => void;\n    private _onChangeCallback: (_: any) => void = noop;\n    private overlaySettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: true,\n        excludePositionTarget: true\n    };\n    private _value = '';\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        protected comboAPI: IgxComboAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        @Optional() private injector: Injector) {\n        super(_displayDensityOptions);\n        this.comboAPI.register(this);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxComboDropDownComponent, { read: IgxComboDropDownComponent })\n    public dropdown: IgxComboDropDownComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('searchInput')\n    public searchInput: ElementRef<HTMLInputElement> = null;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('comboInput')\n    public comboInput: ElementRef<HTMLInputElement> = null;\n\n    /**\n     * @hidden @internal\n     */\n    get displaySearchInput(): boolean {\n        return this.filterable || this.allowCustomValues;\n    }\n\n    /**\n     * The custom template, if any, that should be used when rendering ITEMS in the combo list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.itemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboItem>\n     *          <div class=\"custom-item\" let-item let-key=\"valueKey\">\n     *              <div class=\"custom-item__name\">{{ item[key] }}</div>\n     *              <div class=\"custom-item__cost\">{{ item.cost }}</div>\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboItemDirective, { read: TemplateRef })\n    public itemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the HEADER for the combo items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.headerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboHeader>\n     *          <div class=\"combo__header\">\n     *              This is a custom header\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboHeaderDirective, { read: TemplateRef })\n    public headerTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the FOOTER for the combo items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.footerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboFooter>\n     *          <div class=\"combo__footer\">\n     *              This is a custom footer\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboFooterDirective, { read: TemplateRef })\n    public footerTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering HEADER ITEMS for groups in the combo list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.headerItemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboHeaderItem let-item let-key=\"groupKey\">\n     *          <div class=\"custom-item--group\">Group header for {{ item[key] }}</div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboHeaderItemDirective, { read: TemplateRef })\n    public headerItemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.addItemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboAddItem>\n     *          <button class=\"combo__add-button\">\n     *              Click to add item\n     *          </button>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboAddItemDirective, { read: TemplateRef })\n    public addItemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.emptyTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboEmpty>\n     *          <div class=\"combo--emtpy\">\n     *              There are no items to display\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboEmptyDirective, { read: TemplateRef })\n    public emptyTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the combo TOGGLE(open/close) button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.toggleIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboToggleIcon let-collapsed>\n     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboToggleIconDirective, { read: TemplateRef })\n    public toggleIconTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the combo CLEAR button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.clearIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboClearIcon>\n     *          <igx-icon>clear</igx-icon>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboClearIconDirective, { read: TemplateRef })\n    public clearIconTemplate: TemplateRef<any> = null;\n\n    @ViewChild('primitive', { read: TemplateRef })\n    protected primitiveTemplate: TemplateRef<any>;\n\n    @ViewChild('complex', { read: TemplateRef })\n    protected complexTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxForOfDirective)\n    public virtualScrollContainer: IgxForOfDirective<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`Setting combo item template with '#emptyTemplate' is deprecated.\\n` +\n        `Use \\`igxComboEmpty\\` directive instead.`)\n    @ContentChild('emptyTemplate', { read: TemplateRef })\n    private set oldEmptyTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.emptyTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`Setting combo item template with '#headerTemplate' is deprecated.\\n` +\n        `Use \\`igxComboHeader\\` directive instead.`)\n    @ContentChild('headerTemplate', { read: TemplateRef })\n    private set oldHeaderTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.headerTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`Setting combo item template with '#footerTemplate' is deprecated.\\n` +\n        `Use \\`igxComboFooter\\` directive instead.`)\n    @ContentChild('footerTemplate', { read: TemplateRef })\n    private set oldFooterTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.footerTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`Setting combo item template with '#itemTemplate' is deprecated.\\n` +\n        `Use \\`igxComboItem\\` directive instead.`)\n    @ContentChild('itemTemplate', { read: TemplateRef })\n    private set oldItemTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.itemTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`Setting combo item template with '#addItemTemplate' is deprecated.\\n` +\n        `Use \\`igxComboAddItem\\` directive instead.`)\n    @ContentChild('addItemTemplate', { read: TemplateRef })\n    private set oldAddItemTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.addItemTemplate = template;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`Setting combo item template with '#headerItemTemplate' is deprecated.\\n` +\n        `Use \\`igxComboHeaderItem\\` directive instead.`)\n    @ContentChild('headerItemTemplate', { read: TemplateRef })\n    private set oldHeaderItemTemplate(template: TemplateRef<any>) {\n        if (template) {\n            this.headerItemTemplate = template;\n        }\n    }\n\n    @ViewChild('dropdownItemContainer')\n    protected dropdownContainer: ElementRef = null;\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-combo (onSelectionChange)='handleSelection()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSelectionChange = new EventEmitter<IComboSelectionChangeEventArgs>();\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-combo onOpening='handleOpening($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-combo (onOpened)='handleOpened()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<void>();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosing)='handleClosing($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosed)='handleClosed()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<void>();\n\n    /**\n     * Emitted when an item is being added to the data collection\n     *\n     * ```html\n     * <igx-combo (onAddition)='handleAdditionEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onAddition = new EventEmitter<IComboItemAdditionEvent>();\n\n    /**\n     * Emitted when the value of the search input changes (e.g. typing, pasting, clear, etc.)\n     *\n     * ```html\n     * <igx-combo (onSearchInput)='handleSearchInputEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSearchInput = new EventEmitter();\n\n    /**\n     * Emitted when new chunk of data is loaded from the virtualization\n     *\n     * ```html\n     * <igx-combo (onDataPreLoad)='handleDataPreloadEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<any>();\n\n    /**\n     * Gets/gets combo id.\n     *\n     * ```typescript\n     * // get\n     * let id = this.combo.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [id]='combo1'></igx-combo>\n     * ```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-combo-${NEXT_ID++}`;\n\n    /**\n     * Sets the style width of the element\n     *\n     * ```typescript\n     * // get\n     * let myComboWidth = this.combo.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [width]='250px'></igx-combo>\n     * ```\n     */\n    @HostBinding('style.width')\n    @Input()\n    public width: string;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-input-group--valid')\n    public get validClass(): boolean {\n        return this.valid === IgxComboState.VALID;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-input-group--invalid')\n    public get invalidClass(): boolean {\n        return this.valid === IgxComboState.INVALID;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-combo')\n    public cssClass = 'igx-combo'; // Independent of display density, at the time being\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding(`attr.role`)\n    public role = 'combobox';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-expanded')\n    public get ariaExpanded(): boolean {\n        return !this.dropdown.collapsed;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-haspopup')\n    public get hasPopUp() {\n        return 'listbox';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-owns')\n    public get ariaOwns() {\n        return this.dropdown.id;\n    }\n\n    /**\n     * Controls whether custom values can be added to the collection\n     *\n     * ```typescript\n     * // get\n     * let comboAllowsCustomValues = this.combo.allowCustomValues;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [allowCustomValues]='true'></igx-combo>\n     * ```\n     */\n    @Input()\n    public allowCustomValues = false;\n\n    /**\n     * Configures the drop down list height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsMaxHeight = this.combo.itemsMaxHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsMaxHeight]='320'></igx-combo>\n     * ```\n    */\n    @Input()\n    public itemsMaxHeight = 480;\n\n    /**\n     * Configures the drop down list width\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsWidth = this.combo.itemsWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsWidth] = '\"180px\"'></igx-combo>\n     * ```\n     */\n    @Input()\n    public itemsWidth: string;\n\n    /**\n     * Configures the drop down list item height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemHeight = this.combo.itemHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemHeight]='32'></igx-combo>\n     * ```\n     */\n    @Input()\n    public get itemHeight(): number {\n        if (this._itemHeight === null || this._itemHeight === undefined) {\n            return ItemHeights[this.displayDensity];\n        }\n        return this._itemHeight;\n    }\n\n    public set itemHeight(val: number) {\n        this._itemHeight = val;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public filteringLogic = FilteringLogic.Or;\n\n    /**\n     * Defines the placeholder value for the combo value field\n     *\n     * ```typescript\n     * // get\n     * let myComboPlaceholder = this.combo.placeholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [placeholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public placeholder = '';\n\n    /**\n     * @hidden @internal\n     */\n    public get inputEmpty(): boolean {\n        return !this.value && !this.placeholder;\n    }\n\n    /**\n     * Defines the placeholder value for the combo dropdown search field\n     *\n     * ```typescript\n     * // get\n     * let myComboSearchPlaceholder = this.combo.searchPlaceholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [searchPlaceholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public searchPlaceholder = 'Enter a Search Term';\n\n    /**\n     * Combo data source.\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [data]='items'></igx-combo>\n     * ```\n     */\n    @Input()\n    get data(): any[] {\n        return this._data;\n    }\n    set data(val: any[]) {\n        this._data = (val) ? val : [];\n    }\n\n    /**\n     * Combo value data source propery.\n     *\n     * ```typescript\n     * // get\n     * let myComboValueKey = this.combo.valueKey;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [valueKey]='myKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    public valueKey: string;\n\n    @Input()\n    set displayKey(val: string) {\n        this._displayKey = val;\n    }\n\n    /**\n     * Combo text data source propery.\n     *\n     * ```typescript\n     * // get\n     * let myComboDisplayKey = this.combo.displayKey;\n     *\n     * // set\n     * this.combo.displayKey = 'val';\n     *\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [displayKey]='mydisplayKey'></igx-combo>\n     * ```\n     */\n    get displayKey() {\n        return this._displayKey ? this._displayKey : this.valueKey;\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [groupKey]='newGroupKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    public set groupKey(val: string) {\n        this.clearSorting(this._groupKey);\n        this._groupKey = val;\n        this.sort(this._groupKey);\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```typescript\n     * // get\n     * let currentGroupKey = this.combo.groupKey;\n     * ```\n     */\n    public get groupKey(): string {\n        return this._groupKey;\n    }\n\n    /**\n     * An @Input property that enabled/disables filtering in the list. The default is `true`.\n     * ```html\n     *<igx-combo [filterable]=\"'false'\">\n     * ```\n     */\n    @Input()\n    public filterable = true;\n\n    /**\n     * An @Input property that set aria-labelledby attribute\n     * ```html\n     *<igx-combo [ariaLabelledBy]=\"'label1'\">\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-labelledby')\n    public ariaLabelledBy: string;\n\n    /**\n     * An @Input property that enabled/disables combo. The default is `false`.\n     * ```html\n     *<igx-combo [disabled]=\"'true'\">\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An @Input property that sets how the combo will be styled.\n     * The allowed values are `line`, `box`, `border` and `search`. The default is `box`.\n     * ```html\n     *<igx-combo [type]=\"'line'\">\n     * ```\n     */\n    @Input()\n    public type = 'box';\n\n    /**\n     * Gets/Sets if control is valid, when used in a form\n     *\n     * ```typescript\n     * // get\n     * let valid = this.combo.valid;\n     * ```\n     * ```typescript\n     * // set\n     * this.combo.valid = IgxComboState.INVALID;\n     * ```\n    */\n    public valid: IgxComboState = IgxComboState.INITIAL;\n\n    /**\n     * @hidden @internal\n     */\n    public searchValue = '';\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    onArrowDown(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.open();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    onInputClick(event: Event) {\n        event.stopPropagation();\n        event.preventDefault();\n        this.toggle();\n    }\n\n    /**\n     * Defines the current state of the virtualized data. It contains `startIndex` and `chunkSize`\n     *\n     * ```typescript\n     * // get\n     * let state = this.combo.virtualizationState;\n     * ```\n    */\n    get virtualizationState(): IForOfState {\n        return this.dropdown.verticalScrollContainer.state;\n    }\n    /**\n     * Sets the current state of the virtualized data.\n     *\n     * ```typescript\n     * // set\n     * this.combo.virtualizationState(state);\n     * ```\n     */\n    set virtualizationState(state: IForOfState) {\n        this.dropdown.verticalScrollContainer.state = state;\n    }\n\n    /**\n     * Gets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // get\n     * let count = this.combo.totalItemCount;\n     * ```\n    */\n    get totalItemCount(): number {\n        return this.dropdown.verticalScrollContainer.totalItemCount;\n    }\n    /**\n     * Sets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // set\n     * this.combo.totalItemCount(remoteService.count);\n     * ```\n     */\n    set totalItemCount(count: number) {\n        this.dropdown.verticalScrollContainer.totalItemCount = count;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get filteringExpressions(): IFilteringExpression[] {\n        return this.filterable ? this._filteringExpressions : [];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set filteringExpressions(value: IFilteringExpression[]) {\n        this._filteringExpressions = value;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get sortingExpressions(): ISortingExpression[] {\n        return this._sortingExpressions;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set sortingExpressions(value: ISortingExpression[]) {\n        this._sortingExpressions = value;\n        this.cdr.markForCheck();\n    }\n\n    protected clearSorting(field?: string | number) {\n        if (field === undefined || field === null) {\n            this.sortingExpressions = [];\n            return;\n        }\n        const currentState = cloneArray(this.sortingExpressions);\n        const index = currentState.findIndex((expr) => expr.fieldName === field);\n        if (index > -1) {\n            currentState.splice(index, 1);\n            this.sortingExpressions = currentState;\n        }\n    }\n\n    /**\n     * The text displayed in the combo input\n     *\n     * ```typescript\n     * // get\n     * let comboValue = this.combo.value;\n     * ```\n     */\n    get value(): string {\n        return this._value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get filteredData(): any[] {\n        return this.filterable ? this._filteredData : this.data;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set filteredData(val: any[]) {\n        this._filteredData = this.groupKey ? (val || []).filter((e) => e.isHeader !== true) : val;\n        this.checkMatch();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleKeyUp(event: KeyboardEvent): void {\n        if (event.key === 'ArrowDown' || event.key === 'Down') {\n            this.dropdown.focusedItem = this.dropdown.items[0];\n            this.dropdownContainer.nativeElement.focus();\n        } else if (event.key === 'Escape' || event.key === 'Esc') {\n            this.toggle();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleKeyDown(event: KeyboardEvent) {\n        if (event.key === 'ArrowUp' || event.key === 'Up') {\n            event.preventDefault();\n            event.stopPropagation();\n            this.close();\n        }\n    }\n\n    private checkMatch(): void {\n        const displayKey = this.displayKey;\n        const matchFn = (e) => {\n            const value = displayKey ? e[displayKey] : e;\n            return value.toString().toLowerCase() === this.searchValue.trim().toLowerCase();\n        };\n        const itemMatch = this.filteredData.some(matchFn);\n        this.customValueFlag = this.allowCustomValues && !itemMatch;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleInputChange(event?: string) {\n        let cdrFlag = false;\n        const vContainer = this.dropdown.verticalScrollContainer;\n        if (event !== undefined && this._prevInputValue === event) {\n            // Nothing has changed\n            return;\n        } else {\n            this._prevInputValue = event !== undefined ? event : '';\n        }\n        if (event !== undefined) {\n            // Do not scroll if not scrollable\n            if (vContainer.isScrollable()) {\n                vContainer.scrollTo(0);\n            } else {\n                cdrFlag = true;\n            }\n            this.onSearchInput.emit(event);\n        }\n        if (this.filterable) {\n            this.filter();\n            // If there was no scroll before filtering, check if there is after and detect changes\n            if (cdrFlag) {\n                vContainer.onChunkLoad.pipe(take(1)).subscribe(() => {\n                    if (vContainer.isScrollable()) {\n                        this.cdr.detectChanges();\n                    }\n                });\n            }\n        } else {\n            this.checkMatch();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public sort(fieldName: string, dir: SortingDirection = SortingDirection.Asc, ignoreCase: boolean = true,\n        strategy: ISortingStrategy = DefaultSortingStrategy.instance()): void {\n        if (!fieldName) {\n            return;\n        }\n        const sortingState = cloneArray(this.sortingExpressions, true);\n\n        this.prepare_sorting_expression(sortingState, fieldName, dir, ignoreCase, strategy);\n        this.sortingExpressions = sortingState;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public getValueByValueKey(val: any): any {\n        if (!val && val !== 0) {\n            return undefined;\n        }\n        return this.valueKey ?\n            this.data.filter((e) => e[this.valueKey] === val)[0] :\n            this.data.filter((e) => e === val);\n    }\n\n    protected prepare_sorting_expression(state: ISortingExpression[], fieldName: string, dir: SortingDirection, ignoreCase: boolean,\n        strategy: ISortingStrategy) {\n\n        if (dir === SortingDirection.None) {\n            state.splice(state.findIndex((expr) => expr.fieldName === fieldName), 1);\n            return;\n        }\n\n        const expression = state.find((expr) => expr.fieldName === fieldName);\n\n        if (!expression) {\n            state.push({ fieldName, dir, ignoreCase, strategy });\n        } else {\n            Object.assign(expression, { fieldName, dir, ignoreCase });\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get dataType(): string {\n        if (this.valueKey) {\n            return DataTypes.COMPLEX;\n        }\n        return DataTypes.PRIMITIVE;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isRemote() {\n        return this.totalItemCount > 0 &&\n            this.valueKey &&\n            this.dataType === DataTypes.COMPLEX;\n    }\n\n    /**\n     * If the data source is remote, returns JSON.stringify(itemID)\n     * @hidden\n     * @internal\n     */\n    private _stringifyItemID(itemID: any) {\n        return this.isRemote && typeof itemID === 'object' ? JSON.stringify(itemID) : itemID;\n    }\n\n    private _parseItemID(itemID) {\n        return this.isRemote && typeof itemID === 'string' ? JSON.parse(itemID) : itemID;\n    }\n\n    /**\n     * Returns if the specified itemID is selected\n     * @hidden\n     * @internal\n     */\n    public isItemSelected(item: any): boolean {\n        return this.selection.is_item_selected(this.id, this._stringifyItemID(item));\n    }\n\n    /**\n     * Triggers change detection on the combo view\n     */\n    public triggerCheck() {\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isAddButtonVisible(): boolean {\n        // This should always return a boolean value. If this.searchValue was '', it returns '' instead of false;\n        return this.searchValue !== '' && this.customValueFlag;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleSelectAll(evt) {\n        if (evt.checked) {\n            this.selectAllItems();\n        } else {\n            this.deselectAllItems();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public addItemToCollection() {\n        if (!this.searchValue) {\n            return;\n        }\n        const newValue = this.searchValue.trim();\n        const addedItem = this.displayKey ? {\n            [this.valueKey]: newValue,\n            [this.displayKey]: newValue\n        } : newValue;\n        if (this.groupKey) {\n            Object.assign(addedItem, { [this.groupKey]: this.defaultFallbackGroup });\n        }\n        const oldCollection = this.data;\n        const newCollection = [...this.data];\n        newCollection.push(addedItem);\n        const args: IComboItemAdditionEvent = {\n            oldCollection, addedItem, newCollection\n        };\n        this.onAddition.emit(args);\n        this.data.push(addedItem);\n        // If you mutate the array, no pipe is invoked and the display isn't updated;\n        // if you replace the array, the pipe executes and the display is updated.\n        this.data = cloneArray(this.data);\n        this.selectItems([addedItem], false);\n        this.customValueFlag = false;\n        this.searchInput.nativeElement.focus();\n        this.dropdown.focusedItem = null;\n        this.handleInputChange();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public focusSearchInput(opening?: boolean): void {\n        if (this.displaySearchInput && this.searchInput) {\n            this.searchInput.nativeElement.focus();\n        } else {\n            if (opening) {\n                this.dropdownContainer.nativeElement.focus();\n            } else {\n                this.comboInput.nativeElement.focus();\n                this.toggle();\n            }\n        }\n    }\n\n\n    protected prepare_filtering_expression(searchVal, condition, ignoreCase, fieldName?) {\n        const newArray = [...this.filteringExpressions];\n        const expression = newArray.find((expr) => expr.fieldName === fieldName);\n        const newExpression = { fieldName, searchVal, condition, ignoreCase };\n        if (!expression) {\n            newArray.push(newExpression);\n        } else {\n            Object.assign(expression, newExpression);\n        }\n        if (this.groupKey) {\n            const expression2 = newArray.find((expr) => expr.fieldName === 'isHeader');\n            const headerExpression = {\n                fieldName: 'isHeader', searchVale: '',\n                condition: IgxBooleanFilteringOperand.instance().condition('true'), ignoreCase: true\n            };\n            if (!expression2) {\n                newArray.push(headerExpression);\n            } else {\n                Object.assign(expression2, headerExpression);\n            }\n        }\n        this.filteringExpressions = newArray;\n    }\n\n    protected onStatusChanged = () => {\n        if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&\n            (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {\n            this.valid = this.ngControl.valid ? IgxComboState.VALID : IgxComboState.INVALID;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onBlur() {\n        if (this.collapsed) {\n            if (this.ngControl && !this.ngControl.valid) {\n                this.valid = IgxComboState.INVALID;\n            } else {\n                this.valid = IgxComboState.INITIAL;\n            }\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public filter() {\n        this.prepare_filtering_expression(this.searchValue.trim(), IgxStringFilteringOperand.instance().condition('contains'),\n            true, this.dataType === DataTypes.PRIMITIVE ? undefined : this.displayKey);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnInit() {\n        this.ngControl = this.injector.get(NgControl, null);\n        this._positionCallback = () => this.dropdown.updateScrollPosition();\n        this.overlaySettings.positionStrategy = new ComboConnectedPositionStrategy(this._positionCallback);\n        this.overlaySettings.positionStrategy.settings.target = this.elementRef.nativeElement;\n        this.selection.set(this.id, new Set());\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngAfterViewInit() {\n        this.filteredData = [...this.data];\n\n        if (this.ngControl) {\n            this.ngControl.statusChanges.pipe(takeUntil(this.destroy$)).subscribe(this.onStatusChanged);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.destroy$.complete();\n        this.comboAPI.clear();\n        this.selection.clear(this.id);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public dataLoading(event) {\n        this.onDataPreLoad.emit(event);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public writeValue(value: any): void {\n        // selectItems can handle Array<any>, no valueKey is needed;\n        this.selectItems(value, true);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public registerOnTouched(fn: any): void { }\n\n    /**\n     * @hidden @internal\n     */\n    public setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /**\n     * @hidden\n     */\n    public getEditElement(): HTMLElement {\n        return this.comboInput.nativeElement;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get template(): TemplateRef<any> {\n        this._dataType = this.dataType;\n        if (this.itemTemplate) {\n            return this.itemTemplate;\n        }\n        if (this._dataType === DataTypes.COMPLEX) {\n            return this.complexTemplate;\n        }\n        return this.primitiveTemplate;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClearItems(event: Event): void {\n        this.deselectAllItems(true, event);\n        event.stopPropagation();\n    }\n\n    /**\n     * A method that opens/closes the combo.\n     *\n     *```html\n     *<button (click)=\"combo.toggle()\">Toggle Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public toggle(): void {\n        this.dropdown.toggle(this.overlaySettings);\n    }\n\n    /**\n     * A method that opens the combo.\n     *\n     *```html\n     *<button (click)=\"combo.open()\">Open Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public open(): void {\n        this.dropdown.open(this.overlaySettings);\n    }\n\n    /**\n     * A method that closes the combo.\n     *\n     *```html\n     *<button (click)=\"combo.close()\">Close Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public close(): void {\n        this.dropdown.close();\n    }\n\n    /**\n     * Gets drop down state.\n     *\n     * ```typescript\n     * let state = this.combo.collapsed;\n     * ```\n    */\n    public get collapsed(): boolean {\n        return this.dropdown.collapsed;\n    }\n\n    /**\n     * Get current selection state\n     * @returns Array of selected items\n     * ```typescript\n     * let selectedItems = this.combo.selectedItems();\n     * ```\n     */\n    public selectedItems() {\n        const items = Array.from(this.selection.get(this.id));\n        return this.isRemote ? items.map(item => this._parseItemID(item)) : items;\n    }\n\n    /**\n     * Select defined items\n     * @param newItems new items to be selected\n     * @param clearCurrentSelection if true clear previous selected items\n     * ```typescript\n     * this.combo.selectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public selectItems(newItems: Array<any>, clearCurrentSelection?: boolean, event?: Event) {\n        if (newItems) {\n            const newSelection = this.selection.add_items(this.id, newItems, clearCurrentSelection);\n            this.setSelection(newSelection, event);\n        }\n    }\n\n    /**\n     * Deselect defined items\n     * @param items items to deselected\n     * ```typescript\n     * this.combo.deselectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public deselectItems(items: Array<any>, event?: Event) {\n        if (items) {\n            const newSelection = this.selection.delete_items(this.id, items);\n            this.setSelection(newSelection, event);\n        }\n    }\n\n    /**\n     * Select all (filtered) items\n     * @param ignoreFilter if set to true, selects all items, otherwise selects only the filtered ones.\n     * ```typescript\n     * this.combo.selectAllItems();\n     * ```\n     */\n    public selectAllItems(ignoreFilter?: boolean, event?: Event) {\n        const allVisible = this.selection.get_all_ids(ignoreFilter ? this.data : this.filteredData);\n        const newSelection = this.selection.add_items(this.id, allVisible);\n        this.setSelection(newSelection, event);\n    }\n\n    /**\n     * Deselect all (filtered) items\n     * @param ignoreFilter if set to true, deselects all items, otherwise deselects only the filtered ones.\n     * ```typescript\n     * this.combo.deselectAllItems();\n     * ```\n     */\n    public deselectAllItems(ignoreFilter?: boolean, event?: Event): void {\n        let newSelection = this.selection.get_empty();\n        if (this.filteredData.length !== this.data.length && !ignoreFilter) {\n            newSelection = this.selection.delete_items(this.id, this.selection.get_all_ids(this.filteredData));\n        }\n        this.setSelection(newSelection, event);\n    }\n\n    /**\n     * Selects/Deselects an item using it's valueKey value\n     * @param itemID the valueKey of the specified item\n     * @param select If the item should be selected (true) or deselcted (false)\n     *\n     * ```typescript\n     * items: { field: string, region: string}[] = data;\n     * this.combo.setSelectedItem('Connecticut', true);\n     * // combo.valueKey === 'field'\n     * // items[n] === { field: 'Connecticut', state: 'New England'}\n     * ```\n     */\n    public setSelectedItem(itemID: any, select = true, event?: Event): void {\n        if (itemID === null || itemID === undefined) {\n            return;\n        }\n        const itemValue = this.getValueByValueKey(itemID);\n        if (itemValue !== null && itemValue !== undefined) {\n            if (select) {\n                this.selectItems([itemValue], false, event);\n            } else {\n                this.deselectItems([itemValue], event);\n            }\n        }\n    }\n\n    protected setSelection(newSelection: Set<any>, event?: Event): void {\n        const oldSelectionEmit = Array.from(this.selection.get(this.id) || []);\n        const newSelectionEmit = Array.from(newSelection || []);\n        const args: IComboSelectionChangeEventArgs = {\n            newSelection: newSelectionEmit,\n            oldSelection: oldSelectionEmit,\n            event,\n            cancel: false\n        };\n        this.onSelectionChange.emit(args);\n        if (!args.cancel) {\n            this.selection.select_items(this.id, args.newSelection, true);\n            this._value = this.dataType !== DataTypes.PRIMITIVE ?\n                args.newSelection.map((id) => this._parseItemID(id)[this.displayKey]).join(', ') :\n                args.newSelection.join(', ');\n            this._onChangeCallback(args.newSelection);\n        }\n    }\n    /**\n     * Event handlers\n     * @hidden\n     * @internal\n     */\n    public handleOpening(event: CancelableEventArgs) {\n        this.onOpening.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.handleInputChange();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleOpened() {\n        this.triggerCheck();\n        this.focusSearchInput(true);\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClosing(event) {\n        this.onClosing.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.searchValue = '';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClosed() {\n        this.comboInput.nativeElement.focus();\n        this.onClosed.emit();\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxComboComponent, IgxComboItemComponent, IgxComboFilterConditionPipe, IgxComboGroupingPipe,\n        IgxComboFilteringPipe, IgxComboSortingPipe, IgxComboDropDownComponent, IgxComboAddItemComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective,\n        IgxComboToggleIconDirective,\n        IgxComboClearIconDirective],\n    exports: [IgxComboComponent, IgxComboItemComponent, IgxComboDropDownComponent, IgxComboAddItemComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective,\n        IgxComboToggleIconDirective,\n        IgxComboClearIconDirective],\n    imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,\n        IgxForOfModule, IgxToggleModule, IgxCheckboxModule, IgxDropDownModule, IgxButtonModule, IgxIconModule],\n    providers: [IgxSelectionAPIService]\n})\nexport class IgxComboModule { }\n","import { isIE } from '../core/utils';\n\n/**\n * This enum is used to keep the date validation result.\n *\n *@hidden\n */\nexport const enum DateState {\n    Valid = 'valid',\n    Invalid = 'invalid',\n}\n\n/**\n *@hidden\n */\nconst enum FormatDesc {\n    Numeric = 'numeric',\n    TwoDigits = '2-digit'\n}\n\n/**\n *@hidden\n */\nconst enum DateChars {\n    YearChar = 'y',\n    MonthChar = 'M',\n    DayChar = 'd'\n}\n\n/**\n *@hidden\n */\nconst enum DateParts {\n    Day = 'day',\n    Month = 'month',\n    Year = 'year'\n}\n\n/**\n *@hidden\n */\nexport abstract class DatePickerUtil {\n    private static readonly SHORT_DATE_MASK = 'MM/dd/yy';\n    private static readonly SEPARATOR = 'literal';\n    private static readonly NUMBER_OF_MONTHS = 12;\n    private static readonly PROMPT_CHAR = '_';\n    private static readonly DEFAULT_LOCALE = 'en';\n\n    /**\n     * This method generates date parts structure based on editor mask and locale.\n     * @param maskValue: string\n     * @param locale: string\n     * @returns array containing information about date parts - type, position, format\n     */\n    public static parseDateFormat(maskValue: string, locale: string = DatePickerUtil.DEFAULT_LOCALE): any[] {\n        let dateStruct = [];\n        if (maskValue === undefined && !isIE()) {\n            dateStruct = DatePickerUtil.getDefaultLocaleMask(locale);\n        } else {\n            const mask = (maskValue) ? maskValue : DatePickerUtil.SHORT_DATE_MASK;\n            const maskArray = Array.from(mask);\n            const monthInitPosition = mask.indexOf(DateChars.MonthChar);\n            const dayInitPosition = mask.indexOf(DateChars.DayChar);\n            const yearInitPosition = mask.indexOf(DateChars.YearChar);\n\n            if (yearInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Year,\n                    initialPosition: yearInitPosition,\n                    formatType: DatePickerUtil.getYearFormatType(mask)\n                });\n            }\n\n            if (monthInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Month,\n                    initialPosition: monthInitPosition,\n                    formatType: DatePickerUtil.getMonthFormatType(mask)\n                });\n            }\n\n            if (dayInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Day,\n                    initialPosition: dayInitPosition,\n                    formatType: DatePickerUtil.getDayFormatType(mask)\n                });\n            }\n\n            for (let i = 0; i < maskArray.length; i++) {\n                if (!DatePickerUtil.isDateChar(maskArray[i])) {\n                    dateStruct.push({\n                        type: DatePickerUtil.SEPARATOR,\n                        initialPosition: i,\n                        value: maskArray[i]\n                    });\n                }\n            }\n\n            dateStruct.sort((a, b) => a.initialPosition - b.initialPosition);\n            DatePickerUtil.fillDatePartsPositions(dateStruct);\n        }\n        return dateStruct;\n    }\n\n    /**\n     * This method generates input mask based on date parts.\n     * @param dateStruct array\n     * @returns input mask\n     */\n    public static getInputMask(dateStruct: any[]): string {\n        const inputMask = [];\n        for (let i = 0; i < dateStruct.length; i++) {\n            if (dateStruct[i].type === DatePickerUtil.SEPARATOR) {\n                inputMask.push(dateStruct[i].value);\n            } else if (dateStruct[i].type === DateParts.Day || dateStruct[i].type === DateParts.Month) {\n                inputMask.push('00');\n            } else if (dateStruct[i].type === DateParts.Year) {\n                switch (dateStruct[i].formatType) {\n                    case FormatDesc.Numeric: {\n                        inputMask.push('0000');\n                        break;\n                    }\n                    case FormatDesc.TwoDigits: {\n                        inputMask.push('00');\n                        break;\n                    }\n                }\n            }\n        }\n        return inputMask.join('');\n    }\n\n    /**\n     * This method generates editor mask.\n     * @param dateStruct\n     * @returns editor mask\n     */\n    public static getMask(dateStruct: any[]): string {\n        const mask = [];\n        for (let i = 0; i < dateStruct.length; i++) {\n            switch (dateStruct[i].formatType) {\n                case FormatDesc.Numeric: {\n                    if (dateStruct[i].type === DateParts.Day) {\n                        mask.push('d');\n                    } else if (dateStruct[i].type === DateParts.Month) {\n                        mask.push('M');\n                    } else {\n                        mask.push('yyyy');\n                    }\n                    break;\n                }\n                case FormatDesc.TwoDigits: {\n                    if (dateStruct[i].type === DateParts.Day) {\n                        mask.push('dd');\n                    } else if (dateStruct[i].type === DateParts.Month) {\n                        mask.push('MM');\n                    } else {\n                        mask.push('yy');\n                    }\n                }\n            }\n\n            if (dateStruct[i].type === DatePickerUtil.SEPARATOR) {\n                mask.push(dateStruct[i].value);\n            }\n        }\n\n        return mask.join('');\n    }\n    /**\n     * This method parses an input string base on date parts and returns a date and its validation state.\n     * @param dateFormatParts\n     * @param prevDateValue\n     * @param inputValue\n     * @returns object containing a date and its validation state\n     */\n    public static parseDateArray(dateFormatParts: any[], prevDateValue: Date, inputValue: string): any {\n        const dayStr = DatePickerUtil.getDayValueFromInput(dateFormatParts, inputValue);\n        const monthStr = DatePickerUtil.getMonthValueFromInput(dateFormatParts, inputValue);\n        const yearStr = DatePickerUtil.getYearValueFromInput(dateFormatParts, inputValue);\n        const yearFormat = DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year).formatType;\n        const day = (dayStr !== '') ? parseInt(dayStr, 10) : 1;\n        const month = (monthStr !== '') ? parseInt(monthStr, 10) - 1 : 0;\n\n        let year;\n        if (yearStr === '') {\n            year = (yearFormat === FormatDesc.TwoDigits) ? '00' : '2000';\n        } else {\n            year = yearStr;\n        }\n        let yearPrefix;\n        if (prevDateValue) {\n            const originalYear = prevDateValue.getFullYear().toString();\n            if (originalYear.length === 4) {\n                yearPrefix = originalYear.substring(0, 2);\n            }\n        } else {\n            yearPrefix = '20';\n        }\n        const fullYear = (yearFormat === FormatDesc.TwoDigits) ? yearPrefix.concat(year) : year;\n\n        if ((month < 0) || (month > 11) || (month === NaN)) {\n            return { state: DateState.Invalid, value: inputValue };\n        }\n\n        if ((day < 1) || (day > DatePickerUtil.daysInMonth(fullYear, month + 1)) || (day === NaN)) {\n            return { state: DateState.Invalid, value: inputValue };\n        }\n\n        return { state: DateState.Valid, date: new Date(fullYear, month, day) };\n    }\n\n    public static maskToPromptChars(mask: string): string {\n        const result = mask.replace(/0|L/g, DatePickerUtil.PROMPT_CHAR);\n        return result;\n    }\n\n    /**\n     * This method replaces prompt chars with empty string.\n     * @param value\n     */\n    public static trimUnderlines(value: string): string {\n        const result = value.replace(/_/g, '');\n        return result;\n    }\n\n    /**\n     * This method is used for spinning date parts.\n     * @param dateFormatParts\n     * @param inputValue\n     * @param position\n     * @param delta\n     * @param isSpinLoop\n     * @return modified text input\n     */\n    public static getModifiedDateInput(dateFormatParts: any[],\n        inputValue: string,\n        position: number,\n        delta: number,\n        isSpinLoop: boolean): string {\n        const datePart = DatePickerUtil.getDatePartOnPosition(dateFormatParts, position);\n        const datePartType = datePart.type;\n        const datePartFormatType = datePart.formatType;\n        let newValue;\n\n        const datePartValue = DatePickerUtil.getDateValueFromInput(dateFormatParts, datePartType, inputValue);\n        newValue = parseInt(datePartValue, 10);\n\n        let maxValue, minValue;\n        const minMax = DatePickerUtil.getMinMaxValue(dateFormatParts, datePart, inputValue);\n        minValue = minMax.min;\n        maxValue = minMax.max;\n\n        if (isNaN(newValue)) {\n            if (minValue === 'infinite') {\n                newValue = 2000;\n            } else {\n                newValue = minValue;\n            }\n        }\n        let tempValue = newValue;\n        tempValue += delta;\n\n        // Infinite loop for full years\n        if (maxValue === 'infinite' && minValue === 'infinite') {\n            newValue = tempValue;\n        }\n\n        if (isSpinLoop) {\n            if (tempValue > maxValue) {\n                tempValue = minValue;\n            }\n            if (tempValue < minValue) {\n                tempValue = maxValue;\n            }\n            newValue = tempValue;\n        } else {\n            if (tempValue <= maxValue && tempValue >= minValue) {\n                newValue = tempValue;\n            }\n        }\n\n        const startIdx = datePart.position[0];\n        const endIdx = datePart.position[1];\n        const start = inputValue.slice(0, startIdx);\n        const end = inputValue.slice(endIdx, inputValue.length);\n        let changedPart: string;\n\n        const prefix = DatePickerUtil.getNumericFormatPrefix(datePartFormatType);\n        changedPart = (newValue < 10) ? `${prefix}${newValue}` : `${newValue}`;\n\n        return `${start}${changedPart}${end}`;\n    }\n\n    /**\n     * This method returns date input with prompt chars.\n     * @param dateFormatParts\n     * @param date\n     * @param inputValue\n     * @returns date input including prompt chars\n     */\n    public static addPromptCharsEditMode(dateFormatParts: any[], date: Date, inputValue: string): string {\n        const dateArray = Array.from(inputValue);\n        for (let i = 0; i < dateFormatParts.length; i++) {\n            if (dateFormatParts[i].formatType === FormatDesc.Numeric) {\n                if ((dateFormatParts[i].type === DateParts.Day && date.getDate() < 10)\n                    || (dateFormatParts[i].type === DateParts.Month && date.getMonth() + 1 < 10)) {\n                    dateArray.splice(dateFormatParts[i].position[0], 0, DatePickerUtil.PROMPT_CHAR);\n                    dateArray.join('');\n                }\n            }\n        }\n        return dateArray.join('');\n    }\n\n    /**\n     * This method checks if date input is done.\n     * @param dateFormatParts\n     * @param input\n     * @returns input completeness\n     */\n    public static checkForCompleteDateInput(dateFormatParts: any[], input: string): string {\n        const dayValue = DatePickerUtil.getDayValueFromInput(dateFormatParts, input);\n        const monthValue = DatePickerUtil.getMonthValueFromInput(dateFormatParts, input);\n        const yearValue = DatePickerUtil.getYearValueFromInput(dateFormatParts, input);\n        const dayStr = DatePickerUtil.getDayValueFromInput(dateFormatParts, input, false);\n        const monthStr = DatePickerUtil.getMonthValueFromInput(dateFormatParts, input, false);\n\n        if (DatePickerUtil.isFullInput(dayValue, dayStr)\n            && DatePickerUtil.isFullInput(monthValue, monthStr)\n            && DatePickerUtil.isFullYearInput(dateFormatParts, yearValue)) {\n            return 'complete';\n        } else if (dayValue === '' && monthValue === '' && yearValue === '') {\n            return 'empty';\n        } else if (dayValue === '' || monthValue === '' || yearValue === '') {\n            return 'partial';\n        }\n        return '';\n    }\n\n    private static getYearFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.YearChar, 'g')).length) {\n            case 1: {\n                // y (2020)\n                return FormatDesc.Numeric;\n            }\n            case 4: {\n                // yyyy (2020)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // yy (20)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getMonthFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.MonthChar, 'g')).length) {\n            case 1: {\n                // M (8)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // MM (08)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getDayFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.DayChar, 'g')).length) {\n            case 1: {\n                // d (6)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // dd (06)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getDefaultLocaleMask(locale: string) {\n        const dateStruct = [];\n        const formatter = new Intl.DateTimeFormat(locale);\n        const formatToParts = formatter.formatToParts(new Date());\n        for (let i = 0; i < formatToParts.length; i++) {\n            if (formatToParts[i].type === DatePickerUtil.SEPARATOR) {\n                dateStruct.push({\n                    type: DatePickerUtil.SEPARATOR,\n                    value: formatToParts[i].value\n                });\n            } else {\n                dateStruct.push({\n                    type: formatToParts[i].type,\n                });\n            }\n        }\n        const formatterOptions = formatter.resolvedOptions();\n        for (let i = 0; i < dateStruct.length; i++) {\n            switch (dateStruct[i].type) {\n                case DateParts.Day: {\n                    dateStruct[i].formatType = formatterOptions.day;\n                    break;\n                }\n                case DateParts.Month: {\n                    dateStruct[i].formatType = formatterOptions.month;\n                    break;\n                }\n                case DateParts.Year: {\n                    dateStruct[i].formatType = formatterOptions.month;\n                    break;\n                }\n            }\n        }\n        DatePickerUtil.fillDatePartsPositions(dateStruct);\n        return dateStruct;\n    }\n\n    private static isDateChar(char: string): boolean {\n        return (char === DateChars.YearChar || char === DateChars.MonthChar || char === DateChars.DayChar);\n    }\n\n    private static getNumericFormatPrefix(formatType: string): string {\n        switch (formatType) {\n            case FormatDesc.TwoDigits: {\n                return '0';\n            }\n            case FormatDesc.Numeric: {\n                return DatePickerUtil.PROMPT_CHAR;\n            }\n        }\n    }\n\n    private static getMinMaxValue(dateFormatParts: any[], datePart, inputValue: string): any {\n        let maxValue, minValue;\n        switch (datePart.type) {\n            case DateParts.Month: {\n                minValue = 1;\n                maxValue = DatePickerUtil.NUMBER_OF_MONTHS;\n                break;\n            }\n            case DateParts.Day: {\n                minValue = 1;\n                maxValue = DatePickerUtil.daysInMonth(\n                    DatePickerUtil.getFullYearFromString(DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year), inputValue),\n                    parseInt(DatePickerUtil.getMonthValueFromInput(dateFormatParts, inputValue), 10));\n                break;\n            }\n            case DateParts.Year: {\n                if (datePart.formatType === FormatDesc.TwoDigits) {\n                    minValue = 0;\n                    maxValue = 99;\n                } else {\n                    // Infinite loop\n                    minValue = 'infinite';\n                    maxValue = 'infinite';\n                }\n                break;\n            }\n        }\n        return { min: minValue, max: maxValue };\n    }\n\n    private static daysInMonth(fullYear: number, month: number): number {\n        return new Date(fullYear, month, 0).getDate();\n    }\n\n    private static getDateValueFromInput(dateFormatParts: any[], type: DateParts, inputValue: string, trim: boolean = true): string {\n        const partPosition = DatePickerUtil.getDateFormatPart(dateFormatParts, type).position;\n        const result = inputValue.substring(partPosition[0], partPosition[1]);\n        return (trim) ? DatePickerUtil.trimUnderlines(result) : result;\n    }\n\n    private static getDayValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Day, inputValue, trim);\n    }\n\n    private static getMonthValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Month, inputValue, trim);\n    }\n\n    private static getYearValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Year, inputValue, trim);\n    }\n\n    private static getDateFormatPart(dateFormatParts: any[], type: DateParts): any {\n        const result = dateFormatParts.filter((datePart) => (datePart.type === type))[0];\n        return result;\n    }\n\n    private static isFullInput(value: any, input: string): boolean {\n        return (value !== '' && input.length === 2 && input.charAt(1) !== DatePickerUtil.PROMPT_CHAR);\n    }\n\n    private static isFullYearInput(dateFormatParts: any[], value: any): boolean {\n        switch (DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year).formatType) {\n            case FormatDesc.Numeric: {\n                return (value !== '' && value.length === 4);\n            }\n            case FormatDesc.TwoDigits: {\n                return (value !== '' && value.length === 2);\n            }\n            default: {\n                return false;\n            }\n        }\n    }\n\n    private static getDatePartOnPosition(dateFormatParts: any[], position: number) {\n        const result = dateFormatParts.filter((element) =>\n            element.position[0] <= position && position <= element.position[1] && element.type !== DatePickerUtil.SEPARATOR)[0];\n        return result;\n    }\n\n    private static getFullYearFromString(yearPart, inputValue): number {\n        return parseInt(inputValue.substring(yearPart.position[0], yearPart.position[1]), 10);\n    }\n\n    private static fillDatePartsPositions(dateArray: any[]): void {\n        let currentPos = 0;\n\n        for (let i = 0; i < dateArray.length; i++) {\n            // Day|Month part positions\n            if (dateArray[i].type === DateParts.Day || dateArray[i].type === DateParts.Month) {\n                // Offset 2 positions for number\n                dateArray[i].position = [currentPos, currentPos + 2];\n                currentPos += 2;\n            } else if (dateArray[i].type === DateParts.Year) {\n                // Year part positions\n                switch (dateArray[i].formatType) {\n                    case FormatDesc.Numeric: {\n                        // Offset 4 positions for full year\n                        dateArray[i].position = [currentPos, currentPos + 4];\n                        currentPos += 4;\n                        break;\n                    }\n                    case FormatDesc.TwoDigits: {\n                        // Offset 2 positions for short year\n                        dateArray[i].position = [currentPos, currentPos + 2];\n                        currentPos += 2;\n                        break;\n                    }\n                }\n            } else if (dateArray[i].type === DatePickerUtil.SEPARATOR) {\n                // Separator positions\n                dateArray[i].position = [currentPos, currentPos + 1];\n                currentPos++;\n            }\n        }\n    }\n}\n\n\n","/** @hidden */\nexport const IGX_DATE_PICKER_COMPONENT = 'IgxDatePickerComponentToken';\n\n/** @hidden */\nexport interface IDatePicker {\n    value: Date;\n    mask: string;\n    inputMask: string;\n    rawDateString: string;\n    dateFormatParts: any[];\n    invalidDate: string;\n}\n","import { PipeTransform, Pipe, Inject } from '@angular/core';\nimport { IGX_DATE_PICKER_COMPONENT, IDatePicker } from './date-picker.common';\nimport { DatePickerUtil } from './date-picker.utils';\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'displayValue'\n})\nexport class DatePickerDisplayValuePipe implements PipeTransform {\n    constructor(@Inject(IGX_DATE_PICKER_COMPONENT) private _datePicker: IDatePicker) { }\n    transform(value: any, args?: any): any {\n        if (value !== '') {\n            if (value === DatePickerUtil.maskToPromptChars(this._datePicker.inputMask)) {\n                return '';\n            }\n            this._datePicker.rawDateString = value;\n            return DatePickerUtil.trimUnderlines(value);\n        }\n        return '';\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'inputValue'\n})\nexport class DatePickerInputValuePipe implements PipeTransform {\n    constructor(@Inject(IGX_DATE_PICKER_COMPONENT) private _datePicker: IDatePicker) { }\n    transform(value: any, args?: any): any {\n        if (this._datePicker.invalidDate !== '') {\n            return this._datePicker.invalidDate;\n        } else {\n            if (this._datePicker.value === null || this._datePicker.value === undefined) {\n                return DatePickerUtil.maskToPromptChars(this._datePicker.inputMask);\n            } else {\n                return DatePickerUtil.addPromptCharsEditMode(this._datePicker.dateFormatParts, this._datePicker.value, value);\n            }\n        }\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxDatePickerTemplate]'\n})\n\n/**\n * IgxDatePickerTemplateDirective can be used to re-template the date-picker input-group.\n *\n * @hidden\n */\nexport class IgxDatePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * This enumeration is used to configure whether the date/time picker has an editable input with drop down\n * or is readonly - the date/time is selected only through a dialog.\n */\nexport enum InteractionMode {\n    DropDown = 'dropdown',\n    Dialog = 'dialog'\n}\n","import { Component, ViewChild, Input, Output, EventEmitter, HostListener, HostBinding } from '@angular/core';\nimport { IgxCalendarComponent } from '../calendar';\nimport { InteractionMode } from '../core/enums';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-calendar-container',\n    styles: [':host {display: block;}'],\n    templateUrl: 'calendar-container.component.html'\n})\nexport class IgxCalendarContainerComponent {\n    @ViewChild('calendar')\n    public calendar: IgxCalendarComponent;\n\n    @Input()\n    public mode: InteractionMode = InteractionMode.Dialog;\n\n    @Input()\n    public vertical = false;\n\n    @Input()\n    public cancelButtonLabel: string;\n\n    @Input()\n    public todayButtonLabel: string;\n\n    @Output()\n    public onClose = new EventEmitter();\n\n    @Output()\n    public onTodaySelection = new EventEmitter();\n\n    @HostBinding('class.igx-date-picker')\n    public styleClass = 'igx-date-picker';\n\n    @HostBinding('class.igx-date-picker--dropdown')\n    get dropdownCSS(): boolean {\n        return this.mode === InteractionMode.DropDown;\n    }\n\n    @HostBinding('class.igx-date-picker--vertical')\n    get verticalCSS(): boolean {\n        return this.vertical && this.mode === InteractionMode.Dialog;\n    }\n\n    @HostListener('keydown.esc', ['$event'])\n    @HostListener('keydown.alt.arrowup', ['$event'])\n    public onEscape(event) {\n        event.preventDefault();\n        this.onClose.emit();\n    }\n\n    /**\n     * Returns whether the date-picker is in readonly dialog mode.\n     *\n     * @hidden\n    */\n    public get isReadonly() {\n        return this.mode === InteractionMode.Dialog;\n    }\n\n    /**\n     * Emits close event for the calendar.\n     */\n    public closeCalendar() {\n        this.onClose.emit();\n    }\n\n    /**\n    * Emits today selection event for the calendar.\n    */\n    public triggerTodaySelection() {\n        this.onTodaySelection.emit();\n    }\n}\n","import { CommonModule, formatDate } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output,\n    ViewChild,\n    ElementRef,\n    TemplateRef,\n    Inject,\n    ChangeDetectorRef,\n    HostListener,\n    NgModuleRef,\n    AfterViewInit\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    IgxCalendarComponent,\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarModule,\n    IgxCalendarSubheaderTemplateDirective,\n    WEEKDAYS,\n    isDateInRanges\n} from '../calendar/index';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule, IgxInputDirective } from '../input-group/index';\nimport { Subject, fromEvent, animationFrameScheduler, interval } from 'rxjs';\nimport { filter, takeUntil, throttle } from 'rxjs/operators';\nimport { IgxOverlayOutletDirective } from '../directives/toggle/toggle.directive';\nimport {\n    OverlaySettings,\n    IgxOverlayService,\n    PositionSettings,\n    AbsoluteScrollStrategy,\n    AutoPositionStrategy\n} from '../services/index';\nimport { DateRangeDescriptor } from '../core/dates/dateRange';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxMaskModule } from '../directives/mask/mask.directive';\nimport {\n    DatePickerUtil,\n    DateState\n} from './date-picker.utils';\nimport { DatePickerDisplayValuePipe, DatePickerInputValuePipe } from './date-picker.pipes';\nimport { IDatePicker } from './date-picker.common';\nimport { KEYS } from '../core/utils';\nimport { IgxDatePickerTemplateDirective } from './date-picker.directives';\nimport { IgxCalendarContainerComponent } from './calendar-container.component';\nimport { InteractionMode } from '../core/enums';\nimport { getViewportRect } from '../services/overlay/utilities';\nimport { fadeIn, fadeOut } from '../animations/fade';\n\nlet NEXT_ID = 0;\n\n/**\n * This interface is used to provide information about date picker reference and its current value\n * when onDisabledDate event is fired.\n */\nexport interface IDatePickerDisabledDateEventArgs {\n    datePicker: IgxDatePickerComponent;\n    currentValue: Date;\n}\n\n/**\n * This interface is used to provide information about date picker reference and its previously valid value\n * when onValidationFailed event is fired.\n */\nexport interface IDatePickerValidationFailedEventArgs {\n    datePicker: IgxDatePickerComponent;\n    prevValue: Date;\n}\n\n/**\n * This interface is used to configure calendar format view options.\n */\nexport interface IFormatViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n\n/**\n * This interface is used to configure calendar format options.\n */\nexport interface IFormatOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\n\n/**\n * This enumeration is used to configure the date picker to operate with pre-defined format option used in Angular DatePipe.\n * 'https://angular.io/api/common/DatePipe'\n * 'shortDate': equivalent to 'M/d/yy' (6/15/15).\n * 'mediumDate': equivalent to 'MMM d, y' (Jun 15, 2015).\n * 'longDate': equivalent to 'MMMM d, y' (June 15, 2015).\n * 'fullDate': equivalent to 'EEEE, MMMM d, y' (Monday, June 15, 2015).\n */\nexport enum PredefinedFormatOptions {\n    ShortDate = 'shortDate',\n    MediumDate = 'mediumDate',\n    LongDate = 'longDate',\n    FullDate = 'fullDate'\n}\n\n/**\n * **Ignite UI for Angular Date Picker** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/date_picker.html)\n *\n * The Ignite UI Date Picker displays a popup calendar that lets users select a single date.\n *\n * Example:\n * ```html\n * <igx-date-picker [(ngModel)]=\"selectedDate\"></igx-date-picker>\n * ```\n */\n@Component({\n    providers:\n        [{\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxDatePickerComponent,\n            multi: true\n        }],\n    // tslint:disable-next-line:component-selector\n    selector: 'igx-date-picker',\n    templateUrl: 'date-picker.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxDatePickerComponent implements IDatePicker, ControlValueAccessor, EditorProvider, OnInit, AfterViewInit, OnDestroy {\n    /**\n     * An @Input property that sets the `IgxDatePickerComponent` label.\n     * The default label is 'Date'.\n     * ```html\n     * <igx-date-picker [label]=\"Calendar\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public label = 'Date';\n\n    /**\n     * An @Input property that sets the `IgxDatePickerComponent` label visibility.\n     * By default the visibility is set to true.\n     * <igx-date-picker [labelVisibility]=\"false\"></igx-date-picker>\n     */\n    @Input()\n    public labelVisibility = true;\n\n    /**\n     *An @Input property that sets locales. Default locale is en.\n     *```html\n     *<igx-date-picker locale=\"ja-JP\" [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    @Input() public locale: 'en';\n\n    /**\n     *An @Input property that sets on which day the week starts.\n     *```html\n     *<igx-date-picker [weekStart]=\"WEEKDAYS.FRIDAY\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Input() public weekStart: WEEKDAYS | number = WEEKDAYS.SUNDAY;\n\n    /**\n     *Returns the format options of the `IgxDatePickerComponent`.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let formatOptions = this.datePicker.formatOptions;\n     *}\n     *```\n     */\n    @Input()\n    public get formatOptions(): IFormatOptions {\n        return this._formatOptions;\n    }\n\n    /**\n     *Sets the format options of the `IgxDatePickerComponent`.\n     *```typescript\n     *public Options;\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.Options = {\n     *        day: \"numeric\",\n     *        month: \"long\",\n     *        weekday: \"long\",\n     *        year: \"numeric\"\n     *    }\n     *this.datePicker.formatOptions = this.Options;\n     *}\n     *```\n     */\n    public set formatOptions(formatOptions: IFormatOptions) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n    }\n\n    /**\n     *Returns the date display format of the `IgxDatePickerComponent` in dropdown mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let format = this.datePicker.format;\n     *}\n     *```\n     */\n    @Input()\n    public get format(): string {\n        return (this._format === undefined) ? PredefinedFormatOptions.ShortDate : this._format;\n    }\n\n    /**\n    *Sets the date format of the `IgxDatePickerComponent` when in editable dropdown mode.\n    *```typescript\n    *@ViewChild(\"MyDatePicker\")\n    *public datePicker: IgxDatePickerComponent;\n    *this.datePicker.format = 'yyyy-M-d';\n    *}\n    *```\n    */\n    public set format(format: string) {\n        this._format = format;\n    }\n\n    /**\n     *Returns the date mask of the `IgxDatePickerComponent` when in editable dropdown mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let mask = this.datePicker.mask;\n     *}\n     *```\n     */\n    @Input()\n    public mask: string;\n\n    /**\n     *Returns the format views of the `IgxDatePickerComponent`.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let formatViews = this.datePicker.formatViews;\n     *}\n     *```\n     */\n    @Input()\n    public get formatViews(): IFormatViews {\n        return this._formatViews;\n    }\n\n    /**\n     *Sets the format views of the `IgxDatePickerComponent`.\n     *```typescript\n     *public Views;\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.Views = {day:false, month: false, year:false};\n     *    this.datePicker.formatViews = this.Views;\n     *}\n     *```\n     */\n    public set formatViews(formatViews: IFormatViews) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     * Gets the disabled dates descriptors.\n     * ```typescript\n     * let disabledDates = this.datepicker.disabledDates;\n     * ```\n     */\n    @Input()\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n\n    /**\n     * Sets the disabled dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.disabledDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n    }\n\n    /**\n     * Gets the special dates descriptors.\n     * ```typescript\n     * let specialDates = this.datepicker.specialDates;\n     * ```\n     */\n    @Input()\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n\n    /**\n     * Sets the special dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.specialDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    @Input()\n    public get modalOverlaySettings(): OverlaySettings {\n        return this._modalOverlay;\n    }\n\n    public set modalOverlaySettings(value: OverlaySettings) {\n        this._modalOverlay = value;\n    }\n\n    @Input()\n    public get dropDownOverlaySettings(): OverlaySettings {\n        return this._dropDownOverlay;\n    }\n\n    public set dropDownOverlaySettings(value: OverlaySettings) {\n        this._dropDownOverlay = value;\n    }\n\n    /**\n     *Returns the formatted date when `IgxDatePickerComponent` is in dialog mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *public selection(event){\n     *    let selectedDate = this.datePicker.displayData;\n     *    alert(selectedDate);\n     *}\n     *```\n     *```html\n     *<igx-date-picker #MyDatePicker (onSelection)=\"selection()\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    public get displayData(): string {\n        if (this.value) {\n            return this._customFormatChecker(this.formatter, this.value);\n        }\n        return '';\n    }\n\n    /**\n     hidden\n     */\n    public get transformedDate(): string {\n        if (this._value) {\n            this._transformedDate = (this._isInEditMode) ? this._getEditorDate(this._value) : this._getDisplayDate(this._value);\n            this.isEmpty = false;\n        } else {\n            this._transformedDate = (this._isInEditMode) ? DatePickerUtil.maskToPromptChars(this.inputMask) : '';\n        }\n        return this._transformedDate;\n    }\n\n    public set transformedDate(value) {\n        this._transformedDate = value;\n    }\n\n    constructor(@Inject(IgxOverlayService) private _overlayService: IgxOverlayService, public element: ElementRef,\n        private _cdr: ChangeDetectorRef, private _moduleRef: NgModuleRef<any>) { }\n\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     * @memberof IgxDatePickerComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.datePickerTemplateDirective) {\n            return this.datePickerTemplateDirective.template;\n        }\n        return (this.mode === InteractionMode.Dialog) ? this.readOnlyDatePickerTemplate : this.editableDatePickerTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     * @memberof IgxDatePickerComponent\n     */\n    get context() {\n        return {\n            disabled: this.disabled,\n            disabledDates: this.disabledDates,\n            displayData: this.displayData,\n            format: this.format,\n            isSpinLoop: this.isSpinLoop,\n            label: this.label,\n            labelVisibility: this.labelVisibility,\n            locale: this.locale,\n            mask: this.mask,\n            mode: this.mode,\n            specialDates: this.specialDates,\n            value: this.value,\n            openDialog: () => { this.openDialog(); }\n        };\n    }\n\n    /**\n     *An @Input property that gets/sets the selected date.\n     *```typescript\n     *public date: Date = new Date();\n     *```\n     *```html\n     *<igx-date-picker [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public get value(): Date {\n        return this._value;\n    }\n\n    public set value(date: Date) {\n        this._value = date;\n        this._onChangeCallback(date);\n    }\n\n    /**\n     *An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-date-picker [id]=\"'igx-date-picker-3'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-date-picker-${NEXT_ID++}`;\n\n    /**\n     *An @Input property that applies a custom formatter function on the selected or passed date.\n     *```typescript\n     *public date: Date = new Date();\n     *private dayFormatter = new Intl.DateTimeFormat(\"en\", { weekday: \"long\" });\n     *private monthFormatter = new Intl.DateTimeFormat(\"en\", { month: \"long\" });\n     *public formatter = (date: Date) => { return `You selected\n     *                     ${this.dayFormatter.format(date)},\n     *                     ${date.getDate()} ${this.monthFormatter.format(date)},\n     *                     ${date.getFullYear()}`;\n     *}\n     *```\n     *```html\n     *<igx-date-picker [value]=\"date\" [formatter]=\"formatter\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public formatter: (val: Date) => string;\n\n    /**\n     *An @Input property that disables the `IgxDatePickerComponent`.\n     *```html\n     *<igx-date-picker [disabled]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public disabled: boolean;\n\n    /**\n     *An @Input property that sets the orientation of the `IgxDatePickerComponent` header.\n     *```html\n     *<igx-date-picker [vertical]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     *An @Input property that renders today button with custom label.\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"cancel\" todayButtonLabel=\"Tomorrow\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public todayButtonLabel: string;\n\n    /**\n     *An @Input property that renders cancel button with custom label.\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"Close\" todayButtonLabel=\"Today\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public cancelButtonLabel: string;\n\n    /**\n     *An @Input property that sets whether `IgxDatePickerComponent` is in dialog or drop down mode.\n     *```html\n     *<igx-date-picker mode=\"dropdown\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public mode = InteractionMode.Dialog;\n\n    /**\n     *An @Input property that sets whether the `IgxDatePickerComponent` date parts would spin continuously or stop when min/max is reached.\n     *```html\n     *<igx-date-picker [isSpinLoop]=\"false\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public isSpinLoop = true;\n\n    /**\n    *@hidden\n    */\n    @Input()\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     *An event that is emitted when the `IgxDatePickerComponent` calendar is opened.\n     *```typescript\n     *public open(event){\n     *    alert(\"The date-picker calendar has been opened!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onOpen)=\"open($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Output()\n    public onOpen = new EventEmitter<IgxDatePickerComponent>();\n\n    /**\n     *\"An event that is emitted when the `IgxDatePickerComponent` is closed.\n     *```typescript\n     *public close(event){\n     *    alert(\"The date-picker has been closed!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onClose)=\"close($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Output()\n    public onClose = new EventEmitter<IgxDatePickerComponent>();\n    /**\n     *An @Output property that is fired when selection is made in the calendar.\n     *```typescript\n     *public selection(event){\n     *    alert(\"A date has been selected!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onSelection)=\"selection($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n    *An @Output property that fires when the user types/spins to a disabled date in the date-picker editor.\n    *```typescript\n    *public onDisabledDate(event){\n    *    alert(\"This date is disabled!\");\n    *}\n    *```\n    *```html\n    *<igx-date-picker (onDisabledDate)=\"onDisabledDate($event)\"></igx-date-picker>\n    *```\n    */\n    @Output()\n    public onDisabledDate = new EventEmitter<IDatePickerDisabledDateEventArgs>();\n\n    /**\n    *An @Output property that fires when the user types/spins invalid date in the date-picker editor.\n    *```typescript\n    *public onValidationFailed(event){\n        *    alert(\"This date is not valid!\");\n        *}\n        *```\n        *```html\n        *<igx-date-picker (onValidationFailed)=\"onValidationFailed($event)\"></igx-date-picker>\n        *```\n        */\n    @Output()\n    public onValidationFailed = new EventEmitter<IDatePickerValidationFailedEventArgs>();\n\n    /**\n    * @hidden\n    */\n    @ViewChild('datePickerOutlet', { read: ElementRef })\n    public outletDirective: ElementRef;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('readOnlyDatePickerTemplate', { read: TemplateRef })\n    protected readOnlyDatePickerTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('editableDatePickerTemplate', { read: TemplateRef })\n    protected editableDatePickerTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('editableInputGroup', { read: ElementRef })\n    protected editableInputGroup: ElementRef;\n\n    /*\n     * @hidden\n     */\n    @ContentChild('dropDownTarget', { read: ElementRef })\n    protected templateDropDownTarget: ElementRef;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('editableInput', { read: ElementRef })\n    protected editableInput: ElementRef;\n\n    /*\n    * @hidden\n    */\n    @ViewChild('readonlyInput', { read: ElementRef })\n    protected readonlyInput: ElementRef;\n\n    /*\n    * @hidden\n    */\n    @ContentChild(IgxInputDirective)\n    protected input: IgxInputDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxDatePickerTemplateDirective, { read: IgxDatePickerTemplateDirective })\n    protected datePickerTemplateDirective: IgxDatePickerTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCalendarHeaderTemplateDirective, { read: IgxCalendarHeaderTemplateDirective })\n    public headerTemplate: IgxCalendarHeaderTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCalendarSubheaderTemplateDirective, { read: IgxCalendarSubheaderTemplateDirective })\n    public subheaderTemplate: IgxCalendarSubheaderTemplateDirective;\n\n    public calendar: IgxCalendarComponent;\n    public hasHeader = true;\n    public collapsed = true;\n    public displayValuePipe = new DatePickerDisplayValuePipe(this);\n    public inputValuePipe = new DatePickerInputValuePipe(this);\n    public dateFormatParts = [];\n    public rawDateString: string;\n    public inputMask: string;\n    public isEmpty = true;\n    public invalidDate = '';\n\n    private readonly spinDelta = 1;\n    private readonly defaultLocale = 'en';\n    private readonly calendarHeight = 400;\n\n    private _formatOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n    private _formatViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n    private _destroy$ = new Subject<boolean>();\n    private _componentID: string;\n    private _format: string;\n    private _value: Date;\n    private _isInEditMode: boolean;\n    private _disabledDates: DateRangeDescriptor[] = null;\n    private _specialDates: DateRangeDescriptor[] = null;\n    private _modalOverlay: OverlaySettings;\n    private _dropDownOverlay: OverlaySettings;\n    private _positionSettings: PositionSettings;\n    private _dropDownOverlaySettings: OverlaySettings;\n    private _modalOverlaySettings: OverlaySettings;\n    private _transformedDate;\n\n    /**\n    * @hidden\n    */\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onSpaceClick(event: KeyboardEvent) {\n        this.openDialog();\n        event.preventDefault();\n    }\n\n    /**\n     *Method that sets the selected date.\n     *```typescript\n     *public date = new Date();\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.writeValue(this.date);\n     *}\n     *```\n     *@param value The date you want to select.\n     *@memberOf {@link IgxDatePickerComponent}\n     */\n    public writeValue(value: Date) {\n        this.value = value;\n        this._cdr.markForCheck();\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden */\n    public getEditElement() {\n        let inputElement;\n        if (this.mode === InteractionMode.DropDown) {\n            inputElement = (this.editableInput) ? this.editableInput : this.input;\n        } else {\n            inputElement = (this.readonlyInput) ? this.readonlyInput : this.input;\n        }\n        return (inputElement) ? inputElement.nativeElement : null;\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnInit(): void {\n        this._positionSettings = {\n            openAnimation: fadeIn,\n            closeAnimation: fadeOut\n        };\n\n        const outlet = (this.outlet !== undefined) ? this.outlet : this.outletDirective;\n        this._dropDownOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: false,\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            positionStrategy: new AutoPositionStrategy(this._positionSettings),\n            outlet: outlet\n        };\n\n        this._modalOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: true,\n            outlet: outlet\n        };\n\n        this._overlayService.onOpening.pipe(\n            filter((overlay) => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe((eventArgs) => {\n                this._onOpening(eventArgs);\n            });\n\n        this._overlayService.onOpened.pipe(\n            filter((overlay) => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe((eventArgs) => {\n                this._onOpened(eventArgs);\n            });\n\n        this._overlayService.onClosed.pipe(\n            filter(overlay => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this._onClosed();\n            });\n\n        if (this.mode === InteractionMode.DropDown) {\n            this.dateFormatParts = DatePickerUtil.parseDateFormat(this.mask, this.locale);\n            if (this.mask === undefined) {\n                this.mask = DatePickerUtil.getMask(this.dateFormatParts);\n            }\n            this.inputMask = DatePickerUtil.getInputMask(this.dateFormatParts);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit(): void {\n        if (this.mode === InteractionMode.DropDown && this.editableInput) {\n            fromEvent(this.editableInput.nativeElement, 'keydown').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy$)\n            ).subscribe((res) => this.onKeyDown(res));\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._componentID) {\n            this._overlayService.hide(this._componentID);\n        }\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    /**\n     *Selects today's date from calendar and change the input field value, @calendar.viewDate and @calendar.value.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.triggerTodaySelection();\n     *}\n     *```\n     *@memberOf {@link IgxDatePickerComponent}\n     */\n    public triggerTodaySelection(): void {\n        const today = new Date(Date.now());\n        this.handleSelection(today);\n    }\n\n    /**\n     * Change the calendar selection and calling this method will emit the @calendar.onSelection event,\n     * which will fire @handleSelection method.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.selectDate(this.date);\n     *}\n     * ```\n     * @param date passed date that has to be set to the calendar.\n     * @memberOf {@link IgxDatePickerComponent}\n     */\n    public selectDate(date: Date): void {\n        this.value = date;\n        this.onSelection.emit(date);\n        this._onChangeCallback(date);\n    }\n\n    /**\n     * Deselects the calendar date.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.deselectDate();\n     *}\n     * ```\n     * @memberOf {@link IgxDatePickerComponent}\n     */\n    public deselectDate(): void {\n        this.value = null;\n        if (this.calendar) {\n            this.calendar.deselectDate();\n        }\n        this._onChangeCallback(null);\n    }\n\n    /**\n     * Open the calendar.\n     *\n     * @hidden\n     */\n    public openDialog(): void {\n        if (!this.collapsed) {\n            return;\n        }\n        switch (this.mode) {\n            case InteractionMode.Dialog: {\n                this.hasHeader = true;\n                const modalOverlay = (this.modalOverlaySettings !== undefined) ? this._modalOverlay : this._modalOverlaySettings;\n                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent, modalOverlay, this._moduleRef);\n                this._overlayService.show(this._componentID, modalOverlay);\n                break;\n            }\n            case InteractionMode.DropDown: {\n                this.hasHeader = false;\n                let dropDownOverlay;\n\n                // dropdown overlay settings are modified via input\n                if (this.dropDownOverlaySettings !== undefined) {\n                    dropDownOverlay = this._dropDownOverlay;\n                } else {\n                    dropDownOverlay = this._dropDownOverlaySettings;\n                    let dropDownTarget;\n\n                    if (this.editableInputGroup) {\n                        dropDownTarget = this.editableInputGroup.nativeElement;\n                    } else {\n                        if (this.templateDropDownTarget) {\n                            // if the date picker is re-templated, set an element marked with #dropDownTarget as a target to the drop-down\n                            dropDownTarget = this.templateDropDownTarget.nativeElement;\n                        } else {\n                            throw new Error('There is no target element for the dropdown to attach. Mark an element with #dropDownTarget.');\n                        }\n                    }\n\n                    dropDownOverlay.positionStrategy.settings.target = dropDownTarget;\n                }\n\n                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent, dropDownOverlay, this._moduleRef);\n                this._overlayService.show(this._componentID, dropDownOverlay);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Close the calendar.\n     *\n     * @hidden\n     */\n    public closeCalendar(): void {\n        this._overlayService.hide(this._componentID);\n    }\n\n    /**\n     * Clear the input field, date picker value and calendar selection.\n     *\n     * @hidden\n     */\n    public clear(): void {\n        this.isEmpty = true;\n        this.invalidDate = '';\n        this.deselectDate();\n        this._setCursorPosition(0);\n    }\n\n    /**\n     * Evaluates when @calendar.onSelection event was fired\n     * and update the input value.\n     *\n     * @param event selected value from calendar.\n     *\n     * @hidden\n     */\n    public handleSelection(date: Date): void {\n        if (this.value) {\n            date.setHours(this.value.getHours());\n            date.setMinutes(this.value.getMinutes());\n            date.setSeconds(this.value.getSeconds());\n            date.setMilliseconds(this.value.getMilliseconds());\n        }\n\n        this.value = date;\n        this.calendar.viewDate = date;\n        this._onChangeCallback(date);\n        this.closeCalendar();\n        this.onSelection.emit(date);\n    }\n\n    /**\n    * Evaluates when the input blur event was fired\n    * and re-calculate the date picker value.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onBlur(event): void {\n        this._isInEditMode = false;\n        this.calculateDate(event.target.value, event.type);\n    }\n\n    /**\n    * Evaluates when the input focus event was fired\n    * and re-calculate the editor text.\n    *\n    * @param event\n    * @hidden\n    */\n    public onFocus(): void {\n        this._isInEditMode = true;\n        if (this.value && this.invalidDate === '') {\n            this._transformedDate = this._getEditorDate(this.value);\n        }\n    }\n\n    /**\n    * Evaluates when the keydown event was fired for up/down keys\n    * to provide spinning of date parts.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onKeyDown(event) {\n        switch (event.key) {\n            case KEYS.UP_ARROW:\n            case KEYS.UP_ARROW_IE:\n                event.preventDefault();\n                event.stopPropagation();\n                this.spinValue(event.target.value, 1, event.type);\n                break;\n            case KEYS.DOWN_ARROW:\n            case KEYS.DOWN_ARROW_IE:\n                if (event.altKey) {\n                    this.openDialog();\n                } else {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.spinValue(event.target.value, -1, event.type);\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n    * Evaluates when the mouse wheel event was fired\n    * to provide spinning of date parts.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onWheel(event) {\n        if (this._isInEditMode) {\n            event.preventDefault();\n            event.stopPropagation();\n            const sign = (event.deltaY > 0) ? -1 : 1;\n            this.spinValue(event.target.value, sign, event.type);\n        }\n    }\n\n    /**\n    * Evaluates when input event was fired in editor.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onInput(event) {\n        const targetValue = event.target.value;\n        const cursorPosition = this._getCursorPosition();\n        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, targetValue);\n        this._isInEditMode = true;\n\n        if (targetValue !== DatePickerUtil.maskToPromptChars(this.inputMask)) {\n            this.isEmpty = false;\n        }\n\n        // If all date parts are completed, change the date-picker value, stay in edit mode\n        if (checkInput === 'complete' && event.inputType !== 'deleteContentBackward') {\n            this._transformedDate = targetValue;\n            this.calculateDate(targetValue, event.type);\n            this._setCursorPosition(cursorPosition);\n        } else if (checkInput === 'partial') {\n            // While editing, if one date part is deleted, date-picker value is set to null, the remaining input stays intact.\n            this.deselectDate();\n            requestAnimationFrame(() => {\n                this.getEditElement().value = targetValue;\n                this._setCursorPosition(cursorPosition);\n            });\n        } else if (checkInput === 'empty') {\n            // Total clean-up as input is deleted.\n            this.isEmpty = true;\n            this.deselectDate();\n        }\n    }\n\n    private calculateDate(dateString: string, invokedByEvent: string): void {\n        if (dateString !== '') {\n            const prevDateValue = this.value;\n            const inputValue = (invokedByEvent === 'blur') ? this.rawDateString : dateString;\n            const newDateArray = DatePickerUtil.parseDateArray(this.dateFormatParts, prevDateValue, inputValue);\n\n            if (newDateArray.state === DateState.Valid) {\n                const newValue = newDateArray.date;\n                // Restore the time part if any\n                if (prevDateValue) {\n                    newValue.setHours(prevDateValue.getHours());\n                    newValue.setMinutes(prevDateValue.getMinutes());\n                    newValue.setSeconds(prevDateValue.getSeconds());\n                    newValue.setMilliseconds(prevDateValue.getMilliseconds());\n                }\n\n                if (this.disabledDates === null\n                    || (this.disabledDates !== null && !isDateInRanges(newValue, this.disabledDates))) {\n                    this.value = newValue;\n                    this.invalidDate = '';\n                    this._onChangeCallback(newValue);\n                } else {\n                    const args: IDatePickerDisabledDateEventArgs = {\n                        datePicker: this,\n                        currentValue: newValue,\n                    };\n                    this.onDisabledDate.emit(args);\n                }\n            } else {\n                const args: IDatePickerValidationFailedEventArgs = {\n                    datePicker: this,\n                    prevValue: prevDateValue\n                };\n                this.invalidDate = dateString;\n                this.onValidationFailed.emit(args);\n            }\n        }\n    }\n\n    private spinValue(inputValue: string, sign: number, eventType: string): void {\n        this._isInEditMode = true;\n        this.isEmpty = false;\n        const cursorPosition = this._getCursorPosition();\n\n        const modifiedInputValue =\n            DatePickerUtil.getModifiedDateInput(this.dateFormatParts, inputValue, cursorPosition, this.spinDelta * sign, this.isSpinLoop);\n\n        this.getEditElement().value = modifiedInputValue;\n        this._setCursorPosition(cursorPosition);\n\n        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, modifiedInputValue);\n        if (checkInput === 'complete') {\n            this._isInEditMode = true;\n            this.calculateDate(modifiedInputValue, eventType);\n            this._setCursorPosition(cursorPosition);\n        }\n    }\n\n    private _onOpening(event) {\n        this._initializeCalendarContainer(event.componentRef.instance);\n        this.collapsed = false;\n    }\n\n    private _onOpened(event): void {\n        this._onTouchedCallback();\n        this.onOpen.emit(this);\n\n        if (this.calendar) {\n            this._focusCalendarDate();\n        }\n    }\n\n    private _onClosed(): void {\n        this.collapsed = true;\n        this._componentID = null;\n        this.onClose.emit(this);\n\n        if (this.getEditElement()) {\n            this.getEditElement().focus();\n        }\n    }\n\n    private _initializeCalendarContainer(componentInstance: IgxCalendarContainerComponent) {\n        this.calendar = componentInstance.calendar;\n        const isVertical = (this.vertical && this.mode === InteractionMode.Dialog);\n        this.calendar.hasHeader = this.hasHeader;\n        this.calendar.formatOptions = this.formatOptions;\n        this.calendar.formatViews = this.formatViews;\n        this.calendar.locale = this.locale;\n        this.calendar.vertical = isVertical;\n        this.calendar.weekStart = this.weekStart;\n        this.calendar.specialDates = this.specialDates;\n        this.calendar.disabledDates = this.disabledDates;\n        this.calendar.headerTemplate = this.headerTemplate;\n        this.calendar.subheaderTemplate = this.subheaderTemplate;\n        this.calendar.onSelection.pipe(takeUntil(this._destroy$)).subscribe((ev: Date) => this.handleSelection(ev));\n\n        if (this.value) {\n            this.calendar.value = this.value;\n            this.calendar.viewDate = this.value;\n        }\n\n        componentInstance.mode = this.mode;\n        componentInstance.vertical = isVertical;\n        componentInstance.cancelButtonLabel = this.cancelButtonLabel;\n        componentInstance.todayButtonLabel = this.todayButtonLabel;\n\n        componentInstance.onClose.pipe(takeUntil(this._destroy$)).subscribe(() => this.closeCalendar());\n        componentInstance.onTodaySelection.pipe(takeUntil(this._destroy$)).subscribe(() => this.triggerTodaySelection());\n    }\n\n    // Focus a date, after the calendar appearance into DOM.\n    private _focusCalendarDate(): void {\n        requestAnimationFrame(() => {\n            this.calendar.daysView.focusActiveDate();\n        });\n    }\n\n    private _setLocaleToDate(value: Date): string {\n        return value.toLocaleDateString(this.locale);\n    }\n\n    private _getCursorPosition(): number {\n        return this.getEditElement().selectionStart;\n    }\n\n    private _setCursorPosition(start: number, end: number = start): void {\n        requestAnimationFrame(() => {\n            this.getEditElement().setSelectionRange(start, end);\n        });\n    }\n\n    /**\n     * Apply custom user formatter upon date.\n     * @param formatter custom formatter function.\n     * @param date passed date\n     */\n    private _customFormatChecker(formatter: (_: Date) => string, date: Date) {\n        return this.formatter ? this.formatter(date) : this._setLocaleToDate(date);\n    }\n\n    /*\n    * Transforms the date according to the specified format when `IgxDatePickerComponent` is in edit mode\n    * using @angular/common formatDate method: https://angular.io/api/common/formatDate\n    * @param  value: string | number | Date\n    * @returns formatted string\n    */\n    private _getDisplayDate(value: any): string {\n        if (this.format && !this.formatter) {\n            const locale = this.locale || this.defaultLocale;\n            return formatDate(value, this.format, locale);\n        } else {\n            return this._customFormatChecker(this.formatter, value);\n        }\n    }\n\n    private _getEditorDate(value: any) {\n        const locale = this.locale || this.defaultLocale;\n        const changedValue = (value) ? formatDate(value, this.mask, locale) : '';\n        return DatePickerUtil.addPromptCharsEditMode(this.dateFormatParts, this.value, changedValue);\n    }\n\n    private _onTouchedCallback: () => void = () => { };\n\n    private _onChangeCallback: (_: Date) => void = () => { };\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDatePickerComponent, IgxCalendarContainerComponent,\n        IgxDatePickerTemplateDirective, DatePickerDisplayValuePipe, DatePickerInputValuePipe],\n    exports: [IgxDatePickerComponent, IgxDatePickerTemplateDirective, DatePickerDisplayValuePipe, DatePickerInputValuePipe],\n    imports: [CommonModule, IgxIconModule, IgxInputGroupModule, IgxCalendarModule, IgxButtonModule, IgxRippleModule, IgxMaskModule],\n    entryComponents: [IgxCalendarContainerComponent]\n})\nexport class IgxDatePickerModule { }\n","import { DOCUMENT } from '@angular/common';\nimport { Directive, HostBinding } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-title,[igxDialogTitle]'\n})\nexport class IgxDialogTitleDirective {\n\n    @HostBinding('class.igx-dialog__window-title')\n    public defaultStyle = true;\n }\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-actions,[igxDialogActions]'\n})\nexport class IgxDialogActionsDirective {\n\n    @HostBinding('class.igx-dialog__window-actions')\n    public defaultClass = true;\n }\n","import { useAnimation } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    ViewChild,\n    AfterContentInit\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxDialogActionsDirective, IgxDialogTitleDirective } from './dialog.directives';\nimport { IgxToggleModule, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { OverlaySettings, GlobalPositionStrategy, NoOpScrollStrategy, PositionSettings } from '../services';\nimport { slideInBottom, slideOutTop } from '../animations/slide/index';\nimport { IgxFocusModule } from '../directives/focus/focus.directive';\n\nlet DIALOG_ID = 0;\n/**\n * **Ignite UI for Angular Dialog Window** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/dialog.html)\n *\n * The Ignite UI Dialog Window presents a dialog window to the user which can simply display messages or display\n * more complicated visuals such as a user sign-in form.  It also provides a right and left button\n * which can be used for custom actions.\n *\n * Example:\n * ```html\n * <button (click)=\"form.open()\">Show Dialog</button>\n * <igx-dialog #form title=\"Sign In\" rightButtonLabel=\"OK\">\n *   <div>\n *     <input type=\"text\" igxInput/>\n *     <label igxLabel>Username</label>\n *   </div>\n *   <div>\n *     <input type=\"password\" igxInput/>\n *     <label igxLabel>Password</label>\n *   </div>\n * </igx-dialog>\n * ```\n */\n@Component({\n    selector: 'igx-dialog',\n    templateUrl: 'dialog-content.component.html'\n})\nexport class IgxDialogComponent implements IToggleView, OnInit, OnDestroy, AfterContentInit {\n    private static NEXT_ID = 1;\n    private static readonly DIALOG_CLASS = 'igx-dialog';\n\n    @ViewChild(IgxToggleDirective)\n    public toggleRef: IgxToggleDirective;\n\n    /**\n    * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n    *```html\n    *<igx-dialog [id]=\"'igx-dialog-56'\" #alert title=\"Notification\" leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n    *```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-dialog-${DIALOG_ID++}`;\n\n    @Input()\n    get isModal() {\n        return this._isModal;\n    }\n\n    set isModal(val: boolean) {\n        this._overlayDefaultSettings.modal = val;\n        this._isModal = val;\n    }\n\n    /**\n    * An @Input property controlling the `title` of the dialog.\n    *```html\n    *<igx-dialog title=\"Notification\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n    *```\n    */\n    @Input()\n    public title = '';\n\n    /**\n     *  An @Input property controlling the `message` of the dialog.\n     *```html\n     *<igx-dialog message=\"Your email was sent!\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public message = '';\n\n    /**\n     * An @Input property to set the `label` of the left button of the dialog.\n     *```html\n     *<igx-dialog leftButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonLabel = '';\n\n    /**\n     * An @Input property to set the left button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     *```html\n     *<igx-dialog leftButtonType=\"raised\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonType = 'flat';\n    /**\n     * An @Input property to set the left button color. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonColor=\"yellow\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonColor = '';\n\n    /**\n     * An @Input property to set the left button `background-color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonBackgroundColor=\"black\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the left button `ripple`. The `ripple` animates a click/tap to a component as a series of fading waves.\n     * The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonRipple=\"green\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonRipple = '';\n\n    /**\n     * An @Input property to set the `label` of the right button of the dialog.\n     *```html\n     *<igx-dialog rightButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonLabel = '';\n\n    /**\n     * An @Input property to set the right button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     *```html\n     *<igx-dialog rightButtonType=\"fab\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonType = 'flat';\n\n    /**\n     * An @Input property to set the right button `color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog rightButtonColor=\"yellow\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonColor = '';\n\n    /**\n     * An @Input property to set the right button `background-color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog rightButtonBackgroundColor=\"black\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the right button `ripple`.\n     *```html\n     *<igx-dialog rightButtonRipple=\"green\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonRipple = '';\n\n    /**\n     * An @Input property that allows you to enable the \"close on click outside the dialog\". By default it's disabled.\n     *```html\n     *<igx-dialog closeOnOutsideSelect=\"true\" leftButtonLabel=\"Cancel\" (onLeftButtonSelect)=\"dialog.close()\"\n     *rightButtonLabel=\"OK\" rightButtonRipple=\"#4CAF50\" (onRightButtonSelect)=\"onDialogOKSelected($event)\">\n     *</igx-dialog>\n     *```\n     */\n    @Input()\n    get closeOnOutsideSelect() {\n        return this._closeOnOutsideSelect;\n    }\n\n    set closeOnOutsideSelect(val: boolean) {\n        this._overlayDefaultSettings.closeOnOutsideClick = val;\n        this._closeOnOutsideSelect = val;\n    }\n\n    /**\n     * An event that is emitted when the dialog is opened.\n     *```html\n     *<igx-dialog (onOpen)=\"onDialogOpenHandler($event)\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onOpen = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the dialog is closed.\n     *```html\n     *<igx-dialog (onClose)=\"onDialogCloseHandler($event)\" title=\"Confirmation\" leftButtonLabel=\"Cancel\" rightButtonLabel=\"OK\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onClose = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the left button is clicked.\n     *```html\n     *<igx-dialog (onLeftButtonSelect)=\"onDialogOKSelected($event)\" #dialog leftButtonLabel=\"OK\" rightButtonLabel=\"Cancel\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onLeftButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the right button is clicked.\n     * ```html\n     *<igx-dialog (onRightButtonSelect)=\"onDialogOKSelected($event)\"\n     *#dialog title=\"Confirmation\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\"\n     *rightButtonRipple=\"#4CAF50\" closeOnOutsideSelect=\"true\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onRightButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    private _animaitonSettings: PositionSettings = {\n        openAnimation: useAnimation(slideInBottom, { params: { fromPosition: 'translateY(100%)' } }),\n        closeAnimation: useAnimation(slideOutTop, { params: { toPosition: 'translateY(-100%)' } })\n    };\n\n    private _overlayDefaultSettings: OverlaySettings;\n    private _closeOnOutsideSelect = false;\n    private _isModal = true;\n    protected destroy$ = new Subject<boolean>();\n\n    /**\n     * @hidden\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * The default `tabindex` attribute for the component\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    private _titleId: string;\n\n    /**\n     * Returns the value of state. Possible state values are \"open\" or \"close\".\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogState = this.dialog.state;\n     *}\n     *```\n     */\n    get state(): string {\n        return this.isOpen ? 'open' : 'close';\n    }\n\n    /**\n     * Returns whether the dialog is visible to the end user.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogOpen = this.dialog.isOpen;\n     *}\n     * ```\n     */\n    @Input()\n    get isOpen() {\n        return !this.toggleRef.collapsed;\n    }\n\n    @HostBinding('class.igx-dialog--hidden')\n    get isCollapsed() {\n        return this.toggleRef.collapsed;\n    }\n\n    /**\n     *Returns the value of the role of the dialog. The valid values are `dialog`, `alertdialog`, `alert`.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogRole = this.dialog.role;\n     *}\n     * ```\n     */\n    @Input()\n    get role() {\n        if (this.leftButtonLabel !== '' && this.rightButtonLabel !== '') {\n            return 'dialog';\n        } else if (\n            this.leftButtonLabel !== '' ||\n            this.rightButtonLabel !== ''\n        ) {\n            return 'alertdialog';\n        } else {\n            return 'alert';\n        }\n    }\n\n    /**\n     *Returns the value of the title id.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogTitle = this.dialog.titleId;\n     *}\n     * ```\n     */\n    @Input()\n    get titleId() {\n        return this._titleId;\n    }\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private navService: IgxNavigationService\n    ) {\n        this._titleId = IgxDialogComponent.NEXT_ID++ + '_title';\n\n        this._overlayDefaultSettings = {\n            positionStrategy: new GlobalPositionStrategy(this._animaitonSettings),\n            scrollStrategy: new NoOpScrollStrategy(),\n            modal: this.isModal,\n            closeOnOutsideClick: this.closeOnOutsideSelect\n        };\n    }\n\n    ngAfterContentInit() {\n        this.toggleRef.onClosing.pipe(takeUntil(this.destroy$)).subscribe(() => this.emitCloseFromDialog());\n    }\n\n    private emitCloseFromDialog() {\n        this.onClose.emit({ dialog: this, event: null });\n    }\n\n    /**\n     * A method that opens the dialog.\n     * @memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.open() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public open(overlaySettings: OverlaySettings = this._overlayDefaultSettings) {\n        this.toggleRef.open(overlaySettings);\n        this.onOpen.emit({ dialog: this, event: null });\n        if (!this.leftButtonLabel && !this.rightButtonLabel) {\n            this.toggleRef.element.focus();\n        }\n    }\n\n    /**\n     *A method that that closes the dialog.\n     *@memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.close() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public close() {\n        // `onClose` will emit from `toggleRef.onClosing` subscription\n        this.toggleRef.close();\n    }\n\n\n    /**\n     * A method that opens/closes the dialog.\n     *@memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.toggle() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public toggle() {\n        this.isOpen ? this.close() : this.open();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDialogSelected(event) {\n        event.stopPropagation();\n        if (\n            this.isOpen &&\n            this.closeOnOutsideSelect &&\n            event.target.classList.contains(IgxDialogComponent.DIALOG_CLASS)\n        ) {\n            this.close();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalLeftButtonSelect(event) {\n        this.onLeftButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalRightButtonSelect(event) {\n        this.onRightButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navService && this.id) {\n            this.navService.add(this.id, this);\n        }\n    }\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navService && this.id) {\n            this.navService.remove(this.id);\n        }\n\n    }\n\n}\n\nexport interface IDialogEventArgs {\n    dialog: IgxDialogComponent;\n    event: Event;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    exports: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    imports: [CommonModule, IgxToggleModule, IgxButtonModule, IgxRippleModule, IgxFocusModule]\n})\nexport class IgxDialogModule { }\n","import { Injectable, EventEmitter, NgZone } from '@angular/core';\nimport { IGridEditEventArgs } from '../grids/grid-base.component';\n\n\nexport interface GridSelectionRange {\n    rowStart: number;\n    rowEnd: number;\n    columnStart: string | number;\n    columnEnd: string | number;\n}\n\nexport interface ISelectionNode {\n    row: number;\n    column: number;\n}\n\ninterface ISelectionKeyboardState {\n    node: null | ISelectionNode;\n    shift: boolean;\n    range: GridSelectionRange;\n    active: boolean;\n}\n\ninterface ISelectionPointerState extends ISelectionKeyboardState {\n    ctrl: boolean;\n    primaryButton: boolean;\n}\n\ntype SelectionState = ISelectionKeyboardState | ISelectionPointerState;\n\n\n// TODO: Refactor - export in a separate file\n\nexport class IgxRow {\n    transactionState: any;\n    state: any;\n    newData: any;\n\n    constructor(public id: any, public index: number, public data: any) {}\n\n    createEditEventArgs(): IGridEditEventArgs {\n        return {\n            rowID: this.id,\n            oldValue: { ... this.data },\n            newValue: this.newData,\n            cancel: false\n        };\n    }\n}\n\nexport class IgxCell {\n\n    primaryKey: any;\n    state: any;\n\n    constructor(\n        public id,\n        public rowIndex: number,\n        public column,\n        public value: any,\n        public editValue: any,\n        public rowData: any) {}\n\n    castToNumber(value: any): any {\n        if (this.column.dataType === 'number' && !this.column.inlineEditorTemplate) {\n            const v = parseFloat(value);\n            return !isNaN(v) && isFinite(v) ? v : 0;\n        }\n        return value;\n    }\n\n    createEditEventArgs(): IGridEditEventArgs {\n        return {\n            rowID: this.id.rowID,\n            cellID: this.id,\n            oldValue: this.value,\n            newValue: this.editValue,\n            cancel: false\n        };\n    }\n}\n\n@Injectable()\nexport class IgxGridCRUDService {\n\n    grid;\n    cell: IgxCell | null = null;\n    row: IgxRow | null = null;\n\n    createCell(cell): IgxCell {\n        return new IgxCell(cell.cellID, cell.rowIndex, cell.column, cell.value, cell.value, cell.row.rowData);\n    }\n\n    createRow(cell: IgxCell): IgxRow {\n        return new IgxRow(cell.id.rowID, cell.rowIndex, cell.rowData);\n    }\n\n    sameRow(rowID): boolean {\n        return this.row && this.row.id === rowID;\n    }\n\n    sameCell(cell: IgxCell): boolean {\n        return (this.cell.id.rowID === cell.id.rowID &&\n            this.cell.id.columnID === cell.id.columnID);\n    }\n\n    get inEditMode(): boolean {\n        return !!this.cell;\n    }\n\n    get rowEditing(): boolean {\n        return this.grid.rowEditable;\n    }\n\n    get primaryKey(): any {\n        return this.grid.primaryKey;\n    }\n\n    beginRowEdit() {\n        this.row = this.createRow(this.cell);\n        const args = {\n            rowID: this.row.id,\n            oldValue: this.row.data,\n            cancel: false\n        };\n        this.grid.onRowEditEnter.emit(args);\n        if (args.cancel) {\n            this.endRowEdit();\n            return;\n        }\n        this.row.transactionState = this.grid.transactions.getAggregatedValue(this.row.id, true);\n        this.grid.transactions.startPending();\n        this.grid.openRowOverlay(this.row.id);\n    }\n\n\n    endRowEdit() {\n        this.row = null;\n    }\n\n    begin(cell): void {\n        this.cell = this.createCell(cell);\n        this.cell.primaryKey = this.primaryKey;\n        const args = {\n            cellID: this.cell.id,\n            rowID: this.cell.id.rowID,\n            oldValue: this.cell.value,\n            cancel: false\n        };\n\n        this.grid.onCellEditEnter.emit(args);\n\n        if (args.cancel) {\n            this.end();\n            return;\n        }\n\n\n        if (this.rowEditing) {\n            if (!this.row) {\n                this.beginRowEdit();\n                return;\n            }\n\n            if (this.row && !this.sameRow(this.cell.id.rowID)) {\n                this.grid.endEdit(true);\n                this.cell = this.createCell(cell);\n                this.beginRowEdit();\n                return;\n            }\n        }\n    }\n\n    end(): void {\n        this.cell = null;\n    }\n\n\n    isInEditMode(rowIndex: number, columnIndex: number): boolean {\n        if (!this.cell) {\n            return false;\n        }\n        return this.cell.column.index === columnIndex && this.cell.rowIndex === rowIndex;\n    }\n}\n\n\n@Injectable()\nexport class IgxGridSelectionService {\n\n    dragMode = false;\n    activeElement: ISelectionNode | null;\n    keyboardState = {} as ISelectionKeyboardState;\n    pointerState = {} as ISelectionPointerState;\n\n\n    selection = new Map<number, Set<number>>();\n    temp = new Map<number, Set<number>>();\n    _ranges: Set<string> = new Set<string>();\n    _selectionRange: Range;\n\n\n    /**\n     * Returns the current selected ranges in the grid from both\n     * keyboard and pointer interactions\n     */\n    get ranges(): GridSelectionRange[] {\n\n        // The last action was keyboard + shift selection -> add it\n        this.addKeyboardRange();\n\n        const ranges = Array.from(this._ranges).map(range => JSON.parse(range));\n\n        // No ranges but we have a focused cell -> add it\n        if (!ranges.length && this.activeElement) {\n            ranges.push(this.generateRange(this.activeElement));\n        }\n\n        return ranges;\n    }\n\n    get primaryButton(): boolean {\n        return this.pointerState.primaryButton;\n    }\n\n    set primaryButton(value: boolean) {\n        this.pointerState.primaryButton = value;\n    }\n\n    constructor(private zone: NgZone) {\n        this.initPointerState();\n        this.initKeyboardState();\n    }\n\n    /**\n     * Resets the keyboard state\n     */\n    initKeyboardState(): void {\n        this.keyboardState.node = null;\n        this.keyboardState.shift = false;\n        this.keyboardState.range = null;\n        this.keyboardState.active = false;\n    }\n\n    /**\n     * Resets the pointer state\n     */\n    initPointerState(): void {\n        this.pointerState.node = null;\n        this.pointerState.ctrl = false;\n        this.pointerState.shift = false;\n        this.pointerState.range = null;\n        this.pointerState.primaryButton = true;\n    }\n\n    /**\n     * Adds a single node.\n     * Single clicks | Ctrl + single clicks on cells is the usual case.\n     */\n    add(node: ISelectionNode): void {\n        this.selection.has(node.row) ? this.selection.get(node.row).add(node.column) :\n            this.selection.set(node.row, new Set<number>()).get(node.row).add(node.column);\n\n        this._ranges.add(JSON.stringify(this.generateRange(node)));\n    }\n\n    /**\n     * Adds the active keyboard range selection (if any) to the `ranges` meta.\n     */\n    addKeyboardRange(): void {\n        if (this.keyboardState.range) {\n            this._ranges.add(JSON.stringify(this.keyboardState.range));\n        }\n    }\n\n    remove(node: ISelectionNode): void {\n        if (this.selection.has(node.row)) {\n            this.selection.get(node.row).delete(node.column);\n        }\n        if (this.isActiveNode(node)) {\n            this.activeElement = null;\n        }\n        this._ranges.delete(JSON.stringify(this.generateRange(node)));\n    }\n\n    isInMap(node: ISelectionNode): boolean {\n        return (this.selection.has(node.row) && this.selection.get(node.row).has(node.column)) ||\n            (this.temp.has(node.row) && this.temp.get(node.row).has(node.column));\n    }\n\n    selected(node: ISelectionNode): boolean {\n        return this.isActiveNode(node) || this.isInMap(node);\n    }\n\n    isActiveNode(node: ISelectionNode): boolean {\n        if (this.activeElement) {\n            return this.activeElement.column === node.column && this.activeElement.row === node.row;\n        }\n        return false;\n    }\n\n    addRangeMeta(node: ISelectionNode, state?: SelectionState): void {\n        this._ranges.add(JSON.stringify(this.generateRange(node, state)));\n    }\n\n    removeRangeMeta(node: ISelectionNode, state?: SelectionState): void {\n        this._ranges.delete(JSON.stringify(this.generateRange(node, state)));\n    }\n\n    /**\n     * Generates a new selection range from the given `node`.\n     * If `state` is passed instead it will generate the range based on the passed `node`\n     * and the start node of the `state`.\n     */\n    generateRange(node: ISelectionNode, state?: SelectionState): GridSelectionRange {\n        if (!state) {\n            return {\n                rowStart: node.row,\n                rowEnd: node.row,\n                columnStart: node.column,\n                columnEnd: node.column\n            };\n        }\n\n        const { row, column } = state.node;\n        const rowStart = Math.min(node.row, row);\n        const rowEnd = Math.max(node.row, row);\n        const columnStart = Math.min(node.column, column);\n        const columnEnd = Math.max(node.column, column);\n\n        return { rowStart, rowEnd, columnStart, columnEnd };\n    }\n\n    /**\n     *\n     */\n    keyboardStateOnKeydown(node: ISelectionNode, shift: boolean, shiftTab: boolean): void {\n        this.keyboardState.active = true;\n        this.initPointerState();\n        this.keyboardState.shift = shift && !shiftTab;\n\n        // Kb navigation with shift and no previous node.\n        // Clear the current selection init the start node.\n        if (this.keyboardState.shift && !this.keyboardState.node) {\n            this.clear();\n            this.keyboardState.node = node;\n        }\n    }\n\n    keyboardStateOnFocus(node: ISelectionNode, emitter: EventEmitter<GridSelectionRange>): void {\n        const kbState = this.keyboardState;\n\n        // Focus triggered by keyboard navigation\n        if (kbState.active) {\n            // Start generating a range if shift is hold\n            if (kbState.shift) {\n                this.dragSelect(node, kbState);\n                kbState.range = this.generateRange(node, kbState);\n                emitter.emit(this.generateRange(node, kbState));\n                return;\n            }\n\n            this.initKeyboardState();\n            this.clear();\n            this.add(node);\n        }\n    }\n\n    pointerDown(node: ISelectionNode, shift: boolean, ctrl: boolean): void {\n\n        this.addKeyboardRange();\n        this.initKeyboardState();\n        this.pointerState.ctrl = ctrl;\n        this.pointerState.shift = shift;\n\n        // No ctrl key pressed - no multiple selection\n        if (!ctrl) {\n            this.clear();\n        }\n\n        if (shift) {\n            // No previously 'clicked' node. Use the last active node.\n            if (!this.pointerState.node) {\n                this.pointerState.node = this.activeElement || node;\n            }\n            this.pointerDownShiftKey(node);\n            this.clearTextSelection();\n            return;\n        }\n\n        this.removeRangeMeta(node);\n        this.pointerState.node = node;\n    }\n\n    pointerDownShiftKey(node: ISelectionNode): void {\n        this.clear();\n        this.selectRange(node, this.pointerState);\n    }\n\n    mergeMap(target: Map<number, Set<number>>, source: Map<number, Set<number>>): void {\n        const iterator = source.entries();\n        let pair = iterator.next();\n        let key: number;\n        let value: Set<number>;\n\n        while (!pair.done) {\n            [key, value] = pair.value;\n            if (target.has(key)) {\n                const newValue = target.get(key);\n                value.forEach(record => newValue.add(record));\n                target.set(key, newValue);\n            } else {\n                target.set(key, value);\n            }\n            pair = iterator.next();\n        }\n    }\n\n    pointerEnter(node: ISelectionNode, event: PointerEvent): boolean {\n        // https://www.w3.org/TR/pointerevents/#the-button-property\n        this.dragMode = event.buttons === 1 && event.button === -1;\n        if (!this.dragMode) {\n            return false;\n        }\n        this.clearTextSelection();\n\n        // If the users triggers a drag-like event by first clicking outside the grid cells\n        // and then enters in the grid body we may not have a initial pointer starting node.\n        // Assume the first pointerenter node is where we start.\n        if (!this.pointerState.node) {\n            this.pointerState.node = node;\n        }\n\n        this.pointerState.ctrl ? this.selectRange(node, this.pointerState, this.temp) :\n            this.dragSelect(node, this.pointerState);\n        return true;\n    }\n\n    pointerUp(node: ISelectionNode, emitter: EventEmitter<GridSelectionRange>): boolean {\n        if (this.dragMode) {\n            this.restoreTextSelection();\n            this.addRangeMeta(node, this.pointerState);\n            this.mergeMap(this.selection, this.temp);\n            this.zone.runTask(() => emitter.emit(this.generateRange(node, this.pointerState)));\n            this.temp.clear();\n            this.dragMode = false;\n            return true;\n        }\n\n        if (this.pointerState.shift) {\n            this.clearTextSelection();\n            this.restoreTextSelection();\n            this.addRangeMeta(node, this.pointerState);\n            emitter.emit(this.generateRange(node, this.pointerState));\n            return true;\n        }\n\n        this.add(node);\n        return false;\n    }\n\n    selectRange(node: ISelectionNode, state: SelectionState, collection: Map<number, Set<number>> = this.selection): void {\n        if (collection === this.temp) {\n            collection.clear();\n        }\n        const { rowStart, rowEnd, columnStart, columnEnd } = this.generateRange(node, state);\n        for (let i = rowStart; i <= rowEnd; i++) {\n            for (let j = columnStart as number; j <= columnEnd; j++) {\n                collection.has(i) ? collection.get(i).add(j) :\n                    collection.set(i, new Set<number>()).get(i).add(j);\n            }\n        }\n    }\n\n    dragSelect(node: ISelectionNode, state: SelectionState): void {\n        if (!this.pointerState.ctrl) {\n            this.selection.clear();\n        }\n        this.selectRange(node, state);\n    }\n\n    clear(): void {\n        this.selection.clear();\n        this.temp.clear();\n        this._ranges.clear();\n    }\n\n    clearTextSelection(): void {\n        const selection = window.getSelection();\n        if (selection.rangeCount) {\n            this._selectionRange = selection.getRangeAt(0);\n            this._selectionRange.collapse(true);\n            selection.removeAllRanges();\n        }\n    }\n\n    restoreTextSelection(): void {\n        const selection = window.getSelection();\n        if (!selection.rangeCount) {\n            selection.addRange(this._selectionRange || document.createRange());\n        }\n    }\n\n    _moveSelectionChrome(node: Node) {\n        const selection = window.getSelection();\n        selection.removeAllRanges();\n        const range = new Range();\n        range.selectNode(node);\n        range.collapse(true);\n        selection.addRange(range);\n    }\n}\n","import { Inject, Injectable, NgZone } from '@angular/core';\nimport { DOCUMENT, ÉµgetDOM as getDOM } from '@angular/platform-browser';\n\nconst EVENT_SUFFIX = 'precise';\n\n/**\n * Touch gestures manager based on Hammer.js\n * Use with caution, this will track references for single manager per element. Very TBD. Much TODO.\n * @hidden\n */\n@Injectable()\nexport class HammerGesturesManager {\n    /**\n     * Event option defaults for each recognizer, see http://hammerjs.github.io/api/ for API listing.\n     */\n    protected hammerOptions: HammerOptions = {\n        // D.P. #447 Force TouchInput due to PointerEventInput bug (https://github.com/hammerjs/hammer.js/issues/1065)\n        // see https://github.com/IgniteUI/igniteui-angular/issues/447#issuecomment-324601803\n        inputClass: Hammer.TouchInput,\n        recognizers: [\n            [ Hammer.Pan, { threshold: 0 } ],\n            [ Hammer.Swipe, {\n                direction: Hammer.DIRECTION_HORIZONTAL\n            }],\n            [Hammer.Tap],\n            [Hammer.Tap, { event: 'doubletap', taps: 2 }, ['tap']]\n        ]\n    };\n\n    private _hammerManagers: Array<{ element: EventTarget, manager: HammerManager; }> = [];\n\n    constructor(private _zone: NgZone, @Inject(DOCUMENT) private doc: any) {\n    }\n\n    public supports(eventName: string): boolean {\n        return eventName.toLowerCase().endsWith('.' + EVENT_SUFFIX);\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     */\n    public addEventListener(element: HTMLElement,\n                            eventName: string,\n                            eventHandler: (eventObj) => void,\n                            options: HammerOptions = null): () => void {\n\n        // Creating the manager bind events, must be done outside of angular\n        return this._zone.runOutsideAngular(() => {\n            let mc: HammerManager = this.getManagerForElement(element);\n            if (mc === null) {\n                // new Hammer is a shortcut for Manager with defaults\n                mc = new Hammer(element, Object.assign(this.hammerOptions, options));\n                this.addManagerForElement(element, mc);\n            }\n            const handler = (eventObj) => { this._zone.run(() => { eventHandler(eventObj); }); };\n            mc.on(eventName, handler);\n            return () => { mc.off(eventName, handler); };\n        });\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     *\n     * @param target Can be one of either window, body or document(fallback default).\n     */\n    public addGlobalEventListener(target: string, eventName: string, eventHandler: (eventObj) => void): () => void {\n        const element = this.getGlobalEventTarget(target);\n\n        // Creating the manager bind events, must be done outside of angular\n        return this.addEventListener(element as HTMLElement, eventName, eventHandler);\n    }\n\n    /**\n     * Exposes [Dom]Adapter.getGlobalEventTarget to get global event targets.\n     * Supported: window, document, body. Defaults to document for invalid args.\n     * @param target Target name\n     */\n    public getGlobalEventTarget(target: string): EventTarget {\n        return getDOM().getGlobalEventTarget(this.doc, target);\n    }\n\n    /**\n     * Set HammerManager options.\n     *\n     * @param element The DOM element used to create the manager on.\n     *\n     * ### Example\n     *\n     * ```ts\n     * manager.setManagerOption(myElem, \"pan\", { pointers: 1 });\n     * ```\n     */\n    public setManagerOption(element: EventTarget, event: string, options: any) {\n        const manager = this.getManagerForElement(element);\n        manager.get(event).set(options);\n    }\n\n    /**\n     * Add an element and manager map to the internal collection.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public addManagerForElement(element: EventTarget, manager: HammerManager) {\n        this._hammerManagers.push({element, manager});\n    }\n\n    /**\n     * Get HammerManager for the element or null\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public getManagerForElement(element: EventTarget): HammerManager {\n        const result =  this._hammerManagers.filter((value, index, array) => {\n            return value.element === element;\n        });\n        return result.length ? result[0].manager : null;\n    }\n\n    /**\n     * Destroys the HammerManager for the element, removing event listeners in the process.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public removeManagerForElement(element: HTMLElement) {\n        let index: number = null;\n        for (let i = 0; i < this._hammerManagers.length; i++) {\n            if (element === this._hammerManagers[i].element) {\n                index = i;\n                break;\n            }\n        }\n        if (index !== null) {\n            const item = this._hammerManagers.splice(index, 1)[0];\n            // destroy also\n            item.manager.destroy();\n        }\n    }\n\n    /** Destroys all internally tracked HammerManagers, removing event listeners in the process. */\n    public destroy() {\n        for (const item of this._hammerManagers) {\n            item.manager.destroy();\n        }\n        this._hammerManagers = [];\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    TemplateRef,\n    ViewChild,\n    NgZone,\n    OnInit,\n    OnDestroy,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxColumnComponent } from './column.component';\nimport { getNodeSizeViaRange, ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS, SUPPORTED_KEYS, NAVIGATION_KEYS, isIE, isLeftClick } from '../core/utils';\nimport { State } from '../services/index';\nimport { IgxGridBaseComponent, IGridEditEventArgs, IGridDataBindable } from './grid-base.component';\nimport { IgxGridSelectionService, ISelectionNode, IgxGridCRUDService } from '../core/grid-selection';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { HammerGesturesManager } from '../core/touch';\n\n/**\n * Providing reference to `IgxGridCellComponent`:\n * ```typescript\n * @ViewChild('grid', { read: IgxGridComponent })\n *  public grid: IgxGridComponent;\n * ```\n * ```typescript\n *  let column = this.grid.columnList.first;\n * ```\n * ```typescript\n *  let cell = column.cells[0];\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-grid-cell',\n    templateUrl: './cell.component.html',\n    providers: [HammerGesturesManager]\n})\nexport class IgxGridCellComponent implements OnInit, OnChanges, OnDestroy {\n\n    /**\n     * Gets the column of the cell.\n     * ```typescript\n     *  let cellColumn = this.cell.column;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public column: IgxColumnComponent;\n\n    /**\n     * Gets the row of the cell.\n     * ```typescript\n     * let cellRow = this.cell.row;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public row: any;\n\n    /**\n     * Gets the data of the row of the cell.\n     * ```typescript\n     * let rowData = this.cell.rowData;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public rowData: any;\n\n    /**\n     * Sets/gets the template of the cell.\n     * ```html\n     * <ng-template #cellTemplate igxCell let-value>\n     *   <div style=\"font-style: oblique; color:blueviolet; background:red\">\n     *       <span>{{value}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild('cellTemplate',{read: TemplateRef})\n     * cellTemplate: TemplateRef<any>;\n     * ```\n     * ```typescript\n     * this.cell.cellTemplate = this.cellTemplate;\n     * ```\n     * ```typescript\n     * let template =  this.cell.cellTemplate;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public cellTemplate: TemplateRef<any>;\n\n    /**\n     * Sets/gets the cell value.\n     * ```typescript\n     * this.cell.value = \"Cell Value\";\n     * ```\n     * ```typescript\n     * let cellValue = this.cell.value;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * Sets/gets the highlight class of the cell.\n     * Default value is `\"igx-highlight\"`.\n     * ```typescript\n     * let highlightClass = this.cell.highlightClass;\n     * ```\n     * ```typescript\n     * this.cell.highlightClass = 'igx-cell-highlight';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightClass = 'igx-highlight';\n\n    /**\n     * Sets/gets the active highlight class class of the cell.\n     * Default value is `\"igx-highlight__active\"`.\n     * ```typescript\n     * let activeHighlightClass = this.cell.activeHighlightClass;\n     * ```\n     * ```typescript\n     * this.cell.activeHighlightClass = 'igx-cell-highlight_active';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public activeHighlightClass = 'igx-highlight__active';\n\n    /**\n     * Gets the cell formatter.\n     * ```typescript\n     * let cellForamatter = this.cell.formatter;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    formatter: (value: any) => any;\n\n    /**\n     * Gets the cell template context object.\n     * ```typescript\n     *  let context = this.cell.context();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get context(): any {\n        return {\n            $implicit: this.value,\n            cell: this\n        };\n    }\n\n    /**\n     * Gets the cell template.\n     * ```typescript\n     * let template = this.cell.template;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.editMode) {\n            const inlineEditorTemplate = this.column.inlineEditorTemplate;\n            return inlineEditorTemplate ? inlineEditorTemplate : this.inlineEditorTemplate;\n        }\n        if (this.cellTemplate) {\n            return this.cellTemplate;\n        }\n        return this.defaultCellTemplate;\n    }\n\n    /**\n     * Gets the `id` of the grid in which the cell is stored.\n     * ```typescript\n     * let gridId = this.cell.gridID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get gridID(): any {\n        return this.row.gridID;\n    }\n\n    /**\n     * Gets the grid of the cell.\n     * ```typescript\n     * let grid = this.cell.grid;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets the `index` of the row where the cell is stored.\n     * ```typescript\n     * let rowIndex = this.cell.rowIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-rowIndex')\n    get rowIndex(): number {\n        return this.row.index;\n    }\n\n    /**\n     * Gets the `index` of the cell column.\n     * ```typescript\n     * let columnIndex = this.cell.columnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get columnIndex(): number {\n        return this.column.index;\n    }\n\n    /**\n     * Gets the visible `index` of the in which the cell is stored.\n     * ```typescript\n     * let visibleColumnIndex = this.cell.visibleColumnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-visibleIndex')\n    @Input()\n    visibleColumnIndex = -1;\n\n    /**\n     * Gets the ID of the cell.\n     * ```typescript\n     * let cellID = this.cell.cellID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public get cellID() {\n        const primaryKey = this.grid.primaryKey;\n        const rowID = primaryKey ? this.rowData[primaryKey] : this.rowData;\n        return { rowID, columnID: this.columnIndex, rowIndex: this.rowIndex };\n    }\n\n    /**\n     * Returns a reference to the nativeElement of the cell.\n     * ```typescript\n     * let cellNativeElement = this.cell.nativeElement;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get nativeElement(): HTMLElement {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @deprecated\n     * Use `cell.editMode` as a getter and\n     * `cell.setEditMode(true | false)` to start/exit edit mode.\n     *\n     * Gets/sets whether the cell is in edit mode.\n     * ```typescript\n     * let isCellInEditMode = this.cell.inEditMode;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @DeprecateProperty(`'inEditMode' is deprecated\\nUse 'editMode' to get the current state and 'setEditMode(boolean)' as a setter`)\n    get inEditMode(): boolean {\n        return this.editMode;\n    }\n\n    set inEditMode(value: boolean) {\n        this.setEditMode(value);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    @HostBinding('class.igx-grid__td--pinned-last')\n    lastPinned = false;\n\n    /**\n     * Returns whether the cell is in edit mode.\n     */\n    @Input()\n    @HostBinding('class.igx-grid__td--editing')\n    editMode = false;\n\n    /**\n     * Sets/get the `tabindex` property of the cell.\n     * Default value is `0`.\n     * ```typescript\n     * this.cell.tabindex = 1;\n     * ```\n     * ```typescript\n     * let cellTabIndex = this.cell.tabindex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Sets/get the `role` property of the cell.\n     * Default value is `\"gridcell\"`.\n     * ```typescript\n     * this.cell.role = 'grid-cell';\n     * ```\n     * ```typescript\n     * let cellRole = this.cell.role;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'gridcell';\n\n    /**\n     * Gets whether the cell is editable.\n     * ```typescript\n     * let isCellReadonly = this.cell.readonly;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-readonly')\n    get readonly(): boolean {\n        return !this.column.editable;\n    }\n\n    /**\n     * Returns a string containing the grid `id` and the column `field` concatenated by \"_\".\n     * ```typescript\n     * let describedBy = this.cell.describedBy;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-describedby')\n    get describedby(): string {\n        return `${this.row.gridID}_${this.column.field}`;\n    }\n\n    /**\n     * Gets the width of the cell.\n     * ```typescript\n     * let cellWidth = this.cell.width;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('style.min-width')\n    @HostBinding('style.max-width')\n    @HostBinding('style.flex-basis')\n    @Input()\n    width = '';\n\n    /**\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isSelected = this.cell.selected;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-selected')\n    @HostBinding('class.igx-grid__td--selected')\n    get selected() {\n        return this.isCellSelected();\n    }\n\n    /**\n     * Selects/deselects the cell.\n     * ```typescript\n     * this.cell.selected = true.\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    set selected(val: boolean) {\n        const node = this.selectionNode;\n        val ? this.selectionService.add(node) : this.selectionService.remove(node);\n    }\n\n    @HostBinding('class.igx-grid__td--edited')\n    get dirty() {\n        if (this.grid.rowEditable) {\n            const rowCurrentState = this.grid.transactions.getAggregatedValue(this.row.rowID, false);\n            if (rowCurrentState) {\n                return rowCurrentState[this.column.field] !== undefined && rowCurrentState[this.column.field] !== null;\n            }\n        } else {\n            const rowTransaction: State = this.grid.transactions.getState(this.row.rowID);\n            return rowTransaction && rowTransaction.value && rowTransaction.value[this.column.field];\n        }\n\n        return false;\n    }\n\n    /**\n     * Sets the current edit value while a cell is in edit mode.\n     * Only for cell editing mode.\n     * ```typescript\n     * this.cell.editValue = value;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public set editValue(value) {\n        if (this.crudService.inEditMode) {\n            this.crudService.cell.editValue = value;\n        }\n    }\n\n    /**\n     * Gets the current edit value while a cell is in edit mode.\n     * Only for cell editing mode.\n     * ```typescript\n     * let editValue = this.cell.editValue;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public get editValue() {\n        if (this.crudService.inEditMode) {\n            return this.crudService.cell.editValue;\n        }\n    }\n\n    /**\n     * Returns whether the cell is editable.\n     */\n    get editable(): boolean {\n        return this.column.editable;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-grid__td--active')\n    public focused = false;\n\n    @ViewChild('defaultCell', { read: TemplateRef })\n    protected defaultCellTemplate: TemplateRef<any>;\n\n    @ViewChild('inlineEditor', { read: TemplateRef })\n    protected inlineEditorTemplate: TemplateRef<any>;\n\n    @ViewChild(IgxTextHighlightDirective, { read: IgxTextHighlightDirective })\n    protected set highlight(value: IgxTextHighlightDirective) {\n        this._highlight = value;\n\n        if (this._highlight && this.grid.lastSearchInfo.searchText) {\n            this._highlight.highlight(this.grid.lastSearchInfo.searchText,\n                this.grid.lastSearchInfo.caseSensitive,\n                this.grid.lastSearchInfo.exactMatch);\n            this._highlight.activateIfNecessary();\n        }\n    }\n\n    protected get highlight() {\n        return this._highlight;\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return { row: this.rowIndex, column: this.visibleColumnIndex };\n    }\n\n    protected isInCompositionMode = false;\n    protected compositionStartHandler;\n    protected compositionEndHandler;\n    protected focusHandlerIE;\n    protected focusOut;\n    private _highlight: IgxTextHighlightDirective;\n\n\n    constructor(\n        protected selectionService: IgxGridSelectionService,\n        protected crudService: IgxGridCRUDService,\n        public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public selection: IgxSelectionAPIService,\n        public cdr: ChangeDetectorRef,\n        private element: ElementRef,\n        protected zone: NgZone,\n        private touchManager: HammerGesturesManager) { }\n\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.addEventListener('pointerdown', this.pointerdown);\n            this.nativeElement.addEventListener('pointerenter', this.pointerenter);\n            this.nativeElement.addEventListener('pointerup', this.pointerup);\n\n            // IE 11 workarounds\n            if (isIE()) {\n                this.compositionStartHandler = () => this.isInCompositionMode = true;\n                this.compositionEndHandler = () => this.isInCompositionMode = false;\n                // Hitting Enter with IME submits and exits from edit mode instead of first closing the IME dialog\n                this.nativeElement.addEventListener('compositionstart', this.compositionStartHandler);\n                this.nativeElement.addEventListener('compositionend', this.compositionEndHandler);\n\n                // https://stackoverflow.com/q/51404782\n                this.focusHandlerIE = (e: FocusEvent) => this.onFocus(e);\n                this.focusOut = () => this.onBlur();\n                this.nativeElement.addEventListener('focusin', this.focusHandlerIE);\n                this.nativeElement.addEventListener('focusout', this.focusOut);\n            }\n        });\n        this.touchManager.addEventListener(this.nativeElement, 'doubletap', this.onDoubleClick, {\n            cssProps: { } /* don't disable user-select, etc */\n        } as HammerOptions);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.removeEventListener('pointerdown', this.pointerdown);\n            this.nativeElement.removeEventListener('pointerenter', this.pointerenter);\n            this.nativeElement.removeEventListener('pointerup', this.pointerup);\n\n            if (isIE()) {\n                this.nativeElement.removeEventListener('compositionstart', this.compositionStartHandler);\n                this.nativeElement.removeEventListener('compositionend', this.compositionEndHandler);\n                this.nativeElement.removeEventListener('focusin', this.focusHandlerIE);\n                this.nativeElement.removeEventListener('focusout', this.focusOut);\n            }\n        });\n        this.touchManager.destroy();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    _updateCRUDStatus() {\n        if (this.editMode) {\n            return;\n        }\n\n        const crud = this.crudService;\n        const editableCell = this.crudService.cell;\n        const editMode = !!(crud.row || crud.cell);\n\n\n        if (this.editable && editMode && !this.row.deleted) {\n            if (editableCell) {\n                this.gridAPI.update_cell(editableCell, editableCell.editValue);\n            }\n            crud.end();\n            this.grid.cdr.markForCheck();\n            crud.begin(this);\n            return;\n        }\n\n        if (editableCell && crud.sameRow(this.cellID.rowID)) {\n            this.gridAPI.submit_value();\n        } else if (editMode && !crud.sameRow(this.cellID.rowID)) {\n            this.grid.endEdit(true);\n        }\n    }\n\n    /**\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isCellSelected = thid.cell.isCellSelected();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public isCellSelected() {\n        return this.selectionService.selected(this.selectionNode);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.value && !changes.value.firstChange) {\n            if (this.highlight) {\n                this.highlight.lastSearchInfo.searchedText = this.grid.lastSearchInfo.searchText;\n                this.highlight.lastSearchInfo.caseSensitive = this.grid.lastSearchInfo.caseSensitive;\n                this.highlight.lastSearchInfo.exactMatch = this.grid.lastSearchInfo.exactMatch;\n            }\n        }\n    }\n\n    /**\n     * Starts/ends edit mode for the cell.\n     *\n     * ```typescript\n     * cell.setEditMode(true);\n     * ```\n     */\n    setEditMode(value: boolean): void {\n        if (this.row.deleted) {\n            return;\n        }\n        if (this.editable && value) {\n            this.gridAPI.submit_value();\n            this.crudService.begin(this);\n        } else {\n            this.gridAPI.escape_editMode();\n        }\n        this.grid.cdr.markForCheck();\n    }\n\n    /**\n     * Sets new value to the cell.\n     * ```typescript\n     * this.cell.update('New Value');\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    // TODO: Refactor\n    public update(val: any) {\n        if (this.row.deleted) {\n            return;\n        }\n        const cell = this.crudService.createCell(this);\n        const args = this.gridAPI.update_cell(cell, val);\n        if (this.crudService.cell && this.crudService.sameCell(cell)) {\n            if (args.cancel) {\n                return;\n            }\n            this.gridAPI.escape_editMode();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    pointerdown = (event: PointerEvent) => {\n        if (!isLeftClick(event)) {\n            this.selectionService.addKeyboardRange();\n            this.selectionService.initKeyboardState();\n            this.selectionService.primaryButton = false;\n            return;\n        }\n        this.selectionService.pointerDown(this.selectionNode, event.shiftKey, event.ctrlKey);\n    }\n\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    pointerenter = (event: PointerEvent) => {\n        const dragMode = this.selectionService.pointerEnter(this.selectionNode, event);\n        if (dragMode) {\n            this.grid.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    pointerup = (event: PointerEvent) => {\n        if (!isLeftClick(event)) { return; }\n        if (this.selectionService.pointerUp(this.selectionNode, this.grid.onRangeSelection)) {\n            this.grid.cdr.detectChanges();\n        }\n        this._updateCRUDStatus();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('dblclick', ['$event'])\n    public onDoubleClick = (event: MouseEvent | HammerInput) => {\n        if (event.type === 'doubletap') {\n            // prevent double-tap to zoom on iOS\n            (event as HammerInput).preventDefault();\n        }\n        if (this.editable && !this.editMode && !this.row.deleted) {\n            this.crudService.begin(this);\n        }\n\n        this.grid.onDoubleClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event: MouseEvent) {\n        this.grid.onCellClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('contextmenu', ['$event'])\n    public onContextMenu(event: MouseEvent) {\n        this.grid.onContextMenu.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event: FocusEvent) {\n        if (this.focused) {\n            return;\n        }\n\n        const node = this.selectionNode;\n        this.focused = true;\n        this.row.focused = true;\n\n        if (!this.selectionService.isActiveNode(node)) {\n            this.grid.onSelection.emit({ cell: this, event });\n        }\n\n        if (this.selectionService.primaryButton) {\n            this._updateCRUDStatus();\n            this.selectionService.activeElement = node;\n        } else {\n            this.selectionService.activeElement = null;\n            if (this.crudService.inEditMode && !this.editMode) {\n                this.gridAPI.submit_value();\n            }\n        }\n\n        this.selectionService.primaryButton = true;\n        this.selectionService.keyboardStateOnFocus(node, this.grid.onRangeSelection);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('blur')\n    public onBlur() {\n        this.focused = false;\n        this.row.focused = false;\n    }\n\n    protected handleAlt(key: string, event: KeyboardEvent) {\n        if (this.row.nativeElement.tagName.toLowerCase() === 'igx-tree-grid-row' && this.isToggleKey(key)) {\n            const collapse = (this.row as any).expanded && ROW_COLLAPSE_KEYS.has(key);\n            const expand = !(this.row as any).expanded && ROW_EXPAND_KEYS.has(key);\n            if (collapse) {\n                (this.gridAPI as any).trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n            } else if (expand) {\n                (this.gridAPI as any).trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n            }\n        }\n    }\n\n    protected handleTab(shift: boolean) {\n        if (shift) {\n            this.grid.navigation.performShiftTabKey(this.row.nativeElement, this.rowIndex, this.visibleColumnIndex);\n        } else {\n            this.grid.navigation.performTab(this.row.nativeElement, this.rowIndex, this.visibleColumnIndex);\n        }\n    }\n\n    protected handleEnd(ctrl: boolean) {\n        if (ctrl) {\n            this.grid.navigation.goToLastCell();\n        } else {\n            this.grid.navigation.onKeydownEnd(this.rowIndex);\n        }\n    }\n\n    protected handleHome(ctrl: boolean) {\n        if (ctrl) {\n            this.grid.navigation.goToFirstCell();\n        } else {\n            this.grid.navigation.onKeydownHome(this.rowIndex);\n        }\n    }\n\n    // TODO: Refactor\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        const shift = event.shiftKey;\n        const ctrl = event.ctrlKey;\n        const node = this.selectionNode;\n\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n\n        const keydownArgs = { targetType: 'dataCell', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(keydownArgs);\n        if (keydownArgs.cancel) {\n            this.selectionService.clear();\n            this.selectionService.keyboardState.active = true;\n            return;\n        }\n\n        if (event.altKey) {\n            event.preventDefault();\n            this.handleAlt(key, event);\n            return;\n        }\n        this.selectionService.keyboardStateOnKeydown(node, shift, shift && key === 'tab');\n\n        if (key === 'tab') {\n            event.preventDefault();\n        }\n\n        if (this.editMode) {\n            if (NAVIGATION_KEYS.has(key)) {\n                if (this.column.inlineEditorTemplate) { return; }\n                if (['date', 'boolean'].indexOf(this.column.dataType) > -1) { return; }\n                return;\n            }\n        }\n\n        if (NAVIGATION_KEYS.has(key)) {\n            event.preventDefault();\n        }\n        // TODO: to be deleted when onFocusChange event is removed #4054\n        const args = { cell: this, groupRow: null, event: event, cancel: false };\n        this.grid.onFocusChange.emit(args);\n        if (args.cancel) { return; }\n\n        switch (key) {\n            case 'tab':\n                this.handleTab(shift);\n                break;\n            case 'end':\n                this.handleEnd(ctrl);\n                break;\n            case 'home':\n                this.handleHome(ctrl);\n                break;\n            case 'arrowleft':\n            case 'left':\n                if (ctrl) {\n                    this.grid.navigation.onKeydownHome(node.row);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowLeft(this.nativeElement, node.row, node.column);\n                break;\n            case 'arrowright':\n            case 'right':\n                if (ctrl) {\n                    this.grid.navigation.onKeydownEnd(node.row);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowRight(this.nativeElement, node.row, node.column);\n                break;\n            case 'arrowup':\n            case 'up':\n                if (ctrl) {\n                    this.grid.navigation.navigateTop(node.column);\n                    break;\n                }\n                this.grid.navigation.navigateUp(this.row.nativeElement, node.row, node.column);\n                break;\n            case 'arrowdown':\n            case 'down':\n                if (ctrl) {\n                    this.grid.navigation.navigateBottom(node.column);\n                    break;\n                }\n                this.grid.navigation.navigateDown(this.row.nativeElement, node.row, node.column);\n                break;\n            case 'enter':\n            case 'f2':\n                this.onKeydownEnterEditMode();\n                break;\n            case 'escape':\n            case 'esc':\n                this.onKeydownExitEditMode();\n                break;\n            case ' ':\n            case 'spacebar':\n            case 'space':\n                if (this.row.rowSelectable) {\n                    this.row.checkboxElement.toggle();\n                }\n                break;\n            default:\n                return;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onKeydownEnterEditMode() {\n        if (this.isInCompositionMode) {\n            return;\n        }\n        if (this.column.editable && !this.row.deleted) {\n            if (this.editMode) {\n                this.grid.endEdit(true);\n                this.nativeElement.focus();\n            } else {\n                this.crudService.begin(this);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onKeydownExitEditMode() {\n        if (this.isInCompositionMode) {\n            return;\n        }\n\n        if (this.editMode) {\n            const v = this.crudService.cell;\n            const args = {\n                cellID: v.id,\n                rowID: v.id.rowID,\n                oldValue: v.value,\n                newValue: v.editValue,\n                cancel: false\n            } as IGridEditEventArgs;\n            this.grid.onCellEditCancel.emit(args);\n            if (args.cancel) {\n                return;\n            }\n            this.grid.endEdit(false);\n            this.nativeElement.focus();\n        }\n    }\n\n    /**\n     * If the provided string matches the text in the cell, the text gets highlighted.\n     * ```typescript\n     * this.cell.highlightText('Cell Value', true);\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightText(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.highlight && this.column.searchable ? this.highlight.highlight(text, caseSensitive, exactMatch) : 0;\n    }\n\n    /**\n     * Clears the highlight of the text in the cell.\n     * ```typescript\n     * this.cell.clearHighLight();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public clearHighlight() {\n        if (this.highlight && this.column.searchable) {\n            this.highlight.clearHighlight();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public calculateSizeToFit(range: any): number {\n        return Math.max(...Array.from(this.nativeElement.children)\n            .map((child) => getNodeSizeViaRange(range, child)));\n    }\n\n    private isToggleKey(key: string): boolean {\n        return ROW_COLLAPSE_KEYS.has(key) || ROW_EXPAND_KEYS.has(key);\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    HostBinding,\n    Input,\n    QueryList,\n    ViewChild,\n    ViewChildren\n} from '@angular/core';\nimport { IgxCheckboxComponent } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent } from './column.component';\nimport { TransactionType, State } from '../services';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxGridSelectionService, IgxGridCRUDService, IgxRow } from '../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-row',\n    templateUrl: './grid/grid-row.component.html'\n})\nexport class IgxRowComponent<T extends IgxGridBaseComponent & IGridDataBindable> implements DoCheck {\n\n    private _rowData: any;\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    @Input()\n    public get rowData(): any {\n        if (this.inEditMode) {\n            return Object.assign({}, this._rowData, this.grid.transactions.getAggregatedValue(this.rowID, false));\n        }\n        return this._rowData;\n    }\n\n    public set rowData(v: any) {\n        this._rowData = v;\n    }\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxDirRef', { read: IgxGridForOfDirective })\n    public virtDirRow: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(forwardRef(() => IgxCheckboxComponent), { read: IgxCheckboxComponent })\n    public checkboxElement: IgxCheckboxComponent;\n\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxGridCellComponent))\n    public cells: QueryList<IgxGridCellComponent>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'row';\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return this.resolveClasses();\n    }\n\n    /**\n     * @hidden\n     */\n    get columns(): IgxColumnComponent[] {\n        return this.grid.visibleColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        return this.grid.pinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        return this.grid.unpinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowSelectable(): boolean {\n        return this.grid.rowSelectable;\n    }\n\n    /**\n     * @hidden\n     */\n    public get showRowCheckboxes(): boolean {\n        return this.grid.showRowCheckboxes;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.aria-selected')\n    public isSelected: boolean;\n\n    /** @hidden */\n    public get dirty(): boolean {\n        const row: State = this.grid.transactions.getState(this.rowID);\n        if (row) {\n            return row.type === TransactionType.ADD || row.type === TransactionType.UPDATE;\n        }\n\n        return false;\n    }\n\n    /** @hidden */\n    public get added(): boolean {\n        const row: State = this.grid.transactions.getState(this.rowID);\n        if (row) {\n            return row.type === TransactionType.ADD;\n        }\n\n         return false;\n    }\n\n    /** @hidden */\n    public get deleted(): boolean {\n        return this.gridAPI.row_deleted_transaction(this.rowID);\n    }\n\n    // TODO: Refactor\n    public get inEditMode(): boolean {\n        if (this.grid.rowEditable) {\n            const editRowState = this.crudService.row;\n            return (editRowState && editRowState.id === this.rowID) || false;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    get grid(): T {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets the ID of the row.\n     * A row in the grid is identified either by:\n     * - primaryKey data value,\n     * - the whole rowData, if the primaryKey is omitted.\n     *\n     * ```typescript\n     * let rowID = this.grid.selectedRows[2].rowID;\n     * ```\n     */\n    public get rowID() {\n        const primaryKey = this.grid.primaryKey;\n        return primaryKey ? this._rowData[primaryKey] : this._rowData;\n    }\n\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    public focused = false;\n\n    /**\n     * @hidden\n     */\n    protected defaultCssClass = 'igx-grid__tr';\n\n    /**\n     * @hidden\n     */\n    protected _rowSelection = false;\n\n    constructor(public gridAPI: GridBaseAPIService<T>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        private selection: IgxSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) { }\n\n\n    /**\n     * @hidden\n     */\n    public onCheckboxClick(event) {\n        const newSelection = (event.checked) ?\n            this.selection.add_item(this.gridID, this.rowID) :\n            this.selection.delete_item(this.gridID, this.rowID);\n        this.grid.triggerRowSelectionChange(newSelection, this, event);\n    }\n\n    /**\n     * Updates the specified row object and the data source record with the passed value.\n     * This method emits `onEditDone` event.\n     *\n     * ```typescript\n     * // update the second selected row's value\n     * let newValue = \"Apple\";\n     * this.grid.selectedRows[1].update(newValue);\n     * ```\n     */\n    public update(value: any) {\n        const crudService = this.crudService;\n        if (crudService.inEditMode && crudService.cell.id.rowID === this.rowID) {\n            this.grid.endEdit(false);\n        }\n        const row = new IgxRow(this.rowID, this.index, this.rowData);\n        this.gridAPI.update_row(row, value);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Removes the specified row from the grid's data source.\n     * This method emits `onRowDeleted` event.\n     *\n     * ```typescript\n     * // delete the third selected row from the grid\n     * this.grid.selectedRows[2].delete();\n     * ```\n     */\n    public delete() {\n        this.grid.deleteRowById(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    get rowCheckboxAriaLabel() {\n        return this.grid.primaryKey ?\n            this.isSelected ? 'Deselect row with key ' + this.rowID : 'Select row with key ' + this.rowID :\n            this.isSelected ? 'Deselect row' : 'Select row';\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        this.isSelected = this.rowSelectable ?\n            this.grid.allRowsSelected ? true : this.selection.is_item_selected(this.gridID, this.rowID) :\n            this.selection.is_item_selected(this.gridID, this.rowID);\n        this.cdr.markForCheck();\n        if (this.checkboxElement) {\n            this.checkboxElement.checked = this.isSelected;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const indexClass = this.index % 2 ? this.grid.evenRowCSS : this.grid.oddRowCSS;\n        const selectedClass = this.isSelected ? 'igx-grid__tr--selected' : '';\n        const editClass = this.inEditMode ? 'igx-grid__tr--edit' : '';\n        const dirtyClass = this.dirty ? 'igx-grid__tr--edited' : '';\n        const deletedClass = this.deleted ? 'igx-grid__tr--deleted' : '';\n        return `${this.defaultCssClass} ${indexClass} ${selectedClass} ${editClass} ${dirtyClass} ${deletedClass}`.trim();\n    }\n}\n","export interface ISummaryExpression {\n    fieldName: string;\n    customSummary?: any;\n}\nexport interface IgxSummaryResult {\n    key: string;\n    label: string;\n    summaryResult: any;\n}\n\nexport interface ISummaryRecord {\n    summaries: Map<string, IgxSummaryResult[]>;\n    max?: number;\n    cellIndentation?: number;\n}\n\nconst clear = (el) => el === 0 || Boolean(el);\nconst first = (arr) => arr[0];\nconst last = (arr) => arr[arr.length - 1];\n\nexport class IgxSummaryOperand {\n    /**\n     * Counts all the records in the data source.\n     * If filtering is applied, counts only the filtered records.\n     * ```typescript\n     * IgxSummaryOperand.count(dataSource);\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public static count(data: any[]): number {\n        return data.length;\n    }\n    /**\n     * Executes the static `count` method and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomSummary extends IgxSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data?: any[]): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"test\",\n     *       label: \"Test\",\n     *       summaryResult: IgxSummaryOperand.count(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomSummary;\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public operate(data: any[] = []): IgxSummaryResult[] {\n        return [{\n            key: 'count',\n            label: 'Count',\n            summaryResult: IgxSummaryOperand.count(data)\n        }];\n    }\n}\n\n// @dynamic\nexport class IgxNumberSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the minimum numeric value in the provided data records.\n     * If filtering is applied, returns the minimum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.min(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static min(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => Math.min(a, b)) : 0;\n    }\n    /**\n     * Returns the maximum numeric value in the provided data records.\n     * If filtering is applied, returns the maximum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.max(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static max(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => Math.max(a, b)) : 0;\n    }\n    /**\n     * Returns the sum of the numeric values in the provided data records.\n     * If filtering is applied, returns the sum of the numeric values in the data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.sum(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static sum(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => +a + +b) : 0;\n    }\n    /**\n     * Returns the average numeric value in the data provided data records.\n     * If filtering is applied, returns the average numeric value in the filtered data records.\n     * ```typescript\n     * IgxSummaryOperand.average(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static average(data: any[]): number {\n        return data.length && data.filter(clear).length ? this.sum(data) / this.count(data) : 0;\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomNumberSummary extends IgxNumberSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data?: any[]): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"avg\",\n     *       label: \"Avg\",\n     *       summaryResult: IgxNumberSummaryOperand.average(data)\n     *     });\n     *     result.push({\n     *       key: \"max\",\n     *       label: \"Max\",\n     *       summaryResult: IgxNumberSummaryOperand.max(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomNumberSummary;\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public operate(data: any[] = []): IgxSummaryResult[] {\n        const result = super.operate(data);\n        result.push({\n            key: 'min',\n            label: 'Min',\n            summaryResult: IgxNumberSummaryOperand.min(data)\n        });\n        result.push({\n            key: 'max',\n            label: 'Max',\n            summaryResult: IgxNumberSummaryOperand.max(data)\n        });\n        result.push({\n            key: 'sum',\n            label: 'Sum',\n            summaryResult: IgxNumberSummaryOperand.sum(data)\n        });\n        result.push({\n            key: 'average',\n            label: 'Avg',\n            summaryResult: IgxNumberSummaryOperand.average(data)\n        });\n        return result;\n    }\n}\n\n// @dynamic\nexport class IgxDateSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the latest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.latest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static latest(data: any[]) {\n        return data.length && data.filter(clear).length ?\n            first(data.filter(clear).sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())) : undefined;\n    }\n    /**\n     * Returns the earliest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.earliest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static earliest(data: any[]) {\n        return data.length && data.filter(clear).length ?\n            last(data.filter(clear).sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())) : undefined;\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomDateSummary extends IgxDateSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data?: any[]): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"latest\",\n     *       label: \"Latest Date\",\n     *       summaryResult: IgxDateSummaryOperand.latest(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomDateSummary;\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public operate(data: any[] = []): IgxSummaryResult[] {\n        const result = super.operate(data);\n        result.push({\n            key: 'earliest',\n            label: 'Earliest',\n            summaryResult: IgxDateSummaryOperand.earliest(data)\n        });\n        result.push({\n            key: 'latest',\n            label: 'Latest',\n            summaryResult: IgxDateSummaryOperand.latest(data)\n        });\n        return result;\n    }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { IgxColumnComponent } from './column.component';\n\n/** @hidden */\n@Injectable()\nexport class IgxColumnResizingService {\n\n    private pinnedMaxWidth: string;\n\n    /**\n     *@hidden\n     */\n    public startResizePos: number;\n    /**\n     * Indicates that a column is currently being resized.\n     */\n    public isColumnResizing: boolean;\n    /**\n     *@hidden\n     */\n    public resizeCursor: string = null;\n    /**\n     *@hidden\n     */\n    public showResizer = false;\n    /**\n     * The column being resized.\n     */\n    public column: IgxColumnComponent;\n\n    constructor(private zone: NgZone) { }\n\n    /**\n     *@hidden\n     */\n    get resizerHeight(): number {\n        let height = this.column.grid.getVisibleContentHeight();\n\n        if (this.column.level !== 0) {\n            height -= this.column.topLevelParent.headerGroup.height - this.column.headerGroup.height;\n        }\n\n        return height;\n    }\n\n    /**\n     * Returns the minimal possible width to which the column can be resized.\n     */\n    get restrictResizeMin(): number {\n        const actualMinWidth = parseFloat(this.column.minWidth);\n        const defaultMinWidth = parseFloat(this.column.defaultMinWidth);\n\n        let minWidth = Number.isNaN(actualMinWidth) || actualMinWidth < defaultMinWidth ? defaultMinWidth : actualMinWidth;\n        minWidth = minWidth < parseFloat(this.column.width) ? minWidth : parseFloat(this.column.width);\n\n        return this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width - minWidth;\n    }\n\n    /**\n     * Returns the maximal possible width to which the column can be resized.\n     */\n    get restrictResizeMax(): number {\n        const actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n\n        if (this.column.pinned) {\n            const pinnedMaxWidth = this.pinnedMaxWidth =\n                this.column.grid.calcPinnedContainerMaxWidth - this.column.grid.getPinnedWidth(true) + actualWidth;\n\n            if (this.column.maxWidth && parseFloat(this.column.maxWidth) < pinnedMaxWidth) {\n                this.pinnedMaxWidth = this.column.maxWidth;\n\n                return parseFloat(this.column.maxWidth) - actualWidth;\n            } else {\n                return pinnedMaxWidth - actualWidth;\n            }\n        } else {\n            if (this.column.maxWidth) {\n                return parseFloat(this.column.maxWidth) - actualWidth;\n            } else {\n                return Number.MAX_SAFE_INTEGER;\n            }\n        }\n    }\n\n    /**\n     * Autosizes the column to the longest currently visible cell value, including the header cell.\n     * If the column has a predifined maxWidth and the autosized column width will become bigger than it,\n     * then the column is sized to its maxWidth.\n     * If the column is pinned and the autosized column width will cause the pinned area to become bigger\n     * than the maximum allowed pinned area width (80% of the total grid width), autosizing will be deismissed.\n     */\n    public autosizeColumnOnDblClick() {\n        const currentColWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n\n        const size = this.column.getLargestCellWidth();\n\n        if (this.column.pinned) {\n            const newPinnedWidth = this.column.grid.getPinnedWidth(true) - currentColWidth + parseFloat(size);\n\n            if (newPinnedWidth <= this.column.grid.calcPinnedContainerMaxWidth) {\n                this.column.width = size;\n            }\n        } else if (this.column.maxWidth && (parseFloat(size) > parseFloat(this.column.maxWidth))) {\n            this.column.width = parseFloat(this.column.maxWidth) + 'px';\n        } else if (parseFloat(size) < parseFloat(this.column.defaultMinWidth)) {\n            this.column.width = this.column.defaultMinWidth + 'px';\n        } else {\n            this.column.width = size;\n        }\n\n        this.zone.run(() => {});\n\n        this.column.grid.reflow();\n        this.column.grid.onColumnResized.emit({\n            column: this.column,\n            prevWidth: currentColWidth.toString(),\n            newWidth: this.column.width\n        });\n    }\n\n    /**\n     * Resizes the column regaridng to the column minWidth and maxWidth.\n     */\n    public resizeColumn(event: MouseEvent) {\n        this.showResizer = false;\n        const diff = event.clientX - this.startResizePos;\n\n        let currentColWidth = parseFloat(this.column.width);\n\n        const actualMinWidth = parseFloat(this.column.minWidth);\n        const defaultMinWidth = parseFloat(this.column.defaultMinWidth);\n\n        let colMinWidth = Number.isNaN(actualMinWidth) || actualMinWidth < defaultMinWidth ? defaultMinWidth : actualMinWidth;\n        const colMaxWidth = this.column.pinned ? parseFloat(this.pinnedMaxWidth) : parseFloat(this.column.maxWidth);\n\n        const actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n\n        currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;\n        colMinWidth = colMinWidth < currentColWidth ? colMinWidth : currentColWidth;\n\n        if (currentColWidth + diff < colMinWidth) {\n            this.column.width = colMinWidth + 'px';\n        } else if (colMaxWidth && (currentColWidth + diff > colMaxWidth)) {\n            this.column.width = colMaxWidth + 'px';\n        } else {\n            this.column.width = (currentColWidth + diff) + 'px';\n        }\n\n        this.zone.run(() => {});\n        this.column.grid.reflow();\n\n        if (currentColWidth !== parseFloat(this.column.width)) {\n            this.column.grid.onColumnResized.emit({\n                column: this.column,\n                prevWidth: currentColWidth.toString(),\n                newWidth: this.column.width\n            });\n        }\n\n        this.isColumnResizing = false;\n    }\n}\n","import { DOCUMENT, DatePipe, DecimalPipe } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    Inject,\n    Injectable,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Pipe,\n    PipeTransform,\n    Renderer2,\n    TemplateRef,\n    LOCALE_ID,\n    AfterViewInit,\n    HostListener\n} from '@angular/core';\nimport { animationFrameScheduler, fromEvent, interval, Subject, Subscription } from 'rxjs';\nimport { map, switchMap, takeUntil, throttle, debounceTime } from 'rxjs/operators';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxDragDirective, IgxDropDirective } from '../directives/dragdrop/dragdrop.directive';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { ConnectedPositioningStrategy } from '../services';\nimport { VerticalAlignment, PositionSettings } from '../services/overlay/utilities';\nimport { scaleInVerBottom, scaleInVerTop } from '../animations/main';\nimport { KEYS } from '../core/utils';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxForOfSyncService } from '../directives/for-of/for_of.sync.service';\n\nconst DEFAULT_DATE_FORMAT = 'mediumDate';\nconst DEBOUNCE_TIME = 200;\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxResizeHandle]'\n})\nexport class IgxResizeHandleDirective implements AfterViewInit, OnDestroy {\n\n    /**\n     * @hidden\n     */\n    @Input('igxResizeHandle')\n    public column: IgxColumnComponent;\n\n    /**\n     * @hidden\n     */\n    private _dblClick = false;\n\n    /**\n     * @hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    constructor(private zone: NgZone,\n               private element: ElementRef,\n               public colResizingService: IgxColumnResizingService) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        if (!this.column.columnGroup && this.column.resizable) {\n            this.zone.runOutsideAngular(() => {\n                fromEvent(this.element.nativeElement, 'mousedown').pipe(\n                    debounceTime(DEBOUNCE_TIME),\n                    takeUntil(this.destroy$)\n                ).subscribe((event: MouseEvent) => {\n\n                    if (this._dblClick) {\n                        this._dblClick = false;\n                        return;\n                    }\n\n                    if (event.button === 0) {\n                        this._onResizeAreaMouseDown(event);\n                        this.column.grid.resizeLine.resizer.onMousedown(event);\n                    }\n                });\n            });\n\n            fromEvent(this.element.nativeElement, 'mouseup').pipe(\n                debounceTime(DEBOUNCE_TIME),\n                takeUntil(this.destroy$)\n            ).subscribe(() => {\n                this.colResizingService.isColumnResizing = false;\n                this.colResizingService.showResizer = false;\n                this.column.grid.cdr.detectChanges();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseover')\n    public onMouseOver() {\n        this.colResizingService.resizeCursor = 'col-resize';\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('dblclick')\n    public onDoubleClick() {\n        this._dblClick = true;\n        this.colResizingService.column = this.column;\n        this.colResizingService.autosizeColumnOnDblClick();\n    }\n\n    /**\n     * @hidden\n     */\n    private _onResizeAreaMouseDown(event) {\n        this.colResizingService.column = this.column;\n        this.colResizingService.isColumnResizing = true;\n        this.colResizingService.startResizePos = event.clientX;\n\n        this.colResizingService.showResizer = true;\n        this.column.grid.cdr.detectChanges();\n    }\n}\n\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxResizer]'\n})\nexport class IgxColumnResizerDirective implements OnInit, OnDestroy {\n\n    @Input()\n    public restrictHResizeMin: number = Number.MIN_SAFE_INTEGER;\n\n    @Input()\n    public restrictHResizeMax: number = Number.MAX_SAFE_INTEGER;\n\n    @Output()\n    public resizeEnd = new Subject<any>();\n\n    @Output()\n    public resizeStart = new Subject<any>();\n\n    @Output()\n    public resize = new Subject<any>();\n\n    private _left;\n    private _destroy = new Subject<boolean>();\n\n    constructor(public element: ElementRef, @Inject(DOCUMENT) public document, public zone: NgZone) {\n\n        this.resizeStart.pipe(\n            map((event) => event.clientX),\n            takeUntil(this._destroy),\n            switchMap((offset) => this.resize.pipe(\n                map((event) => event.clientX - offset),\n                takeUntil(this.resizeEnd),\n                takeUntil(this._destroy)\n            ))\n        ).subscribe((pos) => {\n\n            const left = this._left + pos;\n\n            const min = this._left - this.restrictHResizeMin;\n            const max = this._left + this.restrictHResizeMax;\n\n            this.left = left < min ? min : left;\n\n            if (left > max) {\n                this.left = max;\n            }\n        });\n\n    }\n\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            fromEvent(this.document.defaultView, 'mousemove').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy)\n            ).subscribe((res) => this.onMousemove(res));\n\n            fromEvent(this.document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onMouseup(res));\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n    }\n\n    public set left(val) {\n        requestAnimationFrame(() => this.element.nativeElement.style.left = val + 'px');\n    }\n\n    public set top(val) {\n        requestAnimationFrame(() => this.element.nativeElement.style.top = val + 'px');\n    }\n\n    onMouseup(event) {\n        this.resizeEnd.next(event);\n        this.resizeEnd.complete();\n    }\n\n    onMousedown(event) {\n        event.preventDefault();\n        const parent = this.element.nativeElement.parentElement.parentElement;\n\n        this.left = this._left = event.clientX - parent.getBoundingClientRect().left;\n        this.top = event.target.getBoundingClientRect().top - parent.getBoundingClientRect().top;\n\n        this.resizeStart.next(event);\n    }\n\n    onMousemove(event) {\n        event.preventDefault();\n        this.resize.next(event);\n    }\n}\n\n@Directive({\n    selector: '[igxFilterCellTemplate]'\n})\nexport class IgxFilterCellTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxCell]'\n})\nexport class IgxCellTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxHeader]'\n})\nexport class IgxCellHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxFooter]'\n})\nexport class IgxCellFooterTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxCellEditor]'\n})\nexport class IgxCellEditorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * @hidden\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxColumnMovingService {\n    private _icon: any;\n    private _column: IgxColumnComponent;\n\n    public cancelDrop: boolean;\n    public isColumnMoving: boolean;\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n    set column(val: IgxColumnComponent) {\n        if (val) {\n            this._column = val;\n        }\n    }\n\n    get icon(): any {\n        return this._icon;\n    }\n    set icon(val: any) {\n        if (val) {\n            this._icon = val;\n        }\n    }\n}\n\n/**\n * @hidden\n */\nexport enum DropPosition {\n    BeforeDropTarget,\n    AfterDropTarget,\n    None\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxColumnMovingDrag]'\n})\nexport class IgxColumnMovingDragDirective extends IgxDragDirective implements OnDestroy {\n\n    @Input('igxColumnMovingDrag')\n    set data(val) {\n        this._column = val;\n    }\n\n    get column() {\n        return this._column;\n    }\n\n    get draggable(): boolean {\n        return this.column && (this.column.movable || (this.column.groupable && !this.column.columnGroup));\n    }\n\n    public get icon(): HTMLElement {\n        return this.cms.icon;\n    }\n\n    private subscription$: Subscription;\n    private _column: IgxColumnComponent;\n    private _ghostImageClass = 'igx-grid__drag-ghost-image';\n    private _dragGhostImgIconClass = 'igx-grid__drag-ghost-image-icon';\n    private _dragGhostImgIconGroupClass = 'igx-grid__drag-ghost-image-icon-group';\n\n    constructor(\n        _element: ElementRef,\n        _zone: NgZone,\n        _renderer: Renderer2,\n        _cdr: ChangeDetectorRef,\n        private cms: IgxColumnMovingService,\n    ) {\n        super(_cdr, _element, _zone, _renderer);\n    }\n\n    public ngOnDestroy() {\n        this._unsubscribe();\n    }\n\n    public onEscape(event) {\n        this.cms.cancelDrop = true;\n        this.onPointerUp(event);\n    }\n\n    public onPointerDown(event) {\n        if (!this.draggable || event.target.getAttribute('draggable') === 'false') {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._removeOnDestroy = false;\n        this.cms.column = this.column;\n        this.ghostImageClass = this._ghostImageClass;\n\n        super.onPointerDown(event);\n\n        this.cms.isColumnMoving = true;\n        this.column.grid.cdr.detectChanges();\n\n        const args = {\n            source: this.column\n        };\n        this.column.grid.onColumnMovingStart.emit(args);\n\n        this.subscription$ = fromEvent(this.column.grid.document.defaultView, 'keydown').subscribe((ev: KeyboardEvent) => {\n            if (ev.key === KEYS.ESCAPE || ev.key === KEYS.ESCAPE_IE) {\n                this.onEscape(ev);\n            }\n        });\n    }\n\n    public onPointerMove(event) {\n        event.preventDefault();\n        super.onPointerMove(event);\n\n        if (this._dragStarted && this._dragGhost && !this.column.grid.draggedColumn) {\n            this.column.grid.draggedColumn = this.column;\n            this.column.grid.cdr.detectChanges();\n        }\n\n        if (this.cms.isColumnMoving) {\n            const args = {\n                source: this.column,\n                cancel: false\n            };\n            this.column.grid.onColumnMoving.emit(args);\n\n            if (args.cancel) {\n                this.onEscape(event);\n            }\n        }\n    }\n\n    public onPointerUp(event) {\n        // Run it explicitly inside the zone because sometimes onPointerUp executes after the code below.\n        this.zone.run(() => {\n            super.onPointerUp(event);\n\n            this.cms.isColumnMoving = false;\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        });\n\n        this._unsubscribe();\n    }\n\n    protected createDragGhost(event) {\n        super.createDragGhost(event);\n\n        let pageX, pageY;\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            pageX = event.pageX;\n            pageY = event.pageY;\n        } else {\n            pageX = event.touches[0].pageX;\n            pageY = event.touches[0].pageY;\n        }\n\n        this._dragGhost.style.height = null;\n        this._dragGhost.style.minWidth = null;\n        this._dragGhost.style.flexBasis = null;\n        this._dragGhost.style.position = null;\n\n        const icon = document.createElement('i');\n        const text = document.createTextNode('block');\n        icon.appendChild(text);\n\n        icon.classList.add('material-icons');\n        this.cms.icon = icon;\n\n        const hostElemLeft = this.dragGhostHost ? this.dragGhostHost.getBoundingClientRect().left : 0;\n        const hostElemTop = this.dragGhostHost ? this.dragGhostHost.getBoundingClientRect().top : 0;\n\n        if (!this.column.columnGroup) {\n            this.renderer.addClass(icon, this._dragGhostImgIconClass);\n\n            this._dragGhost.insertBefore(icon, this._dragGhost.firstElementChild);\n\n            this.left = this._dragStartX = pageX - ((this._dragGhost.getBoundingClientRect().width / 3) * 2) - hostElemLeft;\n            this.top = this._dragStartY = pageY - ((this._dragGhost.getBoundingClientRect().height / 3) * 2) - hostElemTop;\n        } else {\n            this._dragGhost.insertBefore(icon, this._dragGhost.childNodes[0]);\n\n            this.renderer.addClass(icon, this._dragGhostImgIconGroupClass);\n            this._dragGhost.children[0].style.paddingLeft = '0px';\n\n            this.left = this._dragStartX = pageX - ((this._dragGhost.getBoundingClientRect().width / 3) * 2) - hostElemLeft;\n            this.top = this._dragStartY = pageY - ((this._dragGhost.getBoundingClientRect().height / 3) * 2) - hostElemTop;\n        }\n    }\n\n    private _unsubscribe() {\n        if (this.subscription$) {\n            this.subscription$.unsubscribe();\n            this.subscription$ = null;\n        }\n    }\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxColumnMovingDrop]'\n})\nexport class IgxColumnMovingDropDirective extends IgxDropDirective implements OnDestroy {\n    @Input('igxColumnMovingDrop')\n    set data(val: any) {\n        if (val instanceof IgxColumnComponent) {\n            this._column = val;\n        }\n\n        if (val instanceof IgxGridForOfDirective) {\n            this._hVirtDir = val;\n        }\n    }\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    get isDropTarget(): boolean {\n        return this._column && this._column.grid.hasMovableColumns && this.cms.column.movable && !this.cms.column.disablePinning;\n    }\n\n    get horizontalScroll(): any {\n        if (this._hVirtDir) {\n            return this._hVirtDir;\n        }\n    }\n\n    private _dropPos: DropPosition;\n    private _dropIndicator: any = null;\n    private _lastDropIndicator: any = null;\n    private _column: IgxColumnComponent;\n    private _hVirtDir: IgxGridForOfDirective<any>;\n    private _dragLeave = new Subject<boolean>();\n    private _dropIndicatorClass = 'igx-grid__th-drop-indicator--active';\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone, private cms: IgxColumnMovingService) {\n        super(elementRef, renderer, zone);\n    }\n\n    public ngOnDestroy() {\n        this._dragLeave.next(true);\n        this._dragLeave.complete();\n    }\n\n    public onDragOver(event) {\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n            if (this._lastDropIndicator) {\n                this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n\n            const clientRect = this.elementRef.nativeElement.getBoundingClientRect();\n            const pos = clientRect.left + clientRect.width / 2;\n\n            const parent = this.elementRef.nativeElement.parentElement;\n            if (event.detail.pageX < pos) {\n                this._dropPos = DropPosition.BeforeDropTarget;\n                this._lastDropIndicator = this._dropIndicator = parent.firstElementChild;\n            } else {\n                this._dropPos = DropPosition.AfterDropTarget;\n                this._lastDropIndicator = this._dropIndicator = parent.lastElementChild;\n            }\n\n            if (this.cms.icon.innerText !== 'block') {\n                this.renderer.addClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n        }\n    }\n\n    public onDragEnter(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.column && this.cms.column.grid.id !== this.column.grid.id) {\n            this.cms.icon.innerText = 'block';\n            return;\n        }\n\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n                if (!this.column.pinned || (this.column.pinned && this.cms.column.pinned)) {\n                    this.cms.icon.innerText = 'swap_horiz';\n                }\n\n                if (!this.cms.column.pinned && this.column.pinned) {\n                    const nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);\n\n                    if (nextPinnedWidth <= this.column.grid.calcPinnedContainerMaxWidth) {\n                        this.cms.icon.innerText = 'lock';\n                    } else {\n                        this.cms.icon.innerText = 'block';\n                    }\n                }\n            } else {\n                this.cms.icon.innerText = 'block';\n            }\n\n            if (this.horizontalScroll) {\n                this.cms.icon.innerText = event.target.id === 'right' ? 'arrow_forward' : 'arrow_back';\n\n                interval(100).pipe(takeUntil(this._dragLeave)).subscribe(() => {\n                    this.cms.column.grid.wheelHandler();\n                    event.target.id === 'right' ? this.horizontalScroll.getHorizontalScroll().scrollLeft += 15 :\n                        this.horizontalScroll.getHorizontalScroll().scrollLeft -= 15;\n                });\n            }\n    }\n\n    public onDragLeave(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        this.cms.icon.innerText = 'block';\n\n        if (this._dropIndicator) {\n            this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n    }\n\n    public onDragDrop(event) {\n        event.preventDefault();\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.column && (this.cms.column.grid.id !== this.column.grid.id)) {\n            return;\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n\n        if (this.isDropTarget) {\n            const args = {\n                source: this.cms.column,\n                target: this.column\n            };\n\n            let nextPinnedWidth;\n            if (this.column.pinned && !this.cms.column.pinned) {\n                nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);\n            }\n\n            if ((nextPinnedWidth && nextPinnedWidth > this.column.grid.calcPinnedContainerMaxWidth) ||\n                this.column.level !== this.cms.column.level ||\n                this.column.parent !== this.cms.column.parent ||\n                this.cms.cancelDrop) {\n                    this.cms.cancelDrop = false;\n                    this.column.grid.onColumnMovingEnd.emit(args);\n                    return;\n            }\n\n            this.column.grid.moveColumn(this.cms.column, this.column, this._dropPos);\n\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        }\n    }\n}\n\n@Directive({\n    selector: '[igxGridBody]',\n    providers: [IgxForOfSyncService]\n})\nexport class IgxGridBodyDirective {}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'igxdate'\n})\nexport class IgxDatePipeComponent extends DatePipe implements PipeTransform {\n    constructor(@Inject(LOCALE_ID) locale: string) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(locale);\n    }\n    transform(value: any, locale: string): string {\n        if (value && value instanceof Date) {\n            if (locale) {\n                return super.transform(value, DEFAULT_DATE_FORMAT, undefined, locale);\n            } else {\n                return super.transform(value);\n            }\n        } else {\n            return value;\n        }\n    }\n}\n/**\n *@hidden\n */\n@Pipe({\n    name: 'igxdecimal'\n})\nexport class IgxDecimalPipeComponent extends DecimalPipe implements PipeTransform {\n    constructor(@Inject(LOCALE_ID) locale: string) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(locale);\n    }\n    transform(value: any, locale: string): string {\n        if (value && typeof value === 'number') {\n            if (locale) {\n                return super.transform(value, undefined, locale);\n            } else {\n                return super.transform(value);\n            }\n        } else {\n            return value;\n        }\n    }\n}\n\n/**\n * @hidden\n */\nexport interface ContainerPositionSettings extends PositionSettings {\n    container?: HTMLElement;\n}\n\n/**\n * @hidden\n */\nexport class ContainerPositioningStrategy extends ConnectedPositioningStrategy {\n    isTop = false;\n    isTopInitialPosition = null;\n    public settings: ContainerPositionSettings;\n    position(contentElement: HTMLElement, size: { width: number, height: number }, document?: Document, initialCall?: boolean): void {\n        const container = this.settings.container; // grid.tbody\n        const target = <HTMLElement>this.settings.target; // current grid.row\n\n        // Position of the overlay depends on the available space in the grid.\n        // If the bottom space is not enough then the the row overlay will show at the top of the row.\n        // Once shown, either top or bottom, then this position stays until the overlay is closed (isTopInitialPosition property),\n        // which means that when scrolling then overlay may hide, while the row is still visible (UX requirement).\n        this.isTop = this.isTopInitialPosition !== null ?\n            this.isTopInitialPosition :\n            container.getBoundingClientRect().bottom <\n                target.getBoundingClientRect().bottom + contentElement.getBoundingClientRect().height;\n\n        // Set width of the row editing overlay to equal row width, otherwise it fits 100% of the grid.\n        contentElement.style.width = target.clientWidth + 'px';\n        this.settings.verticalStartPoint = this.settings.verticalDirection = this.isTop ? VerticalAlignment.Top : VerticalAlignment.Bottom;\n        this.settings.openAnimation = this.isTop ? scaleInVerBottom : scaleInVerTop;\n\n        super.position(contentElement, { width: target.clientWidth, height: target.clientHeight }, document, initialCall);\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Input,\n    QueryList,\n    TemplateRef,\n    forwardRef\n} from '@angular/core';\nimport { DataType } from '../data-operations/data-util';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxDateSummaryOperand, IgxNumberSummaryOperand, IgxSummaryOperand } from './summaries/grid-summary';\nimport { IgxRowComponent } from './row.component';\nimport {\n    IgxCellEditorTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellTemplateDirective,\n    IgxFilterCellTemplateDirective\n} from './grid.common';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { DefaultSortingStrategy, ISortingStrategy } from '../data-operations/sorting-strategy';\nimport { getNodeSizeViaRange, flatten } from '../core/utils';\nimport {\n    IgxBooleanFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxDateFilteringOperand,\n    IgxStringFilteringOperand,\n    IgxFilteringOperand\n} from '../data-operations/filtering-condition';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\n/**\n * **Ignite UI for Angular Column** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html#columns-configuration)\n *\n * The Ignite UI Column is used within an `igx-grid` element to define what data the column will show. Features such as sorting,\n * filtering & editing are enabled at the column level.  You can also provide a template containing custom content inside\n * the column using `ng-template` which will be used for all cells within the column.\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-column',\n    template: ``\n})\nexport class IgxColumnComponent implements AfterContentInit {\n    /**\n     * Sets/gets the `field` value.\n     * ```typescript\n     * let columnField = this.column.field;\n     * ```\n     * ```html\n     * <igx-column [field] = \"'ID'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public field: string;\n    /**\n     * Sets/gets the `header` value.\n     * ```typescript\n     * let columnHeader = this.column.header;\n     * ```\n     * ```html\n     * <igx-column [header] = \"'ID'\"></igx-column>\n     * ```\n     *\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public header = '';\n    /**\n     * Sets/gets whether the column is sortable.\n     * Default value is `false`.\n     * ```typescript\n     * let isSortable = this.column.sortable;\n     * ```\n     * ```html\n     * <igx-column [sortable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public sortable = false;\n    /**\n     * Sets/gets whether the column is groupable.\n     * Default value is `false`.\n     * ```typescript\n     * let isGroupable = this.column.groupable;\n     * ```\n     * ```html\n     * <igx-column [groupable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public groupable = false;\n    /**\n     * Sets/gets whether the column is editable.\n     * Default value is `false`.\n     * ```typescript\n     * let isEditable = this.column.editable;\n     * ```\n     * ```html\n     * <igx-column [editable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public editable = null;\n    /**\n     * Sets/gets whether the column is filterable.\n     * Default value is `true`.\n     * ```typescript\n     * let isFilterable = this.column.filterable;\n     * ```\n     * ```html\n     * <igx-column [filterable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public filterable = true;\n    /**\n     * Sets/gets whether the column is resizable.\n     * Default value is `false`.\n     * ```typescript\n     * let isResizable = this.column.resizable;\n     * ```\n     * ```html\n     * <igx-column [resizable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public resizable = false;\n    /**\n     * Gets a value indicating whether the summary for the column is enabled.\n     * ```typescript\n     * let hasSummary = this.column.hasSummary;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    get hasSummary() {\n        return this._hasSummary;\n    }\n    /**\n     * Sets a value indicating whether the summary for the column is enabled.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [hasSummary] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set hasSummary(value) {\n        this._hasSummary = value;\n\n        if (this.grid) {\n            this.grid.summaryService.recalculateSummaries();\n        }\n    }\n    /**\n     * Gets whether the column is hidden.\n     * ```typescript\n     * let isHidden = this.column.hidden;\n     * ```\n     *@memberof IgxColumnComponent\n     */\n    @Input()\n    get hidden(): boolean {\n        return this._hidden;\n    }\n    /**\n     * Sets the column hidden property.\n     * Default value is `false`.\n     * ```typescript\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set hidden(value: boolean) {\n        if (this._hidden !== value) {\n            this._hidden = value;\n            if (this.grid) {\n                this.grid.resetCaches();\n                this.grid.endEdit(false);\n            }\n            // TODO: Simplify\n            this.check();\n            if (this.grid) {\n                this.grid.refreshSearch(true);\n                this.grid.summaryService.resetSummaryHeight();\n                this.grid.reflow();\n                this.grid.filteringService.refreshExpressions();\n            }\n        }\n    }\n    /**\n     * Gets whether the hiding is disabled.\n     * ```typescript\n     * let isHidingDisabled =  this.column.disableHiding;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    get disableHiding(): boolean {\n        return this._disableHiding;\n    }\n    /**\n     * Enables/disables hiding for the column.\n     * Default value is `false`.\n     * ```typescript\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set disableHiding(value: boolean) {\n        if (this._disableHiding !== value) {\n            this._disableHiding = value;\n            this.check();\n        }\n    }\n    /**\n     * Gets whether the pinning is disabled.\n     * ```typescript\n     * let isPinningDisabled =  this.column.disablePinning;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    get disablePinning(): boolean {\n        return this._disablePinning;\n    }\n    /**\n     * Enables/disables pinning for the column.\n     * Default value is `false`.\n     * ```typescript\n     * <igx-column [pinned] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set disablePinning(value: boolean) {\n        if (this._disablePinning !== value) {\n            this._disablePinning = value;\n            this.check();\n        }\n    }\n    /**\n     * Sets/gets whether the column is movable.\n     * Default value is `false`.\n     * ```typescript\n     * let isMovable = this.column.movable;\n     * ```\n     * ```html\n     * <igx-column [movable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public movable = false;\n    /**\n     * Gets the `width` of the column.\n     * ```typescript\n     * let columnWidth = this.column.width;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get width(): string {\n        return this.widthSetByUser ? this._width : this.defaultWidth;\n    }\n    /**\n     * Sets the `width` of the column.\n     * ```html\n     * <igx-column [width] = \"'25%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set width(value: string) {\n        if (value) {\n            this._calcWidth = null;\n            this.calcPixelWidth = NaN;\n            this.widthSetByUser = true;\n            this._width = value;\n            if (this.grid) {\n                this.cacheCalcWidth();\n            }\n        }\n    }\n\n    public get calcWidth(): any {\n        if (this._calcWidth !== null && !isNaN(this.calcPixelWidth)) {\n            return this._calcWidth;\n        }\n        this.cacheCalcWidth();\n        return this._calcWidth;\n    }\n\n    private _calcWidth = null;\n    public calcPixelWidth: number;\n\n    /**\n     * Sets/gets the maximum `width` of the column.\n     * ```typescript\n     * let columnMaxWidth = this.column.width;\n     * ```\n     * ```html\n     * <igx-column [maxWidth] = \"'75%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public maxWidth: string;\n    /**\n     * Sets/gets the minimum `width` of the column.\n     * Default value is `88`;\n     * ```typescript\n     * let columnMinWidth = this.column.minWidth;\n     * ```\n     * ```html\n     * <igx-column [minWidth] = \"'15%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public minWidth = this.defaultMinWidth;\n    /**\n     * Sets/gets the class selector of the column header.\n     * ```typescript\n     * let columnHeaderClass = this.column.headerClasses;\n     * ```\n     * ```html\n     * <igx-column [headerClasses] = \"'column-header'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public headerClasses = '';\n\n    /**\n     * Sets/gets the class selector of the column group header.\n     * ```typescript\n     * let columnHeaderClass = this.column.headerGroupClasses;\n     * ```\n     * ```html\n     * <igx-column [headerGroupClasses] = \"'column-group-header'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public headerGroupClasses = '';\n    /**\n     * Sets a conditional class selector of the column cells.\n     * Accepts an object literal, containing key-value pairs,\n     * where the key is the name of the CSS class, while the\n     * value is either a callback function that returns a boolean,\n     * or boolean, like so:\n     * ```typescript\n     * callback = (rowData, columnKey) => { return rowData[columnKey] > 6; }\n     * cellClasses = { 'className' : this.callback };\n     * ```\n     * ```html\n     * <igx-column [cellClasses] = \"cellClasses\"></igx-column>\n     * <igx-column [cellClasses] = \"{'class1' : true }\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public cellClasses: any;\n    /**\n     * Gets the column index.\n     * ```typescript\n     * let columnIndex = this.column.index;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get index(): number {\n        return this.grid.columns.indexOf(this);\n    }\n    /**\n     * Gets formatter for the column.\n     * ```typescript\n     * let columnFormatter = this.column.formatter;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    formatter: (value: any) => any;\n    /**\n     * Sets/gets whether the column filtering should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let filteringIgnoreCase = this.column.filteringIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [filteringIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public filteringIgnoreCase = true;\n    /**\n     * Sets/gets whether the column sorting should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let sortingIgnoreCase = this.column.sortingIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [sortingIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public sortingIgnoreCase = true;\n    /**\n     * Sets/gets the data type of the column values.\n     * Default value is `string`.\n     * ```typescript\n     * let columnDataType = this.column.dataType;\n     * ```\n     * ```html\n     * <igx-column [dataType] = \"'number'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public dataType: DataType = DataType.String;\n    /**\n     * Gets whether the column is `pinned`.\n     * ```typescript\n     * let isPinned = this.column.pinned;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get pinned(): boolean {\n        return this._pinned;\n    }\n    /**\n     * Sets whether the column is pinned.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [pinned] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set pinned(value: boolean) {\n        if (this._pinned !== value) {\n            if (this.grid && this.width && !isNaN(parseInt(this.width, 10))) {\n                value ? this.pin() : this.unpin();\n                return;\n            }\n            /* No grid/width available at initialization. `initPinning` in the grid\n               will re-init the group (if present)\n            */\n            this._pinned = value;\n        }\n    }\n    /**\n     * @deprecated\n     * Gets/Sets the `id` of the `igx-grid`.\n     * ```typescript\n     * let columnGridId = this.column.gridID;\n     * ```\n     * ```typescript\n     * this.column.gridID = 'grid-1';\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @DeprecateProperty(`The property is deprecated. Please, use \\`column.grid.id\\` instead.`)\n    public gridID: string;\n    /**\n     * Gets the column `summaries`.\n     * ```typescript\n     * let columnSummaries = this.column.summaries;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column `summaries`.\n     * ```typescript\n     * this.column.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set summaries(classRef: any) {\n        this._summaries = new classRef();\n\n        if (this.grid) {\n            this.grid.summaryService.removeSummariesCachePerColumn(this.field);\n            (this.grid as any)._summaryPipeTrigger++;\n            this.grid.summaryService.recalculateSummaries();\n        }\n    }\n    /**\n     * Sets/gets whether the column is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.column.searchable';\n     * ```\n     * ```html\n     *  <igx-column [searchable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column `filters`.\n     * ```typescript\n     * let columnFilters = this.column.filters'\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get filters(): IgxFilteringOperand {\n        return this._filters;\n    }\n    /**\n     * Sets the column `filters`.\n     * ```typescript\n     * this.column.filters = IgxBooleanFilteringOperand.instance().\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set filters(instance: IgxFilteringOperand) {\n        this._filters = instance;\n    }\n    /**\n     * Gets the column `sortStrategy`.\n     * ```typescript\n     * let sortStrategy = this.column.sortStrategy'\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get sortStrategy(): ISortingStrategy {\n        return this._sortStrategy;\n    }\n    /**\n     * Sets the column `sortStrategy`.\n     * ```typescript\n     * this.column.sortStrategy = new CustomSortingStrategy().\n     *\n     * class CustomSortingStrategy extends SortingStrategy {\n     * ...\n     * }\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set sortStrategy(classRef: ISortingStrategy) {\n        this._sortStrategy = classRef;\n    }\n    /**\n    * Gets the function that compares values for grouping.\n    * ```typescript\n    * let groupingComparer = this.column.groupingComparer'\n    * ```\n    * @memberof IgxColumnComponent\n    */\n    @Input()\n    public get groupingComparer(): (a: any, b: any) => number {\n        return this._groupingComparer;\n    }\n    /**\n     * Sets a custom function to compare values for grouping.\n     * Subsequent values in the sorted data that the function returns 0 for are grouped.\n     * ```typescript\n     * this.column.groupingComparer = (a: any, b: any) => { return a === b ? 0 : -1; }\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set groupingComparer(funcRef: (a: any, b: any) => number) {\n        this._groupingComparer = funcRef;\n    }\n    /**\n     * Gets the default minimum `width` of the column.\n     * ```typescript\n     * let defaultMinWidth =  this.column.defaultMinWidth;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get defaultMinWidth(): string {\n        return this._defaultMinWidth;\n    }\n    /**\n     * The reference to the `igx-grid` owner.\n     * ```typescript\n     * let gridComponent = this.column.grid;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public grid: IgxGridBaseComponent;\n    /**\n     * Returns a reference to the `bodyTemplate`.\n     * ```typescript\n     * let bodyTemplate = this.column.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input('cellTemplate')\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * Sets the body template.\n     * ```html\n     * <ng-template #bodyTemplate igxCell let-val>\n     *    <div style = \"background-color: yellowgreen\" (click) = \"changeColor(val)\">\n     *       <span> {{val}} </span>\n     *    </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'bodyTemplate'\", {read: TemplateRef })\n     * public bodyTemplate: TemplateRef<any>;\n     * this.column.bodyTemplate = this.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set bodyTemplate(template: TemplateRef<any>) {\n        this._bodyTemplate = template;\n        if (this.grid) {\n            this.grid.cdr.markForCheck();\n        }\n    }\n    /**\n     * Returns a reference to the header template.\n     * ```typescript\n     * let headerTemplate = this.column.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    get headerTemplate(): TemplateRef<any> {\n        return this._headerTemplate;\n    }\n    /**\n     * Sets the header template.\n     * ```html\n     * <ng-template #headerTemplate>\n     *   <div style = \"background-color:black\" (click) = \"changeColor(val)\">\n     *       <span style=\"color:red\" >{{column.field}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'headerTemplate'\", {read: TemplateRef })\n     * public headerTemplate: TemplateRef<any>;\n     * this.column.headerTemplate = this.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set headerTemplate(template: TemplateRef<any>) {\n        this._headerTemplate = template;\n        if (this.grid) {\n            this.grid.cdr.markForCheck();\n        }\n    }\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.column.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input('cellEditorTemplate')\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * Sets the inline editor template.\n     * ```html\n     * <ng-template #inlineEditorTemplate igxCellEditor let-cell=\"cell\">\n     *     <input type=\"string\" [(ngModel)]=\"cell.value\"/>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'inlineEditorTemplate'\", {read: TemplateRef })\n     * public inlineEditorTemplate: TemplateRef<any>;\n     * this.column.inlineEditorTemplate = this.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) {\n        this._inlineEditorTemplate = template;\n        if (this.grid) {\n            this.grid.cdr.markForCheck();\n        }\n    }\n    /**\n     * Returns a reference to the `filterCellTemplate`.\n     * ```typescript\n     * let filterCellTemplate = this.column.filterCellTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input('filterCellTemplate')\n    get filterCellTemplate(): TemplateRef<any> {\n        return this._filterCellTemplate;\n    }\n    /**\n     * Sets the quick filter template.\n     * ```html\n     * <ng-template #filterCellTemplate IgxFilterCellTemplate let-column=\"column\">\n     *    <input (input)=\"onInput()\">\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'filterCellTemplate'\", {read: TemplateRef })\n     * public filterCellTemplate: TemplateRef<any>;\n     * this.column.filterCellTemplate = this.filterCellTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set filterCellTemplate(template: TemplateRef<any>) {\n        this._filterCellTemplate = template;\n    }\n    /**\n     * Gets the cells of the column.\n     * ```typescript\n     * let columnCells =  this.column.cells;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return this.grid.rowList.filter((row) => row instanceof IgxRowComponent)\n            .map((row) => {\n                if (row.cells) {\n                    return row.cells.filter((cell) => cell.columnIndex === this.index);\n                }\n            }).reduce((a, b) => a.concat(b), []);\n    }\n    /**\n     * Gets the column visible index.\n     * If the column is not visible, returns `-1`.\n     * ```typescript\n     * let visibleColumnIndex =  this.column.visibleIndex;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get visibleIndex(): number {\n        if (!isNaN(this._vIndex)) {\n            return this._vIndex;\n        }\n        const unpinnedColumns = this.grid.unpinnedColumns.filter(c => !c.columnGroup);\n        const pinnedColumns = this.grid.pinnedColumns.filter(c => !c.columnGroup);\n        let col = this;\n        let vIndex = -1;\n\n        if (this.columnGroup) {\n            col = this.allChildren.filter(c => !c.columnGroup)[0] as any;\n        }\n\n        if (!this.pinned) {\n            const indexInCollection = unpinnedColumns.indexOf(col);\n            vIndex = indexInCollection === -1 ? -1 : pinnedColumns.length + indexInCollection;\n        } else {\n            vIndex = pinnedColumns.indexOf(col);\n        }\n        this._vIndex = vIndex;\n        return vIndex;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnGroup() {\n        return false;\n    }\n    /**\n     * Returns the children columns collection.\n     * Returns an empty array if the column does not contain children columns.\n     * ```typescript\n     * let childrenColumns =  this.column.allChildren;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return [];\n    }\n    /**\n     * Returns the level of the column in a column group.\n     * Returns `0` if the column doesn't have a `parent`.\n     * ```typescript\n     * let columnLevel =  this.column.level;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get level() {\n        let ptr = this.parent;\n        let lvl = 0;\n\n        while (ptr) {\n            lvl++;\n            ptr = ptr.parent;\n        }\n        return lvl;\n    }\n\n    get isLastPinned(): boolean {\n        return this.grid.pinnedColumns[this.grid.pinnedColumns.length - 1] === this;\n    }\n\n    /**\n     * hidden\n     */\n    public defaultWidth: string;\n\n    /**\n     * hidden\n     */\n    public widthSetByUser: boolean;\n\n    /**\n     * Returns the filteringExpressionsTree of the column.\n     * ```typescript\n     * let tree =  this.column.filteringExpressionsTree;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get filteringExpressionsTree(): FilteringExpressionsTree {\n        return this.grid.filteringExpressionsTree.find(this.field) as FilteringExpressionsTree;\n    }\n    /**\n     * Sets/gets the parent column.\n     * ```typescript\n     * let parentColumn = this.column.parent;\n     * ```\n     * ```typescript\n     * this.column.parent = higherLevelColumn;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    parent = null;\n    /**\n     * Sets/gets the children columns.\n     * ```typescript\n     * let columnChildren = this.column.children;\n     * ```\n     * ```typescript\n     * this.column.children = childrenColumns;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    children;\n    /**\n     *@hidden\n     */\n    protected _unpinnedIndex;\n    /**\n     *@hidden\n     */\n    protected _pinned = false;\n    /**\n     *@hidden\n     */\n    protected _bodyTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _headerTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _inlineEditorTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _filterCellTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _summaries = null;\n    /**\n     *@hidden\n     */\n    protected _filters = null;\n    /**\n     *@hidden\n     */\n    protected _sortStrategy: ISortingStrategy = DefaultSortingStrategy.instance();\n    /**\n     *@hidden\n     */\n    protected _groupingComparer: (a: any, b: any) => number;\n    /**\n     *@hidden\n     */\n    protected _hidden = false;\n    /**\n     *@hidden\n     */\n    protected _index: number;\n    /**\n     *@hidden\n     */\n    protected _disableHiding = false;\n    /**\n     *@hidden\n     */\n    protected _disablePinning = false;\n    /**\n     *@hidden\n     */\n    protected _width: string;\n    /**\n     *@hidden\n     */\n    protected _defaultMinWidth = '80';\n    /**\n     *@hidden\n     */\n    protected _hasSummary = false;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellTemplateDirective, { read: IgxCellTemplateDirective })\n    protected cellTemplate: IgxCellTemplateDirective;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellHeaderTemplateDirective, { read: IgxCellHeaderTemplateDirective })\n    protected headTemplate: IgxCellHeaderTemplateDirective;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellEditorTemplateDirective, { read: IgxCellEditorTemplateDirective })\n    protected editorTemplate: IgxCellEditorTemplateDirective;\n\n    private _vIndex = NaN;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxFilterCellTemplateDirective, { read: IgxFilterCellTemplateDirective })\n    public filterCellTemplateDirective: IgxFilterCellTemplateDirective;\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, public cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCaches() {\n        this._vIndex = NaN;\n        this.cacheCalcWidth();\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.cellTemplate) {\n            this._bodyTemplate = this.cellTemplate.template;\n        }\n        if (this.headTemplate) {\n            this._headerTemplate = this.headTemplate.template;\n        }\n        if (this.editorTemplate) {\n            this._inlineEditorTemplate = this.editorTemplate.template;\n        }\n        if (this.filterCellTemplateDirective) {\n            this._filterCellTemplate = this.filterCellTemplateDirective.template;\n        }\n        if (!this.summaries) {\n            switch (this.dataType) {\n                case DataType.String:\n                case DataType.Boolean:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n                case DataType.Number:\n                    this.summaries = IgxNumberSummaryOperand;\n                    break;\n                case DataType.Date:\n                    this.summaries = IgxDateSummaryOperand;\n                    break;\n                default:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n            }\n        }\n        if (!this.filters) {\n            switch (this.dataType) {\n                case DataType.Boolean:\n                    this.filters = IgxBooleanFilteringOperand.instance();\n                    break;\n                case DataType.Number:\n                    this.filters = IgxNumberFilteringOperand.instance();\n                    break;\n                case DataType.Date:\n                    this.filters = IgxDateFilteringOperand.instance();\n                    break;\n                case DataType.String:\n                default:\n                    this.filters = IgxStringFilteringOperand.instance();\n                    break;\n            }\n        }\n    }\n    /**\n     * Pins the column at the provided index in the pinned area. Defaults to index `0` if not provided.\n     * Returns `true` if the column is successfully pinned. Returns `false` if the column cannot be pinned.\n     * Column cannot be pinned if:\n     * - Is already pinned\n     * - index argument is out of range\n     * - The pinned area exceeds 80% of the grid width\n     * ```typescript\n     * let success = this.column.pin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public pin(index?: number): boolean {\n        // TODO: Probably should the return type of the old functions\n        // should be moved as a event parameter.\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (this._pinned) {\n            return false;\n        }\n\n        if (this.parent && !this.parent.pinned) {\n            return this.topLevelParent.pin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid.pinnedColumns.length)) {\n            return false;\n        }\n\n        const width = parseInt(this.width, 10);\n\n        if (!this.parent && (grid.getUnpinnedWidth(true) - width < grid.unpinnedAreaMinWidth)) {\n            return false;\n        }\n\n        this._pinned = true;\n        this._unpinnedIndex = grid._unpinnedColumns.indexOf(this);\n        index = index !== undefined ? index : grid._pinnedColumns.length;\n        const targetColumn = grid._pinnedColumns[index];\n        const args = { column: this, insertAtIndex: index, isPinned: true };\n        grid.onColumnPinning.emit(args);\n\n        if (grid._pinnedColumns.indexOf(this) === -1) {\n            grid._pinnedColumns.splice(args.insertAtIndex, 0, this);\n\n            if (grid._unpinnedColumns.indexOf(this) !== -1) {\n                grid._unpinnedColumns.splice(grid._unpinnedColumns.indexOf(this), 1);\n            }\n        }\n\n        if (hasIndex) {\n            grid._moveColumns(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.pin());\n            grid.reinitPinStates();\n        }\n\n        grid.resetCaches();\n        grid.cdr.detectChanges();\n        this.grid.filteringService.refreshExpressions();\n        this.grid.refreshSearch(true);\n        return true;\n    }\n    /**\n     * Unpins the column and place it at the provided index in the unpinned area. Defaults to index `0` if not provided.\n     * Returns `true` if the column is successfully unpinned. Returns `false` if the column cannot be unpinned.\n     * Column cannot be unpinned if:\n     * - Is already unpinned\n     * - index argument is out of range\n     * ```typescript\n     * let success = this.column.unpin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public unpin(index?: number): boolean {\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (!this._pinned) {\n            return false;\n        }\n\n        if (this.parent && this.parent.pinned) {\n            return this.topLevelParent.unpin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid._unpinnedColumns.length)) {\n            return false;\n        }\n\n        index = (index !== undefined ? index :\n            this._unpinnedIndex !== undefined ? this._unpinnedIndex : this.index);\n        this._pinned = false;\n\n        const targetColumn = grid._unpinnedColumns[index];\n\n        grid._unpinnedColumns.splice(index, 0, this);\n        if (grid._pinnedColumns.indexOf(this) !== -1) {\n            grid._pinnedColumns.splice(grid._pinnedColumns.indexOf(this), 1);\n        }\n\n        if (hasIndex) {\n            grid._moveColumns(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.unpin());\n        }\n\n        grid.reinitPinStates();\n        grid.resetCaches();\n\n        const insertAtIndex = grid._unpinnedColumns.indexOf(this);\n        const args = { column: this, insertAtIndex, isPinned: false };\n        grid.onColumnPinning.emit(args);\n\n        grid.cdr.detectChanges();\n        this.grid.filteringService.refreshExpressions();\n        this.grid.refreshSearch(true);\n\n        return true;\n    }\n    /**\n     * Returns a reference to the top level parent column.\n     * ```typescript\n     * let topLevelParent =  this.column.topLevelParent;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get topLevelParent() {\n        let parent = this.parent;\n        while (parent && parent.parent) {\n            parent = parent.parent;\n        }\n        return parent;\n    }\n    /**\n     *@hidden\n     */\n    protected check() {\n        if (this.grid) {\n            this.grid.markForCheck();\n        }\n    }\n\n    /**\n     * Returns a reference to the header of the column.\n     * ```typescript\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let headerCell = column.headerCell;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get headerCell(): IgxGridHeaderComponent {\n        return this.grid.headerCellList.find((header) => header.column === this);\n    }\n\n    /**\n    * Returns a reference to the filter cell of the column.\n    * ```typescript\n    * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n    * let filterell = column.filterell;\n    * ```\n    * @memberof IgxColumnComponent\n    */\n    get filterCell(): IgxGridFilteringCellComponent {\n        return this.grid.filterCellList.find((filterCell) => filterCell.column === this);\n    }\n\n    /**\n     * Returns a reference to the header group of the column.\n     * @memberof IgxColumnComponent\n     */\n    get headerGroup(): IgxGridHeaderGroupComponent {\n        return this.grid.headerGroupsList.find((headerGroup) => headerGroup.column === this);\n    }\n\n    /**\n     * Autosize the column to the longest currently visible cell value, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     *\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * column.autosize();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public autosize() {\n        if (!this.columnGroup) {\n\n            this.width = this.getLargestCellWidth();\n\n            this.grid.markForCheck();\n            this.grid.reflow();\n        }\n    }\n\n    /**\n     * @hidden\n     * Returns the size (in pixels) of the longest currently visible cell, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     *\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let size = column.getLargestCellWidth();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public getLargestCellWidth(): string {\n        const range = this.grid.document.createRange();\n        const largest = new Map<number, number>();\n\n        if (this.cells.length > 0) {\n            let cellsContentWidths = [];\n            if (this.cells[0].nativeElement.children.length > 0) {\n                this.cells.forEach((cell) => cellsContentWidths.push(cell.calculateSizeToFit(range)));\n            } else {\n                cellsContentWidths = this.cells.map((cell) => getNodeSizeViaRange(range, cell.nativeElement));\n            }\n\n            const index = cellsContentWidths.indexOf(Math.max(...cellsContentWidths));\n            const cellStyle = this.grid.document.defaultView.getComputedStyle(this.cells[index].nativeElement);\n            const cellPadding = parseFloat(cellStyle.paddingLeft) + parseFloat(cellStyle.paddingRight) +\n                parseFloat(cellStyle.borderRightWidth);\n\n            largest.set(Math.max(...cellsContentWidths), cellPadding);\n        }\n\n        if (this.headerCell) {\n            let headerCell;\n            if (this.headerTemplate && this.headerCell.elementRef.nativeElement.children[0].children.length > 0) {\n                headerCell = Math.max(...Array.from(this.headerCell.elementRef.nativeElement.children[0].children)\n                    .map((child) => getNodeSizeViaRange(range, child)));\n            } else {\n                headerCell = getNodeSizeViaRange(range, this.headerCell.elementRef.nativeElement.children[0]);\n            }\n\n            if (this.sortable || this.filterable) {\n                headerCell += this.headerCell.elementRef.nativeElement.children[1].getBoundingClientRect().width;\n            }\n\n            const headerStyle = this.grid.document.defaultView.getComputedStyle(this.headerCell.elementRef.nativeElement);\n            const headerPadding = parseFloat(headerStyle.paddingLeft) + parseFloat(headerStyle.paddingRight) +\n                parseFloat(headerStyle.borderRightWidth);\n            largest.set(headerCell, headerPadding);\n\n        }\n\n        const largestCell = Math.max(...Array.from(largest.keys()));\n        const width = Math.ceil(largestCell + largest.get(largestCell));\n\n        if (Number.isNaN(width)) {\n            return this.width;\n        } else {\n            return width + 'px';\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public getCellWidth() {\n        const colWidth = this.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (colWidth && !isPercentageWidth) {\n\n            let cellWidth = colWidth;\n            if (typeof cellWidth !== 'string' || cellWidth.endsWith('px') === false) {\n                cellWidth += 'px';\n            }\n\n            return cellWidth;\n        } else {\n            return colWidth;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected cacheCalcWidth(): any {\n        const grid = this.gridAPI.grid;\n        const colWidth = this.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n        if (isPercentageWidth) {\n            this._calcWidth = parseInt(colWidth, 10) / 100 * grid.unpinnedWidth;\n        } else if (!colWidth) {\n            // no width\n            this._calcWidth = this.defaultWidth || grid.getPossibleColumnWidth();\n        } else {\n            this._calcWidth = this.width;\n        }\n        this.calcPixelWidth = parseInt(this._calcWidth, 10);\n    }\n}\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(() => IgxColumnGroupComponent) }],\n    selector: 'igx-column-group',\n    template: ``\n})\nexport class IgxColumnGroupComponent extends IgxColumnComponent implements AfterContentInit {\n\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent })\n    children = new QueryList<IgxColumnComponent>();\n    /**\n     * Gets the column group `summaries`.\n     * ```typescript\n     * let columnGroupSummaries = this.columnGroup.summaries;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column group `summaries`.\n     * ```typescript\n     * this.columnGroup.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set summaries(classRef: any) { }\n    /**\n     * Sets/gets whether the column group is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.columnGroup.searchable;\n     * ```\n     * ```html\n     *  <igx-column-group [searchable] = \"false\"></igx-column-group>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column group `filters`.\n     * ```typescript\n     * let columnGroupFilters = this.columnGroup.filters;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get filters(): any {\n        return this._filters;\n    }\n    /**\n     * Sets the column group `filters`.\n     * ```typescript\n     * this.columnGroup.filters = IgxStringFilteringOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set filters(classRef: any) { }\n    /**\n     * Gets the default minimum `width` of the column group.\n     * ```typescript\n     * let defaultMinWidth = this.columnGroup.defaultMinWidth;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get defaultMinWidth(): string {\n        return this._defaultMinWidth;\n    }\n    /**\n     * Returns a reference to the body template.\n     * ```typescript\n     * let bodyTemplate = this.columnGroup.bodyTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set bodyTemplate(template: TemplateRef<any>) { }\n    /**\n     * Returns a reference to the header template.\n     * ```typescript\n     * let headerTemplate = this.columnGroup.headerTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get headerTemplate(): TemplateRef<any> {\n        return this._headerTemplate;\n    }\n    /**\n     * @hidden\n     * @memberof IgxColumnGroupComponent\n     */\n    set headerTemplate(template: TemplateRef<any>) { }\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.columnGroup.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) { }\n    /**\n     * Gets the column group cells.\n     * ```typescript\n     * let columnCells = this.columnGroup.cells;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return [];\n    }\n    /**\n     * Gets whether the column group is hidden.\n     * ```typescript\n     * let isHidden = this.columnGroup.hidden;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    get hidden() {\n        return this.allChildren.every(c => c.hidden);\n    }\n    /**\n     * Sets the column group hidden property.\n     * ```typescript\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.children.forEach(child => child.hidden = value);\n    }\n    /**\n     *@hidden\n     */\n    ngAfterContentInit() {\n        /*\n            @ContentChildren with descendants still returns the `parent`\n            component in the query list.\n        */\n        this.children.reset(this.children.toArray().slice(1));\n        this.children.forEach(child => {\n            child.parent = this;\n        });\n    }\n    /**\n     * Returns the children columns collection.\n     * ```typescript\n     * let columns =  this.columnGroup.allChildren;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return flatten(this.children.toArray());\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let isColumnGroup =  this.columnGroup.columnGroup\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get columnGroup() {\n        return true;\n    }\n    /**\n     * Gets the width of the column group.\n     * ```typescript\n     * let columnGroupWidth = this.columnGroup.width;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get width() {\n        let isChildrenWidthInPercent = false;\n        const width = `${this.children.reduce((acc, val) => {\n            if (val.hidden) {\n                return acc;\n            }\n\n            if (typeof val.width === 'string' && val.width.indexOf('%') !== -1) {\n                isChildrenWidthInPercent = true;\n            }\n            return acc + parseInt(val.width, 10);\n        }, 0)}`;\n        return isChildrenWidthInPercent ? width + '%' : width;\n    }\n\n    set width(val) { }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, public cdr: ChangeDetectorRef) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(gridAPI, cdr);\n    }\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\n\nexport interface IValueChangedEventArgs {\n    oldValue: any;\n    newValue: any;\n}\n\n/**\n *@hidden\n */\nexport abstract class ItemPropertyValueChanged {\n    private _object: any;\n    private _propName: string;\n\n    get object() {\n        return this._object;\n    }\n\n    set object(value) {\n        if (value) {\n            this._object = value;\n        }\n    }\n\n    @Input()\n    get value() {\n        return (this.object) ? this.object[this._propName] : null;\n    }\n\n    set value(value) {\n        this.onValueChanged(value);\n    }\n\n    @Output()\n    public valueChanged = new EventEmitter<IValueChangedEventArgs>();\n\n    constructor(propName: string) {\n        this._propName = propName;\n    }\n\n    protected onValueChanged(value) {\n        const currentValue = this.value;\n        if (value !== currentValue) {\n            this.object[this._propName] = value;\n            this.valueChanged.emit({ oldValue: currentValue, newValue: value });\n        }\n    }\n}\n\n/** @hidden */\nexport class ColumnChooserItemBase extends ItemPropertyValueChanged {\n    @Input()\n    get column() {\n        return this.object;\n    }\n\n    set column(value) {\n        if (value) {\n            this.object = value;\n        }\n    }\n\n    @Input()\n    public indentation = 30;\n\n    @Input()\n    public container: any;\n\n    constructor(public prop: string) {\n        super(prop);\n    }\n\n    get name() {\n        return (this.column) ? ((this.column.header) ? this.column.header : this.column.field) : '';\n    }\n\n    get level() {\n        return this.column.level;\n    }\n\n    get calcIndent() {\n        return this.indentation * this.level;\n    }\n}\n","\nimport { Directive } from '@angular/core';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\n\nexport interface IColumnVisibilityChangedEventArgs {\n    column: any;\n    newValue: boolean;\n}\n\n/** @hidden */\n@Directive({\n    selector: '[igxColumnHidingItem]'\n})\nexport class IgxColumnHidingItemDirective extends ColumnChooserItemBase {\n\n    constructor() {\n        super('hidden');\n    }\n\n    get disabled() {\n        return this.column.disableHiding;\n    }\n}\n","import { ChangeDetectorRef, HostBinding, Input, OnDestroy } from '@angular/core';\nimport { IgxStringFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { FilteringStrategy } from '../data-operations/filtering-strategy';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\n\nexport enum ColumnDisplayOrder {\n    Alphabetical = 'Alphabetical',\n    DisplayOrder = 'DisplayOrder'\n}\n\nclass CustomFilteringStrategy extends FilteringStrategy {\n    public filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[] {\n        const res: ColumnChooserItemBase[] = [];\n        data.forEach((item: ColumnChooserItemBase) => {\n            if (this.matchRecord(item, expressionsTree.filteringOperands[0] as IFilteringExpression)) {\n                res.push(item);\n            } else if (item.column.columnGroup) {\n                if (item.column.allChildren.findIndex((child) =>\n                    this.matchRecord(child, expressionsTree.filteringOperands[1] as IFilteringExpression) ||\n                    this.matchRecord(child, expressionsTree.filteringOperands[2] as IFilteringExpression)) > -1) {\n                    res.push(item);\n                }\n            }\n        });\n\n        return res;\n    }\n}\n\n/** @hidden */\nexport abstract class ColumnChooserBase implements OnDestroy {\n    /**\n     * Gets the grid columns that are going to be manipulated.\n     * ```typescript\n     * let gridColumns = this.columnHidingUI.columns;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n\n    @Input()\n    get columns() {\n        return this._gridColumns;\n    }\n    /**\n     * Sets the the grid columns that are going to be manipulated.\n     * ```html\n     * <igx-column-hiding [columns]=\"grid.columns\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set columns(value) {\n        if (value) {\n            this._gridColumns = value;\n            this.createColumnItems();\n            if (this.filterCriteria) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Sets/gets the title of the column chooser.\n     * ```typescript\n     * let title =  this.columnHidingUI.title;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get title() {\n        return this._title;\n    }\n    /**\n     * ```html\n     * <igx-column-hiding [title]=\"'IgxColumnHidingComponent Title'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set title(value) {\n        this._title = (value) ? value : '';\n    }\n    /**\n     * Gets the prompt that is displayed in the filter input.\n     * ```typescript\n     * let filterColumnsPrompt =  this.columnHidingUI.filterColumnsPrompt;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n    /**\n     * Sets the prompt that is going to be displayed in the filter input.\n     * ```html\n     * <igx-column-hiding [filterColumnsPrompt]=\"'Type here to search'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set filterColumnsPrompt(value) {\n        this._filterColumnsPrompt = (value) ? value : '';\n    }\n    /**\n     * Hides/ shows the filtering columns input from the UI.\n     */\n    @Input()\n    public disableFilter = false;\n    /**\n     * Gets the items of the selected columns.\n     * ```typescript\n     * let columnItems =  this.columnHidingUI.columnItems;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get columnItems() {\n        return this._currentColumns;\n    }\n    /**\n     * Gets the value which filters the columns list.\n     * ```typescript\n     * let filterCriteria =  this.columnHidingUI.filterCriteria;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get filterCriteria() {\n        return this._filterCriteria;\n    }\n\n    /**\n     * Sets the value which filters the columns list.\n     * ```html\n     *  <igx-column-hiding [filterCriteria]=\"'ID'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set filterCriteria(value) {\n        if (!value || value.length === 0) {\n            this.clearFiltering();\n            this._filterCriteria = '';\n            this.cdr.detectChanges();\n            return;\n        } else if (this._filterCriteria && this._filterCriteria.length > value.length) {\n            this.clearFiltering();\n        }\n\n        this._filterCriteria = value;\n        this.filter();\n        this.cdr.detectChanges();\n    }\n    /**\n     * Gets the display order of the columns.\n     * ```typescript\n     * let columnDisplayOrder  =  this.columnHidingUI.columnDisplayOrder;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get columnDisplayOrder() {\n        return this._columnDisplayOrder;\n    }\n    /**\n     * Sets the display order of the columns.\n     * ```typescript\n     * this.columnHidingUI.columnDisplayOrder = ColumnDisplayOrder.Alphabetical;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set columnDisplayOrder(value: ColumnDisplayOrder) {\n        if (value !== undefined) {\n            this.orderColumns(value);\n            if (this._filterCriteria.length > 0) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Access to the columnHidingUI:\n     * ```typescript\n     * @ViewChild('column-hiding-component')\n     *  public columnHidingUI: IgxColumnHidingComponent;\n     * ```\n     * Sets/gets the max height of the column area.\n     * ```typescript\n     * let columnsAreaMaxHeight =  this.columnHidingUI.columnsAreaMaxHeight;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [columnsAreaMaxHeight]=\"200px\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    public columnsAreaMaxHeight = '100%';\n    /**\n     * Sets/Gets the css class selector.\n     * By default the value of the `class` attribute is `\"igx-column-hiding\"`.\n     * ```typescript\n     * let cssCLass =  this.columnHidingUI.cssClass;\n     * ```\n     * ```typescript\n     * this.columnHidingUI.cssClass = 'column-chooser';\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @HostBinding('attr.class')\n    public cssClass = 'igx-column-hiding';\n    /**\n     *@hidden\n     */\n    private _currentColumns = [];\n    /**\n     *@hidden\n     */\n    private _gridColumns = [];\n    /**\n     *@hidden\n     */\n    private _rawColumns = [];\n    /**\n     *@hidden\n     */\n    private _columnDisplayOrder = ColumnDisplayOrder.DisplayOrder;\n    /**\n     *@hidden\n     */\n    private _filterCriteria = '';\n    /**\n     *@hidden\n     */\n    private _filterColumnsPrompt = '';\n    /**\n     *@hidden\n     */\n    private _title = '';\n\n    constructor(public cdr: ChangeDetectorRef) {\n    }\n    /**\n     *@hidden\n     */\n    ngOnDestroy() {\n        for (const item of this._currentColumns) {\n            item.valueChanged.unsubscribe();\n        }\n    }\n    /**\n     *@hidden\n     */\n    private createColumnItems() {\n        if (this._gridColumns.length > 0) {\n            this._rawColumns = [];\n            this._gridColumns.forEach((column) => {\n                const item = this.createColumnItem(this, column);\n                if (item) {\n                    this._rawColumns.push(item);\n                }\n            });\n            this._currentColumns = this._rawColumns.slice(0);\n            this.orderColumns(this._columnDisplayOrder);\n        }\n    }\n    /**\n     *@hidden\n     */\n    protected abstract createColumnItem(container: any, column: any);\n    /**\n     *@hidden\n     */\n    private orderColumns(value) {\n        this._columnDisplayOrder = value;\n        if (value === ColumnDisplayOrder[ColumnDisplayOrder.Alphabetical] ||\n            value === ColumnDisplayOrder.Alphabetical) {\n            this._currentColumns = this._rawColumns.slice(0).sort((current, next) => {\n                return current.name.toLowerCase().localeCompare(next.name.toLowerCase());\n            });\n        } else {\n            this._currentColumns = this._rawColumns;\n        }\n    }\n    /**\n     *@hidden\n     */\n    protected filter() {\n        const filteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.Or);\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('name'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('field'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('header'));\n\n        const strategy = new CustomFilteringStrategy();\n        this._currentColumns = strategy.filter(this._currentColumns, filteringExpressionsTree);\n    }\n    /**\n     *@hidden\n     */\n    protected createFilteringExpression(fieldName: string): IFilteringExpression {\n        return {\n            condition: IgxStringFilteringOperand.instance().condition('contains'),\n            fieldName: fieldName,\n            ignoreCase: true,\n            searchVal: this._filterCriteria\n        };\n    }\n    /**\n     *@hidden\n     */\n    protected clearFiltering() {\n        this.createColumnItems();\n    }\n}\n\n\n","import { CommonModule } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    NgModule,\n    Output,\n    OnDestroy\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IColumnVisibilityChangedEventArgs, IgxColumnHidingItemDirective } from './column-hiding-item.directive';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { ColumnChooserBase } from './column-chooser-base';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-hiding',\n    templateUrl: './column-hiding.component.html'\n})\nexport class IgxColumnHidingComponent extends ColumnChooserBase implements OnDestroy {\n    /**\n     * Returns a boolean indicating whether the `HIDE ALL` button is disabled.\n     * ```html\n     * <igx-column-hiding #columnHidingUI\n     *     [columns]=\"grid.columns\" [title]=\"'Column Hiding'\">\n     * </igx-column-hiding>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'columnHidingUI'\")\n     * public columnHiding: IgxColumnHidingComponent;\n     * let isHideAlldisabled =  this.columnHiding.disableHideAll;\n     * ```\n     *@memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableHideAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount === this.columns.length) {\n            return true;\n        } else if (this.hidableColumns.length < 1 ||\n            this.hidableColumns.length === this.hidableColumns.filter((col) => col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Returns a boolean indicating whether the `SHOW ALL` button is disabled.\n     * ```typescript\n     * let isShowAlldisabled =  this.columnHiding.disableShowAll;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableShowAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount < 1 || this.hidableColumns.length < 1) {\n            return true;\n        } else if (this.hidableColumns.length === this.hidableColumns.filter((col) => !col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Sets/gets the text of the button that shows all columns if they are hidden.\n     * ```typescript\n     * let showAllButtonText =  this.columnHiding.showAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [showAllText] = \"'Show Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public showAllText = 'Show All';\n    /**\n     * Sets/gets the text of the button that hides all columns if they are shown.\n     * ```typescript\n     * let hideAllButtonText =  this.columnHiding.hideAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [hideAllText] = \"'Hide Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public hideAllText = 'Hide All';\n    /**\n     * An event that is emitted after the columns visibility is changed.\n     * Provides references to the `column` and the `newValue` properties as event arguments.\n     * ```html\n     *  <igx-column-hiding (onColumnVisibilityChanged) = \"onColumnVisibilityChanged($event)\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n    /**\n     * Gets the count of the hidden columns.\n     * ```typescript\n     * let hiddenColumnsCount =  this.columnHiding.hiddenColumnsCount;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public get hiddenColumnsCount() {\n        return (this.columns) ? this.columns.filter((col) => col.hidden).length : 0;\n    }\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    /**\n     *@hidden\n     */\n    public get hidableColumns() {\n        return this.columnItems.filter((col) => !col.disabled);\n    }\n\n    private destroy$ = new Subject<boolean>();\n    /**\n     *@hidden\n     */\n    protected createColumnItem(container: any, column: any) {\n        const item = new IgxColumnHidingItemDirective();\n        item.container = container;\n        item.column = column;\n\n        item.valueChanged.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.onVisibilityChanged({ column: item.column, newValue: args.newValue });\n        });\n\n        return item;\n    }\n    /**\n     * Shows all columns in the grid.\n     * ```typescript\n     * this.columnHiding.showAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public showAllColumns() {\n        for (const col of this.hidableColumns) {\n            col.value = false;\n        }\n    }\n    /**\n     * Hides all columns in the grid.\n     * ```typescript\n     * this.columnHiding.hideAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public hideAllColumns() {\n        for (const col of this.hidableColumns) {\n            col.value = true;\n        }\n    }\n    /**\n     * @hidden\n     */\n    public onVisibilityChanged(args: IColumnVisibilityChangedEventArgs) {\n        this.onColumnVisibilityChanged.emit(args);\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxColumnHidingComponent, IgxColumnHidingItemDirective],\n    exports: [IgxColumnHidingComponent],\n    imports: [\n        IgxButtonModule,\n        IgxCheckboxModule,\n        IgxInputGroupModule,\n        CommonModule,\n        FormsModule,\n    ]\n})\nexport class IgxColumnHidingModule {\n}\n","\nimport { CommonModule } from '@angular/common';\nimport { Directive, Component, EventEmitter, Output, NgModule, ChangeDetectorRef } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { ColumnChooserBase } from './column-chooser-base';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\n\n@Directive({\n    selector: '[igxColumnPinningItem]'\n})\nexport class IgxColumnPinningItemDirective extends ColumnChooserItemBase {\n\n    constructor() {\n        super('pinned');\n    }\n\n    /**\n     * Returns whether a column could be pinned.\n     * It's not possible to pin a column if there is not enough space for the unpinned area.\n     * ```typescript\n     * const columnItem: IgxColumnPinningItemDirective;\n     * this.columnItem.pinnable;\n     * ```\n     */\n    get pinnable() {\n        if (this.column.grid.getUnpinnedWidth(true) - this.column.width < this.column.grid.unpinnedAreaMinWidth) {\n            return false;\n        }\n        return true;\n    }\n}\n\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-pinning',\n    templateUrl: './column-pinning.component.html'\n})\nexport class IgxColumnPinningComponent extends ColumnChooserBase {\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    /**\n     * @hidden\n     */\n    createColumnItem(container: any, column: any) {\n        if (column.level !== 0 || column.disablePinning) {\n            return null;\n        }\n        const item = new IgxColumnPinningItemDirective();\n        item.container = container;\n        item.column = column;\n        return item;\n    }\n\n    /**\n     * @hidden\n     */\n    public checkboxValueChange(event, columnItem: IgxColumnPinningItemDirective) {\n        if (event.checked && !columnItem.pinnable) {\n            event.checkbox.checked = false;\n            return false;\n        }\n        columnItem.value = !columnItem.value;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxColumnPinningComponent, IgxColumnPinningItemDirective],\n    exports: [IgxColumnPinningComponent],\n    imports: [\n        IgxCheckboxModule,\n        IgxInputGroupModule,\n        CommonModule,\n        FormsModule\n    ]\n})\nexport class IgxColumnPinningModule {\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    HostBinding,\n    Input,\n    Optional,\n    ViewChild,\n    Inject,\n    TemplateRef\n} from '@angular/core';\n\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport {\n    CsvFileTypes,\n    IgxBaseExporter,\n    IgxCsvExporterOptions,\n    IgxCsvExporterService,\n    IgxExcelExporterOptions,\n    IgxExcelExporterService,\n    AbsoluteScrollStrategy\n} from '../services/index';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxDropDownComponent } from '../drop-down/drop-down.component';\nimport { IgxColumnHidingComponent } from './column-hiding.component';\nimport { IgxColumnPinningComponent } from './column-pinning.component';\nimport { OverlaySettings, PositionSettings, HorizontalAlignment, VerticalAlignment } from '../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../services/overlay/position';\n\n/**\n * This class encapsulates the Toolbar's logic and is internally used by\n * the `IgxGridComponent`, `IgxTreeGridComponent` and `IgxHierarchicalGridComponent`.\n */\n@Component({\n    selector: 'igx-grid-toolbar',\n    templateUrl: './grid-toolbar.component.html'\n})\nexport class IgxGridToolbarComponent extends DisplayDensityBase {\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-grid-toolbar')\n    @Input()\n    public gridID: string;\n\n    /**\n     * Gets the default text shown in the filtering box.\n     * ```typescript\n     * const filterPrompt = this.grid.toolbar.filterColumnsPrompt;\n     * ```\n     */\n    @Input()\n    public get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n\n    /**\n     * Sets the default text shown in the filtering box.\n     * ```typescript\n     * this.grid.toolbar.filterColumnsPrompt('Filter columns ...');\n     * ```\n     */\n    public set filterColumnsPrompt(value: string) {\n        this._filterColumnsPrompt = value;\n    }\n\n    private _filterColumnsPrompt = 'Filter columns list ...';\n\n    /**\n     * Gets the height for the `IgxGridToolbarComponent`'s drop down panels.\n     * ```typescript\n     * const dropdownHeight = this.grid.toolbar.defaultDropDownsMaxHeight;\n     * ```\n     */\n    @Input()\n    get defaultDropDownsMaxHeight() {\n        const gridHeight = this.grid.calcHeight;\n        return (gridHeight) ? gridHeight * 0.7 + 'px' : '100%';\n    }\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Hiding UI.\n     * ```typescript\n     * const dropdownHiding = this.grid.toolbar.columnHidingDropdown;\n     * ```\n     */\n    @ViewChild('columnHidingDropdown', { read: IgxDropDownComponent })\n    public columnHidingDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnHidingComponent`.\n     * ```typescript\n     * const hidingUI = this.grid.toolbar.columnHidingUI;\n     * ```\n     */\n    @ViewChild(IgxColumnHidingComponent)\n    public columnHidingUI: IgxColumnHidingComponent;\n\n    /**\n     * Provides a reference to the Column Hiding button.\n     * ```typescript\n     * const hidingButton = this.grid.toolbar.columnHidingButton;\n     * ```\n     */\n    @ViewChild('columnHidingButton')\n    public columnHidingButton;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Export button.\n     * ```typescript\n     * const exportDropdown = this.grid.toolbar.exportDropdown;\n     * ```\n     */\n    @ViewChild('exportDropdown', { read: IgxDropDownComponent })\n    public exportDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the Export button.\n     * ```typescript\n     * const exportBtn = this.grid.toolbar.exportButton;\n     * ```\n     */\n    @ViewChild('btnExport')\n    public exportButton;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Pinning UI.\n     * ```typescript\n     * const dropdownPinning = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild('columnPinningDropdown', { read: IgxDropDownComponent })\n    public columnPinningDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnPinningComponent`.\n     * ```typescript\n     * const pinningUI = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild(IgxColumnPinningComponent)\n    public columnPinningUI: IgxColumnPinningComponent;\n\n    /**\n     * Provides a reference to the Column Pinning button.\n     * ```typescript\n     * const pinningButton = this.grid.toolbar.columnPinningButton;\n     * ```\n     */\n    @ViewChild('columnPinningButton')\n    public columnPinningButton;\n\n    /**\n     * Returns a reference to the `IgxGridComponent` component, hosting the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const grid = this.igxGrid1.toolbar.grid;\n     * ```\n     */\n    public get grid(): IgxGridBaseComponent {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an export button.\n     * ```typescript\n     * const exportButton = this.igxGrid1.toolbar.shouldShowExportButton;\n     * ```\n     */\n    public get shouldShowExportButton(): boolean {\n        return (this.grid != null && (this.grid.exportExcel || this.grid.exportCsv));\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an Excel export button.\n     * ```typescript\n     * const exportExcelButton = this.igxGrid1.toolbar.shouldShowExportExcelButton;\n     * ```\n     */\n    public get shouldShowExportExcelButton(): boolean {\n        return (this.grid != null && this.grid.exportExcel);\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an CSV export button.\n     * ```typescript\n     * const exportCSVButton = this.igxGrid1.toolbar.shouldShowExportCsvButton;\n     * ```\n     */\n    public get shouldShowExportCsvButton(): boolean {\n        return (this.grid != null && this.grid.exportCsv);\n    }\n\n    /**\n     * Returns how many columns are pinned.\n     * ```typescript\n     * const pinnedCount = this.igxGrid1.toolbar.pinnedColumnsCount;\n     * ```\n     */\n    public get pinnedColumnsCount() {\n        return this.grid.pinnedColumns.length;\n    }\n\n    /**\n     * Returns the theme of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTheme = this.grid.toolbar.hostClass;\n     * ```\n     */\n\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        return this.getComponentDensityClass('igx-grid-toolbar');\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public cdr: ChangeDetectorRef,\n        @Optional() public excelExporter: IgxExcelExporterService,\n        @Optional() public csvExporter: IgxCsvExporterService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n    }\n\n    private _positionSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Left,\n        horizontalStartPoint: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _overlaySettings: OverlaySettings = {\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: true,\n        excludePositionTarget: true\n    };\n\n\n    /**\n     * Returns the title of `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTitle = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getTitle(): string {\n        return this.grid != null ? this.grid.toolbarTitle : '';\n    }\n\n    /**\n     * Returns the text of the export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExportText = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getExportText(): string {\n        return this.grid != null ? this.grid.exportText : '';\n    }\n\n    /**\n     * Returns the text of the Excel export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExcelText = this.igxGrid1.toolbar.getExportExcelText();\n     * ```\n     */\n    public getExportExcelText(): string {\n        return this.grid != null ? this.grid.exportExcelText : '';\n    }\n\n    /**\n     * Returns the text of the CSV export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarCSVText = this.igxGrid1.toolbar.getExportCsvText();\n     * ```\n     */\n    public getExportCsvText(): string {\n        return this.grid != null ? this.grid.exportCsvText : '';\n    }\n\n    /**\n     * Toggles the export button's dropdown menu.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportClicked();\n     * ```\n     */\n    public exportClicked() {\n        this._overlaySettings.positionStrategy.settings.target = this.exportButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.exportDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Exports the grid to excel.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToExcelClicked();\n     * ```\n     */\n    public exportToExcelClicked() {\n        this.performExport(this.excelExporter, 'excel');\n    }\n\n    /**\n     * Exports the grid to CSV.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToCsvClicked();\n     * ```\n     */\n    public exportToCsvClicked() {\n        this.performExport(this.csvExporter, 'csv');\n    }\n\n    private performExport(exp: IgxBaseExporter, exportType: string) {\n        this.exportClicked();\n\n        const fileName = 'ExportedData';\n        const options = exportType === 'excel' ?\n            new IgxExcelExporterOptions(fileName) :\n            new IgxCsvExporterOptions(fileName, CsvFileTypes.CSV);\n\n        const args = { grid: this.grid, exporter: exp, options: options, cancel: false };\n\n        this.grid.onToolbarExporting.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        exp.export(this.grid, options);\n    }\n\n    /**\n     * Toggles the Column Hiding UI.\n     * ```typescript\n     * this.grid1.toolbar.toggleColumnHidingUI();\n     * ```\n     */\n    public toggleColumnHidingUI() {\n        this._overlaySettings.positionStrategy.settings.target = this.columnHidingButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.columnHidingDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Toggles the Column Pinning UI.\n     * ```typescript\n     * this.grid1.toolbar.toggleColumnPinningUI();\n     * ```\n     */\n    public toggleColumnPinningUI() {\n        this._overlaySettings.positionStrategy.settings.target = this.columnPinningButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.columnPinningDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the\n     * `toolbar custom container` by providing references to the parent IgxGird and the toolbar itself.\n     * ```typescript\n     * const context =  this.igxGrid.toolbar.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            // $implicit: this\n            grid: this.grid,\n            toolbar: this\n        };\n    }\n\n    /** @hidden */\n    public get customContentTemplate(): TemplateRef<any> {\n        if (this.grid != null && this.grid.toolbarCustomContentTemplate != null) {\n            return this.grid.toolbarCustomContentTemplate.template;\n        } else {\n            return null;\n        }\n    }\n}\n\n/**\n * The IgxGridToolbarCustomContentDirective directive is used to mark an 'ng-template' (with\n * the 'igxToolbarCustomContent' selector) defined in the IgxGrid which is used to provide\n * custom content for cener part of the IgxGridToolbar.\n */\n@Directive({\n    selector: '[igxToolbarCustomContent]'\n})\nexport class IgxGridToolbarCustomContentDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Directive, ElementRef, forwardRef, HostListener, Inject, QueryList } from '@angular/core';\nimport { IgxGridBaseComponent } from './grid-base.component';\nimport { first, tap } from 'rxjs/operators';\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEdit]'\n})\nexport class IgxRowEditTemplateDirective { }\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEditText]'\n})\nexport class IgxRowEditTextDirective { }\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEditActions]'\n})\nexport class IgxRowEditActionsDirective { }\n\n\n// TODO: Refactor circular ref, deps and logic\n/** @hidden */\n@Directive({\n    selector: `[igxRowEditTabStop]`\n})\nexport class IgxRowEditTabStopDirective {\n    private get allTabs(): QueryList<IgxRowEditTabStopDirective> {\n        return this.grid.rowEditTabs;\n    }\n\n    constructor(\n        @Inject(forwardRef(() => IgxGridBaseComponent)) private grid: IgxGridBaseComponent,\n        public element: ElementRef) {\n        }\n\n    @HostListener('keydown.Tab', [`$event`])\n    @HostListener('keydown.Shift.Tab', [`$event`])\n    public handleTab(event: KeyboardEvent): void {\n        event.stopPropagation();\n        if (this.allTabs.length > 1) {\n            if ((this.allTabs.last ===  this && !event.shiftKey) ||\n                (this.allTabs.first ===  this && event.shiftKey)\n            ) {\n                this.move(event);\n            }\n        } else {\n            this.move(event);\n        }\n    }\n    private focusNextCell(rowIndex, cellIndex) {\n        const grid = this.grid as any;\n        grid.parentVirtDir.onChunkLoad.pipe(first(), tap(() => grid.markForCheck())).subscribe(() => {\n            grid.rowInEditMode.cells.find(c => c.visibleColumnIndex === cellIndex).element.nativeElement.focus();\n        });\n    }\n    private move(event: KeyboardEvent) {\n        event.preventDefault();\n        const horizontalScroll = this.grid.parentVirtDir.getHorizontalScroll();\n        const targetIndex = event.shiftKey ? this.grid.lastEditableColumnIndex : this.grid.firstEditableColumnIndex;\n        const targetCell = this.grid.rowInEditMode.cells.find(e => e.visibleColumnIndex === targetIndex);\n        if (!targetCell ||\n            !this.grid.navigation.isColumnFullyVisible(targetIndex)\n            || !this.grid.navigation.isColumnLeftFullyVisible(targetIndex)) {\n            this.focusNextCell(this.grid.rowInEditMode.index, targetIndex);\n            horizontalScroll.scrollLeft =\n            this.grid.rowInEditMode.virtDirRow.getColumnScrollLeft(this.grid.navigation.getColumnUnpinnedIndex(targetIndex));\n        } else {\n            targetCell.nativeElement.focus();\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    ViewChild,\n} from '@angular/core';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { IgxGridSelectionService } from '../../core/grid-selection';\nimport { ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS, SUPPORTED_KEYS } from '../../core/utils';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-groupby-row',\n    templateUrl: './groupby-row.component.html'\n})\nexport class IgxGridGroupByRowComponent {\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        private gridSelection: IgxGridSelectionService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden\n     */\n    protected defaultCssClass = 'igx-grid__group-row';\n\n    /**\n     * @hidden\n     */\n    protected paddingIndentationCssClass = 'igx-grid__group-row--padding-level';\n\n    /**\n     * @hidden\n     */\n    @Input()\n    protected isFocused = false;\n\n    /**\n     * Returns whether the row is focused.\n     * ```\n     * let gridRowFocused = this.grid1.rowList.first.focused;\n     * ```\n     */\n    get focused(): boolean {\n        return this.isFocused;\n    }\n\n    /**\n     * An @Input property that sets the index of the row.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * An @Input property that sets the id of the grid the row belongs to.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * An @Input property that specifies the group record the component renders for.\n     * ```typescript\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public groupRow: IGroupByRecord;\n\n    /**\n     * Returns a reference of the content of the group.\n     * ```typescript\n     * const groupRowContent = this.grid1.rowList.first.groupContent;\n     * ```\n     */\n    @ViewChild('groupContent')\n    public groupContent: ElementRef;\n\n    /**\n     * Returns whether the group row is expanded.\n     * ```typescript\n     * const groupRowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this.grid.isExpandedGroup(this.groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.aria-describedby')\n    get describedBy(): string {\n        const grRowExpr = this.groupRow.expression !== undefined ? this.groupRow.expression.fieldName : '';\n        return this.gridID + '_' + grRowExpr;\n    }\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * Returns a reference to the underlying HTML element.\n     * ```typescript\n     * const groupRowElement = this.nativeElement;\n     * ```\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Returns the style classes applied to the group rows.\n     * ```typescript\n     * const groupCssStyles = this.grid1.rowList.first.styleClasses;\n     * ```\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return `${this.defaultCssClass} ` + `${this.paddingIndentationCssClass}-` + this.groupRow.level +\n            (this.focused ? ` ${this.defaultCssClass}--active` : '');\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('focus')\n    public onFocus() {\n        this.isFocused = true;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('blur')\n    public onBlur() {\n        this.isFocused = false;\n    }\n\n    /**\n     * Toggles the group row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    public toggle() {\n        const isVirtualized = !this.grid.verticalScrollContainer.dc.instance.notVirtual;\n        const groupRowIndex = this.index;\n        this.grid.toggleGroup(this.groupRow);\n        if (isVirtualized) {\n            const groupRow = this.grid.nativeElement.querySelector(`[data-rowIndex=\"${groupRowIndex}\"]`);\n            if (groupRow) {\n                groupRow.focus();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event) {\n        // TODO: Refactor\n        const key = event.key.toLowerCase();\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n        const keydownArgs = { targetType: 'groupRow', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(keydownArgs);\n        if (keydownArgs.cancel) {\n            return;\n        }\n        event.preventDefault();\n\n        if (!this.isKeySupportedInGroupRow(key, event.shiftKey, event.altKey) || event.ctrlKey) { return; }\n\n        if (this.isToggleKey(key, event.altKey)) {\n            if ((this.expanded && ROW_COLLAPSE_KEYS.has(key)) || (!this.expanded && ROW_EXPAND_KEYS.has(key))) {\n                this.toggle();\n            }\n            return;\n        }\n        // TODO: to be deleted when onFocusChange event is removed #4054\n        const args = { cell: this, groupRow: null, event: event, cancel: false };\n        this.grid.onFocusChange.emit(args);\n        if (args.cancel) { return; }\n\n        const selection = this.gridSelection;\n        selection.keyboardState.shift = event.shiftKey && !(key === 'tab');\n\n        const visibleColumnIndex = selection.activeElement && this.grid.columnList.filter(col => !col.hidden).map(c => c.visibleIndex)\n                .indexOf(selection.activeElement.column) !== -1 ? selection.activeElement.column : 0;\n        switch (key) {\n            case 'arrowdown':\n            case 'down':\n                this.grid.navigation.navigateDown(this.nativeElement, this.index, visibleColumnIndex);\n                break;\n            case 'arrowup':\n            case 'up':\n                this.grid.navigation.navigateUp(this.nativeElement, this.index, visibleColumnIndex);\n                break;\n            case 'tab':\n                this.handleTabKey(event.shiftKey);\n                break;\n        }\n    }\n\n    /**\n     * Returns a reference to the `IgxGridComponent` the `IgxGridGroupByRowComponent` belongs to.\n     * ```typescript\n     * this.grid1.rowList.first.grid;\n     * ```\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * @hidden\n     */\n    get dataType(): any {\n        return this.grid.getColumnByName(this.groupRow.expression.fieldName).dataType;\n    }\n\n    private handleTabKey(shift) {\n        if (shift) {\n            this.grid.navigation.performShiftTabKey(this.nativeElement, this.index, 0);\n        } else {\n            if (this.index === this.grid.verticalScrollContainer.igxForOf.length - 1 && this.grid.rootSummariesEnabled) {\n                this.grid.navigation.onKeydownHome(0, true);\n            } else {\n                this.grid.navigation.navigateDown(this.nativeElement, this.index, 0);\n            }\n        }\n    }\n\n    private isKeySupportedInGroupRow(key, shift = false, alt = false) {\n        if (shift) {\n            return ['down', 'up', 'arrowdown', 'arrowup', 'tab'].indexOf(key) !== -1;\n        }\n        return this.isToggleKey(key, alt) ? true : ['down', 'up', 'arrowdown', 'arrowup', 'tab'].indexOf(key) !== -1;\n    }\n\n    private isToggleKey(key, altKey) {\n        return altKey && ['left', 'right', 'up', 'down', 'arrowleft', 'arrowright', 'arrowup', 'arrowdown'].indexOf(key) !== -1;\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { IgxGridBaseComponent, FilterMode } from './grid-base.component';\nimport { first } from 'rxjs/operators';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridGroupByRowComponent } from './grid/groupby-row.component';\n\nenum MoveDirection {\n    LEFT = 'left',\n    RIGHT = 'right'\n}\n\n/** @hidden */\n@Injectable()\nexport class IgxGridNavigationService {\n    public grid: IgxGridBaseComponent;\n\n    get displayContainerWidth() {\n        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10);\n    }\n\n    get displayContainerScrollLeft() {\n        return parseInt(this.grid.parentVirtDir.getHorizontalScroll().scrollLeft, 10);\n    }\n\n    get verticalDisplayContainerElement() {\n        return this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n    }\n\n    public horizontalScroll(rowIndex) {\n        let rowComp = this.grid.dataRowList.find((row) => row.index === rowIndex) ?\n        this.grid.dataRowList.find((row) => row.index === rowIndex) : this.grid.dataRowList.first;\n        if (!rowComp) {\n            rowComp = this.grid.summariesRowList.find((row) => row.index === rowIndex);\n        }\n        return rowComp.virtDirRow;\n    }\n\n    public getColumnUnpinnedIndex(visibleColumnIndex: number) {\n        const column = this.grid.unpinnedColumns.find((col) => !col.columnGroup && col.visibleIndex === visibleColumnIndex);\n        return this.grid.pinnedColumns.length ? this.grid.unpinnedColumns.filter((c) => !c.columnGroup).indexOf(column) :\n            visibleColumnIndex;\n    }\n\n    public isColumnFullyVisible(visibleColumnIndex: number) {\n        let forOfDir;\n        if (this.grid.dataRowList.length > 0) {\n            forOfDir = this.grid.dataRowList.first.virtDirRow;\n        } else {\n            forOfDir = this.grid.headerContainer;\n        }\n        const horizontalScroll = forOfDir.getHorizontalScroll();\n        if (!horizontalScroll.clientWidth ||\n            this.grid.columnList.filter(c => !c.columnGroup).find((column) => column.visibleIndex === visibleColumnIndex).pinned) {\n            return true;\n        }\n        const index = this.getColumnUnpinnedIndex(visibleColumnIndex);\n        return this.displayContainerWidth >= forOfDir.getColumnScrollLeft(index + 1) - this.displayContainerScrollLeft;\n    }\n\n    public isColumnLeftFullyVisible(visibleColumnIndex) {\n        let forOfDir;\n        if (this.grid.dataRowList.length > 0) {\n            forOfDir = this.grid.dataRowList.first.virtDirRow;\n        } else {\n            forOfDir = this.grid.headerContainer;\n        }\n        const horizontalScroll = forOfDir.getHorizontalScroll();\n        if (!horizontalScroll.clientWidth ||\n            this.grid.columnList.filter(c => !c.columnGroup).find((column) => column.visibleIndex === visibleColumnIndex).pinned) {\n            return true;\n        }\n        const index = this.getColumnUnpinnedIndex(visibleColumnIndex);\n        return this.displayContainerScrollLeft <= forOfDir.getColumnScrollLeft(index);\n    }\n\n    public get gridOrderedColumns(): IgxColumnComponent[] {\n        return [...this.grid.pinnedColumns, ...this.grid.unpinnedColumns].filter(c => !c.columnGroup);\n    }\n\n    public isRowInEditMode(rowIndex): boolean {\n        return this.grid.rowEditable && (this.grid.rowInEditMode && this.grid.rowInEditMode.index === rowIndex);\n    }\n\n    public isColumnEditable(visibleColumnIndex: number): boolean {\n        const column = this.gridOrderedColumns.find(c => c.visibleIndex === visibleColumnIndex);\n        return column ? column.editable : false;\n    }\n\n    public findNextEditable(direction: string, visibleColumnIndex: number) {\n        const gridColumns = this.gridOrderedColumns;\n        if (direction === MoveDirection.LEFT) {\n            return gridColumns.splice(0, visibleColumnIndex + 1).reverse().findIndex(e => e.editable);\n        } else if (direction === MoveDirection.RIGHT) {\n            return gridColumns.splice(visibleColumnIndex, gridColumns.length - 1).findIndex(e => e.editable);\n        }\n    }\n\n    public getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary = false) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        return this.grid.nativeElement.querySelector(\n            `${cellSelector}[data-rowindex=\"${rowIndex}\"][data-visibleIndex=\"${visibleColumnIndex}\"]`);\n    }\n\n    public onKeydownArrowRight(element, rowIndex, visibleColumnIndex, isSummary = false) {\n        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            return;\n        }\n        if (this.isColumnFullyVisible(visibleColumnIndex + 1)) { // if next column is fully visible or is pinned\n            if (element.classList.contains('igx-grid__td--pinned-last') || element.classList.contains('igx-grid-summary--pinned-last')) {\n                if (this.isColumnLeftFullyVisible(visibleColumnIndex + 1)) {\n                    element.nextElementSibling.firstElementChild.focus({ preventScroll: true });\n                } else {\n                    this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n                    this.grid.parentVirtDir.onChunkLoad\n                        .pipe(first())\n                        .subscribe(() => {\n                            element.nextElementSibling.firstElementChild.focus({ preventScroll: true });\n                        });\n                    this.horizontalScroll(rowIndex).scrollTo(0);\n                }\n            } else {\n                element.nextElementSibling.focus({ preventScroll: true });\n            }\n        } else {\n            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex + 1, isSummary);\n        }\n    }\n\n    public onKeydownArrowLeft(element, rowIndex, visibleColumnIndex, isSummary = false) {\n        if (visibleColumnIndex === 0) {\n            return;\n        }\n        const index = this.getColumnUnpinnedIndex(visibleColumnIndex - 1);\n        if (!element.previousElementSibling && this.grid.pinnedColumns.length && index === - 1) {\n            element.parentNode.previousElementSibling.focus({ preventScroll: true });\n        } else if (!this.isColumnLeftFullyVisible(visibleColumnIndex - 1)) {\n            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex - 1, isSummary);\n        } else {\n            element.previousElementSibling.focus({ preventScroll: true });\n        }\n\n    }\n\n    public movePreviousEditable(rowIndex, visibleColumnIndex) {\n        const addedIndex = this.isColumnEditable(visibleColumnIndex - 1) ?\n            0 :\n            this.findNextEditable(MoveDirection.LEFT, visibleColumnIndex - 1);\n        if (addedIndex === -1) {\n            this.grid.rowEditTabs.last.element.nativeElement.focus();\n            return;\n        }\n        const editableIndex = visibleColumnIndex - 1 - addedIndex;\n        if (this.getColumnUnpinnedIndex(editableIndex) === -1 && this.grid.pinnedColumns.length) {\n            // if target is NOT pinned and there are pinned columns\n            // since addedIndex !== -1, there will always be a target\n            this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus();\n        } else if (!this.isColumnLeftFullyVisible(editableIndex)) {  // if not fully visible, perform scroll\n            this.performHorizontalScrollToCell(rowIndex, editableIndex);\n        } else {\n            this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus(); // if fully visible, just focus\n        }\n    }\n\n    public moveNextEditable(element, rowIndex, visibleColumnIndex) {\n        let addedIndex = 0;\n        addedIndex = this.isColumnEditable(visibleColumnIndex + 1) ?\n            0 :\n            this.findNextEditable(MoveDirection.RIGHT, visibleColumnIndex + 1);\n        if (addedIndex === -1 && this.grid.rowEditTabs) { // no previous edit column -> go to RE buttons\n            this.grid.rowEditTabs.first.element.nativeElement.focus();\n            return;\n        }\n        const editableIndex = visibleColumnIndex + 1 + addedIndex;\n        if (this.isColumnFullyVisible(editableIndex)) { // If column is fully visible\n            if (element.classList.contains('igx-grid__td--pinned-last')) { // If this is pinned\n                if (this.isColumnLeftFullyVisible(editableIndex)) { // If next column is fully visible LEFT\n                    this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus(); // focus\n                } else { // if NOT fully visible, perform scroll\n                    this.performHorizontalScrollToCell(rowIndex, editableIndex);\n                }\n            } else { // cell is next cell\n                this.getCellElementByVisibleIndex(rowIndex, editableIndex).focus();\n            }\n        } else {\n            this.performHorizontalScrollToCell(rowIndex, editableIndex);\n        }\n    }\n\n    public onKeydownHome(rowIndex, isSummary = false) {\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        const cellSelector = this.getCellSelector(0, isSummary);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n        let firstCell =  rowElement.querySelector(cellSelector);\n        if (this.grid.pinnedColumns.length || this.displayContainerScrollLeft === 0) {\n            firstCell.focus({ preventScroll: true });\n        } else {\n            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    firstCell = rowElement.querySelector(cellSelector);\n                    firstCell.focus({ preventScroll: true });\n                });\n            this.horizontalScroll(rowIndex).scrollTo(0);\n        }\n    }\n\n    public onKeydownEnd(rowIndex, isSummary = false) {\n        const index = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex;\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n        if (this.isColumnFullyVisible(index)) {\n            const allCells = rowElement.querySelectorAll(this.getCellSelector(-1, isSummary));\n            allCells[allCells.length - 1].focus({ preventScroll: true });\n        } else {\n            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    const allCells = rowElement.querySelectorAll(this.getCellSelector(-1, isSummary));\n                    allCells[allCells.length - 1].focus({ preventScroll: true });\n                });\n            this.horizontalScroll(rowIndex).scrollTo(this.getColumnUnpinnedIndex(index));\n        }\n    }\n\n    public navigateTop(visibleColumnIndex) {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const cellSelector = this.getCellSelector(visibleColumnIndex);\n        if (verticalScroll.scrollTop === 0) {\n            const cells = this.grid.nativeElement.querySelectorAll(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            cells[0].focus();\n        } else {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(0);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) { cells[0].focus(); }\n                });\n        }\n    }\n\n    public navigateBottom(visibleColumnIndex) {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const cellSelector = this.getCellSelector(visibleColumnIndex);\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const cells = this.grid.nativeElement.querySelectorAll(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            cells[cells.length - 1].focus();\n        } else {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) { cells[cells.length - 1].focus(); }\n                });\n        }\n    }\n\n    public navigateUp(rowElement, currentRowIndex, visibleColumnIndex) {\n        if (currentRowIndex === 0) {\n            return;\n        }\n        const containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);\n        if (!rowElement.previousElementSibling ||\n            rowElement.previousElementSibling.offsetTop < Math.abs(containerTopOffset)) {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(currentRowIndex - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    const tag = rowElement.tagName.toLowerCase();\n                    const rowSelector = this.getRowSelector();\n                    if (tag === rowSelector || tag === 'igx-grid-summary-row') {\n                        rowElement = this.getRowByIndex(currentRowIndex, tag);\n                    } else {\n                        rowElement = this.grid.nativeElement.querySelector(\n                            `igx-grid-groupby-row[data-rowindex=\"${currentRowIndex}\"]`);\n                    }\n                    this.focusPreviousElement(rowElement, visibleColumnIndex);\n                });\n        } else {\n            this.focusPreviousElement(rowElement, visibleColumnIndex);\n        }\n    }\n\n    protected focusPreviousElement(currentRowEl, visibleColumnIndex) {\n        this.focusElem(currentRowEl.previousElementSibling, visibleColumnIndex);\n    }\n\n    public navigateDown(rowElement, currentRowIndex, visibleColumnIndex) {\n        if (currentRowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1 ||\n            (currentRowIndex === 0 && rowElement.tagName.toLowerCase() === 'igx-grid-summary-row')) { // check if this is rootSummary row\n            return;\n        }\n        const rowHeight = this.grid.verticalScrollContainer.getSizeAt(currentRowIndex + 1);\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const targetEndTopOffset = rowElement.nextElementSibling ?\n            rowElement.nextElementSibling.offsetTop + rowHeight + parseInt(this.verticalDisplayContainerElement.style.top, 10) :\n            containerHeight + rowHeight;\n       this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n        if (containerHeight && containerHeight < targetEndTopOffset) {\n            const nextIndex = currentRowIndex + 1;\n            this.grid.verticalScrollContainer.scrollTo(nextIndex);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    rowElement = this.getNextRowByIndex(nextIndex);\n                    this.focusElem(rowElement, visibleColumnIndex);\n                });\n        } else {\n            this.focusNextElement(rowElement, visibleColumnIndex);\n        }\n    }\n\n    protected focusElem(rowElement, visibleColumnIndex) {\n        if (rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n            rowElement.focus();\n        } else {\n            const isSummaryRow = rowElement.tagName.toLowerCase() === 'igx-grid-summary-row';\n            if (this.isColumnFullyVisible(visibleColumnIndex) && this.isColumnLeftFullyVisible(visibleColumnIndex)) {\n                const cellSelector = this.getCellSelector(visibleColumnIndex, isSummaryRow);\n                const cell = rowElement.querySelector(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                if (cell) { cell.focus(); }\n                return cell;\n            }\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.performHorizontalScrollToCell(parseInt(\n            rowElement.getAttribute('data-rowindex'), 10), visibleColumnIndex, isSummaryRow);\n        }\n    }\n\n    protected focusNextElement(rowElement, visibleColumnIndex) {\n        return  this.focusElem(rowElement.nextElementSibling, visibleColumnIndex);\n    }\n\n    public goToFirstCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const horizontalScroll = this.grid.dataRowList.first.virtDirRow.getHorizontalScroll();\n        if (verticalScroll.scrollTop === 0) {\n            this.onKeydownHome(this.grid.dataRowList.first.index);\n        } else {\n            if (!horizontalScroll.clientWidth || parseInt(horizontalScroll.scrollLeft, 10) <= 1 || this.grid.pinnedColumns.length) {\n                this.navigateTop(0);\n            } else {\n               this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n                this.horizontalScroll(this.grid.dataRowList.first.index).scrollTo(0);\n                this.grid.parentVirtDir.onChunkLoad\n                    .pipe(first())\n                    .subscribe(() => {\n                        this.navigateTop(0);\n                    });\n            }\n        }\n    }\n\n    public goToLastCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const rows = this.getAllRows();\n            const rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);\n            this.onKeydownEnd(rowIndex);\n        } else {\n            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const rows = this.getAllRows();\n                    if (rows.length > 0) {\n                        const rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);\n                        this.onKeydownEnd(rowIndex);\n                    }\n                });\n        }\n    }\n\n    public goToLastBodyElement() {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const rowIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;\n            const row = this.grid.nativeElement.querySelector(`[data-rowindex=\"${rowIndex}\"]`);\n            if (row && row.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n                row.focus();\n                return;\n            }\n            const isSummary = (row && row.tagName.toLowerCase() === 'igx-grid-summary-row') ? true : false;\n            this.onKeydownEnd(rowIndex, isSummary);\n        } else {\n            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const rowIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;\n                    const row = this.grid.nativeElement.querySelector(`[data-rowindex=\"${rowIndex}\"]`);\n                    if (row && row.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n                        row.focus();\n                        return;\n                    }\n                    const isSummary = (row && row.tagName.toLowerCase() === 'igx-grid-summary-row') ? true : false;\n                    this.onKeydownEnd(rowIndex, isSummary);\n                });\n        }\n    }\n\n    public performTab(currentRowEl, rowIndex, visibleColumnIndex, isSummaryRow = false) {\n        if (isSummaryRow && rowIndex === 0 &&\n            this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n                return;\n\n        }\n        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            if (this.isRowInEditMode(rowIndex)) {\n                this.grid.rowEditTabs.first.element.nativeElement.focus();\n                return;\n            }\n            const rowEl = this.grid.rowList.find(row => row.index === rowIndex + 1) ?\n                this.grid.rowList.find(row => row.index === rowIndex + 1) :\n                this.grid.summariesRowList.find(row => row.index === rowIndex + 1);\n            if (rowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1 && this.grid.rootSummariesEnabled) {\n                this.onKeydownHome(0, true);\n                return;\n            }\n            if (rowEl) {\n                this.navigateDown(currentRowEl, rowIndex, 0);\n            }\n        } else {\n            const cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummaryRow);\n            if (cell) {\n                if (this.grid.rowEditable && this.isRowInEditMode(rowIndex)) {\n                    this.moveNextEditable(cell, rowIndex, visibleColumnIndex);\n                    return;\n                }\n                this.onKeydownArrowRight(cell, rowIndex, visibleColumnIndex, isSummaryRow);\n            }\n        }\n    }\n\n    public moveFocusToFilterCell(toStart?: boolean) {\n        if (this.grid.filteringService.isFilterRowVisible) {\n            this.grid.filteringService.focusFilterRowCloseButton();\n            return;\n        }\n\n        const columns = this.grid.filteringService.unpinnedFilterableColumns;\n        const targetIndex = toStart ? 0 : columns.length - 1;\n        const visibleIndex = columns[targetIndex].visibleIndex;\n        const isVisible = toStart ? this.isColumnLeftFullyVisible(visibleIndex) : this.isColumnFullyVisible(visibleIndex);\n        if (isVisible) {\n            this.grid.filteringService.focusFilterCellChip(columns[targetIndex], false);\n        } else {\n            this.grid.filteringService.scrollToFilterCell(columns[targetIndex], false);\n        }\n    }\n\n    public navigatePrevFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const prevFilterableIndex = cols.indexOf(column) - 1;\n        const visibleIndex = column.visibleIndex;\n        if (visibleIndex === 0 || prevFilterableIndex < 0) {\n            // prev is not filter cell\n            const firstFiltarableCol = this.getFirstPinnedFilterableColumn();\n            if (!firstFiltarableCol || column === firstFiltarableCol) {\n                eventArgs.preventDefault();\n            }\n            return;\n        }\n        const prevColumn = cols[prevFilterableIndex];\n        const prevVisibleIndex = prevColumn.visibleIndex;\n\n        if (prevFilterableIndex >= 0 && visibleIndex > 0 && !this.isColumnLeftFullyVisible(prevVisibleIndex) && !column.pinned) {\n            eventArgs.preventDefault();\n            this.grid.filteringService.scrollToFilterCell(prevColumn, false);\n        }\n    }\n\n    public navigateFirstCellIfPossible(eventArgs) {\n        if (this.grid.rowList.length > 0) {\n            if (this.grid.rowList.filter(row => row instanceof IgxGridGroupByRowComponent).length > 0 ) {\n                eventArgs.stopPropagation();\n                return;\n            }\n            this.goToFirstCell();\n        } else if (this.grid.rootSummariesEnabled) {\n            this.onKeydownHome(0, true);\n        }\n        eventArgs.preventDefault();\n    }\n\n    public navigateNextFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const nextFilterableIndex = cols.indexOf(column) + 1;\n        if (nextFilterableIndex >= this.grid.filteringService.unpinnedFilterableColumns.length) {\n            // next is not filter cell\n            this.navigateFirstCellIfPossible(eventArgs);\n            return;\n        }\n        const nextColumn = cols[nextFilterableIndex];\n        const nextVisibleIndex = nextColumn.visibleIndex;\n        if (!column.pinned && !this.isColumnFullyVisible(nextVisibleIndex)) {\n            eventArgs.preventDefault();\n            this.grid.filteringService.scrollToFilterCell(nextColumn, true);\n        } else if (column === this.getLastPinnedFilterableColumn() && !this.isColumnFullyVisible(nextVisibleIndex)) {\n            this.grid.filteringService.scrollToFilterCell(nextColumn, false);\n            eventArgs.stopPropagation();\n        }\n    }\n\n    private getLastPinnedFilterableColumn(): IgxColumnComponent {\n        const pinnedFilterableColums =\n            this.grid.pinnedColumns.filter(col => !(col.columnGroup) && col.filterable);\n        return pinnedFilterableColums[pinnedFilterableColums.length - 1];\n    }\n\n    private getFirstPinnedFilterableColumn(): IgxColumnComponent {\n        return this.grid.pinnedColumns.filter(col => !(col.columnGroup) && col.filterable)[0];\n    }\n\n    public performShiftTabKey(currentRowEl, rowIndex, visibleColumnIndex, isSummary = false) {\n        if (isSummary && rowIndex === 0 && visibleColumnIndex === 0 && this.grid.rowList.length) {\n            this.goToLastBodyElement();\n            return;\n        }\n        if (visibleColumnIndex === 0) {\n            if (this.isRowInEditMode(rowIndex)) {\n                this.grid.rowEditTabs.last.element.nativeElement.focus();\n                return;\n            }\n            if (rowIndex === 0 && this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                this.moveFocusToFilterCell();\n            } else {\n                this.navigateUp(currentRowEl, rowIndex,\n                    this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex);\n            }\n        } else {\n            const cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary);\n            if (cell) {\n                if (this.grid.rowEditable && this.isRowInEditMode(rowIndex)) {\n                    this.movePreviousEditable(rowIndex, visibleColumnIndex);\n                    return;\n                }\n                this.onKeydownArrowLeft(cell, rowIndex, visibleColumnIndex, isSummary);\n            }\n        }\n    }\n\n    public shouldPerformVerticalScroll(targetRowIndex): boolean {\n        const containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);\n        const targetRow = this.grid.summariesRowList.filter(s => s.index !== 0)\n            .concat(this.grid.rowList.toArray()).find(r => r.index === targetRowIndex);\n        const rowHeight = this.grid.verticalScrollContainer.getSizeAt(targetRowIndex);\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const targetEndTopOffset = targetRow ? targetRow.nativeElement.offsetTop + rowHeight + containerTopOffset :\n                containerHeight + rowHeight;\n        if (!targetRow || targetRow.nativeElement.offsetTop < Math.abs(containerTopOffset)\n                || containerHeight && containerHeight < targetEndTopOffset) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private performHorizontalScrollToCell(rowIndex, visibleColumnIndex, isSummary = false) {\n        const unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex);\n       this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n        this.grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(() => {\n                this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary).focus({ preventScroll: true });\n            });\n        this.horizontalScroll(rowIndex).scrollTo(unpinnedIndex);\n    }\n\n    protected getFocusableGrid() {\n        return this.grid;\n    }\n\n    protected getRowByIndex(index, selector = this.getRowSelector()) {\n        return this.grid.nativeElement.querySelector(\n                `${selector}[data-rowindex=\"${index}\"]`);\n    }\n\n    protected getNextRowByIndex(nextIndex) {\n        return this.grid.tbody.nativeElement.querySelector(\n            `[data-rowindex=\"${nextIndex}\"]`);\n    }\n\n    private getAllRows() {\n        const selector = this.getRowSelector();\n        return this.grid.nativeElement.querySelectorAll(selector);\n    }\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false): string {\n        return isSummary ? 'igx-grid-summary-cell' : 'igx-grid-cell';\n    }\n\n    protected getRowSelector(): string {\n        return 'igx-grid-row';\n    }\n}\n","/* tslint:disable */\nexport default [\n    {\n        name: 'add_filter',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19 15v-3h-2v3h-3v2h3v3h2v-3h3v-2h-3zM5 10h10v2H5zM2 5h16v2H2zM8 15h4v2H8z\"/>\n      </svg>`\n    },\n    {\n        name: 'contains',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" id=\"Layer_1\" data-name=\"Layer 1\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 3v18h18V3zm16 16H5V5h14z\"/>\n        <path d=\"M12 11.3a4.39 4.39 0 0 0-2.54.63 2.07 2.07 0 0 0-.9 1.78 2.29 2.29 0 0 0 .66 1.74 2.63 2.63 0 0 0 1.89.63 2.39 2.39 0 0 0 1.32-.37 3.05 3.05 0 0 0 1-.93 3.72 3.72 0 0 0 .08.57c0 .19.1.38.16.58h1.79a4.51 4.51 0 0 1-.21-.88 5.57 5.57 0 0 1-.07-.93v-3.5a2.44 2.44 0 0 0-.84-2 3.34 3.34 0 0 0-2.22-.7 3.54 3.54 0 0 0-2.3.72A1.93 1.93 0 0 0 9 10.29h1.71a.93.93 0 0 1 .29-.71 1.5 1.5 0 0 1 1-.29 1.45 1.45 0 0 1 1 .35 1.3 1.3 0 0 1 .37 1v.69zm1.4 1.08v1.17a1.61 1.61 0 0 1-.71.77 2.27 2.27 0 0 1-1.21.34 1.18 1.18 0 0 1-.84-.27.92.92 0 0 1-.3-.72 1.16 1.16 0 0 1 .44-.9 1.76 1.76 0 0 1 1.22-.39z\"/>\n      </svg>`\n    },\n    {\n        name: 'does_not_contain',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21,19.74V3H4.26L2.89,1.63,1.63,2.92,3,4.29V21H19.73l1.37,1.37,1.27-1.26ZM5,19V6.28l5.28,5.27a3.19,3.19,0,0,0-.81.38,2.07,2.07,0,0,0-.9,1.78,2.29,2.29,0,0,0,.66,1.74,2.63,2.63,0,0,0,1.89.63,2.39,2.39,0,0,0,1.32-.37,3.05,3.05,0,0,0,1-.93,3.72,3.72,0,0,0,.08.57c0,.19.1.38.16.58h1L17.73,19Zm5.79-6.23a1.31,1.31,0,0,1,.45-.25l1.37,1.36.28.29a1.57,1.57,0,0,1-.19.15,2.27,2.27,0,0,1-1.21.34,1.18,1.18,0,0,1-.84-.27.92.92,0,0,1-.3-.72A1.16,1.16,0,0,1,10.79,12.77Zm2.6-1.47h-.83L10.94,9.68l.08-.1a1.5,1.5,0,0,1,1-.29,1.45,1.45,0,0,1,1,.35,1.3,1.3,0,0,1,.37,1ZM19,17.74l-3.85-3.85V10.62a2.44,2.44,0,0,0-.84-2,3.34,3.34,0,0,0-2.22-.7,3.64,3.64,0,0,0-2.24.67L6.26,5H19Z\"/>\n    </svg>`\n    },\n    {\n        name: 'all',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M2 14h8v2H2zM2 6h12v2H2zM16 17l-3-3-1.5 1.5L16 20l7-7-1.5-1.5L16 17zM2 10h12v2H2z\"/>\n      </svg>\n      `\n    },\n    {\n        name: 'empty',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 17h2v2H5zM13 17h2v2h-2zM5 13h2v2H5zM17 17h2v2h-2zM13 5h2v2h-2zM9 17h2v2H9zM17 9h2v2h-2zM17 13h2v2h-2zM17 5h2v2h-2zM5 9h2v2H5zM5 5h2v2H5zM9 5h2v2H9z\"/>\n      </svg>`\n    },\n    {\n        name: 'end_expression',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M13.14 6.76L17.49 12l-4.35 5.24 1.54 1.28L20.09 12l-5.41-6.52-1.54 1.28z\"/>\n        <path d=\"M11.91 11h2v2h-2zM7.91 11h2v2h-2zM3.91 11h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'ends_with',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 14.5h2v2H3zM11 14.5h2v2h-2zM7 14.5h2v2H7zM20.8 14.8v-3A2.1 2.1 0 0 0 20 10a3 3 0 0 0-2-.6 3 3 0 0 0-2 .6 1.7 1.7 0 0 0-.7 1.5h1.5a.8.8 0 0 1 .3-.7 1.3 1.3 0 0 1 .9-.3 1.3 1.3 0 0 1 .9.4 1.1 1.1 0 0 1 .3.8v.6H18a3.8 3.8 0 0 0-2.2.6 1.8 1.8 0 0 0-.8 1.5 2 2 0 0 0 .6 1.6 2.3 2.3 0 0 0 1.6.6 2.1 2.1 0 0 0 1.2-.4 2.8 2.8 0 0 0 .8-.8 4.3 4.3 0 0 0 .1.5l.1.5H21a4.1 4.1 0 0 1-.2-.7 5.4 5.4 0 0 1 0-1zm-1.6-.5a1.5 1.5 0 0 1-.6.7 2 2 0 0 1-1 .2 1.1 1.1 0 0 1-.8-.2.8.8 0 0 1-.2-.6 1 1 0 0 1 .3-.8 1.5 1.5 0 0 1 1.1-.3h1.2z\"/>\n      </svg>`\n    },\n    {\n        name: 'equals',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 13.5h14v2H5zM5 8.5h14v2H5z\"/>\n      </svg>`\n    },\n    {\n        name: 'greater_than_or_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5.99 19h12.02v2H5.99zM18 9.47L6 3v2.11L15.09 10 6 14.9v2.11l12-6.47V9.47z\"/>\n      </svg>`\n    },\n    {\n        name: 'greater_than',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 7.11L15.09 12 6 16.89V19l12-6.46v-1.08L6 5v2.11z\"/>\n      </svg>\n      `\n    },\n    {\n        name: 'is_after',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15 7h4v10h-4v2h6V5h-6v2zM11 3h2v18h-2zM7 5h2v2H7zM3 5h2v2H3zM3 17h2v2H3zM3 13h2v2H3zM3 9h2v2H3zM7 17h2v2H7z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_before',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 19h6v-2H5V7h4V5H3v14zM11 3h2v18h-2zM15 5h2v2h-2zM19 5h2v2h-2zM19 13h2v2h-2zM15 17h2v2h-2zM19 17h2v2h-2zM19 9h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_false',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M8 5a7 7 0 1 0 7 7 7 7 0 0 0-7-7zm4.31 9.79l-1.52 1.52L8 13.52l-2.79 2.79-1.52-1.52L6.48 12 3.69 9.21l1.52-1.52L8 10.48l2.79-2.79 1.52 1.52L9.52 12zM18 7a5 5 0 0 0-3 1.06 7.48 7.48 0 0 1 .49 1 3.89 3.89 0 1 1 0 5.82 8.08 8.08 0 0 1-.49 1A5 5 0 1 0 18 7z\"/>\n        <path d=\"M17.52 13.85l2.91-2.92-.78-.78-2.13 2.12-1.17-1.15-.38.37-.41.41.42.42L17 13.34l.52.51z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_not_null',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M16.58 6.07l.79-1.36-1.74-1-.78 1.35a7.5 7.5 0 0 0-7.43 12.87l-.79 1.36 1.74 1 .78-1.35a7.5 7.5 0 0 0 7.43-12.87zM6.5 12A5.5 5.5 0 0 1 12 6.5a5.65 5.65 0 0 1 1.84.32l-5.41 9.36A5.49 5.49 0 0 1 6.5 12zm5.5 5.5a5.65 5.65 0 0 1-1.84-.32l5.41-9.36A5.5 5.5 0 0 1 12 17.5z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_null',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M12 4.5a7.5 7.5 0 1 0 7.5 7.5A7.5 7.5 0 0 0 12 4.5zm0 13a5.5 5.5 0 1 1 5.5-5.5 5.5 5.5 0 0 1-5.5 5.5z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_true',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19.44 14.22zM16.56 14.22zM16.56 14.22L18 12.79l1.44 1.43.78-.78L18.79 12l1.43-1.44-.78-.78L18 11.21l-1.44-1.43-.78.78L17.21 12l-1.43 1.44.78.78z\"/>\n        <path d=\"M18 7a5 5 0 0 0-3 1.06 7.48 7.48 0 0 1 .49 1 3.89 3.89 0 1 1 0 5.82 8.08 8.08 0 0 1-.49 1A5 5 0 1 0 18 7zM8 5a7 7 0 1 0 7 7 7 7 0 0 0-7-7zm-.93 10.18l-3.38-3.37 1.13-1.12 2.25 2.25 4.11-4.12 1.13 1.12z\"/>\n      </svg>`\n    },\n    {\n        name: 'last_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M17.5 14a4.48 4.48 0 1 0 4.5 4.5 4.47 4.47 0 0 0-4.5-4.5zm3.5 5.5h-4v2l-3-3 3-3v2h4zM5 9h2v2H5zM5 13h2v2H5zM10 13h2v2h-2zM5 17h2v2H5zM10 17h2v2h-2zM10 9h2v2h-2zM15 9h2v2h-2z\"/>\n        <path d=\"M4 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H7V1H5v2H4a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H4z\"/>\n      </svg>`\n    },\n    {\n        name: 'last_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 10v11H7v2h14a2 2 0 0 0 2-2V10z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M8.87 9l-2.99 3 2.99 3v-2.25h5.26v-1.5H8.87V9z\"/>\n      </svg>`\n    },\n    {\n        name: 'less_than_or_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5.99 19h12.02v2H5.99zM18 14.9L8.91 10 18 5.11V3L6 9.47v1.07l12 6.47V14.9z\"/>\n      </svg>`\n    },\n    {\n        name: 'less_than',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 12.54L18 19v-2.11L8.91 12 18 7.11V5L6 11.46v1.08z\"/>\n      </svg>`\n    },\n    {\n        name: 'next_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M20 14.76a4.5 4.5 0 1 0 2 3.74 4.47 4.47 0 0 0-2-3.74zm-2 6.74v-2h-4v-2h4v-2l3 3zM5 9h2v2H5zM5 13h2v2H5zM10 13h2v2h-2zM5 17h2v2H5zM10 17h2v2h-2zM10 9h2v2h-2zM15 9h2v2h-2z\"/>\n        <path d=\"M4 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H7V1H5v2H4a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H4z\"/>\n      </svg>`\n    },\n    {\n        name: 'next_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 21H7v2h14a2 2 0 0 0 2-2V10h-2z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M11.13 11.25H5.88v1.5h5.25V15l3-3-3-3v2.25z\"/>\n      </svg>`\n    },\n    {\n        name: 'not_empty',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 9h2v2H5zM9 17h2v2H9zM13 17h2v2h-2zM17 9h2v2h-2zM17 5h2v2h-2zM5 17h2v2H5zM13 5h2v2h-2zM5 13h2v2H5zM19 15v-2h-2v.47L18.53 15H19zM11 7V5H9v.46L10.54 7H11zM2.76 1.76L1.5 3.06 20.97 22.5l1.26-1.26-8.89-8.89L2.76 1.76z\"/>\n      </svg>`\n    },\n    {\n        name: 'not_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M17.37 4.71l-1.74-1-2.76 4.79H5v2h6.71l-1.73 3H5v2h3.82l-2.19 3.79 1.74 1 2.76-4.79H19v-2h-6.71l1.73-3H19v-2h-3.82l2.19-3.79z\"/>\n      </svg>`\n    },\n    {\n        name: 'start_expression',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M18.1 11h2v2h-2zM10.1 11h2v2h-2z\"/>\n        <path d=\"M10.9 6.8L9.3 5.5 4 12l5.4 6.5 1.6-1.3L6.5 12 11 6.8zM14.1 11h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'starts_with',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path fill=\"none\" d=\"M4.97 13.23h3.06L6.5 9.12l-1.53 4.11z\"/>\n        <path d=\"M5.89 7.5L2 16.5h1.72l.73-1.8h4.1l.73 1.8H11l-3.89-9zM5 13.23l1.5-4.11L8 13.23zM12 14.5h2v2h-2zM20 14.5h2v2h-2zM16 14.5h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'this_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 9h2v2H6zM6 13h2v2H6zM11 13h2v2h-2zM6 17h2v2H6zM11 17h2v2h-2zM11 9h2v2h-2zM16 9h2v2h-2zM21 14.76a4.5 4.5 0 1 0 2 3.74 4.47 4.47 0 0 0-2-3.74zm-2.94 5.41l-1.75-1.76.69-.71 1.05 1L20 16.83l.71.71z\"/>\n        <path d=\"M5 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H8V1H6v2H5a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H5z\"/>\n      </svg>`\n    },\n    {\n        name: 'this_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 21H7v2h14a2 2 0 0 0 2-2V10h-2z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M8.85 13.15l-1.77-1.77-.88.89 2.65 2.65 4.95-4.96-.88-.88-4.07 4.07z\"/>\n      </svg>`\n    },\n    {\n        name: 'today',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19 4h-1V2h-2v2H8V2H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2zm0 16H5V9h14z\"/>\n        <path d=\"M16.53 12.06L15.47 11l-4.88 4.88-2.12-2.12-1.06 1.06L10.59 18l5.94-5.94z\"/>\n      </svg>`\n    },\n    {\n        name: 'ungroup',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15 15h5v5h-5zM6 13h5v5H6zM13 6h5v5h-5zM6 6h5v5H6z\"/>\n        <path d=\"M20 2H4a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h9v-2H4V4h16v9h2V4a2 2 0 0 0-2-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'yesterday',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M10.68 15.38h6.13v-1.75h-6.13V11l-3.49 3.5 3.49 3.5v-2.62z\"/>\n        <path d=\"M19 4h-1V2h-2v2H8V2H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2zm0 16H5V9h14z\"/>\n      </svg>`\n    },\n    {\n        name: 'pin',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15.18 2.25l7.07 7.07-2.83-.01-3.54 3.55.01 4.24-3.53-3.54-5.66 5.66H5.28V17.8l5.66-5.66L7.4 8.61l4.24.01 3.55-3.54-.01-2.83z\"/>\n      </svg>`\n    },\n    {\n        name: 'unpin',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path fill=\"none\" d=\"M0 0h24v25H0V0z\"/>\n        <path d=\"M11.84 14.08L6.7 19.22H5.28V17.8l5.14-5.14L2 4.26 3.29 3l18 18L20 22.21zm4-.49l-5-5h.73l3.55-3.54v-2.8l7.07 7.07h-2.77l-3.54 3.54z\" />\n      </svg>`\n    }\n];\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { IgxIconService } from '../../icon/icon.service';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IgxGridBaseComponent, IColumnResizeEventArgs, IGridDataBindable } from '../grid-base.component';\nimport icons from './svgIcons';\nimport { IFilteringExpression, FilteringLogic } from '../../data-operations/filtering-expression.interface';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IForOfState } from '../../directives/for-of/for_of.directive';\nimport { IgxGridSortingPipe } from '../grid/grid.pipes';\nimport { IgxDatePipeComponent } from '../grid.common';\nimport { IgxColumnComponent } from '../column.component';\nimport { IFilteringOperation } from '../../data-operations/filtering-condition';\nimport { GridBaseAPIService } from '../api.service';\n\nconst FILTERING_ICONS_FONT_SET = 'filtering-icons';\n\n/**\n *@hidden\n */\nexport class ExpressionUI {\n    public expression: IFilteringExpression;\n    public beforeOperator: FilteringLogic;\n    public afterOperator: FilteringLogic;\n    public isSelected = false;\n    public isVisible = true;\n}\n\n/**\n *@hidden\n */\n@Injectable()\nexport class IgxFilteringService implements OnDestroy {\n\n    private columnsWithComplexFilter = new Set<string>();\n    private areEventsSubscribed = false;\n    private destroy$ = new Subject<boolean>();\n    private isFiltering = false;\n    private columnToExpressionsMap = new Map<string, ExpressionUI[]>();\n    private _datePipe: IgxDatePipeComponent;\n    private columnStartIndex = -1;\n\n    public gridId: string;\n    public isFilterRowVisible = false;\n    public filteredColumn: IgxColumnComponent = null;\n    public selectedExpression: IFilteringExpression = null;\n    public columnToFocus: IgxColumnComponent = null;\n    public shouldFocusNext = false;\n    public columnToMoreIconHidden = new Map<string, boolean>();\n\n    grid: IgxGridBaseComponent;\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, private iconService: IgxIconService) {}\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    public get displayContainerWidth() {\n        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10);\n    }\n\n    public get displayContainerScrollLeft() {\n        return parseInt(this.grid.parentVirtDir.getHorizontalScroll().scrollLeft, 10);\n    }\n\n    public get areAllColumnsInView() {\n        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10) === 0;\n    }\n\n    public get unpinnedFilterableColumns() {\n        return this.grid.unpinnedColumns.filter(col => !col.columnGroup && col.filterable);\n    }\n\n    public get unpinnedColumns() {\n        return this.grid.unpinnedColumns.filter(col => !col.columnGroup);\n    }\n\n    public get datePipe(): IgxDatePipeComponent {\n        if (!this._datePipe) {\n            this._datePipe = new IgxDatePipeComponent(this.grid.locale);\n        }\n        return this._datePipe;\n    }\n\n    /**\n     * Subscribe to grid's events.\n     */\n    public subscribeToEvents() {\n        if (!this.areEventsSubscribed) {\n            this.areEventsSubscribed = true;\n\n            this.grid.onColumnResized.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IColumnResizeEventArgs) => {\n                this.updateFilteringCell(eventArgs.column);\n            });\n\n            this.grid.parentVirtDir.onChunkLoad.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IForOfState) => {\n                if (eventArgs.startIndex !== this.columnStartIndex) {\n                    this.columnStartIndex = eventArgs.startIndex;\n                    this.grid.filterCellList.forEach((filterCell) => {\n                        filterCell.updateFilterCellArea();\n                    });\n                }\n                if (this.columnToFocus) {\n                    this.focusFilterCellChip(this.columnToFocus, false);\n                    this.columnToFocus = null;\n                }\n            });\n\n            this.grid.onColumnMovingEnd.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.grid.filterCellList.forEach((filterCell) => {\n                    filterCell.updateFilterCellArea();\n                });\n            });\n        }\n    }\n\n    /**\n     * Internal method to create expressionsTree and filter grid used in both filter modes.\n     */\n    public filterInternal(field: string, expressions: FilteringExpressionsTree | Array<ExpressionUI> = null): void {\n        this.isFiltering = true;\n\n        let expressionsTree;\n        if (expressions instanceof FilteringExpressionsTree) {\n            expressionsTree = expressions;\n        } else {\n            expressionsTree = this.createSimpleFilteringTree(field, expressions);\n        }\n\n        if (expressionsTree.filteringOperands.length === 0) {\n            this.clearFilter(field);\n        } else {\n            this.filter(field, null, expressionsTree);\n        }\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Execute filtering on the grid.\n     */\n    public filter(field: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase?: boolean) {\n        const col = this.gridAPI.get_column_by_name(field);\n        const filteringIgnoreCase = ignoreCase || (col ? col.filteringIgnoreCase : false);\n\n        if (conditionOrExpressionTree) {\n            this.gridAPI.filter(field, value, conditionOrExpressionTree, filteringIgnoreCase);\n        } else {\n            const expressionsTreeForColumn = this.grid.filteringExpressionsTree.find(field);\n            if (!expressionsTreeForColumn) {\n                throw new Error('Invalid condition or Expression Tree!');\n            } else if (expressionsTreeForColumn instanceof FilteringExpressionsTree) {\n                this.gridAPI.filter(field, value, expressionsTreeForColumn, filteringIgnoreCase);\n            } else {\n                const expressionForColumn = expressionsTreeForColumn as IFilteringExpression;\n                this.gridAPI.filter(field, value, expressionForColumn.condition, filteringIgnoreCase);\n            }\n        }\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(col.filteringExpressionsTree));\n    }\n\n    /**\n     * Clear the filter of a given column.\n     */\n    public clearFilter(field: string): void {\n        if (field) {\n            const column = this.gridAPI.get_column_by_name(field);\n            if (!column) {\n                return;\n            }\n        }\n\n        this.isFiltering = true;\n\n        this.gridAPI.clear_filter(field);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(null));\n\n        if (field) {\n            const expressions = this.getExpressions(field);\n            expressions.length = 0;\n        }\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     */\n    public filterGlobal(value: any, condition, ignoreCase?) {\n        this.gridAPI.filter_global(value, condition, ignoreCase);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(this.grid.filteringExpressionsTree));\n    }\n\n    /**\n     * Register filtering SVG icons in the icon service.\n     */\n    public registerSVGIcons(): void {\n        for (const icon of icons) {\n            if (!this.iconService.isSvgIconCached(icon.name, FILTERING_ICONS_FONT_SET)) {\n                this.iconService.addSvgIconFromText(icon.name, icon.value, FILTERING_ICONS_FONT_SET);\n            }\n        }\n    }\n\n    /**\n     * Returns the ExpressionUI array for a given column.\n     */\n    public getExpressions(columnId: string): ExpressionUI[] {\n        if (!this.columnToExpressionsMap.has(columnId)) {\n            const column = this.grid.columns.find((col) => col.field === columnId);\n            const expressionUIs = new Array<ExpressionUI>();\n\n            this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, expressionUIs);\n            this.columnToExpressionsMap.set(columnId, expressionUIs);\n\n            return expressionUIs;\n        }\n\n        return this.columnToExpressionsMap.get(columnId);\n    }\n\n    /**\n     * Recreates all ExpressionUIs for all columns. Executed after filtering to refresh the cache.\n     */\n    public refreshExpressions() {\n        if (!this.isFiltering) {\n            this.columnsWithComplexFilter.clear();\n\n            this.columnToExpressionsMap.forEach((value: ExpressionUI[], key: string) => {\n                const column = this.grid.columns.find((col) => col.field === key);\n                if (column) {\n                    value.length = 0;\n\n                    this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, value);\n\n                    const isComplex = this.isFilteringTreeComplex(column.filteringExpressionsTree);\n                    if (isComplex) {\n                        this.columnsWithComplexFilter.add(key);\n                    }\n\n                    this.updateFilteringCell(column);\n                } else {\n                    this.columnToExpressionsMap.delete(key);\n                }\n            });\n        }\n    }\n\n    /**\n     * Remove an ExpressionUI for a given column.\n     */\n    public removeExpression(columnId: string, indexToRemove: number) {\n        const expressionsList = this.getExpressions(columnId);\n\n        if (indexToRemove === 0 && expressionsList.length > 1) {\n            expressionsList[1].beforeOperator = null;\n        } else if (indexToRemove === expressionsList.length - 1) {\n            expressionsList[indexToRemove - 1].afterOperator = null;\n        } else {\n            expressionsList[indexToRemove - 1].afterOperator = expressionsList[indexToRemove + 1].beforeOperator;\n            expressionsList[0].beforeOperator = null;\n            expressionsList[expressionsList.length - 1].afterOperator = null;\n        }\n\n        expressionsList.splice(indexToRemove, 1);\n    }\n\n    /**\n     * Generate filtering tree for a given column from existing ExpressionUIs.\n     */\n    public createSimpleFilteringTree(columnId: string, expressionUIList = null): FilteringExpressionsTree {\n        const expressionsList = expressionUIList ? expressionUIList : this.getExpressions(columnId);\n        const expressionsTree = new FilteringExpressionsTree(FilteringLogic.Or, columnId);\n        let currAndBranch: FilteringExpressionsTree;\n        let currExpressionUI: ExpressionUI;\n\n        for (let i = 0; i < expressionsList.length; i++) {\n            currExpressionUI = expressionsList[i];\n\n            if (!currExpressionUI.expression.condition.isUnary && currExpressionUI.expression.searchVal === null) {\n                if (currExpressionUI.afterOperator === FilteringLogic.And && !currAndBranch) {\n                    currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);\n                    expressionsTree.filteringOperands.push(currAndBranch);\n                }\n                continue;\n            }\n\n            if ((currExpressionUI.beforeOperator === undefined || currExpressionUI.beforeOperator === null ||\n                 currExpressionUI.beforeOperator === FilteringLogic.Or) &&\n                currExpressionUI.afterOperator === FilteringLogic.And) {\n\n                currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);\n                expressionsTree.filteringOperands.push(currAndBranch);\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n\n            } else if (currExpressionUI.beforeOperator === FilteringLogic.And) {\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n            } else {\n                expressionsTree.filteringOperands.push(currExpressionUI.expression);\n                currAndBranch = null;\n            }\n        }\n\n        return expressionsTree;\n    }\n\n    /**\n     * Returns whether a complex filter is applied to a given column.\n     */\n    public isFilterComplex(columnId: string) {\n        if (this.columnsWithComplexFilter.has(columnId)) {\n            return true;\n        }\n\n        const column = this.grid.columns.find((col) => col.field === columnId);\n        const isComplex = this.isFilteringTreeComplex(column.filteringExpressionsTree);\n        if (isComplex) {\n            this.columnsWithComplexFilter.add(columnId);\n        }\n\n        return isComplex;\n    }\n\n    /**\n     * Returns the string representation of the FilteringLogic operator.\n     */\n    public getOperatorAsString(operator: FilteringLogic): any {\n        if (operator === 0) {\n            return this.grid.resourceStrings.igx_grid_filter_operator_and;\n        } else {\n            return this.grid.resourceStrings.igx_grid_filter_operator_or;\n        }\n    }\n\n    /**\n     * Generate the label of a chip from a given filtering expression.\n     */\n    public getChipLabel(expression: IFilteringExpression): any {\n        if (expression.condition.isUnary) {\n            return this.grid.resourceStrings[`igx_grid_filter_${expression.condition.name}`] || expression.condition.name;\n        } else if (expression.searchVal instanceof Date) {\n            return this.datePipe.transform(expression.searchVal, this.grid.locale);\n        } else {\n            return expression.searchVal;\n        }\n    }\n\n    /**\n     * Updates the content of a filterCell.\n     */\n    public updateFilteringCell(column: IgxColumnComponent) {\n        const filterCell = column.filterCell;\n        if (filterCell) {\n            filterCell.updateFilterCellArea();\n        }\n    }\n\n    /**\n     * Focus a chip in a filterCell.\n     */\n    public focusFilterCellChip(column: IgxColumnComponent, focusFirst: boolean) {\n        const filterCell = column.filterCell;\n        if (filterCell) {\n            filterCell.focusChip(focusFirst);\n        }\n    }\n\n    /**\n     * Focus the close button in the filtering row.\n     */\n    public focusFilterRowCloseButton() {\n        this.grid.filteringRow.closeButton.nativeElement.focus();\n    }\n\n    public get filteredData() {\n        return this.grid.filteredData;\n    }\n\n    /**\n     * Scrolls to a filterCell.\n     */\n    public scrollToFilterCell(column: IgxColumnComponent, shouldFocusNext: boolean) {\n        this.grid.nativeElement.focus({preventScroll: true});\n        this.columnToFocus = column;\n        this.shouldFocusNext = shouldFocusNext;\n\n        let currentColumnRight = 0;\n        let currentColumnLeft = 0;\n        for (let index = 0; index < this.unpinnedColumns.length; index++) {\n            currentColumnRight += parseInt(this.unpinnedColumns[index].width, 10);\n            if (this.unpinnedColumns[index] === column) {\n                currentColumnLeft = currentColumnRight - parseInt(this.unpinnedColumns[index].width, 10);\n                break;\n            }\n        }\n\n        const forOfDir = this.grid.headerContainer;\n        const width = this.displayContainerWidth + this.displayContainerScrollLeft;\n        if (shouldFocusNext) {\n            forOfDir.getHorizontalScroll().scrollLeft += currentColumnRight - width;\n        } else {\n            forOfDir.getHorizontalScroll().scrollLeft = currentColumnLeft;\n        }\n    }\n\n    private isFilteringTreeComplex(expressions: IFilteringExpressionsTree | IFilteringExpression): boolean {\n        if (!expressions) {\n            return false;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            if (expressionsTree.operator === FilteringLogic.Or) {\n                const andOperatorsCount = this.getChildAndOperatorsCount(expressionsTree);\n\n                // having more that 'And' and operator in the sub-tree means that the filter could not be represented without parentheses.\n                return andOperatorsCount > 1;\n            }\n\n            let isComplex = false;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                isComplex = isComplex || this.isFilteringTreeComplex(expressionsTree.filteringOperands[i]);\n            }\n\n            return isComplex;\n        }\n\n        return false;\n    }\n\n    private getChildAndOperatorsCount(expressions: IFilteringExpressionsTree): number {\n        let count = 0;\n        let operand;\n        for (let i = 0; i < expressions.filteringOperands.length; i++) {\n            operand = expressions[i];\n            if (operand instanceof FilteringExpressionsTree) {\n                if (operand.operator === FilteringLogic.And) {\n                    count++;\n                }\n\n                count = count + this.getChildAndOperatorsCount(operand);\n            }\n        }\n\n        return count;\n    }\n\n    public generateExpressionsList(expressions: IFilteringExpressionsTree | IFilteringExpression,\n        operator: FilteringLogic,\n        expressionsUIs: ExpressionUI[]): void {\n        this.generateExpressionsListRecursive(expressions, operator, expressionsUIs);\n\n        // The beforeOperator of the first expression and the afterOperator of the last expression should be null\n        if (expressionsUIs.length) {\n            expressionsUIs[expressionsUIs.length - 1].afterOperator = null;\n        }\n    }\n\n    private generateExpressionsListRecursive(expressions: IFilteringExpressionsTree | IFilteringExpression,\n                                    operator: FilteringLogic,\n                                    expressionsUIs: ExpressionUI[]): void {\n        if (!expressions) {\n            return;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                this.generateExpressionsListRecursive(expressionsTree.filteringOperands[i], expressionsTree.operator, expressionsUIs);\n            }\n            if (expressionsUIs.length) {\n                expressionsUIs[expressionsUIs.length - 1].afterOperator = operator;\n            }\n        } else {\n            const exprUI = new ExpressionUI();\n            exprUI.expression = expressions as IFilteringExpression;\n            exprUI.afterOperator = operator;\n\n            const prevExprUI = expressionsUIs[expressionsUIs.length - 1];\n            if (prevExprUI) {\n                exprUI.beforeOperator = prevExprUI.afterOperator;\n            }\n\n            expressionsUIs.push(exprUI);\n        }\n    }\n\n    public isFilteringExpressionsTreeEmpty(): boolean {\n        const expressionTree = this.grid.filteringExpressionsTree;\n        if (!expressionTree.filteringOperands || !expressionTree.filteringOperands.length) {\n            return true;\n        }\n\n        let expr: any;\n\n        for (let i = 0; i < expressionTree.filteringOperands.length; i++) {\n            expr = expressionTree.filteringOperands[i];\n\n            if ((expr instanceof FilteringExpressionsTree)) {\n                const exprTree = expr as FilteringExpressionsTree;\n                if (exprTree.filteringOperands && exprTree.filteringOperands.length) {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n","import { SimpleChanges, SimpleChange } from '@angular/core';\n\n/**\n* @hidden\n*/\nexport function WatchChanges(): PropertyDecorator {\n    return (target: any, key: string, propDesc?: PropertyDescriptor) => {\n        const privateKey = '_' + key.toString();\n        propDesc = propDesc || {\n            configurable: true,\n            enumerable: true,\n        };\n        propDesc.get = propDesc.get || (function (this: any) { return this[privateKey]; });\n        const originalSetter = propDesc.set || (function (this: any, val: any) { this[privateKey] = val; });\n\n        propDesc.set = function (this: any, val: any) {\n            const oldValue = this[key];\n            if (val !== oldValue || (typeof val === 'object' && val === oldValue)) {\n                originalSetter.call(this, val);\n                if (this.ngOnChanges) {\n                    // in case wacthed prop changes trigger ngOnChanges manually\n                    const changes: SimpleChanges = {\n                        [key]: new SimpleChange(oldValue, val, false)\n                    };\n                    this.ngOnChanges(changes);\n               }\n            }\n        };\n        return propDesc;\n    };\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    Input,\n    ViewChild\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IgxFilterOptions } from '../../../directives/filter/filter.directive';\nimport { IChangeCheckboxEventArgs } from '../../../checkbox/checkbox.component';\nimport { IgxInputDirective } from '../../../directives/input/input.directive';\nimport { FilterListItem } from './grid.excel-style-filtering.component';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-search',\n    templateUrl: './excel-style-search.component.html'\n})\nexport class IgxExcelStyleSearchComponent {\n\n    public searchValue: any;\n\n    @Input()\n    public data: FilterListItem[];\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @ViewChild('input', { read: IgxInputDirective })\n    public searchInput: IgxInputDirective;\n\n    constructor() {}\n\n    public clearInput() {\n        this.searchValue = null;\n    }\n\n    public onCheckboxChange(eventArgs: IChangeCheckboxEventArgs) {\n        const selectedIndex = this.data.indexOf(eventArgs.checkbox.value);\n        if (selectedIndex === 0) {\n            this.data.forEach(element => {\n                element.isSelected = eventArgs.checked;\n                this.data[0].indeterminate = false;\n            });\n        } else {\n            eventArgs.checkbox.value.isSelected = eventArgs.checked;\n            if (!this.data.slice(1, this.data.length).find(el => el.isSelected === false)) {\n                this.data[0].indeterminate = false;\n                this.data[0].isSelected = true;\n            } else if (!this.data.slice(1, this.data.length).find(el => el.isSelected === true)) {\n                this.data[0].indeterminate = false;\n                this.data[0].isSelected = false;\n            } else {\n                this.data[0].indeterminate = true;\n            }\n        }\n        eventArgs.checkbox.nativeCheckbox.nativeElement.blur();\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    AfterViewInit,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectorRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { ExpressionUI } from '../grid-filtering.service';\nimport { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';\nimport { IgxDropDownItemComponent, IgxDropDownComponent } from '../../../drop-down/index';\nimport { IgxInputGroupComponent, IgxInputDirective } from '../../../input-group/index';\nimport { DataType } from '../../../data-operations/data-util';\nimport { IFilteringOperation } from '../../../data-operations/filtering-condition';\nimport { OverlaySettings, ConnectedPositioningStrategy, CloseScrollStrategy } from '../../../services/index';\nimport { KEYS } from '../../../core/utils';\nimport { FilteringLogic } from '../../../data-operations/filtering-expression.interface';\n\n/**\n * @hidden\n */\nexport interface ILogicOperatorChangedArgs {\n    target: ExpressionUI;\n    newValue: FilteringLogic;\n}\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-default-expression',\n    templateUrl: './excel-style-default-expression.component.html'\n})\nexport class IgxExcelStyleDefaultExpressionComponent implements AfterViewInit {\n\n    private _dropDownOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(),\n        scrollStrategy: new CloseScrollStrategy()\n    };\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public expressionUI: ExpressionUI;\n\n    @Input()\n    public expressionsList: Array<ExpressionUI>;\n\n    @Input()\n    public grid: any;\n\n    @Output()\n    public onExpressionRemoved = new EventEmitter<ExpressionUI>();\n\n    @Output()\n    public onLogicOperatorChanged = new EventEmitter<ILogicOperatorChangedArgs>();\n\n    @ViewChild('inputGroupConditions', { read: IgxInputGroupComponent })\n    protected inputGroupConditions: IgxInputGroupComponent;\n\n    @ViewChild('inputValues', { read: IgxInputDirective })\n    protected inputValuesDirective: IgxInputDirective;\n\n    @ViewChild('dropdownConditions', { read: IgxDropDownComponent })\n    protected dropdownConditions: IgxDropDownComponent;\n\n    @ViewChild('logicOperatorButtonGroup', { read: IgxButtonGroupComponent })\n    protected logicOperatorButtonGroup: IgxButtonGroupComponent;\n\n    protected get inputValuesElement() {\n        return this.inputValuesDirective;\n    }\n\n    get isLast(): boolean {\n        return this.expressionsList[this.expressionsList.length - 1] === this.expressionUI;\n    }\n\n    get isSingle(): boolean {\n        return this.expressionsList.length === 1;\n    }\n\n    get inputConditionsPlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_condition_placeholder'];\n    }\n\n    get inputValuePlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_row_placeholder'];\n    }\n\n    get type() {\n        switch (this.column.dataType) {\n            case DataType.Number:\n                return 'number';\n            default:\n                return 'text';\n        }\n    }\n\n    constructor(public cdr: ChangeDetectorRef) {}\n\n    ngAfterViewInit(): void {\n        this._dropDownOverlaySettings.outlet = this.column.grid.outletDirective;\n        this._dropDownOverlaySettings.positionStrategy.settings.target = this.inputGroupConditions.element.nativeElement;\n    }\n\n    public focus() {\n        // use requestAnimationFrame to focus the values input because when initializing the component\n        // datepicker's input group is not yet fully initialized\n        requestAnimationFrame(() => this.inputValuesElement.focus());\n    }\n\n    public isConditionSelected(conditionName: string): boolean {\n        return this.expressionUI.expression.condition && this.expressionUI.expression.condition.name === conditionName;\n    }\n\n    public getConditionName(condition: IFilteringOperation) {\n        return condition ? this.translateCondition(condition.name) : null;\n    }\n\n    public getInputWidth() {\n        return this.inputGroupConditions.element.nativeElement.offsetWidth + 'px';\n    }\n\n    get conditions() {\n        return this.column.filters.conditionList();\n    }\n\n    public translateCondition(value: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    public getIconName(): string {\n        if (this.column.dataType === DataType.Boolean && this.expressionUI.expression.condition === null) {\n            return this.getCondition(this.conditions[0]).iconName;\n        } else if (!this.expressionUI.expression.condition) {\n            return 'filter_list';\n        } else {\n            return this.expressionUI.expression.condition.iconName;\n        }\n    }\n\n    public toggleCustomDialogDropDown() {\n        this.dropdownConditions.toggle(this._dropDownOverlaySettings);\n    }\n\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    public onConditionsChanged(eventArgs: any) {\n        const value = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n        this.expressionUI.expression.condition = this.getCondition(value);\n\n        this.focus();\n    }\n\n    public onValuesInput(eventArgs) {\n        this.expressionUI.expression.searchVal = this.transformValue(eventArgs.target.value);\n    }\n\n    public onLogicOperatorButtonClicked(eventArgs, buttonIndex: number) {\n        if (this.logicOperatorButtonGroup.selectedButtons.length === 0) {\n            eventArgs.stopPropagation();\n            this.logicOperatorButtonGroup.selectButton(buttonIndex);\n        } else {\n            this.onLogicOperatorChanged.emit({\n                target: this.expressionUI,\n                newValue: buttonIndex as FilteringLogic\n            });\n        }\n    }\n\n    public onLogicOperatorKeyDown(eventArgs, buttonIndex: number) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.logicOperatorButtonGroup.selectButton(buttonIndex);\n            this.onLogicOperatorChanged.emit({\n                target: this.expressionUI,\n                newValue: buttonIndex as FilteringLogic\n            });\n        }\n    }\n\n    public onRemoveButtonClick() {\n        this.onExpressionRemoved.emit(this.expressionUI);\n    }\n\n    public onInputConditionsKeyDown(eventArgs) {\n        if (eventArgs.altKey && (eventArgs.key === KEYS.DOWN_ARROW || eventArgs.key === KEYS.DOWN_ARROW_IE)) {\n            this.toggleCustomDialogDropDown();\n        }\n\n        if (eventArgs.key === KEYS.TAB && eventArgs.shiftKey && this.expressionsList[0] === this.expressionUI) {\n            eventArgs.preventDefault();\n        }\n\n        event.stopPropagation();\n    }\n\n    private transformValue(value): any {\n        if (this.column.dataType === DataType.Number) {\n            value = parseFloat(value);\n        } else if (this.column.dataType === DataType.Boolean) {\n            value = Boolean(value);\n        }\n\n        return value;\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    ViewChild\n} from '@angular/core';\nimport { IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { IgxDatePickerComponent } from '../../../date-picker/date-picker.component';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-date-expression',\n    templateUrl: './excel-style-date-expression.component.html'\n})\nexport class IgxExcelStyleDateExpressionComponent extends IgxExcelStyleDefaultExpressionComponent {\n\n    @ViewChild('datePicker', { read: IgxDatePickerComponent })\n    private datePicker: IgxDatePickerComponent;\n\n    protected get inputValuesElement() {\n        return this.datePicker.getEditElement();\n    }\n\n    get inputDatePlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_row_date_placeholder'];\n    }\n\n    public openDatePicker(openDialog: Function) {\n        openDialog();\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    Input,\n    ChangeDetectorRef,\n    ViewChild,\n    AfterViewInit,\n    TemplateRef,\n    ViewChildren,\n    QueryList,\n    ElementRef\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport { FilteringLogic } from '../../../data-operations/filtering-expression.interface';\nimport { DataType } from '../../../data-operations/data-util';\nimport {\n    IgxStringFilteringOperand,\n    IgxBooleanFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxDateFilteringOperand\n} from '../../../data-operations/filtering-condition';\nimport { IgxToggleDirective } from '../../../directives/toggle/toggle.directive';\nimport {\n    ConnectedPositioningStrategy,\n    OverlaySettings,\n    VerticalAlignment,\n    PositionSettings,\n    HorizontalAlignment,\n    IgxOverlayService,\n    AbsoluteScrollStrategy\n} from '../../../services/index';\nimport { ILogicOperatorChangedArgs, IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { KEYS } from '../../../core/utils';\nimport { IgxExcelStyleDateExpressionComponent } from './excel-style-date-expression.component';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-custom-dialog',\n    templateUrl: './excel-style-custom-dialog.component.html'\n})\nexport class IgxExcelStyleCustomDialogComponent implements AfterViewInit {\n\n    @Input()\n    public expressionsList = new Array<ExpressionUI>();\n\n    private _customDialogPositionSettings: PositionSettings = {\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalDirection: HorizontalAlignment.Center,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle\n    };\n\n    private _customDialogOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._customDialogPositionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy()\n    };\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public selectedOperator: string;\n\n    @Input()\n    public filteringService: IgxFilteringService;\n\n    @Input()\n    public overlayComponentId: string;\n\n    @Input()\n    public overlayService: IgxOverlayService;\n\n    @ViewChildren(IgxExcelStyleDefaultExpressionComponent)\n    private expressionComponents: QueryList<IgxExcelStyleDefaultExpressionComponent>;\n\n    @ViewChildren(IgxExcelStyleDateExpressionComponent)\n    private expressionDateComponents: QueryList<IgxExcelStyleDateExpressionComponent>;\n\n    @ViewChild('toggle', { read: IgxToggleDirective })\n    public toggle: IgxToggleDirective;\n\n    @ViewChild('defaultExpressionTemplate', { read: TemplateRef })\n    protected defaultExpressionTemplate: TemplateRef<any>;\n\n    @ViewChild('dateExpressionTemplate', { read: TemplateRef })\n    protected dateExpressionTemplate: TemplateRef<any>;\n\n    @ViewChild('expressionsContainer')\n    protected expressionsContainer: ElementRef;\n\n    constructor(private cdr: ChangeDetectorRef) {}\n\n    ngAfterViewInit(): void {\n        this._customDialogOverlaySettings.outlet = this.grid.outlet;\n    }\n\n    get template(): TemplateRef<any> {\n        if (this.column.dataType === DataType.Date) {\n            return this.dateExpressionTemplate;\n        }\n\n        return this.defaultExpressionTemplate;\n    }\n\n    get grid(): any {\n        return this.filteringService.grid;\n    }\n\n    public onCustomDialogOpening() {\n        if (this.selectedOperator) {\n            this.createInitialExpressionUIElement();\n        }\n    }\n\n    public onCustomDialogOpened() {\n        if (this.expressionComponents.first) {\n            this.expressionComponents.first.focus();\n        }\n    }\n\n    public open() {\n        this._customDialogOverlaySettings.positionStrategy.settings.target =\n            this.grid.rootGrid ? this.grid.rootGrid.nativeElement : this.grid.nativeElement;\n        this.toggle.open(this._customDialogOverlaySettings);\n    }\n\n    public onClearButtonClick() {\n        this.filteringService.clearFilter(this.column.field);\n        this.createInitialExpressionUIElement();\n        this.cdr.detectChanges();\n    }\n\n    public closeDialog() {\n        if (this.overlayComponentId) {\n            this.overlayService.hide(this.overlayComponentId);\n        }\n    }\n\n    public onApplyButtonClick() {\n        this.expressionsList = this.expressionsList.filter(\n            element => element.expression.condition &&\n            (element.expression.searchVal || element.expression.searchVal === 0 || element.expression.condition.isUnary));\n\n        if (this.expressionsList.length > 0) {\n            this.expressionsList[0].beforeOperator = null;\n            this.expressionsList[this.expressionsList.length - 1].afterOperator = null;\n        }\n\n        this.filteringService.filterInternal(this.column.field, this.expressionsList);\n        this.closeDialog();\n    }\n\n    public onAddButtonClick() {\n        const exprUI = new ExpressionUI();\n        exprUI.expression = {\n            condition: null,\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n\n        this.expressionsList[this.expressionsList.length - 1].afterOperator = FilteringLogic.And;\n        exprUI.beforeOperator = this.expressionsList[this.expressionsList.length - 1].afterOperator;\n\n        this.expressionsList.push(exprUI);\n\n        this.markChildrenForCheck();\n        this.scrollToBottom();\n    }\n\n    public onExpressionRemoved(event: ExpressionUI) {\n        const indexToRemove = this.expressionsList.indexOf(event);\n\n        if (indexToRemove === 0 && this.expressionsList.length > 1) {\n            this.expressionsList[1].beforeOperator = null;\n        } else if (indexToRemove === this.expressionsList.length - 1) {\n            this.expressionsList[indexToRemove - 1].afterOperator = null;\n        } else {\n            this.expressionsList[indexToRemove - 1].afterOperator = this.expressionsList[indexToRemove + 1].beforeOperator;\n            this.expressionsList[0].beforeOperator = null;\n            this.expressionsList[this.expressionsList.length - 1].afterOperator = null;\n        }\n\n        this.expressionsList.splice(indexToRemove, 1);\n\n        this.cdr.detectChanges();\n\n        this.markChildrenForCheck();\n    }\n\n    public onLogicOperatorChanged(event: ILogicOperatorChangedArgs) {\n        const index = this.expressionsList.indexOf(event.target);\n        event.target.afterOperator = event.newValue;\n        if (index + 1 < this.expressionsList.length) {\n            this.expressionsList[index + 1].beforeOperator = event.newValue;\n        }\n    }\n\n    public onKeyDown(eventArgs) {\n        eventArgs.stopPropagation();\n    }\n\n    public onApplyButtonKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.TAB && !eventArgs.shiftKey) {\n            eventArgs.stopPropagation();\n            eventArgs.preventDefault();\n        }\n    }\n\n    private createCondition(conditionName: string) {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return IgxBooleanFilteringOperand.instance().condition(conditionName);\n            case DataType.Number:\n                return IgxNumberFilteringOperand.instance().condition(conditionName);\n            case DataType.Date:\n                return IgxDateFilteringOperand.instance().condition(conditionName);\n            default:\n                return IgxStringFilteringOperand.instance().condition(conditionName);\n        }\n    }\n\n    private markChildrenForCheck() {\n        this.expressionComponents.forEach(x => x.cdr.markForCheck());\n        this.expressionDateComponents.forEach(x => x.cdr.markForCheck());\n    }\n\n    private createInitialExpressionUIElement() {\n        this.expressionsList = [];\n        const firstExprUI = new ExpressionUI();\n\n        firstExprUI.expression = {\n            condition: this.createCondition(this.selectedOperator),\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n        firstExprUI.afterOperator = FilteringLogic.And;\n\n        this.expressionsList.push(firstExprUI);\n\n        const secondExprUI = new ExpressionUI();\n        secondExprUI.expression = {\n            condition: null,\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n\n        secondExprUI.beforeOperator = FilteringLogic.And;\n\n        this.expressionsList.push(secondExprUI);\n    }\n\n    private scrollToBottom() {\n        requestAnimationFrame(() => {\n            this.expressionsContainer.nativeElement.scrollTop = this.expressionsContainer.nativeElement.scrollHeight;\n        });\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    ViewChild,\n    Input\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-sorting',\n    templateUrl: './excel-style-sorting.component.html'\n})\nexport class IgxExcelStyleSortingComponent {\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public grid: any;\n\n    @ViewChild('sortButtonGroup', { read: IgxButtonGroupComponent })\n    public sortButtonGroup: IgxButtonGroupComponent;\n\n    constructor() {}\n\n    public onSortButtonClicked(sortDirection) {\n        if (this.sortButtonGroup.selectedIndexes.length === 0) {\n            if (this.grid.isColumnGrouped(this.column.field)) {\n                this.selectButton(sortDirection);\n            } else {\n                this.grid.clearSort(this.column.field);\n            }\n        } else {\n            this.grid.sort({ fieldName: this.column.field, dir: sortDirection, ignoreCase: true });\n        }\n    }\n\n    public selectButton(sortDirection: number) {\n        if (sortDirection === 1) {\n            this.sortButtonGroup.selectButton(0);\n        } else {\n            this.sortButtonGroup.selectButton(1);\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    ViewChild,\n    HostBinding,\n    ChangeDetectionStrategy,\n    TemplateRef,\n    Directive,\n    OnDestroy,\n    AfterViewInit,\n    ElementRef\n} from '@angular/core';\nimport {\n    HorizontalAlignment,\n    VerticalAlignment,\n    ConnectedPositioningStrategy,\n    OverlaySettings,\n    IgxOverlayService,\n    AbsoluteScrollStrategy\n} from '../../../services/index';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport { IgxToggleDirective } from '../../../directives/toggle/toggle.directive';\nimport {\n    IFilteringOperation,\n    IgxStringFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxBooleanFilteringOperand,\n    IgxDateFilteringOperand\n} from '../../../data-operations/filtering-condition';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { cloneArray, KEYS } from '../../../core/utils';\nimport { DataType, DataUtil } from '../../../data-operations/data-util';\nimport { IgxExcelStyleSearchComponent } from './excel-style-search.component';\nimport { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';\nimport { Subscription, Subject } from 'rxjs';\nimport { IgxExcelStyleSortingComponent } from './excel-style-sorting.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { ISelectionEventArgs, IgxDropDownComponent } from '../../../drop-down';\nimport { IgxColumnComponent } from '../../column.component';\n\n/**\n *@hidden\n */\nexport class FilterListItem {\n    public value: any;\n    public label: any;\n    public isSelected: boolean;\n    public indeterminate: boolean;\n    public isSpecial = false;\n}\n\n@Directive({\n    selector: '[igxExcelStyleSortingTemplate]'\n})\nexport class IgxExcelStyleSortingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStyleMovingTemplate]'\n})\nexport class IgxExcelStyleMovingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStyleHidingTemplate]'\n})\nexport class IgxExcelStyleHidingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStylePinningTemplate]'\n})\nexport class IgxExcelStylePinningTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-excel-style-filtering',\n    templateUrl: './grid.excel-style-filtering.component.html'\n})\nexport class IgxGridExcelStyleFilteringComponent implements OnDestroy, AfterViewInit {\n    private static readonly filterOptimizationThreshold = 2;\n\n    private shouldOpenSubMenu = true;\n    private expressionsList = new Array<ExpressionUI>();\n    private destroy$ = new Subject<boolean>();\n    private containsNullOrEmpty = false;\n    private selectAllSelected = true;\n    private selectAllIndeterminate = false;\n    private filterValues = new Set<any>();\n\n    protected columnMoving = new Subscription();\n\n    public column: IgxColumnComponent;\n    public filteringService: IgxFilteringService;\n    public listData = new Array<FilterListItem>();\n    public uniqueValues = [];\n    public overlayService: IgxOverlayService;\n    public overlayComponentId: string;\n\n    private _subMenuPositionSettings = {\n        verticalStartPoint: VerticalAlignment.Top\n    };\n\n    private _subMenuOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._subMenuPositionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy()\n    };\n\n    @HostBinding('class.igx-excel-filter')\n    className = 'igx-excel-filter';\n\n    @ViewChild('dropdown', { read: ElementRef })\n    public mainDropdown: ElementRef;\n\n    @ViewChild('subMenu', { read: IgxDropDownComponent })\n    public subMenu: IgxDropDownComponent;\n\n    @ViewChild('customDialog', { read: IgxExcelStyleCustomDialogComponent })\n    public customDialog: IgxExcelStyleCustomDialogComponent;\n\n    @ViewChild('excelStyleSearch', { read: IgxExcelStyleSearchComponent })\n    protected excelStyleSearch: IgxExcelStyleSearchComponent;\n\n    @ViewChild('excelStyleSorting', { read: IgxExcelStyleSortingComponent })\n    protected excelStyleSorting: IgxExcelStyleSortingComponent;\n\n    @ViewChild('defaultExcelStyleSortingTemplate', { read: TemplateRef })\n    protected defaultExcelStyleSortingTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultExcelStyleHidingTemplate', { read: TemplateRef })\n    protected defaultExcelStyleHidingTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultExcelStyleMovingTemplate', { read: TemplateRef })\n    protected defaultExcelStyleMovingTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultExcelStylePinningTemplate', { read: TemplateRef })\n    protected defaultExcelStylePinningTemplate: TemplateRef<any>;\n\n    get grid(): any {\n        return this.filteringService.grid;\n    }\n\n    get conditions() {\n        return this.column.filters.conditionList();\n    }\n\n    get subMenuText() {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return this.grid.resourceStrings.igx_grid_excel_boolean_filter;\n            case DataType.Number:\n                return this.grid.resourceStrings.igx_grid_excel_number_filter;\n            case DataType.Date:\n                return this.grid.resourceStrings.igx_grid_excel_date_filter;\n            default:\n                return this.grid.resourceStrings.igx_grid_excel_text_filter;\n        }\n    }\n\n    constructor(private cdr: ChangeDetectorRef) {}\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    ngAfterViewInit(): void {\n        this.expressionsList = new Array<ExpressionUI>();\n        this.filteringService.generateExpressionsList(this.column.filteringExpressionsTree, this.grid.filteringLogic, this.expressionsList);\n        if (this.expressionsList && this.expressionsList.length &&\n            this.expressionsList[0].expression.condition.name !== 'in') {\n            this.customDialog.expressionsList = this.expressionsList;\n        }\n        this.populateColumnData();\n\n        if (this.excelStyleSorting) {\n            const se = this.grid.sortingExpressions.find(expr => expr.fieldName === this.column.field);\n            if (se) {\n                this.excelStyleSorting.selectButton(se.dir);\n            }\n        }\n\n        requestAnimationFrame(() => {\n            this.excelStyleSearch.searchInput.nativeElement.focus();\n        });\n    }\n\n    public clearFilterClass() {\n        if (this.column.filteringExpressionsTree) {\n            return 'igx-excel-filter__actions-clear';\n        }\n\n        return 'igx-excel-filter__actions-clear--disabled';\n    }\n\n    public initialize(column: IgxColumnComponent, filteringService: IgxFilteringService, overlayService: IgxOverlayService,\n        overlayComponentId: string) {\n        this.column = column;\n        this.filteringService = filteringService;\n        this.overlayService = overlayService;\n        this.overlayComponentId = overlayComponentId;\n\n        this._subMenuOverlaySettings.outlet = this.grid.outlet;\n\n        this.columnMoving = this.grid.onColumnMoving.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.closeDropdown();\n        });\n    }\n\n    /**\n     * Returns the filtering operation condition for a given value.\n     */\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    /**\n     * Returns the translated condition name for a given value.\n     */\n    public translateCondition(value: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    public onPin() {\n        this.column.pinned = !this.column.pinned;\n        this.closeDropdown();\n    }\n\n    public onHide() {\n        this.column.hidden = true;\n        this.grid.onColumnVisibilityChanged.emit({ column: this.column, newValue: true });\n        this.closeDropdown();\n    }\n\n    public onTextFilterClick(eventArgs) {\n        if (this.shouldOpenSubMenu) {\n            this._subMenuOverlaySettings.positionStrategy.settings.target = eventArgs.currentTarget;\n\n            const gridRect = this.grid.nativeElement.getBoundingClientRect();\n            const dropdownRect = this.mainDropdown.nativeElement.getBoundingClientRect();\n\n            let x = dropdownRect.left + dropdownRect.width;\n            let x1 = gridRect.left + gridRect.width;\n            x += window.pageXOffset;\n            x1 += window.pageXOffset;\n            if (Math.abs(x - x1) < 200) {\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Left;\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Left;\n            } else {\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Right;\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Right;\n            }\n\n            this.subMenu.open(this._subMenuOverlaySettings);\n            this.shouldOpenSubMenu = false;\n        }\n    }\n\n    public onTextFilterKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.onTextFilterClick(eventArgs);\n        }\n    }\n\n    public onSubMenuClosed() {\n        requestAnimationFrame(() => {\n            this.shouldOpenSubMenu = true;\n        });\n    }\n\n    public onSubMenuSelection(eventArgs: ISelectionEventArgs) {\n        this.customDialog.selectedOperator = eventArgs.newSelection.value;\n        eventArgs.cancel = true;\n        this.mainDropdown.nativeElement.style.display = 'none';\n        this.subMenu.close();\n        this.customDialog.open();\n    }\n\n    private areExpressionsSelectable () {\n        if (this.expressionsList.length === 1 &&\n            (this.expressionsList[0].expression.condition.name === 'equals' ||\n             this.expressionsList[0].expression.condition.name === 'true' ||\n             this.expressionsList[0].expression.condition.name === 'false' ||\n             this.expressionsList[0].expression.condition.name === 'empty' ||\n             this.expressionsList[0].expression.condition.name === 'in')) {\n            return true;\n        }\n\n        const selectableExpressionsCount = this.expressionsList.filter(exp =>\n            (exp.beforeOperator === 1 || exp.afterOperator === 1) &&\n            (exp.expression.condition.name === 'equals' ||\n             exp.expression.condition.name === 'true' ||\n             exp.expression.condition.name === 'false' ||\n             exp.expression.condition.name === 'empty' ||\n             exp.expression.condition.name === 'in')).length;\n\n        return selectableExpressionsCount === this.expressionsList.length;\n    }\n\n    private areExpressionsValuesInTheList() {\n        if (this.column.dataType === DataType.Boolean) {\n            return true;\n        }\n\n        if (this.filterValues.size === 1) {\n            const firstValue = this.filterValues.values().next().value;\n\n            if (!firstValue && firstValue !== 0) {\n                return true;\n            }\n        }\n\n        for (let index = 0; index < this.uniqueValues.length; index++) {\n            if (this.filterValues.has(this.uniqueValues[index])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public populateColumnData() {\n        let data = this.column.gridAPI.get_all_data(this.grid.id);\n        const gridExpressionsTree: IFilteringExpressionsTree = this.grid.filteringExpressionsTree;\n        const expressionsTree = new FilteringExpressionsTree(gridExpressionsTree.operator, gridExpressionsTree.fieldName);\n\n        for (const operand of gridExpressionsTree.filteringOperands) {\n            if (operand instanceof FilteringExpressionsTree) {\n                const columnExprTree = operand as FilteringExpressionsTree;\n                if (columnExprTree.fieldName === this.column.field) {\n                    break;\n                }\n            }\n            expressionsTree.filteringOperands.push(operand);\n        }\n\n        if (expressionsTree.filteringOperands.length) {\n            const state = { expressionsTree: expressionsTree };\n            data = DataUtil.filter(cloneArray(data), state);\n        }\n\n        if (this.column.dataType === DataType.Date) {\n            this.uniqueValues = Array.from(new Set(data.map(record =>\n                record[this.column.field] ? record[this.column.field].toDateString() : record[this.column.field])));\n            this.filterValues = new Set<any>(this.expressionsList.reduce((arr, e) => {\n                if (e.expression.condition.name === 'in') {\n                    return [ ...arr, ...Array.from((e.expression.searchVal as Set<any>).values()).map(v =>\n                        new Date(v).toDateString()) ];\n                }\n                return [ ...arr, ...[e.expression.searchVal ? e.expression.searchVal.toDateString() : e.expression.searchVal] ];\n            }, []));\n        } else {\n            this.uniqueValues = Array.from(new Set(data.map(record => record[this.column.field])));\n            this.filterValues = new Set<any>(this.expressionsList.reduce((arr, e) => {\n                if (e.expression.condition.name === 'in') {\n                    return [ ...arr, ...Array.from((e.expression.searchVal as Set<any>).values()) ];\n                }\n                return [ ...arr, ...[e.expression.searchVal] ];\n            }, []));\n        }\n        this.listData = new Array<FilterListItem>();\n\n        const shouldUpdateSelection = this.areExpressionsSelectable() && this.areExpressionsValuesInTheList();\n\n        if (this.column.dataType === DataType.Boolean) {\n            this.addBooleanItems();\n        } else {\n            this.addItems(shouldUpdateSelection);\n        }\n\n        this.listData.sort((a, b) => this.sortData(a, b));\n\n        if (this.column.dataType === DataType.Date) {\n            this.uniqueValues = this.uniqueValues.map(value => new Date(value));\n        }\n\n        if (this.containsNullOrEmpty) {\n            this.addBlanksItem(shouldUpdateSelection);\n        }\n\n        this.addSelectAllItem();\n\n        this.cdr.detectChanges();\n    }\n\n    private addBooleanItems() {\n        this.selectAllSelected = true;\n        this.selectAllIndeterminate = false;\n        this.uniqueValues.forEach(element => {\n            const filterListItem = new FilterListItem();\n            if (element !== undefined && element !== null && element !== '') {\n                if (this.column.filteringExpressionsTree) {\n                    if (element === true && this.expressionsList.find(exp => exp.expression.condition.name === 'true' )) {\n                        filterListItem.isSelected = true;\n                        this.selectAllIndeterminate = true;\n                    } else if (element === false && this.expressionsList.find(exp => exp.expression.condition.name === 'false' )) {\n                            filterListItem.isSelected = true;\n                            this.selectAllIndeterminate = true;\n                    } else {\n                        filterListItem.isSelected = false;\n                    }\n                } else {\n                    filterListItem.isSelected = true;\n                }\n                filterListItem.value = element;\n                filterListItem.label = element;\n                filterListItem.indeterminate = false;\n                this.listData.push(filterListItem);\n            } else {\n                this.containsNullOrEmpty = true;\n            }\n        });\n    }\n\n    private addItems(shouldUpdateSelection: boolean) {\n        this.selectAllSelected = true;\n        this.selectAllIndeterminate = false;\n        this.uniqueValues.forEach(element => {\n            if (element !== undefined && element !== null && element !== '') {\n                const filterListItem = new FilterListItem();\n                if (this.column.filteringExpressionsTree) {\n                    if (shouldUpdateSelection) {\n                        if (this.filterValues.has(element)) {\n                            filterListItem.isSelected = true;\n                        } else {\n                            filterListItem.isSelected = false;\n                        }\n                        this.selectAllIndeterminate = true;\n                    } else {\n                        filterListItem.isSelected = false;\n                        this.selectAllSelected = false;\n                    }\n                } else {\n                    filterListItem.isSelected = true;\n                }\n                if (this.column.dataType === DataType.Date) {\n                    filterListItem.value = new Date(element);\n                    filterListItem.label = new Date(element);\n                } else {\n                    filterListItem.value = element;\n                    filterListItem.label = element;\n                }\n                filterListItem.indeterminate = false;\n                this.listData.push(filterListItem);\n            } else {\n                this.containsNullOrEmpty = true;\n            }\n        });\n    }\n\n    private addSelectAllItem() {\n        const selectAll =  new FilterListItem();\n        selectAll.isSelected = this.selectAllSelected;\n        selectAll.value = this.grid.resourceStrings.igx_grid_excel_select_all;\n        selectAll.label = this.grid.resourceStrings.igx_grid_excel_select_all;\n        selectAll.indeterminate = this.selectAllIndeterminate;\n        selectAll.isSpecial = true;\n        this.listData.unshift(selectAll);\n    }\n\n    private addBlanksItem(shouldUpdateSelection) {\n        const blanks =  new FilterListItem();\n        if (this.column.filteringExpressionsTree) {\n            if (shouldUpdateSelection) {\n                if (this.filterValues.has(null)) {\n                    blanks.isSelected = true;\n                } else {\n                    blanks.isSelected = false;\n                }\n            }\n        } else {\n            blanks.isSelected = true;\n        }\n        blanks.value = null;\n        blanks.label = this.grid.resourceStrings.igx_grid_excel_blanks;\n        blanks.indeterminate = false;\n        blanks.isSpecial = true;\n        this.listData.unshift(blanks);\n    }\n\n    private sortData(a: FilterListItem, b: FilterListItem) {\n        let valueA = a.value;\n        let valueB = b.value;\n        if (typeof(a) === DataType.String) {\n            valueA = a.value.toUpperCase();\n            valueB = b.value.toUpperCase();\n        }\n        if (valueA < valueB) {\n            return -1;\n        } else if (valueA > valueB) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    // TODO: sort members by access modifier\n\n    get sortingTemplate() {\n        if (this.grid.excelStyleSortingTemplateDirective) {\n            return this.grid.excelStyleSortingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleSortingTemplate;\n        }\n    }\n\n    get movingTemplate() {\n        if (this.grid.excelStyleMovingTemplateDirective) {\n            return this.grid.excelStyleMovingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleMovingTemplate;\n        }\n    }\n\n    get pinningTemplate() {\n        if (this.grid.excelStylePinningTemplateDirective) {\n            return this.grid.excelStylePinningTemplateDirective.template;\n        } else {\n            return this.defaultExcelStylePinningTemplate;\n        }\n    }\n\n    get hidingTemplate() {\n        if (this.grid.excelStyleHidingTemplateDirective) {\n            return this.grid.excelStyleHidingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleHidingTemplate;\n        }\n    }\n\n    get applyButtonDisabled() {\n        return this.listData[0] && !this.listData[0].isSelected && !this.listData[0].indeterminate;\n    }\n\n    public applyFilter() {\n        const filterTree = new FilteringExpressionsTree(FilteringLogic.Or, this.column.field);\n        const selectedItems = this.listData.slice(1, this.listData.length).filter(el => el.isSelected === true);\n        const unselectedItem = this.listData.slice(1, this.listData.length).find(el => el.isSelected === false);\n\n        if (unselectedItem) {\n            if (selectedItems.length <= IgxGridExcelStyleFilteringComponent.filterOptimizationThreshold) {\n                selectedItems.forEach(element => {\n                    let condition = null;\n                    if (element.value !== null && element.value !== undefined) {\n                        if (this.column.dataType === DataType.Boolean) {\n                            condition = this.createCondition(element.value.toString());\n                        } else {\n                            condition = this.createCondition('equals');\n                        }\n                    } else {\n                        condition = this.createCondition('empty');\n                    }\n                    filterTree.filteringOperands.push({\n                        condition: condition,\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: element.value\n                    });\n                });\n            } else {\n                const blanksItemIndex = selectedItems.findIndex(e => e.value === null || e.value === undefined);\n                let blanksItem: any;\n                if (blanksItemIndex >= 0) {\n                    blanksItem = selectedItems[blanksItemIndex];\n                    selectedItems.splice(blanksItemIndex, 1);\n                }\n\n                filterTree.filteringOperands.push({\n                    condition: this.createCondition('in'),\n                    fieldName: this.column.field,\n                    ignoreCase: this.column.filteringIgnoreCase,\n                    searchVal: new Set(this.column.dataType === DataType.Date ?\n                        selectedItems.map(d => new Date(d.value.getFullYear(), d.value.getMonth(), d.value.getDate()).toISOString()) :\n                        selectedItems.map(e => e.value))\n                });\n\n                if (blanksItem) {\n                    filterTree.filteringOperands.push({\n                        condition: this.createCondition('empty'),\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: blanksItem.value\n                    });\n                }\n            }\n\n            this.expressionsList = new Array<ExpressionUI>();\n            this.filteringService.filterInternal(this.column.field, filterTree);\n        } else {\n            this.filteringService.clearFilter(this.column.field);\n        }\n\n        this.closeDropdown();\n    }\n\n    public closeDropdown() {\n        if (this.overlayComponentId) {\n            this.overlayService.hide(this.overlayComponentId);\n            this.overlayComponentId = null;\n        }\n    }\n\n    public onKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ESCAPE || eventArgs.key === KEYS.ESCAPE_IE) {\n            this.closeDropdown();\n        }\n        eventArgs.stopPropagation();\n    }\n\n    public clearFilter() {\n        this.filteringService.clearFilter(this.column.field);\n        this.populateColumnData();\n    }\n\n    public onClearFilterKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.clearFilter();\n        }\n    }\n\n    public showCustomFilterItem(): boolean {\n        const exprTree = this.column.filteringExpressionsTree;\n        return exprTree && exprTree.filteringOperands && exprTree.filteringOperands.length &&\n            !((exprTree.filteringOperands[0] as IFilteringExpression).condition &&\n            (exprTree.filteringOperands[0] as IFilteringExpression).condition.name === 'in');\n    }\n\n    private createCondition(conditionName: string) {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return IgxBooleanFilteringOperand.instance().condition(conditionName);\n            case DataType.Number:\n                return IgxNumberFilteringOperand.instance().condition(conditionName);\n            case DataType.Date:\n                return IgxDateFilteringOperand.instance().condition(conditionName);\n            default:\n                return IgxStringFilteringOperand.instance().condition(conditionName);\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    DoCheck,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgZone,\n    OnInit,\n    Inject,\n    OnDestroy,\n    NgModuleRef\n} from '@angular/core';\nimport { DataType } from '../data-operations/data-util';\nimport { SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxOverlayService } from '../services/overlay/overlay';\nimport { IgxGridExcelStyleFilteringComponent } from './filtering/excel-style/grid.excel-style-filtering.component';\nimport { OverlaySettings, PositionSettings, VerticalAlignment } from '../services/overlay/utilities';\nimport { AutoPositionStrategy } from '../services/overlay/position/auto-position-strategy';\nimport { useAnimation } from '@angular/animations';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { fadeIn, fadeOut } from '../animations/main';\nimport { AbsoluteScrollStrategy } from '../services/overlay/scroll/absolute-scroll-strategy';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-header',\n    templateUrl: './grid-header.component.html'\n})\nexport class IgxGridHeaderComponent implements DoCheck, OnInit, OnDestroy {\n\n    private _componentOverlayId: string;\n    private _filterMenuPositionSettings: PositionSettings;\n    private _filterMenuOverlaySettings: OverlaySettings;\n    private _destroy$ = new Subject<boolean>();\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public gridID: string;\n\n    @HostBinding('class')\n    get styleClasses(): string {\n        const defaultClasses = [\n            'igx-grid__th--fw',\n            this.column.headerClasses\n        ];\n\n        const classList = {\n            'igx-grid__th': !this.column.columnGroup,\n            'asc': this.ascending,\n            'desc': this.descending,\n            'igx-grid__th--number': this.column.dataType === DataType.Number,\n            'igx-grid__th--sortable': this.column.sortable,\n            'igx-grid__th--filtrable': this.column.filterable && this.grid.filteringService.isFilterRowVisible,\n            'igx-grid__th--sorted': this.sorted\n        };\n\n        Object.entries(classList).forEach(([klass, value]) => {\n            if (value) {\n                defaultClasses.push(klass);\n            }\n        });\n        return defaultClasses.join(' ');\n    }\n\n    @HostBinding('style.height.px')\n    get height() {\n        if (this.grid.hasColumnGroups) {\n            return (this.grid.maxLevelHeaderDepth + 1 - this.column.level) * this.grid.defaultRowHeight;\n        }\n        return null;\n    }\n\n    get ascending() {\n        return this.sortDirection === SortingDirection.Asc;\n    }\n\n    get descending() {\n        return this.sortDirection === SortingDirection.Desc;\n    }\n\n    get sortingIcon(): string {\n        if (this.sortDirection !== SortingDirection.None) {\n            // arrow_downward and arrow_upward\n            // are material icons ligature strings\n            return this.sortDirection === SortingDirection.Asc ? 'arrow_upward' : 'arrow_downward';\n        }\n        return 'arrow_upward';\n    }\n\n    get sorted() {\n        return this.sortDirection !== SortingDirection.None;\n    }\n\n    get filterIconClassName() {\n        return this.column.filteringExpressionsTree ? 'igx-excel-filter__icon--filtered' : 'igx-excel-filter__icon';\n    }\n\n    @HostBinding('attr.role')\n    public hostRole = 'columnheader';\n\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    @HostBinding('attr.id')\n    get headerID() {\n        return `${this.gridID}_${this.column.field}`;\n    }\n\n    protected sortDirection = SortingDirection.None;\n\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public colResizingService: IgxColumnResizingService,\n        public cdr: ChangeDetectorRef,\n        public elementRef: ElementRef,\n        public zone: NgZone,\n        private _filteringService: IgxFilteringService,\n        private _moduleRef: NgModuleRef<any>,\n        @Inject(IgxOverlayService) private _overlayService: IgxOverlayService\n    ) { }\n\n    public ngOnInit() {\n        this.initFilteringSettings();\n    }\n\n    public ngDoCheck() {\n        this.getSortDirection();\n        this.cdr.markForCheck();\n    }\n\n    ngOnDestroy(): void {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n\n        if (this._componentOverlayId) {\n            this._overlayService.hide(this._componentOverlayId);\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (!this.colResizingService.isColumnResizing) {\n            event.stopPropagation();\n            if (this.grid.filteringService.isFilterRowVisible) {\n                if (this.column.filterable && !this.column.columnGroup &&\n                    !this.grid.filteringService.isFilterComplex(this.column.field)) {\n                    this.grid.filteringService.filteredColumn = this.column;\n                }\n            } else if (this.column.sortable) {\n                this.triggerSort();\n            }\n        }\n    }\n\n    public onFilteringIconClick(event) {\n        event.stopPropagation();\n\n        this.toggleFilterDropdown();\n    }\n\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    protected getSortDirection() {\n        const expr = this.gridAPI.grid.sortingExpressions.find((x) => x.fieldName === this.column.field);\n        this.sortDirection = expr ? expr.dir : SortingDirection.None;\n    }\n\n    public onSortingIconClick(event) {\n        if (this.grid.filteringService.isFilterRowVisible) {\n            event.stopPropagation();\n            this.triggerSort();\n        }\n    }\n\n    private triggerSort() {\n        const groupingExpr = this.grid.groupingExpressions ?\n            this.grid.groupingExpressions.find((expr) => expr.fieldName === this.column.field) : null;\n        const sortDir = groupingExpr ?\n            this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.Asc : SortingDirection.Desc\n            : this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.None : this.sortDirection + 1;\n        this.sortDirection = sortDir;\n        this.grid.sort({ fieldName: this.column.field, dir: this.sortDirection, ignoreCase: this.column.sortingIgnoreCase,\n            strategy: this.column.sortStrategy });\n    }\n\n    private toggleFilterDropdown() {\n        if (!this._componentOverlayId) {\n            const headerTarget = this.elementRef.nativeElement;\n            const filterIconTarget = headerTarget.querySelector('.' + this.filterIconClassName);\n\n            this._filterMenuOverlaySettings.positionStrategy.settings.target = filterIconTarget;\n            this._filterMenuOverlaySettings.outlet = this.grid.outlet;\n\n            this._componentOverlayId =\n                this._overlayService.attach(IgxGridExcelStyleFilteringComponent, this._filterMenuOverlaySettings, this._moduleRef);\n            this._overlayService.show(this._componentOverlayId, this._filterMenuOverlaySettings);\n        }\n    }\n\n    private initFilteringSettings() {\n        this._filterMenuPositionSettings = {\n            verticalStartPoint: VerticalAlignment.Bottom,\n            openAnimation: useAnimation(fadeIn, {\n                params: {\n                    duration: '250ms'\n                }\n            }),\n            closeAnimation: useAnimation(fadeOut, {\n                params: {\n                    duration: '200ms'\n                }\n            })\n        };\n\n        this._filterMenuOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: false,\n            positionStrategy: new AutoPositionStrategy(this._filterMenuPositionSettings),\n            scrollStrategy: new AbsoluteScrollStrategy()\n        };\n\n        this._overlayService.onOpening.pipe(\n            filter((overlay) => overlay.id === this._componentOverlayId),\n            takeUntil(this._destroy$)).subscribe((eventArgs) => {\n                this.onOverlayOpening(eventArgs);\n            });\n\n        this._overlayService.onClosed.pipe(\n            filter(overlay => overlay.id === this._componentOverlayId),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this.onOverlayClosed();\n            });\n    }\n\n    private onOverlayOpening(eventArgs) {\n        const instance = eventArgs.componentRef.instance as IgxGridExcelStyleFilteringComponent;\n        if (instance) {\n            instance.initialize(this.column, this._filteringService, this._overlayService, eventArgs.id);\n        }\n    }\n\n    private onOverlayClosed() {\n        this._componentOverlayId = null;\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    HostBinding,\n    AfterViewInit,\n    ElementRef,\n    HostListener,\n    OnInit,\n    ChangeDetectionStrategy,\n    DoCheck\n} from '@angular/core';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from '../column.component';\nimport { IFilteringExpression } from '../../data-operations/filtering-expression.interface';\nimport { IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../chips';\nimport { IgxFilteringService, ExpressionUI } from './grid-filtering.service';\nimport { KEYS } from '../../core/utils';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxGridGroupByRowComponent } from '../grid/groupby-row.component';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-cell',\n    templateUrl: './grid-filtering-cell.component.html'\n})\nexport class IgxGridFilteringCellComponent implements AfterViewInit, OnInit, DoCheck {\n\n    private baseClass = 'igx-grid__filtering-cell-indicator';\n    private currentTemplate = null;\n\n    public expressionsList: ExpressionUI[];\n    public moreFiltersCount = 0;\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @ViewChild('emptyFilter', { read: TemplateRef })\n    protected emptyFilter: TemplateRef<any>;\n\n    @ViewChild('defaultFilter', { read: TemplateRef })\n    protected defaultFilter: TemplateRef<any>;\n\n    @ViewChild('complexFilter', { read: TemplateRef })\n    protected complexFilter: TemplateRef<any>;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChild('moreIcon', { read: ElementRef })\n    protected moreIcon: ElementRef;\n\n    @ViewChild('ghostChip', { read: IgxChipComponent })\n    protected ghostChip: IgxChipComponent;\n\n    @ViewChild('complexChip', { read: IgxChipComponent })\n    protected complexChip: IgxChipComponent;\n\n    @HostBinding('class.igx-grid__filtering-cell')\n    public cssClass = 'igx-grid__filtering-cell';\n\n    constructor(public cdr: ChangeDetectorRef, public filteringService: IgxFilteringService, public navService: IgxGridNavigationService) {\n        this.filteringService.subscribeToEvents();\n    }\n\n    ngOnInit(): void {\n        this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n    }\n\n    ngAfterViewInit(): void {\n        this.updateFilterCellArea();\n    }\n\n    public ngDoCheck() {\n        this.updateFilterCellArea();\n    }\n\n    @HostListener('keydown.tab', ['$event'])\n    public onTabKeyDown(eventArgs) {\n\n        if (this.isLastElementFocused()) {\n            this.filteringService.grid.navigation.navigateNextFilterCell(this.column, eventArgs);\n        }\n        eventArgs.stopPropagation();\n    }\n\n    @HostListener('keydown.shift.tab', ['$event'])\n    public onShiftTabKeyDown(eventArgs) {\n        if (this.isFirstElementFocused()) {\n            this.filteringService.grid.navigation.navigatePrevFilterCell(this.column, eventArgs);\n        }\n        eventArgs.stopPropagation();\n    }\n\n    /**\n     * Returns whether a chip with a given index is visible or not.\n     */\n    public isChipVisible(index: number) {\n        const expression = this.expressionsList[index];\n        return !!(expression && expression.isVisible);\n    }\n\n    /**\n     * Updates the filtering cell area.\n     */\n    public updateFilterCellArea() {\n        this.expressionsList = this.filteringService.getExpressions(this.column.field);\n        this.updateVisibleFilters();\n    }\n\n    get template(): TemplateRef<any> {\n        if (!this.column.filterable) {\n            this.currentTemplate = null;\n            return null;\n        }\n\n        if (this.column.filterCellTemplate) {\n            this.currentTemplate = this.column.filterCellTemplate;\n            return this.column.filterCellTemplate;\n        }\n\n        const expressionTree = this.column.filteringExpressionsTree;\n        if (!expressionTree || expressionTree.filteringOperands.length === 0) {\n            this.currentTemplate = this.emptyFilter;\n            return this.emptyFilter;\n        }\n\n        if (this.filteringService.isFilterComplex(this.column.field)) {\n            this.currentTemplate = this.complexFilter;\n            return this.complexFilter;\n        }\n\n        this.currentTemplate = this.defaultFilter;\n        return this.defaultFilter;\n    }\n\n    /**\n     * Gets the context passed to the filter template.\n     * @memberof IgxGridFilteringCellComponent\n     */\n    get context() {\n        return {\n            column: this.column\n        };\n    }\n\n    /**\n     * Chip clicked event handler.\n     */\n    public onChipClicked(expression?: IFilteringExpression) {\n        if (expression) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = (item.expression === expression);\n            });\n        } else if (this.expressionsList.length > 0) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = false;\n            });\n            this.expressionsList[0].isSelected = true;\n        }\n\n        const index = this.filteringService.unpinnedFilterableColumns.indexOf(this.column);\n        if (index >= 0 && !this.isColumnRightVisible(index)) {\n            this.filteringService.scrollToFilterCell(this.filteringService.unpinnedFilterableColumns[index], true);\n        } else if (index >= 0 && !this.isColumnLeftVisible(index)) {\n            this.filteringService.scrollToFilterCell(this.filteringService.unpinnedFilterableColumns[index], false);\n        }\n\n        this.filteringService.filteredColumn = this.column;\n        this.filteringService.isFilterRowVisible = true;\n        this.filteringService.selectedExpression = expression;\n    }\n\n    /**\n     * Chip removed event handler.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI): void {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove);\n        this.focusChip();\n    }\n\n    /**\n     * Clears the filtering.\n     */\n    public clearFiltering(): void {\n        this.filteringService.clearFilter(this.column.field);\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Chip keydown event handler.\n     */\n    public onChipKeyDown(eventArgs: KeyboardEvent, expression?: IFilteringExpression) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n            this.onChipClicked(expression);\n        }\n    }\n\n    /**\n     * Returns the filtering indicator class.\n     */\n    public filteringIndicatorClass() {\n        return {\n            [this.baseClass]: !this.isMoreIconHidden(),\n            [`${this.baseClass}--hidden`]: this.isMoreIconHidden()\n        };\n    }\n\n    /**\n     * Focus a chip depending on the current visible template.\n     */\n    public focusChip(focusFirst: boolean = false) {\n        if (this.currentTemplate === this.defaultFilter) {\n            if (focusFirst) {\n                this.focusFirstElement();\n            } else {\n                this.focusElement();\n            }\n        } else if (this.currentTemplate === this.emptyFilter) {\n            this.ghostChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        } else if (this.currentTemplate === this.complexFilter) {\n            this.complexChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        }\n    }\n\n    private removeExpression(indexToRemove: number) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.updateVisibleFilters();\n        this.filteringService.filterInternal(this.column.field);\n    }\n\n    private isMoreIconHidden(): boolean {\n        return this.filteringService.columnToMoreIconHidden.get(this.column.field);\n    }\n\n    private updateVisibleFilters() {\n        this.expressionsList.forEach((ex) => ex.isVisible = true);\n\n        if (this.moreIcon) {\n            this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n        }\n        this.cdr.detectChanges();\n\n        if (this.chipsArea && this.expressionsList.length > 1) {\n            const areaWidth = this.chipsArea.element.nativeElement.offsetWidth;\n            let viewWidth = 0;\n            const chipsAreaElements = this.chipsArea.element.nativeElement.children;\n            let visibleChipsCount = 0;\n            const moreIconWidth = this.moreIcon.nativeElement.offsetWidth -\n                parseInt(document.defaultView.getComputedStyle(this.moreIcon.nativeElement)['margin-left'], 10);\n\n            for (let index = 0; index < chipsAreaElements.length - 1; index++) {\n                if (viewWidth + chipsAreaElements[index].offsetWidth < areaWidth) {\n                    viewWidth += chipsAreaElements[index].offsetWidth;\n                    if (index % 2 === 0) {\n                        visibleChipsCount++;\n                    } else {\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-left'], 10);\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-right'], 10);\n                    }\n                } else {\n                    if (index % 2 !== 0 && viewWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    } else if (visibleChipsCount > 0 && viewWidth - chipsAreaElements[index - 1].offsetWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    }\n                    this.moreFiltersCount = this.expressionsList.length - visibleChipsCount;\n                    this.filteringService.columnToMoreIconHidden.set(this.column.field, false);\n                    break;\n                }\n            }\n\n            for (let i = visibleChipsCount; i < this.expressionsList.length; i++) {\n                this.expressionsList[i].isVisible = false;\n            }\n            this.cdr.detectChanges();\n        }\n    }\n\n    private isFirstElementFocused(): boolean {\n        return !(this.chipsArea && this.chipsArea.chipsList.length > 0 &&\n            this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`) !== document.activeElement);\n    }\n\n    private isLastElementFocused(): boolean {\n        if (this.chipsArea) {\n            if (this.isMoreIconHidden() && this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__remove`) !==\n                document.activeElement) {\n                return false;\n            } else if (!this.isMoreIconHidden() && this.moreIcon.nativeElement !== document.activeElement) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private focusFirstElement(): void {\n        if (this.chipsArea.chipsList.length > 0) {\n            this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        } else {\n            this.moreIcon.nativeElement.focus();\n        }\n    }\n\n    private focusElement(): void {\n        if (this.filteringService.shouldFocusNext) {\n            if (!this.isMoreIconHidden() && this.chipsArea.chipsList.length === 0) {\n                this.moreIcon.nativeElement.focus();\n            } else {\n                this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n            }\n        } else {\n            if (!this.isMoreIconHidden()) {\n                this.moreIcon.nativeElement.focus();\n            } else {\n                this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__remove`).focus();\n            }\n        }\n    }\n\n    private isColumnRightVisible(columnIndex: number): boolean {\n        if (this.filteringService.areAllColumnsInView) {\n            return true;\n        }\n        let currentColumnRight = 0;\n        for (let index = 0; index < this.filteringService.unpinnedColumns.length; index++) {\n            currentColumnRight += parseInt(this.filteringService.unpinnedColumns[index].width, 10);\n            if (this.filteringService.unpinnedColumns[index] === this.filteringService.unpinnedFilterableColumns[columnIndex]) {\n                break;\n            }\n        }\n        const width = this.filteringService.displayContainerWidth + this.filteringService.displayContainerScrollLeft;\n        return currentColumnRight <= width;\n    }\n\n    private isColumnLeftVisible(columnIndex: number): boolean {\n        if (this.filteringService.areAllColumnsInView) {\n            return true;\n        }\n        let currentColumnLeft = 0;\n        for (let index = 0; index < this.filteringService.unpinnedColumns.length; index++) {\n            if (this.filteringService.unpinnedColumns[index] === this.filteringService.unpinnedFilterableColumns[columnIndex]) {\n                break;\n            }\n            currentColumnLeft += parseInt(this.filteringService.unpinnedColumns[index].width, 10);\n        }\n        return currentColumnLeft >= this.filteringService.displayContainerScrollLeft;\n    }\n}\n","import {\n    Component,\n    HostBinding,\n    Input,\n    ViewChild,\n    QueryList,\n    ViewChildren,\n    forwardRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    DoCheck,\n    ElementRef,\n    HostListener\n} from '@angular/core';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\n\nconst Z_INDEX = 9999;\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-header-group',\n    templateUrl: './grid-header-group.component.html'\n})\nexport class IgxGridHeaderGroupComponent implements DoCheck {\n\n    /**\n     * Gets the column of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @Input()\n    public column: IgxColumnComponent;\n\n    /**\n     * Gets the `id` of the grid in which the header group is stored.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridHeaderComponent)\n    public headerCell: IgxGridHeaderComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridFilteringCellComponent)\n    public filterCell: IgxGridFilteringCellComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(forwardRef(() => IgxGridHeaderGroupComponent), { read: IgxGridHeaderGroupComponent })\n    public children: QueryList<IgxGridHeaderGroupComponent>;\n\n    /**\n     * Gets the width of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @HostBinding('style.min-width')\n    @HostBinding('style.flex-basis')\n    get width() {\n        return this.grid.getHeaderGroupWidth(this.column);\n    }\n\n    /**\n     * Gets the style classes of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        const defaultClasses = [\n            'igx-grid__thead-item',\n            this.column.headerGroupClasses\n        ];\n\n        const classList = {\n            'igx-grid__th--pinned': this.isPinned,\n            'igx-grid__th--pinned-last': this.isLastPinned,\n            'igx-grid__drag-col-header': this.isHeaderDragged,\n            'igx-grid__th--filtering': this.isFiltered\n        };\n\n        Object.entries(classList).forEach(([className, value]) => {\n            if (value) {\n                defaultClasses.push(className);\n            }\n        });\n        return defaultClasses.join(' ');\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.z-index')\n    get zIndex() {\n        if (!this.column.pinned) {\n            return null;\n        }\n        return Z_INDEX - this.grid.pinnedColumns.indexOf(this.column);\n    }\n\n    /**\n     * Gets the grid of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets whether the header group belongs to a column that is filtered.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isFiltered(): boolean {\n        return this.filteringService.filteredColumn === this.column;\n    }\n\n    /**\n     * Gets whether the header group is stored in the last column in the pinned area.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isLastPinned(): boolean {\n        return this.column.isLastPinned;\n    }\n\n    /**\n     * Gets whether the header group is stored in a pinned column.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isPinned(): boolean {\n        return this.column.pinned;\n    }\n\n    /**\n     * Gets whether the header group belongs to a column that is moved.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isHeaderDragged(): boolean {\n        return this.grid.draggedColumn ===  this.column;\n    }\n\n    /**\n     * @hidden\n     */\n    get hasLastPinnedChildColumn(): boolean {\n        return this.column.allChildren.some(child => child.isLastPinned);\n    }\n\n    /**\n     * @hidden\n     */\n    get height() {\n        return this.element.nativeElement.getBoundingClientRect().height;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mousedown', ['$event'])\n    public onMouseDown(event): void {\n        // hack for preventing text selection in IE and Edge while dragging the resizer\n        event.preventDefault();\n    }\n\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    constructor(private cdr: ChangeDetectorRef,\n                public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n                private element: ElementRef,\n                public colResizingService: IgxColumnResizingService,\n                public filteringService: IgxFilteringService) { }\n}\n","import { IGridResourceStrings, GridResourceStringsEN } from './grid-resources';\nimport { ITimePickerResourceStrings, TimePickerResourceStringsEN } from './time-picker-resources';\nimport { cloneValue } from '../utils';\n\nexport interface IResourceStrings extends IGridResourceStrings, ITimePickerResourceStrings {}\n\n/**\n * @hidden\n */\nexport const CurrentResourceStrings = {\n    GridResStrings: cloneValue(GridResourceStringsEN),\n    TimePickerResStrings: cloneValue(TimePickerResourceStringsEN)\n};\n\nfunction updateResourceStrings(currentStrings: IResourceStrings, newStrings: IResourceStrings ) {\n    for (const key of Object.keys(newStrings)) {\n        if (key in currentStrings) {\n            currentStrings[key] = newStrings[key];\n        }\n    }\n}\n\n/**\n * Changes the resource strings for all components in the application\n * ```\n * @param resourceStrings to be applied\n */\nexport function changei18n(resourceStrings: IResourceStrings) {\n    for (const key of Object.keys(CurrentResourceStrings)) {\n        updateResourceStrings(CurrentResourceStrings[key], resourceStrings);\n    }\n}\n\n/**\n * Returns current resource strings for all components\n */\nexport function getCurrentResourceStrings(): IResourceStrings {\n    return {\n            ...CurrentResourceStrings.GridResStrings,\n            ...CurrentResourceStrings.TimePickerResStrings\n    };\n}\n","export interface IGridResourceStrings {\n    igx_grid_groupByArea_message?: string;\n    igx_grid_emptyFilteredGrid_message?: string;\n    igx_grid_emptyGrid_message?: string;\n    igx_grid_filter?: string;\n    igx_grid_filter_row_close?: string;\n    igx_grid_filter_row_reset?: string;\n    igx_grid_filter_row_placeholder?: string;\n    igx_grid_filter_row_boolean_placeholder?: string;\n    igx_grid_filter_row_date_placeholder?: string;\n    igx_grid_filter_operator_and?: string;\n    igx_grid_complex_filter?: string;\n    igx_grid_filter_operator_or?: string;\n    igx_grid_filter_contains?: string;\n    igx_grid_filter_doesNotContain?: string;\n    igx_grid_filter_startsWith?: string;\n    igx_grid_filter_endsWith?: string;\n    igx_grid_filter_equals?: string;\n    igx_grid_filter_doesNotEqual?: string;\n    igx_grid_filter_empty?: string;\n    igx_grid_filter_notEmpty?: string;\n    igx_grid_filter_null?: string;\n    igx_grid_filter_notNull?: string;\n    igx_grid_filter_before?: string;\n    igx_grid_filter_after?: string;\n    igx_grid_filter_today?: string;\n    igx_grid_filter_yesterday?: string;\n    igx_grid_filter_thisMonth?: string;\n    igx_grid_filter_lastMonth?: string;\n    igx_grid_filter_nextMonth?: string;\n    igx_grid_filter_thisYear?: string;\n    igx_grid_filter_lastYear?: string;\n    igx_grid_filter_nextYear?: string;\n    igx_grid_filter_greaterThan?: string;\n    igx_grid_filter_lessThan?: string;\n    igx_grid_filter_greaterThanOrEqualTo?: string;\n    igx_grid_filter_lessThanOrEqualTo?: string;\n    igx_grid_filter_true?: string;\n    igx_grid_filter_false?: string;\n    igx_grid_filter_all?: string;\n    igx_grid_filter_condition_placeholder?: string;\n    igx_grid_summary_count?: string;\n    igx_grid_summary_min?: string;\n    igx_grid_summary_max?: string;\n    igx_grid_summary_sum?: string;\n    igx_grid_summary_average?: string;\n    igx_grid_summary_earliest?: string;\n    igx_grid_summary_latest?: string;\n    igx_grid_excel_filter_moving_left?: string;\n    igx_grid_excel_filter_moving_right?: string;\n    igx_grid_excel_filter_moving_header?: string;\n    igx_grid_excel_filter_sorting_asc?: string;\n    igx_grid_excel_filter_sorting_desc?: string;\n    igx_grid_excel_filter_sorting_header?: string;\n    igx_grid_excel_filter_clear?: string;\n    igx_grid_excel_custom_dialog_add?: string;\n    igx_grid_excel_custom_dialog_clear?: string;\n    igx_grid_excel_custom_dialog_header?: string;\n    igx_grid_excel_cancel?: string;\n    igx_grid_excel_apply?: string;\n    igx_grid_excel_search_placeholder?: string;\n    igx_grid_excel_select_all?: string;\n    igx_grid_excel_blanks?: string;\n    igx_grid_excel_hide?: string;\n    igx_grid_excel_pin?: string;\n    igx_grid_excel_unpin?: string;\n    igx_grid_excel_text_filter?: string;\n    igx_grid_excel_number_filter?: string;\n    igx_grid_excel_date_filter?: string;\n    igx_grid_excel_boolean_filter?: string;\n    igx_grid_excel_custom_filter?: string;\n}\n\nexport const GridResourceStringsEN: IGridResourceStrings = {\n    igx_grid_groupByArea_message: 'Drag a column header and drop it here to group by that column.',\n    igx_grid_emptyFilteredGrid_message: 'No records found.',\n    igx_grid_emptyGrid_message: 'Grid has no data.',\n    igx_grid_filter: 'Filter',\n    igx_grid_filter_row_close: 'Close',\n    igx_grid_filter_row_reset: 'Reset',\n    igx_grid_filter_row_placeholder: 'Add filter value',\n    igx_grid_filter_row_boolean_placeholder: 'All',\n    igx_grid_filter_row_date_placeholder: 'Pick up date',\n    igx_grid_filter_operator_and: 'And',\n    igx_grid_filter_operator_or: 'Or',\n    igx_grid_complex_filter: 'Complex Filter',\n    igx_grid_filter_contains: 'Contains',\n    igx_grid_filter_doesNotContain: 'Does Not Contain',\n    igx_grid_filter_startsWith: 'Starts With',\n    igx_grid_filter_endsWith: 'Ends With',\n    igx_grid_filter_equals: 'Equals',\n    igx_grid_filter_doesNotEqual: 'Does Not Equal',\n    igx_grid_filter_empty: 'Empty',\n    igx_grid_filter_notEmpty: 'Not Empty',\n    igx_grid_filter_null: 'Null',\n    igx_grid_filter_notNull: 'Not Null',\n    igx_grid_filter_before: 'Before',\n    igx_grid_filter_after: 'After',\n    igx_grid_filter_today: 'Today',\n    igx_grid_filter_yesterday: 'Yesterday',\n    igx_grid_filter_thisMonth: 'This Month',\n    igx_grid_filter_lastMonth: 'Last Month',\n    igx_grid_filter_nextMonth: 'Next Month',\n    igx_grid_filter_thisYear: 'This Year',\n    igx_grid_filter_lastYear: 'Last Year',\n    igx_grid_filter_nextYear: 'Next Year',\n    igx_grid_filter_greaterThan: 'Greater Than',\n    igx_grid_filter_lessThan: 'Less Than',\n    igx_grid_filter_greaterThanOrEqualTo: 'Greater Than Or Equal To',\n    igx_grid_filter_lessThanOrEqualTo: 'Less Than Or Equal To',\n    igx_grid_filter_true: 'True',\n    igx_grid_filter_false: 'False',\n    igx_grid_filter_all: 'All',\n    igx_grid_filter_condition_placeholder: 'Select filter',\n    igx_grid_summary_count: 'Count',\n    igx_grid_summary_min: 'Min',\n    igx_grid_summary_max: 'Max',\n    igx_grid_summary_sum: 'Sum',\n    igx_grid_summary_average: 'Avg',\n    igx_grid_summary_earliest: 'Earliest',\n    igx_grid_summary_latest: 'Latest',\n    igx_grid_excel_filter_moving_left: 'left',\n    igx_grid_excel_filter_moving_right: 'right',\n    igx_grid_excel_filter_moving_header: 'column moving',\n    igx_grid_excel_filter_sorting_asc: 'ascending',\n    igx_grid_excel_filter_sorting_desc: 'descending',\n    igx_grid_excel_filter_sorting_header: 'sorting',\n    igx_grid_excel_filter_clear: 'Clear column filters',\n    igx_grid_excel_custom_dialog_add: 'add filter',\n    igx_grid_excel_custom_dialog_clear: 'Clear filter',\n    igx_grid_excel_custom_dialog_header: 'Custom auto-filter on column: ',\n    igx_grid_excel_cancel: 'cancel',\n    igx_grid_excel_apply: 'apply',\n    igx_grid_excel_search_placeholder: 'Search',\n    igx_grid_excel_select_all: 'Select All',\n    igx_grid_excel_blanks: '(Blanks)',\n    igx_grid_excel_hide: 'Hide column',\n    igx_grid_excel_pin: 'Pin column',\n    igx_grid_excel_unpin: 'Unpin column',\n    igx_grid_excel_text_filter: 'Text filter',\n    igx_grid_excel_number_filter: 'Number filter',\n    igx_grid_excel_date_filter: 'Date filter',\n    igx_grid_excel_boolean_filter: 'Boolean filter',\n    igx_grid_excel_custom_filter: 'Custom filter...'\n};\n","export interface ITimePickerResourceStrings {\n    igx_time_picker_ok?: string;\n    igx_time_picker_cancel?: string;\n}\n\nexport const TimePickerResourceStringsEN: ITimePickerResourceStrings = {\n    igx_time_picker_ok: 'OK',\n    igx_time_picker_cancel: 'Cancel'\n};\n","import { Injectable} from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray } from '../../core/utils';\n\n/** @hidden */\n@Injectable()\nexport class IgxGridSummaryService {\n    protected summaryCacheMap: Map<string, Map<string, any[]>> = new Map<string, Map<string, IgxSummaryResult[]>>();\n    public grid;\n    public rootSummaryID = 'igxGridRootSummary';\n    public summaryHeight = 0;\n    public maxSummariesLenght = 0;\n    public groupingExpressions = [];\n    public retriggerRootPipe = 0;\n    public deleteOperation = false;\n\n    public recalculateSummaries() {\n        this.resetSummaryHeight();\n        this.grid.calculateGridHeight();\n        this.grid.cdr.detectChanges();\n    }\n\n    public clearSummaryCache(args?) {\n        if (!this.summaryCacheMap.size) { return; }\n        if (!args) {\n            this.summaryCacheMap.clear();\n            if (this.grid && this.grid.rootSummariesEnabled) {\n                this.retriggerRootPipe++;\n            }\n            return;\n        }\n        if (args.data) {\n            const rowID = this.grid.primaryKey ? args.data[this.grid.primaryKey] : args.data;\n            this.removeSummaries(rowID);\n        }\n        if (args.rowID !== undefined && args.rowID !== null) {\n            let columnName = args.cellID ? this.grid.columnList.find(col => col.index === args.cellID.columnID).field : undefined;\n            if (columnName && this.grid.rowEditable) { return; }\n\n            const isGroupedColumn = this.grid.groupingExpressions &&\n                    this.grid.groupingExpressions.map(expr => expr.fieldName).indexOf(columnName) !== -1;\n            if (columnName && isGroupedColumn ) {\n                columnName = undefined;\n            }\n            this.removeSummaries(args.rowID, columnName);\n        }\n    }\n\n    public removeSummaries(rowID, columnName?) {\n        this.deleteSummaryCache(this.rootSummaryID, columnName);\n        if (this.summaryCacheMap.size === 1 && this.summaryCacheMap.has(this.rootSummaryID)) { return; }\n        if (this.isTreeGrid) {\n            if (this.grid.transactions.enabled && this.deleteOperation) {\n                this.deleteOperation = false;\n                // TODO: this.removeChildRowSummaries(rowID, columnName);\n                this.summaryCacheMap.clear();\n                return;\n            }\n            this.removeAllTreeGridSummaries(rowID, columnName);\n        } else if (this.isHierarchicalGrid) {\n            if (this.grid.transactions.enabled && this.deleteOperation) {\n                this.deleteOperation = false;\n                this.summaryCacheMap.clear();\n            }\n        } else {\n           const summaryIds = this.getSummaryID(rowID, this.grid.groupingExpressions);\n           summaryIds.forEach(id => {\n               this.deleteSummaryCache(id, columnName);\n           });\n        }\n    }\n\n    public removeSummariesCachePerColumn(columnName) {\n        this.summaryCacheMap.forEach((cache) => {\n            if (cache.get(columnName)) {\n                cache.delete(columnName);\n            }\n        });\n        if (this.grid.rootSummariesEnabled) {  this.retriggerRootPipe++; }\n    }\n\n    public calcMaxSummaryHeight() {\n        if (this.summaryHeight) {\n            return this.summaryHeight;\n        }\n        if (!this.grid.data) {return this.summaryHeight = 0; }\n        let maxSummaryLength = 0;\n        this.grid.columnList.filter((col) => col.hasSummary && !col.hidden).forEach((column) => {\n            const getCurrentSummaryColumn = column.summaries.operate([]).length;\n            if (getCurrentSummaryColumn) {\n                if (maxSummaryLength < getCurrentSummaryColumn) {\n                    maxSummaryLength = getCurrentSummaryColumn;\n                }\n            }\n        });\n        this.maxSummariesLenght = maxSummaryLength;\n        this.summaryHeight =  maxSummaryLength * this.grid.defaultSummaryHeight;\n        return this.summaryHeight;\n    }\n\n    public calculateSummaries(rowID, data) {\n        let rowSummaries = this.summaryCacheMap.get(rowID);\n        if (!rowSummaries) {\n            rowSummaries = new Map<string, IgxSummaryResult[]>();\n            this.summaryCacheMap.set(rowID, rowSummaries);\n        }\n        if (!this.hasSummarizedColumns || !data) {return rowSummaries; }\n        this.grid.columnList.filter(col => col.hasSummary).forEach((column) => {\n            if (!rowSummaries.get(column.field)) {\n                const columnValues = data.map(record => record[column.field]);\n                rowSummaries.set(column.field,\n                    column.summaries.operate(columnValues));\n            }\n        });\n        return rowSummaries;\n    }\n\n    public resetSummaryHeight() {\n        this.summaryHeight = 0;\n        (this.grid as any)._summaryPipeTrigger++;\n        if (this.grid.rootSummariesEnabled) {\n            this.retriggerRootPipe++;\n        }\n    }\n\n    public updateSummaryCache(groupingArgs) {\n        if (this.summaryCacheMap.size === 0 || !this.hasSummarizedColumns) { return; }\n        if (this.groupingExpressions.length === 0) {\n            this.groupingExpressions = groupingArgs.expressions.map(record => record.fieldName);\n            return;\n        }\n        if (groupingArgs.length === 0) {\n            this.groupingExpressions = [];\n            this.clearSummaryCache();\n            return;\n        }\n        this.compareGroupingExpressions(this.groupingExpressions, groupingArgs);\n        this.groupingExpressions = groupingArgs.expressions.map(record => record.fieldName);\n    }\n\n    public get hasSummarizedColumns(): boolean {\n        const summarizedColumns = this.grid.columnList.filter(col => col.hasSummary && !col.hidden);\n        return summarizedColumns.length > 0;\n    }\n\n    private deleteSummaryCache(id, columnName) {\n        if (this.summaryCacheMap.get(id)) {\n            const filteringApplied = columnName && this.grid.filteringExpressionsTree &&\n                    this.grid.filteringExpressionsTree.filteringOperands.map((expr) => expr.fieldName).indexOf(columnName) !== -1;\n            if (columnName && this.summaryCacheMap.get(id).get(columnName) && !filteringApplied) {\n                this.summaryCacheMap.get(id).delete(columnName);\n            } else {\n                this.summaryCacheMap.delete(id);\n            }\n            if (id === this.rootSummaryID && this.grid.rootSummariesEnabled) {\n                this.retriggerRootPipe++;\n            }\n        }\n    }\n\n    private getSummaryID(rowID, groupingExpressions) {\n        if (groupingExpressions.length === 0) { return []; }\n        const summaryIDs = [];\n        let data = this.grid.data;\n        if (this.grid.transactions.enabled) {\n            data = DataUtil.mergeTransactions(\n                cloneArray(this.grid.data),\n                this.grid.transactions.getAggregatedChanges(true),\n                this.grid.primaryKey\n            );\n        }\n        const rowData = this.grid.primaryKey ? data.find(rec => rec[this.grid.primaryKey] === rowID) : rowID;\n        let id = '{ ';\n        groupingExpressions.forEach(expr => {\n            id += `'${expr.fieldName}': '${rowData[expr.fieldName]}'`;\n                summaryIDs.push(id.concat(' }'));\n                id += ', ';\n        });\n        return summaryIDs;\n    }\n\n    private removeAllTreeGridSummaries(rowID, columnName?) {\n        let row = this.grid.records.get(rowID);\n        if (!row) { return; }\n        row = row.children ? row : row.parent;\n        while (row) {\n            rowID = row.rowID;\n            this.deleteSummaryCache(rowID, columnName);\n            row = row.parent;\n        }\n    }\n\n    // TODO: remove only deleted rows\n    private removeChildRowSummaries(rowID, columnName?) {\n    }\n\n    private compareGroupingExpressions(current, groupingArgs) {\n        const newExpressions = groupingArgs.expressions.map(record => record.fieldName);\n        const removedCols = groupingArgs.ungroupedColumns;\n        if (current.length <= newExpressions.length) {\n            const newExpr = newExpressions.slice(0, current.length).toString();\n            if (current.toString() !== newExpr) {\n                this.clearSummaryCache();\n            }\n        } else {\n            const currExpr = current.slice(0, newExpressions.length).toString();\n            if (currExpr !== newExpressions.toString()) {\n                this.clearSummaryCache();\n                return;\n            }\n            removedCols.map(col => col.field).forEach(colName => {\n                this.summaryCacheMap.forEach((cache, id) => {\n                   if (id.indexOf(colName) !== -1) {\n                       this.summaryCacheMap.delete(id);\n                   }});\n            });\n        }\n    }\n\n    private get isTreeGrid() {\n        return this.grid.nativeElement.tagName.toLowerCase() === 'igx-tree-grid';\n    }\n\n    private get isHierarchicalGrid() {\n        return this.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';\n    }\n\n}\n","import { Component, Input, HostBinding, HostListener, ChangeDetectionStrategy, ElementRef } from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { IgxColumnComponent } from '../column.component';\nimport { DataType } from '../../data-operations/data-util';\nimport { IgxGridSelectionService } from '../../core/grid-selection';\nimport { SUPPORTED_KEYS } from '../../core/utils';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-summary-cell',\n    templateUrl: './summary-cell.component.html'\n})\nexport class IgxSummaryCellComponent {\n\n    @Input()\n    public summaryResults: IgxSummaryResult[];\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public firstCellIndentation = 0;\n\n    @Input()\n    public hasSummary = false;\n\n    @Input()\n    public density;\n\n    constructor(private element: ElementRef, private selectionService: IgxGridSelectionService) {\n    }\n\n    @Input()\n    @HostBinding('attr.data-rowIndex')\n    public rowIndex: number;\n\n    @HostBinding('attr.data-visibleIndex')\n    get visibleColumnIndex(): number {\n        return this.column.visibleIndex;\n    }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('attr.aria-describedby')\n    public get describeby() {\n        return `Summary_${this.column.field}`;\n    }\n\n    @HostBinding('class.igx-grid-summary--active')\n    public focused: boolean;\n\n    @HostListener('focus')\n    public onFocus() {\n        this.focused = true;\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.focused = false;\n    }\n\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        // TODO: Refactor\n        const key = event.key.toLowerCase();\n        const ctrl = event.ctrlKey;\n        const shift = event.shiftKey;\n\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n        const args = { targetType: 'summaryCell', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        event.preventDefault();\n\n        if (!this.isKeySupportedInCell(key, ctrl)) { return; }\n\n        this.selectionService.keyboardState.shift = shift && !(key === 'tab');\n        const row = this.getRowElementByIndex(this.rowIndex);\n        switch (key) {\n            case 'tab':\n                if (shift) {\n                    this.grid.navigation.performShiftTabKey(row, this.rowIndex, this.visibleColumnIndex, true);\n                    break;\n                }\n                this.grid.navigation.performTab(row, this.rowIndex, this.visibleColumnIndex, true);\n                break;\n            case 'arrowleft':\n            case 'home':\n            case 'left':\n                if (ctrl || key === 'home') {\n                    this.grid.navigation.onKeydownHome(this.rowIndex, true);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowLeft(this.nativeElement, this.rowIndex, this.visibleColumnIndex, true);\n                break;\n            case 'end':\n            case 'arrowright':\n            case 'right':\n                if (ctrl || key === 'end') {\n                    this.grid.navigation.onKeydownEnd(this.rowIndex, true);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowRight(this.nativeElement, this.rowIndex, this.visibleColumnIndex, true);\n                break;\n            case 'arrowup':\n            case 'up':\n                this.grid.navigation.navigateUp(row, this.rowIndex, this.visibleColumnIndex);\n                break;\n            case 'arrowdown':\n            case 'down':\n                this.grid.navigation.navigateDown(row, this.rowIndex, this.visibleColumnIndex);\n                break;\n        }\n    }\n\n    @HostBinding('style.min-width')\n    @HostBinding('style.max-width')\n    @HostBinding('style.flex-basis')\n    get width() {\n        return this.column.getCellWidth();\n    }\n\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    get columnDatatype(): DataType {\n        return this.column.dataType;\n    }\n\n    get itemHeight() {\n        return this.column.grid.defaultSummaryHeight;\n    }\n\n    /**\n    * @hidden\n    */\n    public get grid() {\n        return (this.column.grid as any);\n    }\n\n    private getRowElementByIndex(rowIndex) {\n        const summaryRows = this.grid.summariesRowList.toArray();\n        return summaryRows.find((sr) => sr.dataRowIndex === rowIndex).nativeElement;\n    }\n\n    private isKeySupportedInCell(key, ctrl) {\n        if (ctrl) {\n           return ['arrowup', 'arrowdown', 'up', 'down', 'end', 'home'].indexOf(key) === -1;\n        }\n        return ['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright', 'home', 'end', 'tab'].indexOf(key) !== -1;\n    }\n\n    public translateSummary(summary: IgxSummaryResult): string {\n        return this.grid.resourceStrings[`igx_grid_summary_${summary.key}`] || summary.label;\n    }\n}\n","import {\n    Component,\n    Input,\n    ViewChildren,\n    QueryList,\n    HostBinding,\n    ViewChild,\n    ElementRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    DoCheck\n} from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { IgxSummaryCellComponent } from './summary-cell.component';\nimport { IgxGridForOfDirective } from '../../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-summary-row',\n    templateUrl: './summary-row.component.html',\n    providers: [IgxForOfSyncService]\n})\nexport class IgxSummaryRowComponent implements DoCheck  {\n\n    @Input()\n    public summaries: Map<string, IgxSummaryResult[]>;\n\n    @Input()\n    public gridID;\n\n    @Input()\n    public index: number;\n\n    @Input()\n    public indentation = 0;\n\n    @Input()\n    public firstCellIndentation = -1;\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    get minHeight() {\n        return this.grid.summaryService.calcMaxSummaryHeight() - 1;\n    }\n\n    @ViewChildren(IgxSummaryCellComponent, { read: IgxSummaryCellComponent })\n    public summaryCells: QueryList<IgxSummaryCellComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxDirRef', { read: IgxGridForOfDirective })\n    public virtDirRow: IgxGridForOfDirective<any>;\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n                public element: ElementRef,\n                public cdr: ChangeDetectorRef) {}\n\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    public get grid() {\n        return this.gridAPI.grid;\n    }\n\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    public getColumnSummaries(columnName) {\n        if (!this.summaries.get(columnName)) {\n            return [];\n        }\n        return this.summaries.get(columnName);\n\n    }\n\n    /**\n     * @hidden\n     */\n    public get pinnedColumns(): IgxColumnComponent[] {\n        return this.grid.pinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    public get unpinnedColumns(): IgxColumnComponent[] {\n        return this.grid.unpinnedColumns;\n    }\n}\n","import { Directive, Input, Output, EventEmitter, ElementRef, OnDestroy, NgZone, OnInit } from '@angular/core';\nimport { interval, Observable, Subscription, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nexport enum DragScrollDirection {\n    NONE,\n    LEFT,\n    TOP,\n    RIGHT,\n    BOTTOM,\n    TOPLEFT,\n    TOPRIGHT,\n    BOTTOMLEFT,\n    BOTTOMRIGHT\n}\n\n\n@Directive({\n    selector: '[igxGridDragSelect]'\n})\nexport class IgxGridDragSelectDirective implements OnInit, OnDestroy {\n    _activeDrag: boolean;\n\n    @Input('igxGridDragSelect')\n    get activeDrag(): boolean {\n        return this._activeDrag;\n    }\n\n    set activeDrag(val: boolean) {\n        if (val !== this._activeDrag) {\n            this.unsubscribe();\n            this._activeDrag = val;\n        }\n    }\n\n    @Output()\n    onDragStop = new EventEmitter<boolean>();\n\n    @Output()\n    onDragScroll = new EventEmitter<DragScrollDirection>();\n\n    get nativeElement(): HTMLElement {\n        return this.ref.nativeElement;\n    }\n\n    get clientRect(): ClientRect {\n        return this.nativeElement.getBoundingClientRect();\n    }\n\n    protected end$ = new Subject<any>();\n    protected lastDirection = DragScrollDirection.NONE;\n    protected _interval$: Observable<any>;\n    protected _sub: Subscription;\n\n    constructor(private ref: ElementRef, private zone: NgZone) {\n        this._interval$ = interval(100).pipe(\n            takeUntil(this.end$),\n            filter(() => this.activeDrag)\n        );\n    }\n\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.addEventListener('pointerover', this.startDragSelection);\n            this.nativeElement.addEventListener('pointerleave', this.stopDragSelection);\n        });\n    }\n\n    ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.removeEventListener('pointerover', this.startDragSelection);\n            this.nativeElement.removeEventListener('pointerleave', this.stopDragSelection);\n        });\n        this.unsubscribe();\n        this.end$.complete();\n    }\n\n\n    startDragSelection = (ev: PointerEvent) => {\n        if (!this.activeDrag) {\n            return;\n        }\n        const x = ev.clientX;\n        const y = ev.clientY;\n        const direction = this._measureDimensions(x, y);\n        if (direction === this.lastDirection) {\n            return;\n        }\n        this.unsubscribe();\n        this._sub = this._interval$.subscribe(() => this.onDragScroll.emit(direction));\n        this.lastDirection = direction;\n    }\n\n    stopDragSelection = () => {\n        if (!this.activeDrag) {\n            return;\n        }\n        this.onDragStop.emit(false);\n        this.unsubscribe();\n        this.lastDirection = DragScrollDirection.NONE;\n    }\n\n    _measureDimensions(x: number, y: number): DragScrollDirection {\n        let direction: DragScrollDirection;\n\n        const rect = this.clientRect;\n        const RATIO = 0.15;\n        const offsetX = Math.trunc(x - rect.left);\n        const offsetY = Math.trunc(y - rect.top);\n\n        const left = offsetX <= rect.width * RATIO;\n        const right = offsetX >= rect.width * (1 - RATIO);\n        const top = offsetY <= rect.height * RATIO;\n        const bottom = offsetY >= rect.height * (1 - RATIO);\n\n        if (top && left) {\n            direction = DragScrollDirection.TOPLEFT;\n        } else if (top && right) {\n            direction = DragScrollDirection.TOPRIGHT;\n        } else if (bottom && left) {\n            direction = DragScrollDirection.BOTTOMLEFT;\n        } else if (bottom && right) {\n            direction = DragScrollDirection.BOTTOMRIGHT;\n        } else if (top) {\n            direction = DragScrollDirection.TOP;\n        } else if (bottom) {\n            direction = DragScrollDirection.BOTTOM;\n        } else if (left) {\n            direction = DragScrollDirection.LEFT;\n        } else if (right) {\n            direction = DragScrollDirection.RIGHT;\n        } else {\n            direction = DragScrollDirection.NONE;\n        }\n\n        return direction;\n\n    }\n\n    protected unsubscribe() {\n        if (this._sub) {\n            this._sub.unsubscribe();\n        }\n    }\n}\n","import {\n    Directive, EmbeddedViewRef, Input, OnChanges, ChangeDetectorRef,\n    SimpleChange, SimpleChanges, TemplateRef, ViewContainerRef, NgModule, NgZone, ViewRef, Output, EventEmitter\n} from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\n/**\n * @hidden\n */\n@Directive({ selector: '[igxTemplateOutlet]' })\nexport class IgxTemplateOutletDirective implements OnChanges {\n    private _viewRef !: EmbeddedViewRef<any>;\n\n    /**\n    * The embedded views cache. Collection is key-value paired.\n    * Key is the template id, value is the embedded view for the related template.\n    */\n    private _embeddedViewsMap: Map<string, EmbeddedViewRef<any>> = new Map();\n\n    @Input() public igxTemplateOutletContext !: Object;\n\n    @Input() public igxTemplateOutlet !: TemplateRef<any>;\n\n    @Output()\n    public onViewCreated = new EventEmitter<IViewChangeEventArgs>();\n\n    @Output()\n    public onViewMoved = new EventEmitter<IViewChangeEventArgs>();\n\n    @Output()\n    public onCachedViewLoaded = new EventEmitter<ICachedViewLoadedEventArgs>();\n\n    constructor(public _viewContainerRef: ViewContainerRef, private _zone: NgZone, public cdr: ChangeDetectorRef) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const actionType: TemplateOutletAction = this._getActionType(changes);\n        switch (actionType) {\n            case TemplateOutletAction.CreateView: this._recreateView(); break;\n            case TemplateOutletAction.MoveView: this._moveView(); break;\n            case TemplateOutletAction.UseCachedView: this._useCachedView(); break;\n            case TemplateOutletAction.UpdateViewContext: this._updateExistingContext(this.igxTemplateOutletContext); break;\n        }\n    }\n\n    public cleanCache() {\n        this._embeddedViewsMap.forEach((item) => {\n            if (!item.destroyed) {\n                item.destroy();\n            }\n        });\n        this._embeddedViewsMap.clear();\n    }\n\n    public cleanView(tmplID) {\n        const embView = this._embeddedViewsMap.get(tmplID);\n        if (embView) {\n            embView.destroy();\n            this._embeddedViewsMap.delete(tmplID);\n        }\n    }\n\n    private _recreateView() {\n        // detach old and create new\n        if (this._viewRef) {\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n        }\n        if (this.igxTemplateOutlet) {\n            this._viewRef = this._viewContainerRef.createEmbeddedView(\n                this.igxTemplateOutlet, this.igxTemplateOutletContext);\n            this.onViewCreated.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n            const tmplId = this.igxTemplateOutletContext['templateID'];\n            if (tmplId) {\n                // if context contains a template id, check if we have a view for that template already stored in the cache\n                // if not create a copy and add it to the cache in detached state.\n                // Note: Views in detached state do not appear in the DOM, however they remain stored in memory.\n                const res = this._embeddedViewsMap.get(this.igxTemplateOutletContext['templateID']);\n                if (!res) {\n                    this._embeddedViewsMap.set(this.igxTemplateOutletContext['templateID'], this._viewRef);\n                }\n            }\n        }\n    }\n\n    private _moveView() {\n        // using external view and inserting it in current view.\n        const view = this.igxTemplateOutletContext['moveView'];\n        const owner = this.igxTemplateOutletContext['owner'];\n        if (view !== this._viewRef) {\n            if (owner._viewContainerRef.indexOf(view) !== -1) {\n                // detach in case view it is attached somewhere else at the moment.\n                owner._viewContainerRef.detach(owner._viewContainerRef.indexOf(view));\n            }\n            if (this._viewRef && this._viewContainerRef.indexOf(this._viewRef) !== -1) {\n                this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n            }\n            this._viewRef = view;\n            this._viewContainerRef.insert(view, 0);\n            this._updateExistingContext(this.igxTemplateOutletContext);\n            this.onViewMoved.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n        }\n    }\n    private _useCachedView() {\n        // use view for specific template cached in the current template outlet\n        const tmplID = this.igxTemplateOutletContext['templateID'];\n        const cachedView = tmplID ?\n            this._embeddedViewsMap.get(tmplID) :\n            null;\n        // if view exists, but template has been changed and there is a view in the cache with the related template\n        // then detach old view and insert the stored one with the matching template\n        // after that update its context.\n        this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n        this._viewRef = cachedView;\n        const oldContext = this._cloneContext(cachedView.context);\n        this._viewContainerRef.insert(this._viewRef, 0);\n        this._updateExistingContext(this.igxTemplateOutletContext);\n        this.onCachedViewLoaded.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext, oldContext });\n    }\n\n    private _shouldRecreateView(changes: SimpleChanges): boolean {\n        const ctxChange = changes['igxTemplateOutletContext'];\n        return !!changes['igxTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));\n    }\n\n    private _hasContextShapeChanged(ctxChange: SimpleChange): boolean {\n        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n        const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n        if (prevCtxKeys.length === currCtxKeys.length) {\n            for (const propName of currCtxKeys) {\n                if (prevCtxKeys.indexOf(propName) === -1) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private _updateExistingContext(ctx: Object): void {\n        for (const propName of Object.keys(ctx)) {\n            (<any>this._viewRef.context)[propName] = (<any>this.igxTemplateOutletContext)[propName];\n        }\n    }\n\n    private _cloneContext(ctx: any): any {\n        const clone = {};\n        for (const propName of Object.keys(ctx)) {\n            clone[propName] = ctx[propName];\n        }\n        return clone;\n    }\n\n    private _getActionType(changes: SimpleChanges) {\n        const movedView = this.igxTemplateOutletContext['moveView'];\n        const tmplID = this.igxTemplateOutletContext['templateID'];\n        const cachedView = tmplID ?\n            this._embeddedViewsMap.get(tmplID) :\n            null;\n        const shouldRecreate = this._shouldRecreateView(changes);\n        if (movedView) {\n            // view is moved from external source\n            return TemplateOutletAction.MoveView;\n        } else if (shouldRecreate && cachedView) {\n            // should recreate (template or context change) and there is a matching template in cache\n            return TemplateOutletAction.UseCachedView;\n        } else if (!this._viewRef || shouldRecreate) {\n            // no view or should recreate\n            return TemplateOutletAction.CreateView;\n        } else if (this.igxTemplateOutletContext) {\n            // has context, update context\n            return TemplateOutletAction.UpdateViewContext;\n        }\n    }\n}\nenum TemplateOutletAction {\n    CreateView,\n    MoveView,\n    UseCachedView,\n    UpdateViewContext\n}\n\nexport interface IViewChangeEventArgs {\n    owner: IgxTemplateOutletDirective;\n    view: EmbeddedViewRef<any>;\n    context: any;\n}\n\nexport interface ICachedViewLoadedEventArgs extends IViewChangeEventArgs {\n    oldContext: any;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTemplateOutletDirective],\n    entryComponents: [],\n    exports: [IgxTemplateOutletDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxTemplateOutletModule {\n}\n","import { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxColumnResizerDirective } from './grid.common';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-column-resizer',\n    templateUrl: './grid-column-resizer.component.html'\n})\nexport class IgxGridColumnResizerComponent {\n    constructor(public colResizingService: IgxColumnResizingService) { }\n\n    @ViewChild(IgxColumnResizerDirective)\n    public resizer: IgxColumnResizerDirective;\n}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    QueryList,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    ChangeDetectionStrategy\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { DataType } from '../../data-operations/data-util';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxDropDownComponent, ISelectionEventArgs } from '../../drop-down/index';\nimport { IFilteringOperation } from '../../data-operations/filtering-condition';\nimport { FilteringLogic, IFilteringExpression } from '../../data-operations/filtering-expression.interface';\nimport { HorizontalAlignment, VerticalAlignment, OverlaySettings } from '../../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../../services/overlay/position/connected-positioning-strategy';\nimport { IChipSelectEventArgs, IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../chips';\nimport { ExpressionUI } from './grid-filtering.service';\nimport { IgxDropDownItemComponent } from '../../drop-down/drop-down-item.component';\nimport { IgxFilteringService } from './grid-filtering.service';\nimport { KEYS, isEdge } from '../../core/utils';\nimport { AbsoluteScrollStrategy } from '../../services/overlay/scroll';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-row',\n    templateUrl: './grid-filtering-row.component.html'\n})\nexport class IgxGridFilteringRowComponent implements AfterViewInit {\n\n    private _positionSettings = {\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _conditionsOverlaySettings: OverlaySettings = {\n        excludePositionTarget: true,\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private _operatorsOverlaySettings: OverlaySettings = {\n        excludePositionTarget: true,\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private chipsAreaWidth: number;\n    private chipAreaScrollOffset = 0;\n    private _column = null;\n    private isKeyPressed = false;\n    private isComposing = false;\n    private _cancelChipClick = false;\n\n    public showArrows: boolean;\n    public expression: IFilteringExpression;\n    public expressionsList: Array<ExpressionUI>;\n\n    @Input()\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    set column(val) {\n        if (val) {\n            this._column = val;\n\n            this.expressionsList = this.filteringService.getExpressions(this._column.field);\n\n            this.resetExpression();\n\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    @Input()\n    get value(): any {\n        return this.expression ? this.expression.searchVal : null;\n    }\n\n    set value(val) {\n        if (!val && val !== 0) {\n            this.expression.searchVal = null;\n            this.showHideArrowButtons();\n        } else {\n            this.expression.searchVal = this.transformValue(val);\n            if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n                this.addExpression(true);\n            }\n        }\n\n        this.filter();\n    }\n\n    @ViewChild('defaultFilterUI', { read: TemplateRef })\n    protected defaultFilterUI: TemplateRef<any>;\n\n    @ViewChild('defaultDateUI', { read: TemplateRef })\n    protected defaultDateUI: TemplateRef<any>;\n\n    @ViewChild('input', { read: ElementRef })\n    protected input: ElementRef;\n\n    @ViewChild('inputGroupConditions', { read: IgxDropDownComponent })\n    protected dropDownConditions: IgxDropDownComponent;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChildren('operators', { read: IgxDropDownComponent })\n    protected dropDownOperators: QueryList<IgxDropDownComponent>;\n\n    @ViewChild('inputGroup', { read: ElementRef })\n    protected inputGroup: ElementRef;\n\n    @ViewChild('inputGroupPrefix', { read: ElementRef })\n    protected inputGroupPrefix: ElementRef;\n\n    @ViewChild('container')\n    protected container: ElementRef;\n\n    @ViewChild('operand')\n    protected operand: ElementRef;\n\n    @ViewChild('closeButton')\n    public closeButton: ElementRef;\n\n    @HostBinding('class.igx-grid__filtering-row')\n    public cssClass = 'igx-grid__filtering-row';\n\n    constructor(public filteringService: IgxFilteringService, public element: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    ngAfterViewInit() {\n        this._conditionsOverlaySettings.outlet = this.column.grid.outletDirective;\n        this._operatorsOverlaySettings.outlet = this.column.grid.outletDirective;\n\n        this.input.nativeElement.focus();\n    }\n\n    @HostListener('keydown.shift.tab', ['$event'])\n    @HostListener('keydown.tab', ['$event'])\n    public onTabKeydown(event) {\n        event.stopPropagation();\n        if (document.activeElement === this.closeButton.nativeElement && !event.shiftKey) {\n            this.filteringService.grid.navigation.navigateFirstCellIfPossible(event);\n        }\n    }\n\n    @HostListener('keydown.esc', ['$event'])\n    public onEscKeydown(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.close();\n    }\n\n    get disabled(): boolean {\n        return !(this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0);\n    }\n\n    get template(): TemplateRef<any> {\n        if (this.column.dataType === DataType.Date) {\n            return this.defaultDateUI;\n        }\n\n        return this.defaultFilterUI;\n    }\n\n    get type() {\n        switch (this.column.dataType) {\n            case DataType.String:\n            case DataType.Boolean:\n                return 'text';\n            case DataType.Number:\n                return 'number';\n        }\n    }\n\n    get conditions(): any {\n        return this.column.filters.conditionList();\n    }\n\n    get isUnaryCondition(): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.isUnary;\n        } else {\n            return true;\n        }\n    }\n\n    get placeholder(): string {\n        if (this.expression.condition && this.expression.condition.isUnary) {\n            return this.filteringService.getChipLabel(this.expression);\n        } else if (this.column.dataType === DataType.Date) {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_date_placeholder;\n        } else if (this.column.dataType === DataType.Boolean) {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_boolean_placeholder;\n        } else {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_placeholder;\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input group's prefix.\n     */\n    public onPrefixKeyDown(event: KeyboardEvent) {\n        if ((event.key === KEYS.ENTER || event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE) &&\n            this.dropDownConditions.collapsed) {\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n            event.stopImmediatePropagation();\n        } else if (event.key === KEYS.TAB) {\n            if (event.shiftKey) {\n                event.preventDefault();\n                event.stopPropagation();\n            } else if (!this.dropDownConditions.collapsed) {\n                this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n            }\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input.\n     */\n    public onInputKeyDown(event: KeyboardEvent) {\n        this.isKeyPressed = true;\n\n        if (this.column.dataType === DataType.Boolean) {\n            if (event.key === KEYS.ENTER || event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE) {\n                this.inputGroupPrefix.nativeElement.focus();\n                this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n                event.stopPropagation();\n                return;\n            }\n        }\n\n        if (event.key === KEYS.ENTER) {\n            if (this.isComposing) {\n                return;\n            }\n\n            this.commitInput();\n        } else if (event.altKey && (event.key === KEYS.DOWN_ARROW || event.key === KEYS.DOWN_ARROW_IE)) {\n            this.inputGroupPrefix.nativeElement.focus();\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n        } else if (event.key === KEYS.ESCAPE || event.key === KEYS.ESCAPE_IE) {\n            event.preventDefault();\n            this.close();\n        }\n        event.stopPropagation();\n    }\n\n    /**\n     * Event handler for keyup on the input.\n     */\n    public onInputKeyUp(eventArgs) {\n        this.isKeyPressed = false;\n    }\n\n    /**\n     * Event handler for input on the input.\n     */\n    public onInput(eventArgs) {\n        // The 'iskeyPressed' flag is needed for a case in IE, because the input event is fired on focus and for some reason,\n        // when you have a japanese character as a placeholder, on init the value here is empty string .\n        if (isEdge() || this.isKeyPressed || eventArgs.target.value) {\n            this.value = eventArgs.target.value;\n        }\n    }\n\n    /**\n     * Event handler for compositionstart on the input.\n     */\n    public onCompositionStart() {\n        this.isComposing = true;\n    }\n\n    /**\n     * Event handler for compositionend on the input.\n     */\n    public onCompositionEnd() {\n        this.isComposing = false;\n    }\n\n    /**\n     * Event handler for input click event.\n     */\n    public onInputClick() {\n        if (this.column.dataType === DataType.Boolean && this.dropDownConditions.collapsed) {\n            this.inputGroupPrefix.nativeElement.focus();\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n        }\n    }\n\n    /**\n     * Event handler for datepicker's close.\n     */\n    public datePickerClose() {\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Returns the filtering operation condition for a given value.\n     */\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    /**\n     * Returns the translated condition name for a given value.\n     */\n    public translateCondition(value: string): string {\n        return this.filteringService.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    /**\n     * Returns the icon name of the current condition.\n     */\n    public getIconName(): string {\n        if (this.column.dataType === DataType.Boolean && this.expression.condition === null) {\n            return this.getCondition(this.conditions[0]).iconName;\n        } else {\n            return this.expression.condition.iconName;\n        }\n    }\n\n    /**\n     * Returns whether a given condition is selected in dropdown.\n     */\n    public isConditionSelected(conditionName: string): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.name === conditionName;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Clears the current filtering.\n     */\n    public clearFiltering() {\n        this.filteringService.clearFilter(this.column.field);\n        this.resetExpression();\n        if (this.input) {\n            this.input.nativeElement.focus();\n        }\n        this.cdr.detectChanges();\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /**\n     * Commits the value of the input.\n     */\n    public commitInput() {\n        this.chipsArea.chipsList.filter(chip => chip.selected = false);\n        let indexToDeselect = -1;\n        for (let index = 0; index < this.expressionsList.length; index++) {\n            const expression = this.expressionsList[index].expression;\n            if (expression.searchVal === null && !expression.condition.isUnary) {\n                indexToDeselect = index;\n            }\n        }\n        if (indexToDeselect !== -1) {\n            this.removeExpression(indexToDeselect, this.expression);\n        }\n        this.resetExpression();\n        this.scrollChipsWhenAddingExpression();\n    }\n\n    /**\n     * Clears the value of the input.\n     */\n    public clearInput() {\n        this.value = null;\n    }\n\n    /**\n     * Event handler for keydown on clear button.\n     */\n    public onClearKeyDown(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            this.clearInput();\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     * Event handler for click on clear button.\n     */\n    public onClearClick() {\n        this.clearInput();\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Event handler for keydown on commit button.\n     */\n    public onCommitKeyDown(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            this.commitInput();\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     * Event handler for click on commit button.\n     */\n    public onCommitClick() {\n        this.commitInput();\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Event handler for focusout on the input group.\n     */\n    public onInputGroupFocusout() {\n        if (!this.value && this.value !== 0) {\n            return;\n        }\n        requestAnimationFrame(() => {\n            const focusedElement = document.activeElement;\n            if (!(focusedElement && this.inputGroup.nativeElement.contains(focusedElement)) &&\n                this.dropDownConditions.collapsed) {\n                this.commitInput();\n            }\n        });\n    }\n\n    /**\n     * Closes the filtering edit row.\n     */\n    public close() {\n        if (this.expressionsList.length === 1 &&\n            this.expressionsList[0].expression.searchVal === null &&\n            this.expressionsList[0].expression.condition.isUnary === false) {\n            this.filteringService.getExpressions(this.column.field).pop();\n        } else {\n            this.expressionsList.forEach((item) => {\n                if (item.expression.searchVal === null && !item.expression.condition.isUnary) {\n                    this.filteringService.removeExpression(this.column.field, this.expressionsList.indexOf(item));\n                }\n            });\n        }\n\n        this.filteringService.isFilterRowVisible = false;\n        this.filteringService.updateFilteringCell(this.column);\n        this.filteringService.focusFilterCellChip(this.column, true);\n\n        this.filteringService.filteredColumn = null;\n        this.filteringService.selectedExpression = null;\n        this.cdr.detectChanges();\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /*\n    * Opens date-picker if condition is not unary\n    */\n    public openDatePicker(openDialog: Function) {\n        if (!this.expression.condition.isUnary) {\n            openDialog();\n        }\n    }\n\n    /**\n     *  Event handler for date picker's selection.\n     */\n    public onDateSelected(value: Date) {\n        this.value = value;\n        this.commitInput();\n    }\n\n    /**\n     * Opens the conditions dropdown.\n     */\n    public toggleConditionsDropDown(target: any) {\n        this._conditionsOverlaySettings.positionStrategy.settings.target = target;\n        this.dropDownConditions.toggle(this._conditionsOverlaySettings);\n    }\n\n    /**\n     * Opens the logic operators dropdown.\n     */\n    public toggleOperatorsDropDown(eventArgs, index) {\n        this._operatorsOverlaySettings.positionStrategy.settings.target = eventArgs.target.parentElement;\n        this.dropDownOperators.toArray()[index].toggle(this._operatorsOverlaySettings);\n    }\n\n    /**\n     * Event handler for change event in conditions dropdown.\n     */\n    public onConditionsChanged(eventArgs) {\n        const value = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n        this.expression.condition = this.getCondition(value);\n        if (this.expression.condition.isUnary) {\n            // update grid's filtering on the next cycle to ensure the drop-down is closed\n            // if the drop-down is not closed this event handler will be invoked multiple times\n            requestAnimationFrame(() => this.unaryConditionChangedCallback());\n        } else {\n            requestAnimationFrame(() => this.conditionChangedCallback());\n        }\n\n        if (this.input) {\n            // Add requestAnimationFrame becasue of an issue in IE, where you are still able to write in the input,\n            // if it has been focused and then set to readonly.\n            requestAnimationFrame(() => this.input.nativeElement.focus());\n        }\n    }\n\n\n    public onChipPointerdown(args, chip: IgxChipComponent) {\n        const activeElement = document.activeElement;\n        this._cancelChipClick = chip.selected && activeElement && this.inputGroup.nativeElement.contains(activeElement);\n    }\n\n    public onChipClick(args, chip: IgxChipComponent) {\n        if (this._cancelChipClick) {\n            return;\n        }\n\n        this._cancelChipClick = false;\n        chip.selected = !chip.selected;\n    }\n\n    /**\n     *  Event handler for chip selected event.\n     */\n    public onChipSelected(eventArgs: IChipSelectEventArgs, expression: IFilteringExpression) {\n        if (eventArgs.selected) {\n            if (this.chipsArea.chipsList) {\n                this.chipsArea.chipsList.forEach((chip) => {\n                    if (chip !== eventArgs.owner) {\n                        chip.selected = false;\n                    }\n                });\n            }\n            this.expression = expression;\n\n            if (this.input) {\n                this.input.nativeElement.focus();\n            }\n        } else if (this.expression === expression) {\n            this.resetExpression();\n        }\n    }\n\n    /**\n     * Event handler for chip keydown event.\n     */\n    public onChipKeyDown(eventArgs: KeyboardEvent, chip: IgxChipComponent) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n            chip.selected = !chip.selected;\n        }\n    }\n\n    /**\n     * Scrolls the first chip into view if the tab key is pressed on the left arrow.\n     */\n    public onLeftArrowKeyDown(event) {\n        if (event.key === KEYS.TAB) {\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    /**\n     * Event handler for chip removed event.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI) {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove, item.expression);\n\n        this.scrollChipsOnRemove();\n    }\n\n    /**\n     * Event handler for logic operator changed event.\n     */\n    public onLogicOperatorChanged(eventArgs: ISelectionEventArgs, expression: ExpressionUI) {\n        if (eventArgs.oldSelection) {\n            expression.afterOperator = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n            this.expressionsList[this.expressionsList.indexOf(expression) + 1].beforeOperator = expression.afterOperator;\n\n            // update grid's filtering on the next cycle to ensure the drop-down is closed\n            // if the drop-down is not closed this event handler will be invoked multiple times\n            requestAnimationFrame(() => this.filter());\n        }\n    }\n\n    /**\n     * Scrolls the chips into the chip area when left or right arrows are pressed.\n     */\n    public scrollChipsOnArrowPress(arrowPosition: string) {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        if (arrowPosition === 'right') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().right) < Math.ceil(containerRect.right)) {\n                    count++;\n                }\n            }\n\n            if (count < chipAraeChildren.length) {\n                this.chipAreaScrollOffset -= Math.ceil(chipAraeChildren[count].getBoundingClientRect().right) -\n                    Math.ceil(containerRect.right) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n\n        if (arrowPosition === 'left') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().left) < Math.ceil(containerRect.left)) {\n                    count++;\n                }\n            }\n\n            if (count > 0) {\n                this.chipAreaScrollOffset += Math.ceil(containerRect.left) -\n                    Math.ceil(chipAraeChildren[count - 1].getBoundingClientRect().left) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n    }\n\n    private showHideArrowButtons() {\n        requestAnimationFrame(() => {\n            if (this.filteringService.isFilterRowVisible) {\n                const containerWidth = this.container.nativeElement.getBoundingClientRect().width;\n                this.chipsAreaWidth = this.chipsArea.element.nativeElement.getBoundingClientRect().width;\n\n                this.showArrows = this.chipsAreaWidth >= containerWidth && this.isColumnFiltered;\n\n                // TODO: revise the cdr.detectChanges() usage here\n                this.cdr.detectChanges();\n            }\n        });\n    }\n\n    private transformValue(value): any {\n        if (this.column.dataType === DataType.Number) {\n            value = parseFloat(value);\n        } else if (this.column.dataType === DataType.Boolean) {\n            value = Boolean(value);\n        }\n\n        return value;\n    }\n\n    private addExpression(isSelected: boolean) {\n        const exprUI = new ExpressionUI();\n        exprUI.expression = this.expression;\n        exprUI.beforeOperator = this.expressionsList.length > 0 ? FilteringLogic.And : null;\n        exprUI.isSelected = isSelected;\n\n        this.expressionsList.push(exprUI);\n\n        const length = this.expressionsList.length;\n        if (this.expressionsList[length - 2]) {\n            this.expressionsList[length - 2].afterOperator = this.expressionsList[length - 1].beforeOperator;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private removeExpression(indexToRemove: number, expression: IFilteringExpression) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.filter();\n\n        if (this.expression === expression) {\n            this.resetExpression();\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private resetExpression() {\n        this.expression = {\n            fieldName: this.column.field,\n            condition: null,\n            searchVal: null,\n            ignoreCase: this.column.filteringIgnoreCase\n        };\n\n        if (this.column.dataType !== DataType.Boolean) {\n            this.expression.condition = this.getCondition(this.conditions[0]);\n        }\n\n        if (this.column.dataType === DataType.Date && this.input) {\n            this.input.nativeElement.value = null;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private scrollChipsWhenAddingExpression() {\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        if (!chipAraeChildren || chipAraeChildren.length === 0) {\n            return;\n        }\n\n        const containerRectRight = Math.ceil(this.container.nativeElement.getBoundingClientRect().right);\n\n        const lastChipRectRight = Math.ceil(chipAraeChildren[chipAraeChildren.length - 1].getBoundingClientRect().right);\n        if (lastChipRectRight >= containerRectRight) {\n            this.chipAreaScrollOffset -= lastChipRectRight - containerRectRight;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    /**\n    * @hidden\n    * Resets the chips area\n    * @memberof IgxGridFilteringRowComponent\n    */\n    public resetChipsArea() {\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n        this.showHideArrowButtons();\n    }\n\n    private transform(offset: number) {\n        requestAnimationFrame(() => {\n            this.chipsArea.element.nativeElement.style.transform = `translate(${offset}px)`;\n        });\n    }\n\n    private scrollChipsOnRemove() {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        for (let index = 0; index < chipAraeChildren.length; index++) {\n            if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().left) < Math.ceil(containerRect.left)) {\n                count++;\n            }\n        }\n\n        if (count <= 2) {\n            this.chipAreaScrollOffset = 0;\n        } else {\n            const dif = chipAraeChildren[count].id === 'chip' ? count - 2 : count - 1;\n            this.chipAreaScrollOffset += Math.ceil(containerRect.left) - Math.ceil(chipAraeChildren[dif].getBoundingClientRect().left) + 1;\n        }\n\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    private conditionChangedCallback() {\n        if (!!this.expression.searchVal || this.expression.searchVal === 0) {\n            this.filter();\n        } else if (this.value) {\n            this.value = null;\n        }\n    }\n\n    private unaryConditionChangedCallback() {\n        if (this.value) {\n            this.value = null;\n        }\n        if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n            this.addExpression(true);\n        }\n        this.filter();\n    }\n\n    private filter() {\n        this.filteringService.filterInternal(this.column.field);\n    }\n\n    private get isColumnFiltered() {\n        return this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0;\n    }\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectorRef,\n    ComponentFactoryResolver,\n    ContentChildren,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    IterableChangeRecord,\n    IterableDiffers,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    ViewContainerRef,\n    InjectionToken,\n    Optional\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil, first, filter } from 'rxjs/operators';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { cloneArray, isEdge, isNavigationKey, CancelableEventArgs, flatten, mergeObjects } from '../core/utils';\nimport { DataType } from '../data-operations/data-util';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { IGroupByRecord } from '../data-operations/groupby-record.interface';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IForOfState, IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport {\n    IgxBaseExporter,\n    IgxExporterOptionsBase,\n    AbsoluteScrollStrategy,\n    HorizontalAlignment,\n    VerticalAlignment,\n    IgxOverlayService\n} from '../services/index';\nimport { IgxCheckboxComponent } from './../checkbox/checkbox.component';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IColumnVisibilityChangedEventArgs } from './column-hiding-item.directive';\nimport { IgxColumnComponent } from './column.component';\nimport { ISummaryExpression } from './summaries/grid-summary';\nimport { DropPosition, ContainerPositioningStrategy, IgxDecimalPipeComponent, IgxDatePipeComponent } from './grid.common';\nimport { IgxGridToolbarComponent } from './grid-toolbar.component';\nimport { IgxRowComponent } from './row.component';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxOverlayOutletDirective, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { Transaction, TransactionType, TransactionService, State } from '../services/index';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditTabStopDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditActionsDirective\n} from './grid.rowEdit.directive';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase, DisplayDensity } from '../core/displayDensity';\nimport { IgxGridRowComponent } from './grid';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { WatchChanges } from './watch-changes';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { IgxGridToolbarCustomContentDirective } from './grid-toolbar.component';\nimport { IGridResourceStrings } from '../core/i18n/grid-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { IgxGridSummaryService } from './summaries/grid-summary.service';\nimport { IgxSummaryRowComponent } from './summaries/summary-row.component';\nimport { DeprecateMethod, DeprecateProperty } from '../core/deprecateDecorators';\nimport { IgxGridSelectionService, GridSelectionRange, IgxGridCRUDService, IgxRow, IgxCell } from '../core/grid-selection';\nimport { DragScrollDirection } from './drag-select.directive';\nimport { ICachedViewLoadedEventArgs, IgxTemplateOutletDirective } from '../directives/template-outlet/template_outlet.directive';\nimport {\n    IgxExcelStyleSortingTemplateDirective,\n    IgxExcelStylePinningTemplateDirective,\n    IgxExcelStyleHidingTemplateDirective,\n    IgxExcelStyleMovingTemplateDirective\n} from './filtering/excel-style/grid.excel-style-filtering.component';\nimport { IgxGridColumnResizerComponent } from './grid-column-resizer.component';\nimport { IgxGridFilteringRowComponent } from './filtering/grid-filtering-row.component';\n\nconst MINIMUM_COLUMN_WIDTH = 136;\nconst FILTER_ROW_HEIGHT = 50;\n\n// By default row editing overlay outlet is inside grid body so that overlay is hidden below grid header when scrolling.\n// In cases when grid has 1-2 rows there isn't enough space in grid body and row editing overlay should be shown above header.\n// Default row editing overlay height is higher then row height that is why the case is valid also for row with 2 rows.\n// More accurate calculation is not possible, cause row editing overlay is still not shown and we don't know its height,\n// but in the same time we need to set row editing overlay outlet before opening the overlay itself.\nconst MIN_ROW_EDITING_COUNT_THRESHOLD = 2;\n\nexport const IgxGridTransaction = new InjectionToken<string>('IgxGridTransaction');\n\nexport interface IGridCellEventArgs {\n    cell: IgxGridCellComponent;\n    event: Event;\n}\n\nexport interface IGridEditEventArgs extends CancelableEventArgs {\n    rowID: any;\n    cellID?: {\n        rowID: any,\n        columnID: any,\n        rowIndex: number\n    };\n    oldValue: any;\n    newValue?: any;\n    event?: Event;\n}\n\nexport interface IPinColumnEventArgs {\n    column: IgxColumnComponent;\n    insertAtIndex: number;\n    isPinned: boolean;\n}\n\nexport interface IPageEventArgs {\n    previous: number;\n    current: number;\n}\n\nexport interface IRowDataEventArgs {\n    data: any;\n}\n\nexport interface IColumnResizeEventArgs {\n    column: IgxColumnComponent;\n    prevWidth: string;\n    newWidth: string;\n}\n\nexport interface IRowSelectionEventArgs {\n    oldSelection: any[];\n    newSelection: any[];\n    row?: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n    event?: Event;\n}\n\nexport interface ISearchInfo {\n    searchText: string;\n    caseSensitive: boolean;\n    exactMatch: boolean;\n    activeMatchIndex: number;\n    matchInfoCache: any[];\n}\n\nexport interface IGridToolbarExportEventArgs {\n    grid: IgxGridBaseComponent;\n    exporter: IgxBaseExporter;\n    options: IgxExporterOptionsBase;\n    cancel: boolean;\n}\n\nexport interface IColumnMovingStartEventArgs {\n    source: IgxColumnComponent;\n}\n\nexport interface IColumnMovingEventArgs {\n    source: IgxColumnComponent;\n    cancel: boolean;\n}\n\nexport interface IColumnMovingEndEventArgs {\n    source: IgxColumnComponent;\n    target: IgxColumnComponent;\n}\n// TODO: to be deleted when onFocusChange event is removed #4054\nexport interface IFocusChangeEventArgs {\n    cell: IgxGridCellComponent;\n    event: Event;\n    cancel: boolean;\n}\n\nexport interface IGridKeydownEventArgs {\n    targetType: GridKeydownTargetType;\n    target: Object;\n    event: Event;\n    cancel: boolean;\n}\n\nexport interface IGridDataBindable {\n    data: any[];\n    filteredData: any[];\n}\n\nexport enum GridSummaryPosition {\n    top = 'top',\n    bottom = 'bottom'\n}\n\nexport enum GridSummaryCalculationMode {\n    rootLevelOnly = 'rootLevelOnly',\n    childLevelsOnly = 'childLevelsOnly',\n    rootAndChildLevels = 'rootAndChildLevels'\n}\n\nexport enum FilterMode {\n    quickFilter = 'quickFilter',\n    excelStyleFilter = 'excelStyleFilter'\n}\n\nexport enum GridKeydownTargetType {\n    dataCell = 'dataCell',\n    summaryCell = 'summaryCell',\n    groupRow = 'groupRow'\n}\n\nexport abstract class IgxGridBaseComponent extends DisplayDensityBase implements OnInit, OnDestroy, AfterContentInit, AfterViewInit {\n    private _scrollWidth: number;\n\n    public get scrollWidth() {\n        return this._scrollWidth;\n    }\n\n    private _resourceStrings = CurrentResourceStrings.GridResStrings;\n    private _emptyGridMessage = null;\n    private _emptyFilteredGridMessage = null;\n    private _isLoading = false;\n    private _locale = null;\n    private _observer: MutationObserver;\n    protected _destroyed = false;\n    private overlayIDs = [];\n    private _hostWidth;\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n    */\n    @Input()\n    set resourceStrings(value: IGridResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    /**\n     * An accessor that returns the resource strings.\n    */\n    get resourceStrings(): IGridResourceStrings {\n        return this._resourceStrings;\n    }\n\n    /**\n     * An @Input property that autogenerates the `IgxGridComponent` columns.\n     * The default value is false.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public autoGenerate = false;\n\n    public abstract id: string;\n\n    /**\n     * An @Input property that sets a custom template when the `IgxGridComponent` is empty.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [emptyGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public emptyGridTemplate: TemplateRef<any>;\n\n    /**\n     * An @Input property that sets a custom template when the `IgxGridComponent` is loading.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [loadingGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public loadingGridTemplate: TemplateRef<any>;\n\n    @WatchChanges()\n    @Input()\n    public get filteringLogic() {\n        return this._filteringExpressionsTree.operator;\n    }\n\n    /**\n     * Sets the filtering logic of the `IgxGridComponent`.\n     * The default is AND.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [filteringLogic]=\"filtering\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set filteringLogic(value: FilteringLogic) {\n        this._filteringExpressionsTree.operator = value;\n    }\n\n    /**\n     * Returns the filtering state of `IgxGridComponent`.\n     * ```typescript\n     * let filteringExpressionsTree = this.grid.filteringExpressionsTree;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get filteringExpressionsTree() {\n        return this._filteringExpressionsTree;\n    }\n\n    /**\n     * Sets the filtering state of the `IgxGridComponent`.\n     * ```typescript\n     * const logic = new FilteringExpressionsTree(FilteringLogic.And, \"ID\");\n     * logic.filteringOperands = [\n     *     {\n     *          condition: IgxNumberFilteringOperand.instance().condition('greaterThan'),\n     *          fieldName: 'ID',\n     *          searchVal: 1\n     *     }\n     * ];\n     * this.grid.filteringExpressionsTree = (logic);\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set filteringExpressionsTree(value) {\n        if (value && value instanceof FilteringExpressionsTree) {\n            const val = (value as FilteringExpressionsTree);\n            for (let index = 0; index < val.filteringOperands.length; index++) {\n                if (!(val.filteringOperands[index] instanceof FilteringExpressionsTree)) {\n                    const newExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And, val.filteringOperands[index].fieldName);\n                    newExpressionsTree.filteringOperands.push(val.filteringOperands[index] as IFilteringExpression);\n                    val.filteringOperands[index] = newExpressionsTree;\n                }\n            }\n\n            // clone the filtering expression tree in order to trigger the filtering pipe\n            const filteringExpressionTreeClone = new FilteringExpressionsTree(value.operator, value.fieldName);\n            filteringExpressionTreeClone.filteringOperands = value.filteringOperands;\n            this._filteringExpressionsTree = filteringExpressionTreeClone;\n\n            if (this.filteringService.isFilteringExpressionsTreeEmpty()) {\n                this.filteredData = null;\n            }\n\n            this.filteringService.refreshExpressions();\n            this.summaryService.clearSummaryCache();\n            this.markForCheck();\n        }\n    }\n\n    /**\n     * Returns the locale of the grid.\n     * If not set, returns browser's language.\n     */\n    @Input()\n    get locale(): string {\n        if (this._locale) {\n            return this._locale;\n        } else {\n            return 'en';\n        }\n    }\n\n    /**\n     * Sets the locale of the grid.\n     */\n    set locale(value) {\n        this._locale = value;\n    }\n\n    /**\n     * Returns whether the paging feature is enabled/disabled.\n     * The default state is disabled (false).\n     * ```\n     * const paging = this.grid.paging;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get paging(): boolean {\n        return this._paging;\n    }\n\n    /**\n     * Enables/Disables the paging feature.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [paging]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set paging(value: boolean) {\n        this._paging = value;\n        this._pipeTrigger++;\n\n        if (this._ngAfterViewInitPassed) {\n            this.cdr.detectChanges();\n            this.calculateGridHeight();\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * Returns the current page index.\n     * ```html\n     * let gridPage = this.grid.page;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get page(): number {\n        return this._page;\n    }\n\n    /**\n     * Sets the current page index.\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [page]=\"5\" [autoGenerate]=\"true\"></igx-grid>\n     */\n    set page(val: number) {\n        if (val === this._page || val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n\n        this.onPagingDone.emit({ previous: this._page, current: val });\n        this._page = val;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns the number of visible items per page of the `IgxGridComponent`.\n     * The default is 15.\n     * ```html\n     * let itemsPerPage = this.grid.perPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get perPage(): number {\n        return this._perPage;\n    }\n\n    /**\n     * Sets the number of visible items per page of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [perPage]=\"5\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set perPage(val: number) {\n        if (val < 0) {\n            return;\n        }\n\n        this.selectionService.clear();\n        this._perPage = val;\n        this.page = 0;\n        this.endEdit(true);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * You can provide a custom `ng-template` for the pagination UI of the grid.\n     * ```html\n     * <igx-grid #grid [paging]=\"true\" [myTemplate]=\"myTemplate\" [height]=\"'305px'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public paginationTemplate: TemplateRef<any>;\n\n    /**\n     * Returns whether the column hiding UI for the `IgxGridComponent` is enabled.\n     * By default it is disabled (false).\n     * ```typescript\n     * let gridColHiding = this.grid.columnHiding;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get columnHiding() {\n        return this._columnHiding;\n    }\n\n    /**\n     * Sets whether the column hiding UI for the `IgxGridComponent` is enabled.\n     * In order for the UI to work, you need to enable the toolbar as shown in the example below.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [showToolbar]=\"true\" [columnHiding]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set columnHiding(value) {\n        if (this._columnHiding !== value) {\n            this._columnHiding = value;\n            if (this.gridAPI.grid) {\n                this.markForCheck();\n                if (this._ngAfterViewInitPassed) {\n                    this.calculateGridSizes();\n                }\n            }\n        }\n    }\n\n    /**\n     * Sets whether the `IgxGridRowComponent` selection is enabled.\n     * By default it is set to false.\n     * ```typescript\n     * let rowSelectable = this.grid.rowSelectable;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get rowSelectable(): boolean {\n        return this._rowSelection;\n    }\n\n    /**\n     * Sets whether rows can be selected.\n     * ```html\n     * <igx-grid #grid [showToolbar]=\"true\" [rowSelectable]=\"true\" [columnHiding]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set rowSelectable(val: boolean) {\n        this._rowSelection = val;\n        if (this.gridAPI.grid) {\n\n            // should selection persist?\n            this.allRowsSelected = false;\n            this.deselectAllRows();\n            this.markForCheck();\n        }\n    }\n\n    /**\n * Sets whether the `IgxGridRowComponent` is editable.\n * By default it is set to false.\n * ```typescript\n * let rowEditable = this.grid.rowEditable;\n * ```\n * @memberof IgxGridBaseComponent\n */\n    @WatchChanges()\n    @Input()\n    get rowEditable(): boolean {\n        return this._rowEditable;\n    }\n    /**\n    * Sets whether rows can be edited.\n    * ```html\n    * <igx-grid #grid [showToolbar]=\"true\" [rowEditable]=\"true\" [columnHiding]=\"true\"></igx-grid>\n    * ```\n    * @memberof IgxGridBaseComponent\n    */\n    set rowEditable(val: boolean) {\n        this._rowEditable = val;\n        if (this.gridAPI.grid) {\n            this.refreshGridState();\n        }\n    }\n\n    /**\n     * Returns the height of the `IgxGridComponent`.\n     * ```typescript\n     * let gridHeight = this.grid.height;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @HostBinding('style.height')\n    @Input()\n    public get height() {\n        return this._height;\n    }\n\n    /**\n     * Sets the height of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set height(value: string) {\n        if (this._height !== value) {\n            this._height = value;\n            this._autoSize = false;\n            requestAnimationFrame(() => {\n                if (!this._destroyed) {\n                    this.reflow();\n                    this.cdr.markForCheck();\n                }\n            });\n        }\n    }\n\n    /**\n     * @hidden\n    */\n    @HostBinding('style.width')\n    get hostWidth() {\n        return this._width || this._hostWidth;\n    }\n    /**\n     * Returns the width of the `IgxGridComponent`.\n     * ```typescript\n     * let gridWidth = this.grid.width;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get width() {\n        return this._width;\n    }\n\n    /**\n     * Sets the width of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [width]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set width(value: string) {\n        if (this._width !== value) {\n            this._width = value;\n            requestAnimationFrame(() => {\n                // Calling reflow(), because the width calculation\n                // might make the horizontal scrollbar appear/disappear.\n                // This will change the height, which should be recalculated.\n                if (!this._destroyed) {\n                    this.reflow();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns the width of the header of the `IgxGridComponent`.\n     * ```html\n     * let gridHeaderWidth = this.grid.headerWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerWidth() {\n        return parseInt(this._width, 10) - 17;\n    }\n\n    /**\n     * An @Input property that adds styling classes applied to all even `IgxGridRowComponent`s in the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-even-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public evenRowCSS = 'igx-grid__tr--even';\n\n    /**\n     * An @Input property that adds styling classes applied to all odd `IgxGridRowComponent`s in the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-odd-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public oddRowCSS = 'igx-grid__tr--odd';\n\n    /**\n     * Returns the row height.\n     * ```typescript\n     * const rowHeight = this.grid.rowHeight;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get rowHeight() {\n        return this._rowHeight ? this._rowHeight : this.defaultRowHeight;\n    }\n\n    /**\n     * Sets the row height.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [rowHeight]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set rowHeight(value) {\n        this._rowHeight = parseInt(value, 10);\n    }\n\n    /**\n     * An @Input property that sets the default width of the `IgxGridComponent`'s columns.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [columnWidth]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get columnWidth(): string {\n        return this._columnWidth;\n    }\n    public set columnWidth(value: string) {\n        this._columnWidth = value;\n        this._columnWidthSetByUser = true;\n    }\n\n    /**\n     * An @Input property that sets the primary key of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [primaryKey]=\"'ProductID'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public primaryKey;\n\n    /**\n     * An @Input property that sets the message displayed when there are no records.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    set emptyGridMessage(value: string) {\n        this._emptyGridMessage = value;\n    }\n\n    /**\n     * An accessor that returns the message displayed when there are no records.\n    */\n    get emptyGridMessage(): string {\n        return this._emptyGridMessage || this.resourceStrings.igx_grid_emptyGrid_message;\n    }\n\n    /**\n     * An @Input property that sets whether the grid is going to show loading indicator.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [isLoading]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    set isLoading(value: boolean) {\n        this._isLoading = value;\n        if (this.gridAPI.grid) {\n            this.markForCheck();\n        }\n    }\n\n    /**\n     * An accessor that returns whether the grid is showing loading indicator.\n     */\n    get isLoading(): boolean {\n        return this._isLoading;\n    }\n\n    /**\n     * A property that allows the columns to be auto-generated once again after the initialization of the grid.\n     * This will allow to bind the grid to remote data and having auto-generated columns at the same time.\n     * Note that after generating the columns, this property would be disabled to avoid re-creating\n     * columns each time a new data is assigned.\n     * ```typescript\n     *  this.grid.shouldGenerate = true;\n     *  this.remoteData = this.remoteService.remoteData;\n     * ```\n     */\n    public shouldGenerate: boolean;\n\n    /**\n     * An @Input property that sets the message displayed when there are no records and the grid is filtered.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    set emptyFilteredGridMessage(value: string) {\n        this._emptyFilteredGridMessage = value;\n    }\n\n    /**\n     * An accessor that returns the message displayed when there are no records and the grid is filtered.\n    */\n    get emptyFilteredGridMessage(): string {\n        return this._emptyFilteredGridMessage || this.resourceStrings.igx_grid_emptyFilteredGrid_message;\n    }\n\n    /**\n     * An @Input property that sets the title to be displayed in the built-in column hiding UI.\n     * ```html\n     * <igx-grid [showToolbar]=\"true\" [columnHiding]=\"true\" columnHidingTitle=\"Column Hiding\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public columnHidingTitle = '';\n\n    /**\n     * Returns if the built-in column pinning UI should be shown in the toolbar.\n     * ```typescript\n     *  let colPinning = this.grid.columnPinning;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get columnPinning() {\n        return this._columnPinning;\n    }\n\n    /**\n     * Sets if the built-in column pinning UI should be shown in the toolbar.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set columnPinning(value) {\n        if (this._columnPinning !== value) {\n            this._columnPinning = value;\n            if (this.gridAPI.grid) {\n                this.markForCheck();\n                if (this._ngAfterViewInitPassed) {\n                    this.calculateGridSizes();\n                }\n            }\n        }\n    }\n\n    /**\n     * An @Input property that sets the title to be displayed in the UI of the column pinning.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [columnPinningTitle]=\"'Column Hiding'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public columnPinningTitle = '';\n\n    /**\n     * Returns if the filtering is enabled.\n     * ```typescript\n     *  let filtering = this.grid.allowFiltering;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get allowFiltering() {\n        return this._allowFiltering;\n    }\n\n    /**\n     * Sets if the filtering is enabled.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [allowFiltering]=\"'true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set allowFiltering(value) {\n        if (this._allowFiltering !== value) {\n            this._allowFiltering = value;\n            if (this.calcHeight) {\n                this.calcHeight += value ? -FILTER_ROW_HEIGHT : FILTER_ROW_HEIGHT;\n            }\n            if (this._ngAfterViewInitPassed) {\n                if (this.maxLevelHeaderDepth) {\n                    this.theadRow.nativeElement.style.height = `${(this.maxLevelHeaderDepth + 1) * this.defaultRowHeight +\n                        (value && this.filterMode === FilterMode.quickFilter ? FILTER_ROW_HEIGHT : 0) + 1}px`;\n                }\n            }\n\n            this.filteringService.isFilterRowVisible = false;\n            this.filteringService.filteredColumn = null;\n\n            this.filteringService.registerSVGIcons();\n            if (this.gridAPI.grid) {\n                this.markForCheck();\n            }\n        }\n    }\n\n    /**\n     * Returns the filter mode.\n     * ```typescript\n     *  let filtering = this.grid.filterMode;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get filterMode() {\n        return this._filterMode;\n    }\n\n    /**\n     * Sets filter mode.\n     * By default it's set to FilterMode.quickFilter.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [filterMode]=\"'quickFilter'\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set filterMode(value) {\n        this._filterMode = value;\n    }\n\n    /**\n     * Returns the summary position.\n     * ```typescript\n     *  let summaryPosition = this.grid.summaryPosition;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get summaryPosition() {\n        return this._summaryPosition;\n    }\n\n    /**\n     * Sets summary position.\n     * By default it is bottom.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" summaryPosition=\"top\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set summaryPosition(value) {\n        this._summaryPosition = value;\n        if (this.gridAPI.grid) {\n            this.markForCheck();\n        }\n    }\n\n    /**\n     * Returns the summary calculation mode.\n     * ```typescript\n     *  let summaryCalculationMode = this.grid.summaryCalculationMode;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get summaryCalculationMode() {\n        return this._summaryCalculationMode;\n    }\n\n    /**\n     * Sets summary calculation mode.\n     * By default it is rootAndChildLevels which means the summaries are calculated for the root level and each child level.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" summaryCalculationMode=\"rootLevelOnly\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set summaryCalculationMode(value) {\n        this._summaryCalculationMode = value;\n        if (this.gridAPI.grid) {\n            this.summaryService.resetSummaryHeight();\n            this.endEdit(true);\n            this.calculateGridHeight();\n            this.cdr.markForCheck();\n        }\n    }\n\n    /**\n     * Emitted when `IgxGridCellComponent` is clicked. Returns the `IgxGridCellComponent`.\n     * ```html\n     * <igx-grid #grid (onCellClick)=\"onCellClick($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellClick(e){\n     *     alert(\"The cell has been clicked!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onCellClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when `IgxGridCellComponent` is selected. Returns the `IgxGridCellComponent`.\n     * ```html\n     * <igx-grid #grid (onSelection)=\"onCellSelect($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellSelect(e){\n     *     alert(\"The cell has been selected!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     *  Emitted when `IgxGridRowComponent` is selected.\n     * ```html\n     * <igx-grid #grid (onRowSelectionChange)=\"onRowClickChange($event)\" [data]=\"localData\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellClickChange(e){\n     *     alert(\"The selected row has been changed!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowSelectionChange = new EventEmitter<IRowSelectionEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` is pinned.\n     * The index that the column is inserted at may be changed through the `insertAtIndex` property.\n     * ```typescript\n     * public columnPinning(event) {\n     *     if (event.column.field === \"Name\") {\n     *       event.insertAtIndex = 0;\n     *     }\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnPinning = new EventEmitter<IPinColumnEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent`\n     * editing has been performed in the grid and the values have **not** been submitted (e.g. `Esc` key was pressed).\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      newValue: object,\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editCancel(event: IGridEditEventArgs){\n     *    const rowID: IgxColumnComponent = event.rowID;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEditCancel)=\"editCancel($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onCellEditCancel = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent` enters edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editStart(event: IGridEditEventArgs){\n     *    const value: IgxColumnComponent = event.newValue;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEditEnter)=\"editStart($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onCellEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent` editing has been performed in the grid.\n     * Event is fired after editing is completed, when the cell is exiting edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      newValue: object,\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editDone(event: IGridEditEventArgs){\n     *    const value: IgxColumnComponent = event.newValue;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEdit)=\"editDone($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onCellEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" a row enters edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEditEnter)=\"editStart($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editStart(event: IGridEditEventArgs) {\n     *          const editedRowObj = event.oldValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onRowEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" & `endEdit(true)` is called.\n     * Emitted when changing rows during edit mode, selecting an un-editable cell in the edited row,\n     * performing paging operation, column resizing, pinning, moving or hitting  `Done`\n     * button inside of the rowEditingOverlay, or hitting the `Enter` key while editing a cell.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      newValue: <rowObj>,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEdit)=\"editDone($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     *\n     * ```typescript\n     *      editDone(event: IGridEditEventArgs) {\n     *          const originalRowObj = event.oldValue;\n     *          const updatedRowObj = event.newValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" & `endEdit(false)` is called.\n     * Emitted when changing hitting `Esc` key during cell editing and when click on the `Cancel` button\n     * in the row editing overlay.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      newValue: <rowObj>,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEditCancel)=\"editCancel($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editCancel(emitted: { row: IgxGridRowComponent, newValue: any, oldValue: any }): void {\n     *          const originalRowObj = event.oldValue;\n     *          const updatedRowObj = event.newValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowEditCancel = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * Emitted when a grid column is initialized. Returns the column object.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [onColumnInit]=\"initColumns($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * initColumns(event: IgxColumnComponent) {\n     * const column: IgxColumnComponent = event;\n     *       column.filterable = true;\n     *       column.sortable = true;\n     *       column.editable = true;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnInit = new EventEmitter<IgxColumnComponent>();\n\n    /**\n     * Emitted when sorting is performed through the UI. Returns the sorting expression.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onSortingDone)=\"sortingDone($event)\"></igx-grid>\n     * ```\n     * ```typescript\n     * sortingDone(event: SortingDirection){\n     *     const sortingDirection = event;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onSortingDone = new EventEmitter<ISortingExpression | Array<ISortingExpression>>();\n\n    /**\n     * Emitted when filtering is performed through the UI.\n     * Returns the filtering expressions tree of the column for which filtering was performed.\n     * ```typescript\n     * filteringDone(event: IFilteringExpressionsTree){\n     *     const filteringTree = event;\n     *}\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onFilteringDone)=\"filteringDone($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onFilteringDone = new EventEmitter<IFilteringExpressionsTree>();\n\n    /**\n     * Emitted when paging is performed. Returns an object consisting of the previous and next pages.\n     * ```typescript\n     * pagingDone(event: IPageEventArgs){\n     *     const paging = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onPagingDone)=\"pagingDone($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onPagingDone = new EventEmitter<IPageEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridRowComponent` is being added to the `IgxGridComponent` through the API.\n     * Returns the data for the new `IgxGridRowComponent` object.\n     * ```typescript\n     * rowAdded(event: IRowDataEventArgs){\n     *    const rowInfo = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowAdded)=\"rowAdded($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowAdded = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridRowComponent` is deleted through the `IgxGridComponent` API.\n     * Returns an `IRowDataEventArgs` object.\n     * ```typescript\n     * rowDeleted(event: IRowDataEventArgs){\n     *    const rowInfo = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowDeleted)=\"rowDeleted($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowDeleted = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Emitted when a new chunk of data is loaded from virtualization.\n     * ```typescript\n     *  <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onDataPreLoad)='handleDataPreloadEvent()'></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * Emitted when `IgxColumnComponent` is resized.\n     * Returns the `IgxColumnComponent` object's old and new width.\n     * ```typescript\n     * resizing(event: IColumnResizeEventArgs){\n     *     const grouping = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onColumnResized)=\"resizing($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnResized = new EventEmitter<IColumnResizeEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridCellComponent` is right clicked. Returns the `IgxGridCellComponent` object.\n     * ```typescript\n     * contextMenu(event: IGridCellEventArgs){\n     *     const resizing = event;\n     *     console.log(resizing);\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onContextMenu)=\"contextMenu($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onContextMenu = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridCellComponent` is double clicked. Returns the `IgxGridCellComponent` object.\n     * ```typescript\n     * dblClick(event: IGridCellEventArgs){\n     *     const dblClick = event;\n     *     console.log(dblClick);\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onDoubleClick)=\"dblClick($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onDoubleClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` visibility is changed. Args: { column: any, newValue: boolean }\n     * ```typescript\n     * visibilityChanged(event: IColumnVisibilityChangedEventArgs){\n     *    const visiblity = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnVisibilityChanged)=\"visibilityChanged($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` moving starts. Returns the moved `IgxColumnComponent` object.\n     * ```typescript\n     * movingStart(event: IColumnMovingStartEventArgs){\n     *     const movingStarts = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingStart)=\"movingStart($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMovingStart = new EventEmitter<IColumnMovingStartEventArgs>();\n\n    /**\n     * Emitted throughout the `IgxColumnComponent` moving operation.\n     * Returns the source and target `IgxColumnComponent` objects. This event is cancelable.\n     * ```typescript\n     * moving(event: IColumnMovingEventArgs){\n     *     const moving = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMoving)=\"moving($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMoving = new EventEmitter<IColumnMovingEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` moving ends.\n     * Returns the source and target `IgxColumnComponent` objects.\n     * ```typescript\n     * movingEnds(event: IColumnMovingEndEventArgs){\n     *     const movingEnds = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingEnd)=\"movingEnds($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMovingEnd = new EventEmitter<IColumnMovingEndEventArgs>();\n\n    /**\n     * @deprecated you should use onGridKeydown event\n     */\n    @Output()\n    @DeprecateProperty('onFocusChange event is deprecated. Use onGridKeydown event instead.')\n    public onFocusChange = new EventEmitter<IFocusChangeEventArgs>();\n\n    /**\n     * Emitted when keydown is triggered over element inside grid's body.\n     * This event is fired only if the key combination is supported in the grid.\n     * Return the target type, target object and the original event. This event is cancelable.\n     * ```typescript\n     * customKeydown(args: IGridKeydownEventArgs) {\n     *  const keydownEvent = args.event;\n     * }\n     * ```\n     * ```html\n     *  <igx-grid (onGridKeydown)=\"customKeydown($event)\"></igx-grid>\n     * ```\n    */\n    @Output()\n    public onGridKeydown = new EventEmitter<IGridKeydownEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridColumnResizerComponent)\n    public resizeLine: IgxGridColumnResizerComponent;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: true })\n    public columnList: QueryList<IgxColumnComponent>;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleSortingTemplateDirective, { read: IgxExcelStyleSortingTemplateDirective })\n    public excelStyleSortingTemplateDirective: IgxExcelStyleSortingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleMovingTemplateDirective, { read: IgxExcelStyleMovingTemplateDirective })\n    public excelStyleMovingTemplateDirective: IgxExcelStyleMovingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleHidingTemplateDirective, { read: IgxExcelStyleHidingTemplateDirective })\n    public excelStyleHidingTemplateDirective: IgxExcelStyleHidingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStylePinningTemplateDirective, { read: IgxExcelStylePinningTemplateDirective })\n    public excelStylePinningTemplateDirective: IgxExcelStylePinningTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxGridHeaderGroupComponent, { read: IgxGridHeaderGroupComponent })\n    public headerGroups: QueryList<IgxGridHeaderGroupComponent>;\n\n    /**\n     * A list of all `IgxGridHeaderGroupComponent`.\n     * ```typescript\n     * const headerGroupsList = this.grid.headerGroupsList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerGroupsList(): IgxGridHeaderGroupComponent[] {\n        return this.headerGroups ? flatten(this.headerGroups.toArray()) : [];\n    }\n\n    /**\n     * A list of all `IgxGridHeaderComponent`.\n     * ```typescript\n     * const headers = this.grid.headerCellList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerCellList(): IgxGridHeaderComponent[] {\n        return this.headerGroupsList.map((headerGroup) => headerGroup.headerCell).filter((headerCell) => headerCell);\n    }\n\n    /**\n     * A list of all `IgxGridFilteringCellComponent`.\n     * ```typescript\n     * const filterCells = this.grid.filterCellList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get filterCellList(): IgxGridFilteringCellComponent[] {\n        return this.headerGroupsList.map((headerGroup) => headerGroup.filterCell).filter((filterCell) => filterCell);\n    }\n\n    @ViewChildren('row')\n    private _rowList: QueryList<IgxGridRowComponent>;\n\n    @ViewChildren('summaryRow', { read: IgxSummaryRowComponent })\n    protected _summaryRowList: QueryList<IgxSummaryRowComponent>;\n\n    public get summariesRowList() {\n        const res = new QueryList<any>();\n        if (!this._summaryRowList) {\n            return res;\n        }\n        const sumList = this._summaryRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        });\n        res.reset(sumList);\n        return res;\n    }\n\n    /**\n     * A list of `IgxGridRowComponent`.\n     * ```typescript\n     * const rowList = this.grid.rowList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get rowList() {\n        const res = new QueryList<any>();\n        if (!this._rowList) {\n            return res;\n        }\n        const rList = this._rowList\n            .filter((item) => {\n                return item.element.nativeElement.parentElement !== null;\n            })\n            .sort((a, b) => {\n                return a.index - b.index;\n            });\n        res.reset(rList);\n        return res;\n    }\n\n    @ViewChildren(IgxRowComponent, { read: IgxRowComponent })\n    private _dataRowList: QueryList<any>;\n\n    /**\n     * A list of `IgxGridRowComponent`, currently rendered.\n     * ```typescript\n     * const dataList = this.grid.dataRowList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get dataRowList() {\n        const res = new QueryList<any>();\n        if (!this._dataRowList) {\n            return res;\n        }\n        const rList = this._dataRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        }).sort((a, b) => {\n            return a.index - b.index;\n        });\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * A template reference for the template when the filtered `IgxGridComponent` is empty.\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('emptyFilteredGrid', { read: TemplateRef })\n    public emptyFilteredGridTemplate: TemplateRef<any>;\n\n    /**\n     * A template reference for the template when the `IgxGridComponent` is empty.\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('defaultEmptyGrid', { read: TemplateRef })\n    public emptyGridDefaultTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultLoadingGrid', { read: TemplateRef })\n    public loadingGridDefaultTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('scrollContainer', { read: IgxGridForOfDirective })\n    public parentVirtDir: IgxGridForOfDirective<any>;\n\n    /**\n     * Returns the template which will be used by the toolbar to show custom content.\n     * ```typescript\n     * let customContentTemplate = this.grid.toolbarCustomContentTemplate;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    public get toolbarCustomContentTemplate(): IgxGridToolbarCustomContentDirective {\n        return this.toolbarCustomContentTemplates.first;\n    }\n\n    @ContentChildren(IgxGridToolbarCustomContentDirective, { read: IgxGridToolbarCustomContentDirective, descendants: false })\n    public toolbarCustomContentTemplates: QueryList<IgxGridToolbarCustomContentDirective>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('verticalScrollContainer', { read: IgxGridForOfDirective })\n    public verticalScrollContainer: IgxGridForOfDirective<any>;\n\n    /**\n * @hidden\n */\n    @ViewChild('verticalScrollHolder', { read: IgxGridForOfDirective })\n    public verticalScroll: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('scr', { read: ElementRef })\n    public scr: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('paginator', { read: ElementRef })\n    public paginator: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerContainer', { read: IgxGridForOfDirective })\n    public headerContainer: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerCheckboxContainer')\n    public headerCheckboxContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerGroupContainer')\n    public headerGroupContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerCheckbox', { read: IgxCheckboxComponent })\n    public headerCheckbox: IgxCheckboxComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('filteringRow', { read: IgxGridFilteringRowComponent })\n    public filteringRow: IgxGridFilteringRowComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('theadRow')\n    public theadRow: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('tbody')\n    public tbody: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('tfoot')\n    public tfoot: ElementRef;\n\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxFilteringOverlayOutlet', { read: IgxOverlayOutletDirective })\n    protected _outletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n     */\n    public get outletDirective() {\n        return this._outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxRowEditingOverlayOutlet', { read: IgxOverlayOutletDirective })\n    public rowEditingOutletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n    */\n    @ViewChildren(IgxTemplateOutletDirective, { read: IgxTemplateOutletDirective })\n    public tmpOutlets: QueryList<any>;\n\n\n    /**\n     * @hidden\n     */\n    public get rowOutletDirective() {\n        return this.rowEditingOutletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    public get parentRowOutletDirective() {\n        return null;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultRowEditTemplate', { read: TemplateRef })\n    private defaultRowEditTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxRowEditTemplateDirective, { read: TemplateRef })\n    public rowEditCustom: TemplateRef<any>;\n\n    /** @hidden */\n    public get rowEditContainer(): TemplateRef<any> {\n        return this.rowEditCustom ? this.rowEditCustom : this.defaultRowEditTemplate;\n    }\n    /** @hidden */\n    @ContentChild(IgxRowEditTextDirective, { read: TemplateRef })\n    public rowEditText: TemplateRef<any>;\n    /** @hidden */\n    @ContentChild(IgxRowEditActionsDirective, { read: TemplateRef })\n    public rowEditActions: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public get rowInEditMode(): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        const editRowState = this.crudService.row;\n        return editRowState !== null ? this.rowList.find(e => e.rowID === editRowState.id) : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public get firstEditableColumnIndex(): number {\n        const index = [...this.pinnedColumns, ...this.unpinnedColumns].filter(e => !e.columnGroup).findIndex(e => e.editable);\n        return index !== -1 ? index : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public get lastEditableColumnIndex(): number {\n        const orderedColumns = [...this.pinnedColumns, ...this.unpinnedColumns].filter(e => !e.columnGroup);\n        const index = orderedColumns.reverse().findIndex(e => e.editable);\n        return index !== -1 ? orderedColumns.length - 1 - index : null;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxRowEditTabStopDirective)\n    public rowEditTabsDEFAULT: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowEditTabStopDirective)\n    public rowEditTabsCUSTOM: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden\n     * TODO: Nav service logic doesn't handle 0 results from this querylist\n     */\n    public get rowEditTabs(): QueryList<IgxRowEditTabStopDirective> {\n        return this.rowEditTabsCUSTOM.length ? this.rowEditTabsCUSTOM : this.rowEditTabsDEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxToggleDirective)\n    public rowEditingOverlay: IgxToggleDirective;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        return this.getComponentDensityClass('igx-grid');\n    }\n\n    get bannerClass(): string {\n        const position = this.rowEditPositioningStrategy.isTop ? 'igx-banner__border-top' : 'igx-banner__border-bottom';\n        return `${this.getComponentDensityClass('igx-banner')} ${position}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public hostRole = 'grid';\n\n    /**\n     * @hidden\n     */\n    get pipeTrigger(): number {\n        return this._pipeTrigger;\n    }\n\n    /**\n     * @hidden\n     */\n    get summaryPipeTrigger(): number {\n        return this._summaryPipeTrigger;\n    }\n\n    /**\n     * Returns the sorting state of the `IgxGridComponent`.\n     * ```typescript\n     * const sortingState = this.grid.sortingExpressions;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get sortingExpressions(): ISortingExpression[] {\n        return this._sortingExpressions;\n    }\n\n    /**\n     * Sets the sorting state of the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.sortingExpressions = [{\n     *     fieldName: \"ID\",\n     *     dir: SortingDirection.Desc,\n     *     ignoreCase: true\n     * }];\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set sortingExpressions(value: ISortingExpression[]) {\n        this._sortingExpressions = cloneArray(value);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    get maxLevelHeaderDepth() {\n        if (this._maxLevelHeaderDepth === null) {\n            this._maxLevelHeaderDepth = this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);\n        }\n        return this._maxLevelHeaderDepth;\n    }\n\n    /**\n     * Returns the number of hidden `IgxColumnComponent`.\n     * ```typescript\n     * const hiddenCol = this.grid.hiddenColumnsCount;\n     * ``\n     */\n    get hiddenColumnsCount() {\n        return this.columnList.filter((col) => col.columnGroup === false && col.hidden === true).length;\n    }\n\n    /**\n     * Returns the text to be displayed inside the toggle button\n     * for the built-in column hiding UI of the`IgxColumnComponent`.\n     * ```typescript\n     * const hiddenColText = this.grid.hiddenColumnsText;\n     * ``\n     */\n    @WatchChanges()\n    @Input()\n    get hiddenColumnsText() {\n        return this._hiddenColumnsText;\n    }\n\n    /**\n     * Sets the text to be displayed inside the toggle button\n     * for the built-in column hiding UI of the`IgxColumnComponent`.\n     * ```typescript\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" [hiddenColumnsText]=\"'Hidden Columns'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set hiddenColumnsText(value) {\n        this._hiddenColumnsText = value;\n\n    }\n\n    /**\n     * Returns the text to be displayed inside the toggle button\n     * for the built-in column pinning UI of the`IgxColumnComponent`.\n     * ```typescript\n     * const pinnedText = this.grid.pinnedColumnsText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get pinnedColumnsText() {\n        return this._pinnedColumnsText;\n    }\n\n    /**\n     * Sets the text to be displayed inside the toggle button\n     * for the built-in column pinning UI of the`IgxColumnComponent`.\n     * ```html\n     * <igx-grid [pinnedColumnsText]=\"'PinnedCols Text\" [data]=\"data\" [width]=\"'100%'\" [height]=\"'500px'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set pinnedColumnsText(value) {\n        this._pinnedColumnsText = value;\n    }\n\n    /**\n     * Get transactions service for the grid.\n     */\n    get transactions(): TransactionService<Transaction, State> {\n        return this._transactions;\n    }\n\n    /**\n     * @hidden\n    */\n    public columnsWithNoSetWidths = null;\n\n    /* Toolbar related definitions */\n    private _showToolbar = false;\n    private _exportExcel = false;\n    private _exportCsv = false;\n    private _toolbarTitle: string = null;\n    private _exportText: string = null;\n    private _exportExcelText: string = null;\n    private _exportCsvText: string = null;\n    private _rowEditable = false;\n    private _currentRowState: any;\n    private _filteredSortedData = null;\n    /**\n     * @hidden\n    */\n    public get currentRowState(): any {\n        return this._currentRowState;\n    }\n\n    /**\n     * Provides access to the `IgxToolbarComponent`.\n     * ```typescript\n     * const gridToolbar = this.grid.toolbar;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('toolbar', { read: IgxGridToolbarComponent })\n    public toolbar: IgxGridToolbarComponent = null;\n\n    @ViewChild('toolbar', { read: ElementRef })\n    private toolbarHtml: ElementRef = null;\n\n    /**\n     * Returns whether the `IgxGridComponent`'s toolbar is shown or hidden.\n     * ```typescript\n     * const toolbarGrid = this.grid.showToolbar;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get showToolbar(): boolean {\n        return this._showToolbar;\n    }\n\n    /**\n     * Shows or hides the `IgxGridComponent`'s toolbar.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" ></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set showToolbar(newValue: boolean) {\n        if (this._showToolbar !== newValue) {\n            this._showToolbar = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the toolbar's title.\n     * ```typescript\n     * const toolbarTitle  = this.grid.toolbarTitle;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get toolbarTitle(): string {\n        return this._toolbarTitle;\n    }\n\n    /**\n     * Sets the toolbar's title.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [toolbarTitle]=\"'My Grid'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set toolbarTitle(newValue: string) {\n        if (this._toolbarTitle !== newValue) {\n            this._toolbarTitle = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns whether the option for exporting to MS Excel is enabled or disabled.\n     * ```typescript\n     * cosnt excelExporter = this.grid.exportExcel;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportExcel(): boolean {\n        return this.getExportExcel();\n    }\n\n    /**\n     * Enable or disable the option for exporting to MS Excel.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportExcel(newValue: boolean) {\n        if (this._exportExcel !== newValue) {\n            this._exportExcel = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns whether the option for exporting to CSV is enabled or disabled.\n     * ```typescript\n     * const exportCsv = this.grid.exportCsv;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportCsv(): boolean {\n        return this.getExportCsv();\n    }\n\n    /**\n     * Enable or disable the option for exporting to CSV.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportCsv(newValue: boolean) {\n        if (this._exportCsv !== newValue) {\n            this._exportCsv = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the main export button.\n     * ```typescript\n     * const exportText = this.grid.exportText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportText(): string {\n        return this._exportText;\n    }\n\n    /**\n     * Sets the textual content for the main export button.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportText(newValue: string) {\n        if (this._exportText !== newValue) {\n            this._exportText = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the MS Excel export button.\n     * ```typescript\n     * const excelText = this.grid.exportExcelText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportExcelText(): string {\n        return this._exportExcelText;\n    }\n\n    /**\n     * Sets the textual content for the MS Excel export button.\n     * ```html\n     * <igx-grid [exportExcelText]=\"'My Excel Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportExcelText(newValue: string) {\n        if (this._exportExcelText !== newValue) {\n            this._exportExcelText = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the CSV export button.\n     * ```typescript\n     * const csvText = this.grid.exportCsvText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportCsvText(): string {\n        return this._exportCsvText;\n    }\n\n    /**\n     * Sets the textual content for the CSV export button.\n     * ```html\n     * <igx-grid [exportCsvText]=\"'My Csv Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportCsvText(newValue: string) {\n        if (this._exportCsvText !== newValue) {\n            this._exportCsvText = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public rowEditMessage;\n\n    /**\n     * Emitted when an export process is initiated by the user.\n     * ```typescript\n     * toolbarExporting(event: IGridToolbarExportEventArgs){\n     *     const toolbarExporting = event;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onToolbarExporting = new EventEmitter<IGridToolbarExportEventArgs>();\n\n    /* End of toolbar related definitions */\n\n    // TODO: Document\n    @Output()\n    onRangeSelection = new EventEmitter<GridSelectionRange>();\n\n    /**\n     * @hidden\n     */\n    public pagingState;\n    /**\n     * @hidden\n     */\n    public calcWidth: number;\n    /**\n     * @hidden\n     */\n    public calcRowCheckboxWidth = 0;\n    /**\n     * @hidden\n     */\n    public calcHeight = 0;\n    /**\n     * @hidden\n     */\n    public tfootHeight: number;\n    /**\n     * @hidden\n     */\n    public chipsGoupingExpressions = [];\n    /**\n     * @hidden\n     */\n    public summariesHeight: number;\n\n    /**\n     * @hidden\n     */\n    public draggedColumn: IgxColumnComponent;\n\n    /**\n     * @hidden\n     */\n    public allRowsSelected = false;\n\n    /**\n     * @hidden\n     */\n    public disableTransitions = false;\n\n    /**\n     * @hidden\n     */\n    public lastSearchInfo: ISearchInfo = {\n        searchText: '',\n        caseSensitive: false,\n        exactMatch: false,\n        activeMatchIndex: 0,\n        matchInfoCache: []\n    };\n\n    abstract data: any[];\n    abstract filteredData: any[];\n    // abstract dataLength;\n\n    /**\n     * @hidden\n     */\n    protected destroy$ = new Subject<any>();\n\n    /**\n     * @hidden\n     */\n    protected _perPage = 15;\n    /**\n     * @hidden\n     */\n    protected _page = 0;\n    /**\n     * @hidden\n     */\n    protected _paging = false;\n    /**\n     * @hidden\n     */\n    protected _rowSelection = false;\n    /**\n     * @hidden\n     */\n    protected _pipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _summaryPipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _columns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _pinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _unpinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _filteringExpressionsTree: IFilteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n    /**\n     * @hidden\n     */\n    protected _sortingExpressions: Array<ISortingExpression> = [];\n    /**\n     * @hidden\n     */\n    protected _maxLevelHeaderDepth = null;\n    /**\n     * @hidden\n     */\n    protected _columnHiding = false;\n    /**\n     * @hidden\n     */\n    protected _columnPinning = false;\n    /**\n     * @hidden\n     */\n    protected _keydownListener = null;\n    /**\n     * @hidden\n     */\n    protected _vScrollListener = null;\n    /**\n     * @hidden\n     */\n    protected _hScrollListener = null;\n    /**\n     * @hidden\n     */\n    protected _wheelListener = null;\n    protected _allowFiltering = false;\n    protected _filterMode = FilterMode.quickFilter;\n    private resizeHandler;\n    private columnListDiffer;\n    private _hiddenColumnsText = '';\n    private _pinnedColumnsText = '';\n    private _height = '100%';\n    private _width = '100%';\n    protected _autoSize = false;\n    private _rowHeight;\n    protected _ngAfterViewInitPassed = false;\n    private _horizontalForOfs;\n\n    // Caches\n    private _totalWidth = NaN;\n    private _pinnedVisible = [];\n    private _unpinnedVisible = [];\n    private _pinnedWidth = NaN;\n    private _unpinnedWidth = NaN;\n    private _visibleColumns = [];\n    private _columnGroups = false;\n\n    private _columnWidth: string;\n    private _columnWidthSetByUser = false;\n\n    protected _defaultTargetRecordNumber = 10;\n\n    private _summaryPosition = GridSummaryPosition.bottom;\n    private _summaryCalculationMode = GridSummaryCalculationMode.rootAndChildLevels;\n\n    private rowEditPositioningStrategy = new ContainerPositioningStrategy({\n        horizontalDirection: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Bottom,\n        closeAnimation: null\n    });\n\n    private rowEditSettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: false,\n        outlet: this.rowOutletDirective,\n        positionStrategy: this.rowEditPositioningStrategy\n    };\n\n    private verticalScrollHandler(event) {\n        this.verticalScrollContainer.onScroll(event);\n        if (isEdge()) { this.wheelHandler(false); }\n        this.disableTransitions = true;\n\n        this.zone.run(() => {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.verticalScrollContainer.onChunkLoad.emit(this.verticalScrollContainer.state);\n            });\n\n            if (this.rowEditable) {\n                this.changeRowEditingOverlayStateOnScroll(this.rowInEditMode);\n            }\n            this.disableTransitions = false;\n        });\n\n        this.hideOverlays();\n    }\n\n    private horizontalScrollHandler(event) {\n        const scrollLeft = event.target.scrollLeft;\n        if (isEdge()) { this.wheelHandler(true); }\n        this.headerContainer.onHScroll(scrollLeft);\n        this._horizontalForOfs.forEach(vfor => vfor.onHScroll(scrollLeft));\n        this.cdr.markForCheck();\n\n        this.zone.run(() => {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.parentVirtDir.onChunkLoad.emit(this.headerContainer.state);\n            });\n        });\n\n        this.hideOverlays();\n    }\n\n    /**\n    * @hidden\n    * @internal\n    */\n    public hideOverlays() {\n        this.overlayIDs.forEach(overlayID => {\n            this.overlayService.hide(overlayID);\n            this.overlayService.onClosed.pipe(\n                filter(o => o.id === overlayID),\n                takeUntil(this.destroy$)).subscribe(() => {\n                    this.nativeElement.focus();\n                });\n        });\n    }\n\n    private keydownHandler(event) {\n        const key = event.key.toLowerCase();\n        if ((isNavigationKey(key) && event.keyCode !== 32) || key === 'tab' || key === 'pagedown' || key === 'pageup') {\n            event.preventDefault();\n            if (key === 'pagedown') {\n                this.verticalScrollContainer.scrollNextPage();\n                this.nativeElement.focus();\n            } else if (key === 'pageup') {\n                this.verticalScrollContainer.scrollPrevPage();\n                this.nativeElement.focus();\n            }\n        }\n    }\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        public crudService: IgxGridCRUDService,\n        private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public selection: IgxSelectionAPIService,\n        @Inject(IgxGridTransaction) protected _transactions: TransactionService<Transaction, State>,\n        private elementRef: ElementRef,\n        private zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        public cdr: ChangeDetectorRef,\n        protected resolver: ComponentFactoryResolver,\n        protected differs: IterableDiffers,\n        protected viewRef: ViewContainerRef,\n        public navigation: IgxGridNavigationService,\n        public filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n        this.resizeHandler = () => {\n            this.zone.run(() => this.calculateGridSizes());\n        };\n    }\n\n    _setupServices() {\n        this.gridAPI.grid = this;\n        this.crudService.grid = this;\n        this.navigation.grid = this;\n        this.filteringService.grid = this;\n        this.summaryService.grid = this;\n    }\n\n    _setupListeners() {\n        const destructor = takeUntil(this.destroy$);\n\n        this.onRowAdded.pipe(destructor).subscribe(args => this.refreshGridState(args));\n        this.onRowDeleted.pipe(destructor).subscribe(args => {\n            this.summaryService.deleteOperation = true;\n            this.summaryService.clearSummaryCache(args);\n        });\n        this.transactions.onStateUpdate.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.summaryService.clearSummaryCache();\n            this._pipeTrigger++;\n            this.markForCheck();\n            if (this.transactions.getAggregatedChanges(false).length === 0) {\n                // Needs better check, calling 'transactions.clear()' will also trigger this\n                if (this.gridAPI.atInexistingPage()) {\n                    this.page--;\n                }\n            }\n        });\n\n        this.onPagingDone.pipe(destructor).subscribe(() => {\n            this.endEdit(true);\n            this.selectionService.clear();\n            this.selectionService.activeElement = null;\n        });\n\n        this.onColumnMoving.pipe(destructor).subscribe(() => this.endEdit(true));\n        this.onColumnResized.pipe(destructor).subscribe(() => this.endEdit(true));\n\n        this.overlayService.onOpened.pipe(takeUntil(this.destroy$)).subscribe((event) => {\n            if (this.overlayService.getOverlayById(event.id).settings.outlet === this.outletDirective &&\n                this.overlayIDs.indexOf(event.id) < 0) {\n                this.overlayIDs.push(event.id);\n            }\n        });\n        this.overlayService.onClosed.pipe(takeUntil(this.destroy$)).subscribe((event) => {\n            const ind = this.overlayIDs.indexOf(event.id);\n            if (ind !== -1) {\n                this.overlayIDs.splice(ind, 1);\n            }\n        });\n    }\n\n    // TODO: Refactor\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this._setupServices();\n        this._setupListeners();\n        this.columnListDiffer = this.differs.find([]).create(null);\n        this.calcWidth = this._width && this._width.indexOf('%') === -1 ? parseInt(this._width, 10) : 0;\n        this.shouldGenerate = this.autoGenerate;\n        this._scrollWidth = this.getScrollWidth();\n    }\n\n    protected setupColumns() {\n        if (this.autoGenerate) {\n            this.autogenerateColumns();\n        }\n\n        this.initColumns(this.columnList, (col: IgxColumnComponent) => this.onColumnInit.emit(col));\n\n        this.columnListDiffer.diff(this.columnList);\n        this.markForCheck();\n        this.resetCaches();\n\n        this.columnList.changes\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((change: QueryList<IgxColumnComponent>) => { this.onColumnsChanged(change); });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetColumnsCaches() {\n        this.columnList.forEach(column => column.resetCaches());\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetForOfCache() {\n        const firstVirtRow = this.dataRowList.first;\n        if (firstVirtRow) {\n            firstVirtRow.virtDirRow.assumeMaster();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetColumnCollections() {\n        this._visibleColumns.length = 0;\n        this._pinnedVisible.length = 0;\n        this._unpinnedVisible.length = 0;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCachedWidths() {\n        this._unpinnedWidth = NaN;\n        this._pinnedWidth = NaN;\n        this._totalWidth = NaN;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCaches() {\n        this.resetForOfCache();\n        this.resetColumnsCaches();\n        this.resetColumnCollections();\n        this.resetCachedWidths();\n        this._columnGroups = this.columnList.some(col => col.columnGroup);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        this.setupColumns();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this.zone.runOutsideAngular(() => {\n            this.document.defaultView.addEventListener('resize', this.resizeHandler);\n            this._keydownListener = this.keydownHandler.bind(this);\n            this.nativeElement.addEventListener('keydown', this._keydownListener);\n        });\n        this.initPinning();\n\n        this.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            requestAnimationFrame(() => {\n                this.summaryService.summaryHeight = 0;\n                this.reflow();\n                this.verticalScrollContainer.recalcUpdateSizes();\n            });\n        });\n        this._ngAfterViewInitPassed = true;\n        this.calculateGridSizes();\n\n        // In some rare cases we get the AfterViewInit before the grid is added to the DOM\n        // and as a result we get 0 width and can't size ourselves properly.\n        // In order to prevent that add a mutation observer that watches if we have been added.\n        if (!this.isAttachedToDom) {\n            const config = { childList: true, subtree: true };\n            const callback = (mutationsList) => {\n                const childListHasChanged = mutationsList.filter((mutation) => {\n                    return mutation.type === 'childList';\n                }).length > 0;\n                if (childListHasChanged && this.isAttachedToDom) {\n                    this._autoSize = false;\n                    this.reflow();\n                    this._observer.disconnect();\n                    this._observer = null;\n                }\n            };\n\n            this._observer = new MutationObserver(callback);\n            this._observer.observe(this.document.body, config);\n        }\n\n        this._dataRowList.changes.pipe(takeUntil(this.destroy$)).subscribe(list =>\n            this._horizontalForOfs = this.combineForOfCollections(list.toArray()\n                .filter(item => item.element.nativeElement.parentElement !== null), this._summaryRowList)\n        );\n        this._summaryRowList.changes.pipe(takeUntil(this.destroy$)).subscribe(summaryList =>\n            this._horizontalForOfs - this.combineForOfCollections(this._dataRowList, summaryList.toArray()\n                .filter(item => item.element.nativeElement.parentElement !== null)));\n\n        this.zone.runOutsideAngular(() => {\n            this._vScrollListener = this.verticalScrollHandler.bind(this);\n            this.verticalScrollContainer.getVerticalScroll().addEventListener('scroll', this._vScrollListener);\n        });\n\n        this.zone.runOutsideAngular(() => {\n            this._hScrollListener = this.horizontalScrollHandler.bind(this);\n            this.parentVirtDir.getHorizontalScroll().addEventListener('scroll', this._hScrollListener);\n        });\n        this._horizontalForOfs = this.combineForOfCollections(this._dataRowList, this._summaryRowList);\n        const vertScrDC = this.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n        vertScrDC.addEventListener('scroll', (evt) => { this.scrollHandler(evt); });\n        vertScrDC.addEventListener('wheel', () => { this.wheelHandler(); });\n        vertScrDC.addEventListener('touchmove', () => { this.wheelHandler(); });\n\n        this.verticalScrollContainer.onDataChanging.pipe(takeUntil(this.destroy$)).subscribe(($event) => {\n            this.calculateGridHeight();\n            $event.containerSize = this.calcHeight;\n        });\n        this.verticalScrollContainer.onDataChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            requestAnimationFrame(() => {\n                if (!this._destroyed) {\n                    this.reflow();\n                }\n            });\n        });\n    }\n\n    private combineForOfCollections(dataList, summaryList) {\n        return dataList.map(row => row.virtDirRow).concat(summaryList.map(row => row.virtDirRow));\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.tmpOutlets.forEach((tmplOutlet) => {\n            tmplOutlet.cleanCache();\n        });\n        this.zone.runOutsideAngular(() => {\n            this.document.defaultView.removeEventListener('resize', this.resizeHandler);\n            this.nativeElement.removeEventListener('keydown', this._keydownListener);\n            this.verticalScrollContainer.getVerticalScroll().removeEventListener('scroll', this._vScrollListener);\n            this.parentVirtDir.getHorizontalScroll().removeEventListener('scroll', this._hScrollListener);\n            const vertScrDC = this.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n            vertScrDC.removeEventListener('scroll', (evt) => { this.scrollHandler(evt); });\n            vertScrDC.removeEventListener('wheel', () => { this.wheelHandler(); });\n        });\n        if (this._observer) {\n            this._observer.disconnect();\n        }\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this._destroyed = true;\n    }\n\n    /**\n     * @hidden\n     */\n    public dataLoading(event) {\n        this.onDataPreLoad.emit(event);\n    }\n\n    /**\n     * Toggles the specified column's visibility.\n     * ```typescript\n     * this.grid1.toggleColumnVisibility({\n     *       column: this.grid1.columns[0],\n     *       newValue: true\n     * });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public toggleColumnVisibility(args: IColumnVisibilityChangedEventArgs) {\n        const col = args.column ? this.columnList.find((c) => c === args.column) : undefined;\n\n        if (!col) {\n            return;\n        }\n\n        col.hidden = args.newValue;\n        this.onColumnVisibilityChanged.emit(args);\n\n        this.markForCheck();\n    }\n\n    /**\n     * Returns the native element of the `IgxGridComponent`.\n     * ```typescript\n     * const nativeEl = this.grid.nativeElement.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get headerCheckboxWidth() {\n        if (this.headerCheckboxContainer) {\n            return this.headerCheckboxContainer.nativeElement.clientWidth;\n        }\n\n        return 0;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get outlet() {\n        return this.outletDirective;\n    }\n\n    /**\n     * Returns the `IgxGridComponent`'s rows height.\n     * ```typescript\n     * const rowHeigh = this.grid.defaultRowHeight;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get defaultRowHeight(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 40;\n            case DisplayDensity.compact:\n                return 32;\n            default:\n                return 50;\n        }\n    }\n\n    get defaultSummaryHeight(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 30;\n            case DisplayDensity.compact:\n                return 24;\n            default:\n                return 36;\n        }\n    }\n\n    /**\n     * Returns the `IgxGridHeaderGroupComponent`'s minimum allowed width.\n     * Used internally for restricting header group component width.\n     * The values below depend on the header cell default right/left padding values.\n\t * @memberof IgxGridBaseComponent\n     */\n    get defaultHeaderGroupMinWidth(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 32;\n            case DisplayDensity.compact:\n                return 24;\n            default:\n                return 48;\n        }\n    }\n\n    /**\n     * Returns the maximum width of the container for the pinned `IgxColumnComponent`s.\n     * The width is 80% of the total grid width.\n     * ```typescript\n     * const maxPinnedColWidth = this.grid.calcPinnedContainerMaxWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get calcPinnedContainerMaxWidth(): number {\n        return (this.calcWidth * 80) / 100;\n    }\n\n    /**\n     * Returns the minimum width of the container for the unpinned `IgxColumnComponent`s.\n     * The width is 20% of the total grid width.\n     * ```typescript\n     * const minUnpinnedColWidth = this.grid.unpinnedAreaMinWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedAreaMinWidth(): number {\n        return (this.calcWidth * 20) / 100;\n    }\n\n    /**\n     * Returns the current width of the container for the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get pinnedWidth() {\n        if (!isNaN(this._pinnedWidth)) { return this._pinnedWidth; }\n        this._pinnedWidth = this.getPinnedWidth();\n        return this._pinnedWidth;\n    }\n\n    /**\n     * Returns the current width of the container for the unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const unpinnedWidth = this.grid.getUnpinnedWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedWidth() {\n        if (!isNaN(this._unpinnedWidth)) { return this._unpinnedWidth; }\n        this._unpinnedWidth = this.getUnpinnedWidth();\n        return this._unpinnedWidth;\n    }\n\n    get isHorizontalScrollHidden() {\n        const diff = this.unpinnedWidth - this.totalWidth;\n        return this.width === null || diff >= 0;\n    }\n\n    /**\n     * @hidden\n     */\n    get summariesMargin() {\n        return this.rowSelectable ? this.calcRowCheckboxWidth : 0;\n    }\n\n    /**\n     * Returns an array of `IgxColumnComponent`s.\n     * ```typescript\n     * const colums = this.grid.columns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get columns(): IgxColumnComponent[] {\n        return this._columns;\n    }\n\n    /**\n     * Returns an array of the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const pinnedColumns = this.grid.pinnedColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        if (this._pinnedVisible.length) {\n            return this._pinnedVisible;\n        }\n        this._pinnedVisible = this._pinnedColumns.filter(col => !col.hidden);\n        return this._pinnedVisible;\n    }\n\n    /**\n     * Returns an array of unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const unpinnedColumns = this.grid.unpinnedColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        if (this._unpinnedVisible.length) {\n            return this._unpinnedVisible;\n        }\n        this._unpinnedVisible = this._unpinnedColumns.filter((col) => !col.hidden);\n        return this._unpinnedVisible;\n    }\n\n    /**\n     * Returns the `width` to be set on `IgxGridHeaderGroupComponent`.\n\t * @memberof IgxGridBaseComponent\n     */\n    public getHeaderGroupWidth(column: IgxColumnComponent): string {\n        const colWidth = column.width;\n        const minWidth = this.defaultHeaderGroupMinWidth;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (!isPercentageWidth && parseInt(column.width, 10) < minWidth) {\n            return minWidth.toString();\n        }\n\n        return column.width;\n    }\n\n    /**\n     * Returns the `IgxColumnComponent` by field name.\n     * ```typescript\n     * const myCol = this.grid1.getColumnByName(\"ID\");\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public getColumnByName(name: string): IgxColumnComponent {\n        return this.columnList.find((col) => col.field === name);\n    }\n\n    /**\n     * Returns the `IgxColumnComponent` by index.\n     * ```typescript\n     * const myRow = this.grid1.getRowByIndex(1);\n     * ```\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public getRowByIndex(index: number): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        return this.gridAPI.get_row_by_index(index);\n    }\n\n    /**\n     * Returns `IgxGridRowComponent` object by the specified primary key .\n     * Requires that the `primaryKey` property is set.\n     * ```typescript\n     * const myRow = this.grid1.getRowByKey(\"cell5\");\n     * ```\n     * @param keyValue\n     * @memberof IgxGridBaseComponent\n     */\n    public getRowByKey(keyValue: any): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        return this.gridAPI.get_row_by_key(keyValue);\n    }\n\n    /**\n     * Returns an array of visible `IgxColumnComponent`s.\n     * ```typescript\n     * const visibleColumns = this.grid.visibleColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get visibleColumns(): IgxColumnComponent[] {\n        if (this._visibleColumns.length) {\n            return this._visibleColumns;\n        }\n        this._visibleColumns = this.columnList.filter(c => !c.hidden);\n        return this._visibleColumns;\n    }\n\n    /**\n     * Returns the `IgxGridCellComponent` that matches the conditions.\n     * ```typescript\n     * const myCell = this.grid1.getCellByColumn(2,\"UnitPrice\");\n     * ```\n     * @param rowIndex\n     * @param columnField\n     * @memberof IgxGridBaseComponent\n     */\n    public getCellByColumn(rowIndex: number, columnField: string): IgxGridCellComponent {\n        const columnId = this.columnList.map((column) => column.field).indexOf(columnField);\n        if (columnId !== -1) {\n            return this.gridAPI.get_cell_by_index(rowIndex, columnId);\n        }\n    }\n\n    /**\n     * Returns an `IgxGridCellComponent` object by the specified primary key and column field.\n     * Requires that the primaryKey property is set.\n     * ```typescript\n     * grid.getCellByKey(1, 'index');\n     * ```\n     * @param rowSelector match any rowID\n     * @param columnField\n     * @memberof IgxGridBaseComponent\n     */\n    public getCellByKey(rowSelector: any, columnField: string): IgxGridCellComponent {\n        return this.gridAPI.get_cell_by_key(rowSelector, columnField);\n    }\n\n    /**\n     * Returns the total number of pages.\n     * ```typescript\n     * const totalPages = this.grid.totalPages;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalPages(): number {\n        if (this.pagingState) {\n            return this.pagingState.metadata.countPages;\n        }\n        return -1;\n    }\n\n    /**\n     * Returns the total number of records.\n     * Only functions when paging is enabled.\n     * ```typescript\n     * const totalRecords = this.grid.totalRecords;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalRecords(): number {\n        if (this.pagingState) {\n            return this.pagingState.metadata.countRecords;\n        }\n    }\n\n    /**\n     * Returns if the current page is the first page.\n     * ```typescript\n     * const firstPage = this.grid.isFirstPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get isFirstPage(): boolean {\n        return this.page === 0;\n    }\n\n    /**\n     * Returns if the current page is the last page.\n     * ```typescript\n     * const lastPage = this.grid.isLastPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get isLastPage(): boolean {\n        return this.page + 1 >= this.totalPages;\n    }\n\n    /**\n     * Returns the total width of the `IgxGridComponent`.\n     * ```typescript\n     * const gridWidth = this.grid.totalWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalWidth(): number {\n        if (!isNaN(this._totalWidth)) { return this._totalWidth; }\n        // Take only top level columns\n        const cols = this.visibleColumns.filter(col => col.level === 0 && !col.pinned);\n        let totalWidth = 0;\n        let i = 0;\n        for (i; i < cols.length; i++) {\n            totalWidth += parseInt(cols[i].calcWidth, 10) || 0;\n        }\n        this._totalWidth = totalWidth;\n        return totalWidth;\n    }\n\n    get showRowCheckboxes(): boolean {\n        return this.rowSelectable && this.columns.length > this.hiddenColumnsCount;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _moveColumns(from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const list = this.columnList.toArray();\n        const fromIndex = list.indexOf(from);\n        let toIndex = list.indexOf(to);\n\n        if (pos === DropPosition.BeforeDropTarget) {\n            toIndex--;\n            if (toIndex < 0) {\n                toIndex = 0;\n            }\n        }\n\n        if (pos === DropPosition.AfterDropTarget) {\n            toIndex++;\n        }\n\n        list.splice(toIndex, 0, ...list.splice(fromIndex, 1));\n        const newList = this._resetColumnList(list);\n        this.columnList.reset(newList);\n        this.columnList.notifyOnChanges();\n        this._columns = this.columnList.toArray();\n    }\n\n    /**\n     * @hidden\n     */\n    protected _resetColumnList(list?) {\n        if (!list) {\n            list = this.columnList.toArray();\n        }\n        let newList = [];\n        list.filter(c => c.level === 0).forEach(p => {\n            newList.push(p);\n            if (p.columnGroup) {\n                newList = newList.concat(p.allChildren);\n            }\n        });\n        return newList;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _reorderPinnedColumns(from: IgxColumnComponent, to: IgxColumnComponent, position: DropPosition) {\n        const pinned = this._pinnedColumns;\n        let dropIndex = pinned.indexOf(to);\n\n        if (to.columnGroup) {\n            dropIndex += to.allChildren.length;\n        }\n\n        if (position === DropPosition.BeforeDropTarget) {\n            dropIndex--;\n        }\n\n        if (position === DropPosition.AfterDropTarget) {\n            dropIndex++;\n        }\n\n        pinned.splice(dropIndex, 0, ...pinned.splice(pinned.indexOf(from), 1));\n    }\n\n    /**\n     * @hidden\n     */\n    protected _moveChildColumns(parent: IgxColumnComponent, from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const buffer = parent.children.toArray();\n        const fromIndex = buffer.indexOf(from);\n        let toIndex = buffer.indexOf(to);\n\n        if (pos === DropPosition.BeforeDropTarget) {\n            toIndex--;\n        }\n\n        if (pos === DropPosition.AfterDropTarget) {\n            toIndex++;\n        }\n\n        buffer.splice(toIndex, 0, ...buffer.splice(fromIndex, 1));\n        parent.children.reset(buffer);\n    }\n    /**\n     * Moves a column to the specified drop target.\n     * ```typescript\n     * grid.moveColumn(compName, persDetails);\n     * ```\n\t  * @memberof IgxGridBaseComponent\n\t  */\n    public moveColumn(column: IgxColumnComponent, dropTarget: IgxColumnComponent, pos: DropPosition = DropPosition.None) {\n\n        let position = pos;\n        const fromIndex = column.visibleIndex;\n        const toIndex = dropTarget.visibleIndex;\n\n        if (pos === DropPosition.BeforeDropTarget && fromIndex < toIndex) {\n            position = DropPosition.BeforeDropTarget;\n        } else if (pos === DropPosition.AfterDropTarget && fromIndex > toIndex) {\n            position = DropPosition.AfterDropTarget;\n        } else {\n            position = DropPosition.None;\n        }\n\n\n        if ((column.level !== dropTarget.level) ||\n            (column.topLevelParent !== dropTarget.topLevelParent)) {\n            return;\n        }\n\n        this.endEdit(true);\n        if (column.level) {\n            this._moveChildColumns(column.parent, column, dropTarget, position);\n        }\n\n        if (dropTarget.pinned && column.pinned) {\n            this._reorderPinnedColumns(column, dropTarget, position);\n        }\n\n        if (dropTarget.pinned && !column.pinned) {\n            column.pin();\n            this._reorderPinnedColumns(column, dropTarget, position);\n        }\n\n        if (!dropTarget.pinned && column.pinned) {\n            column.unpin();\n\n            const list = this.columnList.toArray();\n            const fi = list.indexOf(column);\n            const ti = list.indexOf(dropTarget);\n\n            if (pos === DropPosition.BeforeDropTarget && fi < ti) {\n                position = DropPosition.BeforeDropTarget;\n            } else if (pos === DropPosition.AfterDropTarget && fi > ti) {\n                position = DropPosition.AfterDropTarget;\n            } else {\n                position = DropPosition.None;\n            }\n        }\n\n        this._moveColumns(column, dropTarget, position);\n        this.cdr.detectChanges();\n\n        const args = {\n            source: column,\n            target: dropTarget\n        };\n\n        this.onColumnMovingEnd.emit(args);\n    }\n\n    /**\n     * Goes to the next page of the `IgxGridComponent`, if the grid is not already at the last page.\n     * ```typescript\n     * this.grid1.nextPage();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public nextPage(): void {\n        if (!this.isLastPage) {\n            this.page += 1;\n        }\n    }\n\n    /**\n     * Goes to the previous page of the `IgxGridComponent`, if the grid is not already at the first page.\n     * ```typescript\n     * this.grid1.previousPage();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public previousPage(): void {\n        if (!this.isFirstPage) {\n            this.page -= 1;\n        }\n    }\n\n    /**\n     * Goes to the desired page index.\n     * ```typescript\n     * this.grid1.paginate(1);\n     * ```\n     * @param val\n     * @memberof IgxGridBaseComponent\n     */\n    public paginate(val: number): void {\n        if (val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n\n        this.page = val;\n    }\n\n    /**\n     * Manually marks the `IgxGridComponent` for change detection.\n     * ```typescript\n     * this.grid1.markForCheck();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public markForCheck() {\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Creates a new `IgxGridRowComponent` and adds the data record to the end of the data source.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid1.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid1.addRow(record);\n     * ```\n     * @param data\n     * @memberof IgxGridBaseComponent\n     */\n    public addRow(data: any): void {\n        this.gridAPI.addRowToData(data);\n\n        this.onRowAdded.emit({ data });\n        this._pipeTrigger++;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Removes the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * Requires that the `primaryKey` property is set.\n     * The method accept rowSelector as a parameter, which is the rowID.\n     * ```typescript\n     * this.grid1.deleteRow(0);\n     * ```\n     * @param rowSelector\n     * @memberof IgxGridBaseComponent\n     */\n    public deleteRow(rowSelector: any): void {\n        if (this.primaryKey !== undefined && this.primaryKey !== null) {\n            this.deleteRowById(rowSelector);\n        }\n    }\n\n    /** @hidden */\n    public deleteRowById(rowId: any) {\n        this.gridAPI.deleteRowById(rowId);\n    }\n\n    /**\n     * @hidden\n     */\n    protected deleteRowFromData(rowID: any, index: number) {\n        //  if there is a row (index !== 0) delete it\n        //  if there is a row in ADD or UPDATE state change it's state to DELETE\n        if (index !== -1) {\n            if (this.transactions.enabled) {\n                const transaction: Transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };\n                this.transactions.add(transaction, this.data[index]);\n            } else {\n                this.data.splice(index, 1);\n            }\n        } else {\n            const state: State = this.transactions.getState(rowID);\n            this.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * Requires that the `primaryKey` property is set.\n     * ```typescript\n     * this.gridWithPK.updateCell('Updated', 1, 'ProductName');\n     * ```\n     * @param value the new value which is to be set.\n     * @param rowSelector corresponds to rowID.\n     * @param column corresponds to column field.\n     * @memberof IgxGridBaseComponent\n     */\n    public updateCell(value: any, rowSelector: any, column: string): void {\n        if (this.isDefined(this.primaryKey)) {\n            const col = this.columnList.toArray().find(c => c.field === column);\n            if (col) {\n                // Simplify\n                const rowData = this.gridAPI.getRowData(rowSelector);\n                const index = this.gridAPI.get_row_index_in_data(rowSelector);\n                // If row passed is invalid\n                if (index < 0) {\n                    return;\n                }\n                const id = {\n                    rowID: rowSelector,\n                    columnID: col.index,\n                    rowIndex: index\n                };\n\n                const cell = new IgxCell(id, index, col, rowData[col.field], rowData[col.field], rowData);\n                const args = this.gridAPI.update_cell(cell, value);\n\n                if (this.crudService.cell && this.crudService.sameCell(cell)) {\n                    if (args.cancel) {\n                        return;\n                    }\n                    this.gridAPI.escape_editMode();\n                }\n\n                this.cdr.markForCheck();\n            }\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent`, which is specified by\n     * rowSelector parameter and the data source record with the passed value.\n     * This method will apply requested update only if primary key is specified in the grid.\n     * ```typescript\n     * grid.updateRow({\n     *       ProductID: 1, ProductName: 'Spearmint', InStock: true, UnitsInStock: 1, OrderDate: new Date('2005-03-21')\n     *   }, 1);\n     * ```\n     * @param value\n     * @param rowSelector correspond to rowID\n     * @memberof IgxGridBaseComponent\n     */\n    public updateRow(value: any, rowSelector: any): void {\n        if (this.isDefined(this.primaryKey)) {\n            const editableCell = this.crudService.cell;\n            if (editableCell && editableCell.id.rowID === rowSelector) {\n                this.gridAPI.escape_editMode();\n            }\n            const row = new IgxRow(rowSelector, -1, this.gridAPI.getRowData(rowSelector));\n            this.gridAPI.update_row(row, value);\n            this.cdr.markForCheck();\n        }\n    }\n\n    /**\n     * Sort a single `IgxColumnComponent`.\n     * Sort the `IgxGridComponent`'s `IgxColumnComponent` based on the provided array of sorting expressions.\n     * ```typescript\n     * this.grid.sort({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public sort(expression: ISortingExpression | Array<ISortingExpression>): void {\n        this.endEdit(false);\n        if (expression instanceof Array) {\n            this.gridAPI.sort_multiple(expression);\n        } else {\n            this.gridAPI.sort(expression);\n        }\n        this.onSortingDone.emit(expression);\n    }\n\n    /**\n     * Filters a single `IgxColumnComponent`.\n     * ```typescript\n     * public filter(term) {\n     *      this.grid.filter(\"ProductName\", term, IgxStringFilteringOperand.instance().condition(\"contains\"));\n     * }\n     * ```\n     * @param name\n     * @param value\n     * @param conditionOrExpressionTree\n     * @param ignoreCase\n     * @memberof IgxGridBaseComponent\n     */\n    public filter(name: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase?: boolean) {\n        this.filteringService.filter(name, value, conditionOrExpressionTree, ignoreCase);\n    }\n\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     * ```typescript\n     * grid.filterGlobal('some', IgxStringFilteringOperand.instance().condition('contains'));\n     * ```\n     * @param value\n     * @param condition\n     * @param ignoreCase\n     * @memberof IgxGridBaseComponent\n     */\n    public filterGlobal(value: any, condition, ignoreCase?) {\n        this.filteringService.filterGlobal(value, condition, ignoreCase);\n    }\n\n    /**\n     * Enables summaries for the specified column and applies your customSummary.\n     * If you do not provide the customSummary, then the default summary for the column data type will be applied.\n     * ```typescript\n     * grid.enableSummaries([{ fieldName: 'ProductName' }, { fieldName: 'ID' }]);\n     * ```\n     * Enable summaries for the listed columns.\n     * ```typescript\n     * grid.enableSummaries('ProductName');\n     * ```\n     * @param rest\n     * @memberof IgxGridBaseComponent\n     */\n    public enableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._multipleSummaries(rest[0], true);\n        } else {\n            this._summaries(rest[0], true, rest[1]);\n        }\n        this.calculateGridHeight();\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Disable summaries for the specified column.\n     * ```typescript\n     * grid.disableSummaries('ProductName');\n     * ```\n     *\n     * Disable summaries for the listed columns.\n     * ```typescript\n     * grid.disableSummaries([{ fieldName: 'ProductName' }]);\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public disableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._disableMultipleSummaries(rest[0]);\n        } else {\n            this._summaries(rest[0], false);\n        }\n    }\n\n    /**\n     * If name is provided, clears the filtering state of the corresponding `IgxColumnComponent`,\n     * otherwise clears the filtering state of all `IgxColumnComponent`s.\n     * ```typescript\n     * this.grid.clearFilter();\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public clearFilter(name?: string) {\n        this.filteringService.clearFilter(name);\n    }\n\n    /**\n     * If name is provided, clears the sorting state of the corresponding `IgxColumnComponent`,\n     * otherwise clears the sorting state of all `IgxColumnComponent`.\n     * ```typescript\n     * this.grid.clearSort();\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public clearSort(name?: string) {\n        if (!name) {\n            this.sortingExpressions = [];\n            return;\n        }\n        if (!this.gridAPI.get_column_by_name(name)) {\n            return;\n        }\n        this.gridAPI.clear_sort(name);\n    }\n\n    /**\n     * @hidden\n     */\n    public refreshGridState(args?) {\n        this.endEdit(true);\n        this.summaryService.clearSummaryCache(args);\n    }\n\n    // TODO: We have return values here. Move them to event args ??\n\n    /**\n     * Pins a column by field name. Returns whether the operation is successful.\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public pinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.pin(index);\n    }\n\n    /**\n     * Unpins a column by field name. Returns whether the operation is successful.\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public unpinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.unpin(index);\n    }\n\n\n    /**\n     * Recalculates grid width/height dimensions. Should be run when changing DOM elements dimentions manually that affect the grid's size.\n     * ```typescript\n     * this.grid.reflow();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public reflow() {\n        this.calculateGridSizes();\n    }\n\n    /**\n     * Finds the next occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * Returns how many times the grid contains the string.\n     * ```typescript\n     * this.grid.findNext(\"financial\");\n     * ```\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value  (defaults to false).\n     * @memberof IgxGridBaseComponent\n     */\n    public findNext(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, 1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Finds the previous occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * Returns how many times the grid contains the string.\n     * ```typescript\n     * this.grid.findPrev(\"financial\");\n     * ````\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value (defaults to false).\n     * @memberof IgxGridBaseComponent\n     */\n    public findPrev(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, -1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Reapplies the existing search.\n     * Returns how many times the grid contains the last search.\n     * ```typescript\n     * this.grid.refreshSearch();\n     * ```\n     * @param updateActiveInfo\n     * @memberof IgxGridBaseComponent\n     */\n    public refreshSearch(updateActiveInfo?: boolean): number {\n        if (this.lastSearchInfo.searchText) {\n            this.rebuildMatchCache();\n\n            if (updateActiveInfo) {\n                const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(this.id);\n                this.lastSearchInfo.matchInfoCache.forEach((match, i) => {\n                    if (match.column === activeInfo.column &&\n                        match.row === activeInfo.row &&\n                        match.index === activeInfo.index) {\n                        this.lastSearchInfo.activeMatchIndex = i;\n                    }\n                });\n            }\n\n            return this.find(this.lastSearchInfo.searchText, 0, this.lastSearchInfo.caseSensitive, this.lastSearchInfo.exactMatch, false);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Removes all the highlights in the cell.\n     * ```typescript\n     * this.grid.clearSearch();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public clearSearch() {\n        this.lastSearchInfo = {\n            searchText: '',\n            caseSensitive: false,\n            exactMatch: false,\n            activeMatchIndex: 0,\n            matchInfoCache: []\n        };\n\n        this.rowList.forEach((row) => {\n            if (row.cells) {\n                row.cells.forEach((c) => {\n                    c.clearHighlight();\n                });\n            }\n        });\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has sortable columns.\n     * ```typescript\n     * const sortableGrid = this.grid.hasSortableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasSortableColumns(): boolean {\n        return this.columnList.some((col) => col.sortable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has editable columns.\n     * ```typescript\n     * const editableGrid = this.grid.hasEditableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasEditableColumns(): boolean {\n        return this.columnList.some((col) => col.editable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has fiterable columns.\n     * ```typescript\n     * const filterableGrid = this.grid.hasFilterableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasFilterableColumns(): boolean {\n        return this.columnList.some((col) => col.filterable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has summarized columns.\n     * ```typescript\n     * const summarizedGrid = this.grid.hasSummarizedColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasSummarizedColumns(): boolean {\n        return this.summaryService.hasSummarizedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get rootSummariesEnabled(): boolean {\n        return this.summaryCalculationMode !== GridSummaryCalculationMode.childLevelsOnly;\n    }\n    /**\n     * Returns if the `IgxGridComponent` has moveable columns.\n     * ```typescript\n     * const movableGrid = this.grid.hasMovableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasMovableColumns(): boolean {\n        return this.columnList && this.columnList.some((col) => col.movable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has column groups.\n     * ```typescript\n     * const groupGrid = this.grid.hasColumnGroups;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasColumnGroups(): boolean {\n        return this._columnGroups;\n    }\n\n    /**\n     * Returns an array of the selected `IgxGridCellComponent`s.\n     * ```typescript\n     * const selectedCells = this.grid.selectedCells;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get selectedCells(): IgxGridCellComponent[] | any[] {\n        if (this.dataRowList) {\n            return this.dataRowList.map((row) => row.cells.filter((cell) => cell.selected))\n                .reduce((a, b) => a.concat(b), []);\n        }\n        return [];\n    }\n\n    /**\n     * @hidden\n     */\n    protected get rowBasedHeight() {\n        return this.dataLength * this.rowHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get isPercentWidth() {\n        return this._width && this._width.indexOf('%') !== -1;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isPercentHeight() {\n        return this._height && this._height.indexOf('%') !== -1;\n    }\n\n    /**\n     * @hidden\n     * Sets columns defaultWidth property\n     */\n    protected _derivePossibleWidth() {\n        if (!this._columnWidthSetByUser) {\n            this._columnWidth = this.width !== null ? this.getPossibleColumnWidth() : MINIMUM_COLUMN_WIDTH + 'px';\n            this.columnList.forEach((column: IgxColumnComponent) => {\n                column.defaultWidth = this._columnWidth;\n            });\n            this.resetCachedWidths();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected get defaultTargetBodyHeight(): number {\n        const allItems = this.dataLength;\n        return this.renderedRowHeight * Math.min(this._defaultTargetRecordNumber,\n            this.paging ? Math.min(allItems, this.perPage) : allItems);\n    }\n\n    /**\n     * @hidden @internal\n     * The rowHeight input is bound to min-height css prop of rows that adds a 1px border in all cases\n     */\n    public get renderedRowHeight(): number {\n        return this.rowHeight + 1;\n    }\n\n    /**\n     * @hidden\n     * Sets TBODY height i.e. this.calcHeight\n     */\n    protected calculateGridHeight() {\n        // TODO: Calculate based on grid density\n        if (this.maxLevelHeaderDepth) {\n            this.theadRow.nativeElement.style.height = `${(this.maxLevelHeaderDepth + 1) * this.defaultRowHeight +\n                (this.allowFiltering && this.filterMode === FilterMode.quickFilter ? FILTER_ROW_HEIGHT : 0) + 1}px`;\n        }\n        this.summariesHeight = 0;\n        if (this.hasSummarizedColumns && this.rootSummariesEnabled) {\n            this.summariesHeight = this.summaryService.calcMaxSummaryHeight();\n        }\n\n        this.calcHeight = this._calculateGridBodyHeight();\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number {\n        return 0;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getToolbarHeight(): number {\n        let toolbarHeight = 0;\n        if (this.showToolbar && this.toolbarHtml != null) {\n            toolbarHeight = this.toolbarHtml.nativeElement.firstElementChild ?\n                this.toolbarHtml.nativeElement.offsetHeight : 0;\n        }\n        return toolbarHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getPagingHeight(): number {\n        let pagingHeight = 0;\n        if (this.paging && this.paginator) {\n            pagingHeight = this.paginator.nativeElement.firstElementChild ?\n                this.paginator.nativeElement.offsetHeight : 0;\n        }\n        return pagingHeight;\n    }\n    /**\n     * @hidden\n     */\n    protected _calculateGridBodyHeight(): number {\n        if (!this._height) {\n            return null;\n        }\n        const footerBordersAndScrollbars = this.tfoot.nativeElement.offsetHeight -\n            this.tfoot.nativeElement.clientHeight;\n        let gridHeight;\n        const computed = this.document.defaultView.getComputedStyle(this.nativeElement);\n        const toolbarHeight = this.getToolbarHeight();\n        const pagingHeight = this.getPagingHeight();\n        const groupAreaHeight = this.getGroupAreaHeight();\n        const renderedHeight = toolbarHeight + this.theadRow.nativeElement.offsetHeight +\n            this.summariesHeight + pagingHeight + groupAreaHeight + footerBordersAndScrollbars +\n            this.scr.nativeElement.clientHeight;\n\n        if (this.isPercentHeight) {\n            /*height in %*/\n            if (!this.nativeElement.parentElement ||\n                this.nativeElement.parentElement.clientHeight === renderedHeight) {\n                /* parent element is sized by the rendered elements which means\n                the grid should attempt a content-box style rendering */\n                this._autoSize = true;\n            }\n            if (this._autoSize || computed.getPropertyValue('height').indexOf('%') !== -1) {\n                const bodyHeight = this.getDataBasedBodyHeight();\n                return bodyHeight > 0 ? bodyHeight : null;\n            }\n            gridHeight = parseInt(computed.getPropertyValue('height'), 10);\n        } else {\n            gridHeight = parseInt(this._height, 10);\n        }\n        const height = Math.abs(gridHeight - renderedHeight);\n\n        if (height === 0 || isNaN(gridHeight)) {\n            const bodyHeight = this.defaultTargetBodyHeight;\n            return bodyHeight > 0 ? bodyHeight : null;\n        }\n\n        return height;\n    }\n\n    public get outerWidth() {\n        return this.hasVerticalSroll() ? this.calcWidth + this.scrollWidth : this.calcWidth;\n    }\n\n    /**\n     * @hidden\n     * Gets the visible content height that includes header + tbody + footer.\n     */\n    public getVisibleContentHeight() {\n        let height = this.theadRow.nativeElement.clientHeight + this.tbody.nativeElement.clientHeight;\n        if (this.hasSummarizedColumns) {\n            height += this.tfoot.nativeElement.clientHeight;\n        }\n        return height;\n    }\n\n    /**\n     * @hidden\n     */\n    public getPossibleColumnWidth(baseWidth: number = null) {\n        let computedWidth;\n        if (baseWidth !== null) {\n            computedWidth = baseWidth;\n        } else {\n            computedWidth = this.calcWidth ||\n                parseInt(this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width'), 10);\n        }\n\n        if (this.showRowCheckboxes) {\n            computedWidth -= this.headerCheckboxContainer ? this.headerCheckboxContainer.nativeElement.offsetWidth : 0;\n        }\n\n        const visibleChildColumns = this.visibleColumns.filter(c => !c.columnGroup);\n\n        const columnsWithSetWidths = visibleChildColumns.filter(c => c.widthSetByUser);\n        const columnsToSize = visibleChildColumns.length - columnsWithSetWidths.length;\n\n        const sumExistingWidths = columnsWithSetWidths\n            .reduce((prev, curr) => {\n                const colWidth = curr.width;\n                const widthValue = parseInt(colWidth, 10);\n                const currWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1 ?\n                    widthValue / 100 * computedWidth :\n                    widthValue;\n                return prev + currWidth;\n            }, 0);\n\n        const columnWidth = Math.floor(!Number.isFinite(sumExistingWidths) ?\n            Math.max(computedWidth / columnsToSize, MINIMUM_COLUMN_WIDTH) :\n            Math.max((computedWidth - sumExistingWidths) / columnsToSize, MINIMUM_COLUMN_WIDTH));\n\n        return columnWidth.toString();\n    }\n\n    /**\n     * @hidden\n     * Sets grid width i.e. this.calcWidth\n     */\n    protected calculateGridWidth() {\n        let width;\n        const computed = this.document.defaultView.getComputedStyle(this.nativeElement);\n        const el = this.document.getElementById(this.nativeElement.id);\n\n        if (this.isPercentWidth) {\n            /* width in %*/\n            width = computed.getPropertyValue('width').indexOf('%') === -1 ?\n                parseInt(computed.getPropertyValue('width'), 10) : null;\n        } else {\n            width = parseInt(this._width, 10);\n        }\n\n        if (!width && el) {\n            width = el.offsetWidth;\n        }\n\n\n        if (this.width === null || !width) {\n            width = this.getColumnWidthSum();\n        }\n\n        if (this.hasVerticalSroll() && this.width !== null) {\n            width -= this.scrollWidth;\n        }\n        if ((Number.isFinite(width) || width === null) && width !== this.calcWidth) {\n            this.calcWidth = width;\n            this.cdr.detectChanges();\n        }\n        this._derivePossibleWidth();\n    }\n\n    private getColumnWidthSum(): number {\n        let colSum = 0;\n        const cols = this.visibleColumns\n        .filter(x => !x.columnGroup);\n        cols.forEach((item) => {\n            const isWidthInPercent = item.width && typeof item.width === 'string' && item.width.indexOf('%') !== -1;\n            if (isWidthInPercent) {\n                item.width = MINIMUM_COLUMN_WIDTH + 'px';\n            }\n            colSum +=  parseInt((item.width || item.defaultWidth), 10) || MINIMUM_COLUMN_WIDTH;\n        });\n        if (!colSum) {\n            return null;\n        }\n        this.cdr.detectChanges();\n        colSum += this.getFeatureColumnsWidth();\n        return colSum;\n    }\n\n    public hasVerticalSroll() {\n        if (!this._ngAfterViewInitPassed) { return false; }\n        const isScrollable = this.verticalScrollContainer.isScrollable();\n        return !!(this.calcWidth && this.verticalScrollContainer.igxForOf &&\n            this.verticalScrollContainer.igxForOf.length > 0 &&\n            isScrollable);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected getDataBasedBodyHeight(): number {\n        return !this.data || (this.data.length < this._defaultTargetRecordNumber) ?\n            0 : this.defaultTargetBodyHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>) {\n        const diff = this.columnListDiffer.diff(change);\n        if (diff) {\n            let added = false;\n            let removed = false;\n\n            this.initColumns(this.columnList);\n\n\n            diff.forEachAddedItem((record: IterableChangeRecord<IgxColumnComponent>) => {\n                this.onColumnInit.emit(record.item);\n                added = true;\n            });\n\n            diff.forEachRemovedItem((record: IterableChangeRecord<IgxColumnComponent>) => {\n                // Clear Filtering\n                this.gridAPI.clear_filter(record.item.field);\n\n                // Clear Sorting\n                this.gridAPI.clear_sort(record.item.field);\n                removed = true;\n            });\n\n            this.resetCaches();\n\n            if (added || removed) {\n                this.summaryService.clearSummaryCache();\n                this.calculateGridSizes();\n            }\n        }\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    protected calculateGridSizes() {\n        /*\n            TODO: (R.K.) This layered lasagne should be refactored\n            ASAP. The reason I have to reset the caches so many times is because\n            after teach `detectChanges` call they are filled with invalid\n            state. Of course all of this happens midway through the grid\n            sizing process which of course, uses values from the caches, thus resulting\n            in a broken layout.\n        */\n        this.resetCaches();\n        const hasScroll = this.hasVerticalSroll();\n        this.calculateGridWidth();\n\n        if (this.headerCheckboxContainer) {\n            this.calcRowCheckboxWidth = this.headerCheckboxContainer.nativeElement.getBoundingClientRect().width;\n        }\n\n        this.resetCaches();\n        this.cdr.detectChanges();\n        this.calculateGridHeight();\n\n        if (this.rowEditable) {\n            this.repositionRowEditingOverlay(this.rowInEditMode);\n        }\n\n        if (this.filteringService.isFilterRowVisible) {\n            this.filteringRow.resetChipsArea();\n        }\n\n        this.cdr.detectChanges();\n        this.resetCaches();\n        // in case scrollbar has appeared recalc to size correctly.\n        if (hasScroll !== this.hasVerticalSroll()) {\n            this.calculateGridWidth();\n            this.cdr.detectChanges();\n            this.resetCaches();\n        }\n\n        if (this.zone.isStable) {\n            this.zone.run(() => {\n                this._applyWidthHostBinding();\n                this.cdr.detectChanges();\n            });\n        } else {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.zone.run(() => {\n                    this._applyWidthHostBinding();\n                });\n            });\n        }\n    }\n\n    private _applyWidthHostBinding() {\n        let width = this._width;\n        if (width === null) {\n            let currentWidth = this.calcWidth;\n            if (this.hasVerticalSroll()) {\n                currentWidth += this.scrollWidth;\n            }\n            width = currentWidth + 'px';\n            this.resetCaches();\n        }\n        this._hostWidth = width;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * Method used to override the calculations.\n     */\n    public getFeatureColumnsWidth() {\n        let width = 0;\n\n        if (this.headerCheckboxContainer) {\n            width += this.headerCheckboxContainer.nativeElement.getBoundingClientRect().width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Gets calculated width of the pinned area.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth();\n     * ```\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridBaseComponent\n     */\n    public getPinnedWidth(takeHidden = false) {\n        const fc = takeHidden ? this._pinnedColumns : this.pinnedColumns;\n        let sum = 0;\n        for (const col of fc) {\n            if (col.level === 0) {\n                sum += parseInt(col.width, 10);\n            }\n        }\n        if (this.showRowCheckboxes) {\n            sum += this.calcRowCheckboxWidth;\n        }\n\n        return sum;\n    }\n\n    /**\n     * @hidden\n     * Gets calculated width of the unpinned area\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridBaseComponent\n     */\n    protected getUnpinnedWidth(takeHidden = false) {\n        let width = this.isPercentWidth ?\n            this.calcWidth :\n            parseInt(this.width, 10) ||  parseInt(this.hostWidth, 10) || this.calcWidth;\n        if (this.hasVerticalSroll() && !this.isPercentWidth) {\n            width -= this.scrollWidth;\n        }\n        return width - this.getPinnedWidth(takeHidden);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _summaries(fieldName: string, hasSummary: boolean, summaryOperand?: any) {\n        const column = this.gridAPI.get_column_by_name(fieldName);\n        if (column) {\n            column.hasSummary = hasSummary;\n            if (summaryOperand) {\n                if (this.rootSummariesEnabled) { this.summaryService.retriggerRootPipe++; }\n                column.summaries = summaryOperand;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _multipleSummaries(expressions: ISummaryExpression[], hasSummary: boolean) {\n        expressions.forEach((element) => {\n            this._summaries(element.fieldName, hasSummary, element.customSummary);\n        });\n    }\n    /**\n     * @hidden\n     */\n    protected _disableMultipleSummaries(expressions) {\n        expressions.forEach((column) => {\n            const columnName = column && column.fieldName ? column.fieldName : column;\n            this._summaries(columnName, false);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveDataTypes(rec) {\n        if (typeof rec === 'number') {\n            return DataType.Number;\n        } else if (typeof rec === 'boolean') {\n            return DataType.Boolean;\n        } else if (typeof rec === 'object' && rec instanceof Date) {\n            return DataType.Date;\n        }\n        return DataType.String;\n    }\n\n    private getScrollWidth() {\n        const div = document.createElement('div');\n        const style = div.style;\n        style.width = '100px';\n        style.height = '100px';\n        style.position = 'absolute';\n        style.top = '-10000px';\n        style.top = '-10000px';\n        style.overflow = 'scroll';\n        document.body.appendChild(div);\n        const scrollWidth = div.offsetWidth - div.clientWidth;\n        document.body.removeChild(div);\n        return scrollWidth;\n    }\n\n    /**\n     * @hidden\n     */\n    protected autogenerateColumns() {\n        const data = this.gridAPI.get_data();\n        const factory = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        const fields = this.generateDataFields(data);\n        const columns = [];\n\n        fields.forEach((field) => {\n            const ref = this.viewRef.createComponent(factory, null, this.viewRef.injector);\n            ref.instance.field = field;\n            ref.instance.dataType = this.resolveDataTypes(data[0][field]);\n            ref.changeDetectorRef.detectChanges();\n            columns.push(ref.instance);\n        });\n\n        this.columnList.reset(columns);\n        if (data && data.length > 0) {\n            this.shouldGenerate = false;\n        }\n    }\n\n    protected generateDataFields(data: any[]): string[] {\n        return Object.keys(data && data.length !== 0 ? data[0] : []);\n    }\n\n    /**\n     * @hidden\n     */\n    onlyTopLevel(arr) {\n        return arr.filter(c => c.level === 0);\n    }\n\n    /**\n     * @hidden\n     */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        // XXX: Deprecate index\n        this._columns = this.columnList.toArray();\n        collection.forEach((column: IgxColumnComponent) => {\n            column.grid = this;\n            column.defaultWidth = this.columnWidth;\n            this.setColumnEditState(column);\n\n            if (cb) {\n                cb(column);\n            }\n        });\n\n        this._columnGroups = this.columnList.some(col => col.columnGroup);\n        this._maxLevelHeaderDepth = null;\n        this.reinitPinStates();\n    }\n\n    private setColumnEditState(column: IgxColumnComponent) {\n        // When rowEditable is true, then all columns, with defined field, excluding priamaryKey, are set to editable by default.\n        if (this.rowEditable && column.editable === null &&\n            column.field && column.field !== this.primaryKey) {\n            column.editable = this.rowEditable;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected reinitPinStates() {\n        this._pinnedColumns = (this.hasColumnGroups) ? this.columnList.filter((c) => c.pinned) :\n        this.columnList.filter((c) => c.pinned).sort((a, b) => this._pinnedColumns.indexOf(a) - this._pinnedColumns.indexOf(b));\n        this._unpinnedColumns = this.columnList.filter((c) => !c.pinned);\n    }\n\n    /**\n     * @hidden\n     */\n    public isColumnGrouped(fieldName: string): boolean {\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public onHeaderCheckboxClick(event, filteredData) {\n        this.allRowsSelected = event.checked;\n        const newSelection =\n            event.checked ?\n                filteredData ?\n                    this.selection.add_items(this.id, this.selection.get_all_ids(filteredData, this.primaryKey)) :\n                    this.selection.get_all_ids(this.gridAPI.get_all_data(true), this.primaryKey) :\n                filteredData ?\n                    this.selection.delete_items(this.id, this.selection.get_all_ids(filteredData, this.primaryKey)) :\n                    this.selection.get_empty();\n        this.triggerRowSelectionChange(newSelection, null, event, event.checked);\n        this.checkHeaderCheckboxStatus(event.checked);\n    }\n\n    /**\n     * @hidden\n     */\n    get headerCheckboxAriaLabel() {\n        return this._filteringExpressionsTree.filteringOperands.length > 0 ?\n            this.headerCheckbox && this.headerCheckbox.checked ? 'Deselect all filtered' : 'Select all filtered' :\n            this.headerCheckbox && this.headerCheckbox.checked ? 'Deselect all' : 'Select all';\n    }\n\n    /**\n     * @hidden\n     */\n    public checkHeaderCheckboxStatus(headerStatus?: boolean) {\n        if (headerStatus === undefined) {\n            const filteredData = this.filteringService.filteredData;\n            const dataLength = filteredData ? filteredData.length : this.dataLength;\n            this.allRowsSelected = this.selection.are_all_selected(this.id, dataLength);\n            if (this.headerCheckbox) {\n                this.headerCheckbox.indeterminate = !this.allRowsSelected && !this.selection.are_none_selected(this.id);\n                if (!this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.checked =\n                        this.allRowsSelected;\n                }\n            }\n            this.cdr.markForCheck();\n        } else if (this.headerCheckbox) {\n            this.headerCheckbox.checked = headerStatus !== undefined ? headerStatus : false;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public filteredItemsStatus(componentID: string, filteredData: any[], primaryKey?) {\n        const currSelection = this.selection.get(componentID);\n        let atLeastOneSelected = false;\n        let notAllSelected = false;\n        if (currSelection) {\n            for (const key of Object.keys(filteredData)) {\n                const dataItem = primaryKey ? filteredData[key][primaryKey] : filteredData[key];\n                if (currSelection.has(dataItem)) {\n                    atLeastOneSelected = true;\n                    if (notAllSelected) {\n                        return 'indeterminate';\n                    }\n                } else {\n                    notAllSelected = true;\n                    if (atLeastOneSelected) {\n                        return 'indeterminate';\n                    }\n                }\n            }\n        }\n        return atLeastOneSelected ? 'allSelected' : 'noneSelected';\n    }\n\n    /**\n     * @hidden\n     */\n    public updateHeaderCheckboxStatusOnFilter(data) {\n        if (!data) {\n            this.checkHeaderCheckboxStatus();\n            return;\n        }\n        switch (this.filteredItemsStatus(this.id, data, this.primaryKey)) {\n            case 'allSelected': {\n                if (!this.allRowsSelected) {\n                    this.allRowsSelected = true;\n                }\n                if (this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.indeterminate = false;\n                }\n                break;\n            }\n            case 'noneSelected': {\n                if (this.allRowsSelected) {\n                    this.allRowsSelected = false;\n                }\n                if (this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.indeterminate = false;\n                }\n                break;\n            }\n            default: {\n                if (!this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.indeterminate = true;\n                }\n                if (this.allRowsSelected) {\n                    this.allRowsSelected = false;\n                }\n                break;\n            }\n        }\n    }\n\n    /**\n     * Get current selection state.\n     * Returns an array with selected rows' IDs (primaryKey or rowData)\n     * ```typescript\n     * const selectedRows = this.grid.selectedRows();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public selectedRows(): any[] {\n        let selection: Set<any>;\n        selection = this.selection.get(this.id);\n        return selection ? Array.from(selection) : [];\n    }\n\n    /**\n     * Select specified rows by ID.\n     * ```typescript\n     * this.grid.selectRows([1,2,5], true);\n     * ```\n     * @param rowIDs\n     * @param clearCurrentSelection if true clears the current selection\n     * @memberof IgxGridBaseComponent\n     */\n    public selectRows(rowIDs: any[], clearCurrentSelection?: boolean) {\n        let newSelection: Set<any>;\n        let selectableRows = [];\n        if (this.transactions.enabled) {\n            selectableRows = rowIDs.filter(e => !this.gridAPI.row_deleted_transaction(e));\n        } else {\n            selectableRows = rowIDs;\n        }\n        newSelection = this.selection.add_items(this.id, selectableRows, clearCurrentSelection);\n        this.triggerRowSelectionChange(newSelection);\n    }\n\n    /**\n     * Deselect specified rows by ID.\n     * ```typescript\n     * this.grid.deselectRows([1,2,5]);\n     * ```\n     * @param rowIDs\n     * @memberof IgxGridBaseComponent\n     */\n    public deselectRows(rowIDs: any[]) {\n        let newSelection: Set<any>;\n        newSelection = this.selection.delete_items(this.id, rowIDs);\n        this.triggerRowSelectionChange(newSelection);\n    }\n\n    /**\n     * Selects all rows\n     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     * ```typescript\n     * this.grid.selectAllRows();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public selectAllRows() {\n        this.triggerRowSelectionChange(this.selection.get_all_ids(this.gridAPI.get_all_data(true), this.primaryKey));\n    }\n\n    /**\n     * Deselects all rows\n     * ```typescript\n     * this.grid.deselectAllRows();\n     * ```\n     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     */\n    public deselectAllRows() {\n        this.triggerRowSelectionChange(this.selection.get_empty());\n    }\n\n    clearCellSelection(): void {\n        this.selectionService.clear();\n        this.selectionService.activeElement = null;\n        this.cdr.markForCheck();\n    }\n\n    dragScroll(dir: DragScrollDirection): void {\n        const scrollDelta = 48;\n        const horizontal = this.parentVirtDir.getHorizontalScroll();\n        const vertical = this.verticalScrollContainer.getVerticalScroll();\n        switch (dir) {\n            case DragScrollDirection.LEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                break;\n            case DragScrollDirection.RIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                break;\n            case DragScrollDirection.TOP:\n                vertical.scrollTop -= scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOM:\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOMLEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOMRIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.TOPLEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                vertical.scrollTop -= scrollDelta;\n                break;\n            case DragScrollDirection.TOPRIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                vertical.scrollTop -= scrollDelta;\n                break;\n            default:\n                return;\n        }\n        this.wheelHandler();\n    }\n\n    isDefined(arg: any): boolean {\n        return arg !== undefined && arg !== null;\n    }\n\n    selectRange(arg: GridSelectionRange | GridSelectionRange[] | null | undefined): void {\n        if (!this.isDefined(arg)) {\n            this.clearCellSelection();\n            return;\n        }\n        if (arg instanceof Array) {\n            arg.forEach(range => this.setSelection(range));\n        } else {\n            this.setSelection(arg);\n        }\n        this.cdr.markForCheck();\n    }\n\n    columnToVisibleIndex(field: string | number): number {\n        const visibleColumns = this.visibleColumns;\n        if (typeof field === 'number') {\n            return field;\n        }\n        return visibleColumns.find(column => column.field === field).visibleIndex;\n    }\n\n\n    setSelection(range: GridSelectionRange): void {\n        const startNode = { row: range.rowStart, column: this.columnToVisibleIndex(range.columnStart) };\n        const endNode = { row: range.rowEnd, column: this.columnToVisibleIndex(range.columnEnd) };\n\n        this.selectionService.pointerState.node = startNode;\n        this.selectionService.selectRange(endNode, this.selectionService.pointerState);\n        this.selectionService.addRangeMeta(endNode, this.selectionService.pointerState);\n        this.selectionService.initPointerState();\n    }\n\n    getSelectedRanges(): GridSelectionRange[] {\n        return this.selectionService.ranges;\n    }\n\n    extractDataFromSelection(source: any[]): any[] {\n        let column: IgxColumnComponent;\n        let record = {};\n        const selectedData = [];\n\n        const selectionMap = Array.from(this.selectionService.selection)\n            .filter((tuple) => tuple[0] < source.length);\n\n        const visibleColumns = this.visibleColumns\n            .filter(col => !col.columnGroup)\n            .sort((a, b) => a.visibleIndex - b.visibleIndex);\n\n\n        for (const [row, set] of selectionMap) {\n            if (!source[row]) {\n                continue;\n            }\n            const temp = Array.from(set);\n            for (const each of temp) {\n                column = visibleColumns[each];\n                if (column) {\n                    record[column.field] = source[row][column.field];\n                }\n            }\n            if (Object.keys(record).length) {\n                selectedData.push(record);\n            }\n            record = {};\n        }\n        return selectedData;\n    }\n\n    getSelectedData() {\n        const source = this.verticalScrollContainer.igxForOf;\n\n        return this.extractDataFromSelection(source);\n    }\n\n    /**\n     * @hidden\n     */\n    public triggerRowSelectionChange(newSelectionAsSet: Set<any>, row?: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>,\n        event?: Event, headerStatus?: boolean) {\n        const oldSelectionAsSet = this.selection.get(this.id);\n        const oldSelection = oldSelectionAsSet ? Array.from(oldSelectionAsSet) : [];\n        const newSelection = newSelectionAsSet ? Array.from(newSelectionAsSet) : [];\n        const args: IRowSelectionEventArgs = { oldSelection, newSelection, row, event };\n        this.onRowSelectionChange.emit(args);\n        newSelectionAsSet = this.selection.get_empty();\n        for (let i = 0; i < args.newSelection.length; i++) {\n            newSelectionAsSet.add(args.newSelection[i]);\n        }\n        this.selection.set(this.id, newSelectionAsSet);\n        this.checkHeaderCheckboxStatus(headerStatus);\n    }\n\n    /**\n     * @hidden\n     */\n    // @HostListener('scroll', ['$event'])\n    public scrollHandler(event) {\n        this.parentVirtDir.getHorizontalScroll().scrollLeft += event.target.scrollLeft;\n        this.verticalScrollContainer.getVerticalScroll().scrollTop += event.target.scrollTop;\n        event.target.scrollLeft = 0;\n        event.target.scrollTop = 0;\n    }\n\n    /**\n     * @hidden\n     */\n    public wheelHandler(isScroll = false) {\n        if (document.activeElement &&\n            // tslint:disable-next-line:no-bitwise\n            (document.activeElement.compareDocumentPosition(this.tbody.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS ||\n                // tslint:disable-next-line:no-bitwise\n                (document.activeElement.compareDocumentPosition(this.tfoot.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS && isScroll))) {\n            (document.activeElement as HTMLElement).blur();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public trackColumnChanges(index, col) {\n        return col.field + col._calcWidth;\n    }\n\n    private find(text: string, increment: number, caseSensitive?: boolean, exactMatch?: boolean, scroll?: boolean) {\n        if (!this.rowList) {\n            return 0;\n        }\n\n        this.endEdit(false);\n\n        if (!text) {\n            this.clearSearch();\n            return 0;\n        }\n\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n        let rebuildCache = false;\n\n        if (this.lastSearchInfo.searchText !== text ||\n            this.lastSearchInfo.caseSensitive !== caseSensitiveResolved ||\n            this.lastSearchInfo.exactMatch !== exactMatchResolved) {\n            this.lastSearchInfo = {\n                searchText: text,\n                activeMatchIndex: 0,\n                caseSensitive: caseSensitiveResolved,\n                exactMatch: exactMatchResolved,\n                matchInfoCache: []\n            };\n\n            rebuildCache = true;\n        } else {\n            this.lastSearchInfo.activeMatchIndex += increment;\n        }\n\n        if (rebuildCache) {\n            this.rowList.forEach((row) => {\n                if (row.cells) {\n                    row.cells.forEach((c) => {\n                        c.highlightText(text, caseSensitiveResolved, exactMatchResolved);\n                    });\n                }\n            });\n\n            this.rebuildMatchCache();\n        }\n\n        if (this.lastSearchInfo.activeMatchIndex >= this.lastSearchInfo.matchInfoCache.length) {\n            this.lastSearchInfo.activeMatchIndex = 0;\n        } else if (this.lastSearchInfo.activeMatchIndex < 0) {\n            this.lastSearchInfo.activeMatchIndex = this.lastSearchInfo.matchInfoCache.length - 1;\n        }\n\n        if (this.lastSearchInfo.matchInfoCache.length) {\n            const matchInfo = this.lastSearchInfo.matchInfoCache[this.lastSearchInfo.activeMatchIndex];\n            this.lastSearchInfo = { ...this.lastSearchInfo };\n\n            if (scroll !== false) {\n                this.scrollTo(matchInfo.row, matchInfo.column);\n            }\n\n            IgxTextHighlightDirective.setActiveHighlight(this.id, {\n                column: matchInfo.column,\n                row: matchInfo.row,\n                index: matchInfo.index,\n            });\n\n        } else {\n            IgxTextHighlightDirective.clearActiveHighlight(this.id);\n        }\n\n        return this.lastSearchInfo.matchInfoCache.length;\n    }\n\n    /**\n     * Returns an array containing the filtered sorted data.\n     * ```typescript\n     * const filteredSortedData = this.grid1.filteredSortedData;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get filteredSortedData(): any[] {\n        return this._filteredSortedData;\n    }\n    set filteredSortedData(value: any[]) {\n        this._filteredSortedData = value;\n        this.refreshSearch(true);\n    }\n\n    /**\n     * @hidden\n     */\n    protected initPinning() {\n        let currentPinnedWidth = 0;\n        const pinnedColumns = [];\n        const unpinnedColumns = [];\n        const newUnpinnedCols = [];\n\n        this.calculateGridWidth();\n        this.resetCaches();\n        // When a column is a group or is inside a group, pin all related.\n        this._pinnedColumns.forEach(col => {\n            if (col.parent) {\n                col.parent.pinned = true;\n            }\n            if (col.columnGroup) {\n                col.children.forEach(child => child.pinned = true);\n            }\n        });\n\n        // Make sure we don't exceed unpinned area min width and get pinned and unpinned col collections.\n        // We take into account top level columns (top level groups and non groups).\n        // If top level is unpinned the pinning handles all children to be unpinned as well.\n        for (let i = 0; i < this._columns.length; i++) {\n            if (this._columns[i].pinned && !this._columns[i].parent) {\n                // Pinned column. Check if with it the unpinned min width is exceeded.\n                const colWidth = parseInt(this._columns[i].width, 10);\n                if (currentPinnedWidth + colWidth > this.calcWidth - this.unpinnedAreaMinWidth) {\n                    // unpinned min width is exceeded. Unpin the columns and add it to the unpinned collection.\n                    this._columns[i].pinned = false;\n                    unpinnedColumns.push(this._columns[i]);\n                    newUnpinnedCols.push(this._columns[i]);\n                } else {\n                    // unpinned min width is not exceeded. Keep it pinned and add it to the pinned collection.\n                    currentPinnedWidth += colWidth;\n                    pinnedColumns.push(this._columns[i]);\n                }\n            } else if (this._columns[i].pinned && this._columns[i].parent) {\n                if (this._columns[i].topLevelParent.pinned) {\n                    pinnedColumns.push(this._columns[i]);\n                } else {\n                    this._columns[i].pinned = false;\n                    unpinnedColumns.push(this._columns[i]);\n                }\n            } else {\n                unpinnedColumns.push(this._columns[i]);\n            }\n        }\n\n        if (newUnpinnedCols.length) {\n            console.warn(\n                'igxGrid - The pinned area exceeds maximum pinned width. ' +\n                'The following columns were unpinned to prevent further issues:' +\n                newUnpinnedCols.map(col => '\"' + col.header + '\"').toString() + '. For more info see our documentation.'\n            );\n        }\n\n        // Assign the applicaple collections.\n        this._pinnedColumns = pinnedColumns;\n        this._unpinnedColumns = unpinnedColumns;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        let delayScrolling = false;\n\n        if (this.paging && typeof (row) !== 'number') {\n            const rowIndex = this.filteredSortedData.indexOf(row);\n            const page = Math.floor(rowIndex / this.perPage);\n\n            if (this.page !== page) {\n                delayScrolling = true;\n                this.page = page;\n            }\n        }\n\n        if (delayScrolling) {\n            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(() => {\n                this.scrollDirective(this.verticalScrollContainer,\n                    typeof (row) === 'number' ? row : this.verticalScrollContainer.igxForOf.indexOf(row));\n            });\n        } else {\n            this.scrollDirective(this.verticalScrollContainer,\n                typeof (row) === 'number' ? row : this.verticalScrollContainer.igxForOf.indexOf(row));\n        }\n\n        this.scrollToHorizontally(column);\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollToHorizontally(column: any | number) {\n        let columnIndex = typeof column === 'number' ? column : this.getColumnByName(column).visibleIndex;\n        const scrollRow = this.rowList.find(r => r.virtDirRow);\n        const virtDir = scrollRow ? scrollRow.virtDirRow : null;\n        if (this.pinnedColumns.length) {\n            if (columnIndex >= this.pinnedColumns.length) {\n                columnIndex -= this.pinnedColumns.length;\n                this.scrollDirective(virtDir, columnIndex);\n            }\n        } else {\n            this.scrollDirective(virtDir, columnIndex);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollDirective(directive: IgxGridForOfDirective<any>, goal: number): void {\n        if (!directive) {\n            return;\n        }\n        // directive.onChunkLoad.pipe(first())\n        //     .subscribe(() => requestAnimationFrame(() => this.cdr.detectChanges()));\n        directive.scrollTo(goal);\n    }\n\n    public navigateTo(rowIndex: number, visibleColIndex = -1, cb: Function = null) {\n        if (rowIndex < 0 || rowIndex > this.verticalScrollContainer.igxForOf.length - 1\n            || (visibleColIndex !== -1 && this.columnList.map(col => col.visibleIndex).indexOf(visibleColIndex) === -1)) {\n            return;\n        }\n        this.wheelHandler();\n        if (visibleColIndex === -1 || (this.navigation.isColumnFullyVisible(visibleColIndex)\n            && this.navigation.isColumnLeftFullyVisible(visibleColIndex))) {\n            if (this.navigation.shouldPerformVerticalScroll(rowIndex)) {\n                this.verticalScrollContainer.scrollTo(rowIndex);\n                this.verticalScrollContainer.onChunkLoad\n                    .pipe(first()).subscribe(() => {\n                        this.executeCallback(rowIndex, visibleColIndex, cb);\n                    });\n            } else {\n                this.executeCallback(rowIndex, visibleColIndex, cb);\n            }\n        } else {\n            const unpinnedIndex = this.navigation.getColumnUnpinnedIndex(visibleColIndex);\n            this.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    if (this.navigation.shouldPerformVerticalScroll(rowIndex)) {\n                        this.verticalScrollContainer.scrollTo(rowIndex);\n                        this.verticalScrollContainer.onChunkLoad\n                            .pipe(first()).subscribe(() => {\n                                this.executeCallback(rowIndex, visibleColIndex, cb);\n                            });\n                    } else {\n                        this.executeCallback(rowIndex, visibleColIndex, cb);\n                    }\n\n                });\n            this.navigation.horizontalScroll(rowIndex).scrollTo(unpinnedIndex);\n        }\n    }\n\n    public getNextCell(currRowIndex: number, curVisibleColIndex: number, callback: (IgxColumnComponent) => boolean = null) {\n        const columns = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0);\n\n        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n        }\n        const colIndexes = callback ? columns.filter((col) => callback(col)).map(editCol => editCol.visibleIndex).sort((a, b) => a - b) :\n            columns.map(editCol => editCol.visibleIndex).sort((a, b) => a - b);\n        const nextCellIndex = colIndexes.find(index => index > curVisibleColIndex);\n        if (this.verticalScrollContainer.igxForOf.slice(currRowIndex, currRowIndex + 1)\n            .find(rec => !rec.expression && !rec.summaries) && nextCellIndex !== undefined) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: nextCellIndex };\n        } else {\n            if (colIndexes.length === 0 || this.getNextDataRowIndex(currRowIndex) === currRowIndex) {\n                return { rowIndex: this.getNextDataRowIndex(currRowIndex), visibleColumnIndex: curVisibleColIndex };\n            } else {\n                return { rowIndex: this.getNextDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0] };\n            }\n        }\n    }\n\n    public getPreviousCell(currRowIndex: number, curVisibleColIndex: number, callback: (IgxColumnComponent) => boolean = null) {\n        const columns = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0);\n\n        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n        }\n        const colIndexes = callback ? columns.filter((col) => callback(col)).map(editCol => editCol.visibleIndex).sort((a, b) => b - a) :\n            columns.map(editCol => editCol.visibleIndex).sort((a, b) => b - a);\n        const prevCellIndex = colIndexes.find(index => index < curVisibleColIndex);\n        if (this.verticalScrollContainer.igxForOf.slice(currRowIndex, currRowIndex + 1)\n            .find(rec => !rec.expression && !rec.summaries) && prevCellIndex !== undefined) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: prevCellIndex };\n        } else {\n            if (colIndexes.length === 0 || this.getPrevDataRowIndex(currRowIndex) === currRowIndex) {\n                return { rowIndex: this.getPrevDataRowIndex(currRowIndex), visibleColumnIndex: curVisibleColIndex };\n            } else {\n                return { rowIndex: this.getPrevDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0] };\n            }\n        }\n    }\n\n    private executeCallback(rowIndex, visibleColIndex = -1, cb: Function = null) {\n        if (!cb) { return; }\n        let targetType, target;\n        const row = this.summariesRowList.filter(s => s.index !== 0).concat(this.rowList.toArray()).find(r => r.index === rowIndex);\n        if (!row) { return; }\n        switch (row.nativeElement.tagName.toLowerCase()) {\n            case 'igx-grid-groupby-row':\n                targetType = GridKeydownTargetType.groupRow;\n                target = row;\n                break;\n            case 'igx-grid-summary-row':\n                targetType = GridKeydownTargetType.summaryCell;\n                target = visibleColIndex !== -1 ?\n                    row.summaryCells.find(c => c.visibleColumnIndex === visibleColIndex) : row.summaryCells.first;\n                break;\n            default:\n                targetType = GridKeydownTargetType.dataCell;\n                target = visibleColIndex !== -1 ? row.cells.find(c => c.visibleColumnIndex === visibleColIndex) : row.cells.first;\n                break;\n        }\n        const args = { targetType: targetType, target: target };\n        cb(args);\n    }\n\n    private getPrevDataRowIndex(currentRowIndex): number {\n        if (currentRowIndex <= 0) { return currentRowIndex; }\n\n        const prevRow = this.verticalScrollContainer.igxForOf.slice(0, currentRowIndex).reverse()\n            .find(rec => !rec.expression && !rec.summaries);\n        return prevRow ? this.verticalScrollContainer.igxForOf.indexOf(prevRow) : currentRowIndex;\n    }\n\n    private getNextDataRowIndex(currentRowIndex): number {\n        if (currentRowIndex === this.verticalScrollContainer.igxForOf.length) { return currentRowIndex; }\n\n        const nextRow = this.verticalScrollContainer.igxForOf.slice(currentRowIndex + 1, this.verticalScrollContainer.igxForOf.length)\n            .find(rec => !rec.expression && !rec.summaries);\n        return nextRow ? this.verticalScrollContainer.igxForOf.indexOf(nextRow) : currentRowIndex;\n    }\n\n    private isValidPosition(rowIndex, colIndex) {\n        const rows = this.summariesRowList.filter(s => s.index !== 0).concat(this.rowList.toArray()).length;\n        const cols = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0).length;\n        if (rows < 1 || cols < 1) { return false; }\n        if (rowIndex > -1 && rowIndex < this.verticalScrollContainer.igxForOf.length &&\n            colIndex > - 1 && colIndex <= this.unpinnedColumns[this.unpinnedColumns.length - 1].visibleIndex) {\n            return true;\n        }\n        return false;\n    }\n\n    private rebuildMatchCache() {\n        this.lastSearchInfo.matchInfoCache = [];\n\n        const caseSensitive = this.lastSearchInfo.caseSensitive;\n        const exactMatch = this.lastSearchInfo.exactMatch;\n        const searchText = caseSensitive ? this.lastSearchInfo.searchText : this.lastSearchInfo.searchText.toLowerCase();\n        const data = this.filteredSortedData;\n        const columnItems = this.visibleColumns.filter((c) => !c.columnGroup).sort((c1, c2) => c1.visibleIndex - c2.visibleIndex);\n\n        const numberPipe = new IgxDecimalPipeComponent(this.locale);\n        const datePipe = new IgxDatePipeComponent(this.locale);\n        data.forEach((dataRow) => {\n            columnItems.forEach((c) => {\n                const value = c.formatter ? c.formatter(dataRow[c.field]) :\n                    c.dataType === 'number' ? numberPipe.transform(dataRow[c.field], this.locale) :\n                        c.dataType === 'date' ? datePipe.transform(dataRow[c.field], this.locale)\n                            : dataRow[c.field];\n                if (value !== undefined && value !== null && c.searchable) {\n                    let searchValue = caseSensitive ? String(value) : String(value).toLowerCase();\n\n                    if (exactMatch) {\n                        if (searchValue === searchText) {\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: dataRow,\n                                column: c.field,\n                                index: 0,\n                            });\n                        }\n                    } else {\n                        let occurenceIndex = 0;\n                        let searchIndex = searchValue.indexOf(searchText);\n\n                        while (searchIndex !== -1) {\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: dataRow,\n                                column: c.field,\n                                index: occurenceIndex++,\n                            });\n\n                            searchValue = searchValue.substring(searchIndex + searchText.length);\n                            searchIndex = searchValue.indexOf(searchText);\n                        }\n                    }\n                }\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public isExpandedGroup(_group: IGroupByRecord): boolean {\n        return undefined;\n    }\n\n    /**\n    * @hidden\n    */\n    protected getGroupByRecords(): IGroupByRecord[] {\n        return null;\n    }\n\n    protected changeRowEditingOverlayStateOnScroll(row: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>) {\n        if (!this.rowEditable || this.rowEditingOverlay.collapsed) {\n            return;\n        }\n        if (!row) {\n            this.toggleRowEditingOverlay(false);\n        } else {\n            this.repositionRowEditingOverlay(row);\n        }\n    }\n\n    openRowOverlay(id) {\n        this.configureRowEditingOverlay(id, this.rowList.length <= MIN_ROW_EDITING_COUNT_THRESHOLD);\n\n        this.rowEditingOverlay.open(this.rowEditSettings);\n        this.rowEditPositioningStrategy.isTopInitialPosition = this.rowEditPositioningStrategy.isTop;\n        this._wheelListener = this.rowEditingWheelHandler.bind(this);\n        this.rowEditingOverlay.element.addEventListener('wheel', this._wheelListener);\n    }\n\n    /**\n     * @hidden\n     */\n    public closeRowEditingOverlay() {\n        this.rowEditingOverlay.element.removeEventListener('wheel', this._wheelListener);\n        this.rowEditPositioningStrategy.isTopInitialPosition = null;\n        this.rowEditingOverlay.close();\n        this.rowEditingOverlay.element.parentElement.style.display = '';\n    }\n\n    /**\n     * @hidden\n     */\n    public toggleRowEditingOverlay(show) {\n        const rowStyle = this.rowEditingOverlay.element.style;\n        if (show) {\n            rowStyle.display = 'block';\n        } else {\n            rowStyle.display = 'none';\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public repositionRowEditingOverlay(row: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>) {\n        if (!this.rowEditingOverlay.collapsed) {\n            const rowStyle = this.rowEditingOverlay.element.parentElement.style;\n            if (row) {\n                rowStyle.display = '';\n                this.configureRowEditingOverlay(row.rowID);\n                this.rowEditingOverlay.reposition();\n            } else {\n                rowStyle.display = 'none';\n            }\n        }\n    }\n\n    private configureRowEditingOverlay(rowID: any, useOuter = false) {\n        this.rowEditSettings.outlet = useOuter ? this.parentRowOutletDirective : this.rowOutletDirective;\n        this.rowEditPositioningStrategy.settings.container = this.tbody.nativeElement;\n        const targetRow = this.gridAPI.get_row_by_key(rowID);\n        if (!targetRow) {\n            return;\n        }\n        this.rowEditPositioningStrategy.settings.target = targetRow.element.nativeElement;\n        this.toggleRowEditingOverlay(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowChangesCount() {\n        if (!this.crudService.row) {\n            return 0;\n        }\n        const rowChanges = this.transactions.getAggregatedValue(this.crudService.row.id, false);\n        return rowChanges ? Object.keys(rowChanges).length : 0;\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.gridAPI.get_all_data()[rowIndex], value);\n    }\n\n    endRowTransaction(commit: boolean, row: IgxRow) {\n        row.newData = this.transactions.getAggregatedValue(row.id, true);\n\n        let args = row.createEditEventArgs();\n\n        if (!commit) {\n            this.onRowEditCancel.emit(args);\n            this.transactions.endPending(false);\n        } else {\n            args = this.gridAPI.update_row(row, row.newData);\n        }\n        if (args.cancel) {\n            this.transactions.startPending();\n            return;\n        }\n        this.crudService.endRowEdit();\n        this.closeRowEditingOverlay();\n    }\n\n    // TODO: Refactor\n    /**\n     * Finishes the row transactions on the current row.\n     * If `commit === true`, passes them from the pending state to the data (or transaction service)\n     *\n     * Binding to the event\n     * ```html\n     * <button igxButton (click)=\"grid.endEdit(true)\">Commit Row</button>\n     * ```\n     * @param commit\n     */\n    public endEdit(commit = true, event?: Event) {\n        const row = this.crudService.row;\n        const cell = this.crudService.cell;\n        const columnindex = cell ? cell.column.index : -1;\n        const ri = row ? row.index : -1;\n\n        // TODO: Merge the crudService with wht BaseAPI service\n        if (!row && !cell) { return; }\n\n        commit ? this.gridAPI.submit_value() : this.gridAPI.escape_editMode();\n\n        if (!this.rowEditable || this.rowEditingOverlay && this.rowEditingOverlay.collapsed || !row) {\n            return;\n        }\n\n        this.endRowTransaction(commit, row);\n\n        const currentCell = this.gridAPI.get_cell_by_index(ri, columnindex);\n        if (currentCell && event) {\n            currentCell.nativeElement.focus();\n        }\n    }\n    /**\n     * @hidden\n     */\n    private rowEditingWheelHandler(event: WheelEvent) {\n        if (event.deltaY > 0) {\n            this.verticalScrollContainer.scrollNext();\n        } else {\n            this.verticalScrollContainer.scrollPrev();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public get dataWithAddedInTransactionRows() {\n        const result = <any>cloneArray(this.gridAPI.get_all_data());\n        if (this.transactions.enabled) {\n            result.push(...this.transactions.getAggregatedChanges(true)\n                .filter(t => t.type === TransactionType.ADD)\n                .map(t => t.newValue));\n        }\n\n        return result;\n    }\n\n    public get dataLength() {\n        return this.transactions.enabled ? this.dataWithAddedInTransactionRows.length : this.gridAPI.get_all_data().length;\n    }\n\n    public hasHorizontalScroll() {\n        return this.totalWidth - this.unpinnedWidth > 0;\n    }\n\n    protected _restoreVirtState(row) {\n        // check virtualization state of data record added from cache\n        // in case state is no longer valid - update it.\n        const rowForOf = row.virtDirRow;\n        const gridScrLeft = rowForOf.getHorizontalScroll().scrollLeft;\n        const left = -parseInt(rowForOf.dc.instance._viewContainer.element.nativeElement.style.left, 10);\n        const actualScrollLeft = left + rowForOf.getColumnScrollLeft(rowForOf.state.startIndex);\n        if (gridScrLeft !== actualScrollLeft) {\n            rowForOf.onHScroll(gridScrLeft);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportExcel(): boolean {\n        return this._exportExcel;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportCsv(): boolean {\n        return this._exportCsv;\n    }\n\n    /**\n    * @hidden\n    */\n    public isSummaryRow(rowData): boolean {\n        return rowData.summaries && (rowData.summaries instanceof Map);\n    }\n\n    /**\n     * @hidden\n     */\n    protected get isAttachedToDom(): boolean {\n        return this.document.body.contains(this.nativeElement);\n    }\n\n\n\n    /**\n     * @hidden\n     */\n    public cachedViewLoaded(args: ICachedViewLoadedEventArgs) {\n        if (args.context['templateID'] === 'dataRow' && args.context['$implicit'] === args.oldContext['$implicit']) {\n            args.view.detectChanges();\n            const row = this.getRowByIndex(args.context.index);\n            if (row && row.cells) {\n                row.cells.forEach((c) => {\n                    c.highlightText(\n                        this.lastSearchInfo.searchText,\n                        this.lastSearchInfo.caseSensitive,\n                        this.lastSearchInfo.exactMatch);\n                });\n            }\n        }\n        if (this.hasHorizontalScroll()) {\n            const tmplId = args.context.templateID;\n            const index = args.context.index;\n            args.view.detectChanges();\n            const row = tmplId === 'dataRow' ? this.getRowByIndex(index) : null;\n            const summaryRow = tmplId === 'summaryRow' ? this.summariesRowList.toArray().find((sr) => sr.dataRowIndex === index) : null;\n            if (row && row instanceof IgxRowComponent) {\n                this._restoreVirtState(row);\n            } else if (summaryRow) {\n                this._restoreVirtState(summaryRow);\n            }\n        }\n    }\n\n}\n\n\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\n\n@Pipe({\n    name: 'igxGridSummaryDataPipe',\n    pure: true\n})\nexport class IgxSummaryDataPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    transform(id: string, trigger: number = 0) {\n        const summaryService = this.gridAPI.grid.summaryService;\n        return summaryService.calculateSummaries(\n            summaryService.rootSummaryID,\n            this.gridAPI.get_summary_data()\n        );\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n@Directive({\n    selector: '[igxProcessBarText]'\n})\nexport class IgxProcessBarTextTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Renderer2,\n    ViewChild,\n    ContentChild\n} from '@angular/core';\nimport { IgxProcessBarTextTemplateDirective } from './progressbar.common';\n\nconst ONE_PERCENT = 0.01;\nconst MIN_VALUE = 0;\n\nexport enum IgxTextAlign {\n    START = 'start',\n    CENTER = 'center',\n    END = 'end'\n}\n\nexport enum IgxProgressType {\n    DANGER = 'danger',\n    INFO = 'info',\n    WARNING = 'warning',\n    SUCCESS = 'success'\n}\n\nexport interface IChangeProgressEventArgs {\n    previousValue: number;\n    currentValue: number;\n}\n\nexport abstract class BaseProgress {\n    /**\n     * @hidden\n     */\n    private requestAnimationId: number = undefined;\n\n    /**\n     * @hidden\n     */\n    protected _valueInPercent = MIN_VALUE;\n    /**\n     * @hidden\n     */\n    protected _max = 100;\n    /**\n     * @hidden\n     */\n    protected _value = MIN_VALUE;\n    /**\n     * @hidden\n     */\n    protected _animate = true;\n\n    /**\n     * @hidden\n     */\n    protected _step;\n\n    /**\n     *Returns the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *public valuePercent(event){\n     *    let percentValue = this.progressBar.valueInPercent;\n     *    alert(percentValue);\n     *}\n     *```\n     */\n    public get valueInPercent(): number {\n        return this._valueInPercent;\n    }\n\n    /**\n     *Sets the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *    public setValue(event){\n     *    this.progressBar.valueInPercent = 56;\n     *}\n     * //...\n     *```\n     *```html\n     *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"setValue()\">setValue</button>\n     *```\n     */\n    public set valueInPercent(value: number) {\n        this._valueInPercent = value;\n    }\n\n    /**\n     * @hidden\n     */\n    protected runAnimation(val: number, step: number) {\n        this.requestAnimationId = requestAnimationFrame(\n            () => this.updateProgressSmoothly.call(this, val, step));\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressSmoothly(val: number, step: number) {\n        this._value += step;\n        const passedValue = convertInPercentage(val, this._max);\n        const progressValue = convertInPercentage(this._value, this._max);\n        if (this.valueInPercent === passedValue) {\n            this.updateProgress(val);\n            cancelAnimationFrame(this.requestAnimationId);\n        } else if (this.isInLimitRange(progressValue, passedValue, step)) {\n            this.updateProgress(val);\n            cancelAnimationFrame(this.requestAnimationId);\n        } else {\n            this.valueInPercent = progressValue;\n            this.requestAnimationId = requestAnimationFrame(() => this.updateProgressSmoothly.call(this, val, step));\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressDirectly(val: number) {\n        this._value = val;\n        this.valueInPercent = convertInPercentage(this._value, this._max);\n    }\n\n    /**\n     * @hidden\n     */\n    protected directionFlow(currentValue: number, prevValue: number, step: number): number {\n        if (currentValue < prevValue) {\n            return step;\n        }\n\n        return -step;\n    }\n\n    /**\n     * @hidden\n     */\n    private isInLimitRange(val: number, comparator: number, step: number) {\n        return this.isExceedingUpperLimit(val, comparator, step) || this.isExceedingLowerLimit(val, comparator, step);\n    }\n\n    /**\n     * @hidden\n     *\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingUpperLimit(val: number, comparator: number, step: number) {\n        return val > comparator && step > 0;\n    }\n\n    /**\n     * @hidden\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingLowerLimit(val: number, comparator: number, step: number) {\n        return val < comparator && step < 0;\n    }\n\n    /**\n     * @hidden\n     * @param step\n     */\n    private updateProgress(val: number) {\n        this._value = val;\n        this.valueInPercent = convertInPercentage(this._value, this._max);\n    }\n}\nlet NEXT_LINEAR_ID = 0;\nlet NEXT_CIRCULAR_ID = 0;\n@Component({\n    selector: 'igx-linear-bar',\n    templateUrl: 'templates/linear-bar.component.html'\n})\nexport class IgxLinearProgressBarComponent extends BaseProgress {\n\n    /**\n     *Animation on progress `IgxLinearProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-linear-bar [animate]=\"false\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    set animate(animate: boolean) {\n        this._animate = animate;\n    }\n\n    /**\n     *Returns whether the `IgxLinearProgressBarComponent` has animation true/false.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public animationStatus(event) {\n     *    let animationStatus = this.progressBar.animate;\n     *    alert(animationStatus);\n     *}\n     *```\n     */\n    get animate(): boolean {\n        return this._animate;\n    }\n\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('attr.aria-valuemax')\n    @Input()\n    set max(maxNum: number) {\n        this._max = maxNum;\n    }\n\n    /**\n     *Returns the the maximum progress value of the `IgxLinearProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public maxValue(event) {\n     *    let max = this.progressBar.max;\n     *    alert(max);\n     *}\n     *```\n     */\n    get max() {\n        return this._max;\n    }\n\n    /**\n     *Returns the value which update the progress indicator of the `IgxLinearProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    @Input()\n    get step(): number {\n        if (this._step) {\n            return this._step;\n        }\n\n        return this._max * ONE_PERCENT;\n    }\n\n    /**\n     *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-linear-bar>\n     *```\n     */\n    set step(val: number) {\n        this._step = Number(val);\n    }\n\n    constructor() {\n        super();\n    }\n\n    @HostBinding('attr.aria-valuemin')\n    public valueMin = 0;\n\n    @HostBinding('class.igx-linear-bar')\n    public cssClass = 'igx-linear-bar';\n\n    /**\n     *Set `IgxLinearProgressBarComponent` to have striped style. By default it is set to false.\n     *```html\n     *<igx-linear-bar [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('class.igx-linear-bar--striped')\n    @Input()\n    public striped = false;\n\n    /**\n     *Set `IgxLinearProgressBarComponent` to have indeterminate. By default it is set to false.\n     *```html\n     *<igx-linear-bar [indeterminate]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('class.igx-linear-bar--indeterminate')\n    @Input()\n    public indeterminate = false;\n\n    /**An @Input property that sets the value of the `role` attribute. If not provided it will be automatically set to `progressbar`.\n     * ```html\n     *<igx-linear-bar role=\"progressbar\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'progressbar';\n\n    /**An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     *<igx-linear-bar [id]=\"'igx-linear-bar-55'\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-linear-bar-${NEXT_LINEAR_ID++}`;\n\n    /**\n     *Set the position that defines where the text is aligned.\n     Possible options - `IgxTextAlign.START` (default), `IgxTextAlign.CENTER`, `IgxTextAlign.END`.\n     *```typescript\n     *public positionCenter: IgxTextAlign;\n     *public ngOnInit() {\n     *    this.positionCenter = IgxTextAlign.CENTER;\n     *}\n     * //...\n     *```\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textAlign: IgxTextAlign = IgxTextAlign.START;\n\n    /**\n     *Set the text to be visible. By default it is set to true.\n     * ```html\n     *<igx-linear-bar type=\"default\" [textVisibility]=\"false\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     *Set the position that defines if the text should be aligned above the progress line. By default is set to false.\n     *```html\n     *<igx-linear-bar type=\"danger\" [textTop]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textTop = false;\n\n    /**\n     *Set a custom text that is displayed according to the defined position.\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public text: string;\n\n    /**\n     *Set type of the `IgxLinearProgressBarComponent`. Possible options - `default`, `success`, `info`, `warning`, and `danger`.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"100\" [value]=\"0\" type=\"danger\"></igx-linear-bar>\n     *```\n     */\n\n    @Input()\n    public type = 'default';\n\n     /**\n     *Returns value that indicates the current `IgxLinearProgressBarComponent` position.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public getValue(event) {\n     *    let value = this.progressBar.value;\n     *    alert(value);\n     *}\n     *```\n     */\n    @HostBinding('attr.aria-valuenow')\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     *Set value that indicates the current `IgxLinearProgressBarComponent` position.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    set value(val) {\n        val = Number(val);\n        if (this._value === val || this.indeterminate) {\n            return;\n        }\n\n        const valueInRange = getValueInProperRange(val, this.max);\n        if (isNaN(valueInRange)) {\n            return;\n        }\n        const changedValues = {\n            currentValue: valueInRange,\n            previousValue: this._value\n        };\n\n        const updateValue = super.directionFlow(this._value, val, this.step);\n        if (this._animate && val >= this.step) {\n            super.runAnimation(valueInRange, updateValue);\n        } else {\n            super.updateProgressDirectly(valueInRange);\n        }\n\n        this.onProgressChanged.emit(changedValues);\n    }\n\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-linear-bar (onProgressChanged)=\"progressChange($event)\" type=\"success\">\n     *```\n     */\n    @Output() public onProgressChanged = new EventEmitter<IChangeProgressEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--danger')\n    public get danger() {\n        return this.type === IgxProgressType.DANGER;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--info')\n    public get info() {\n        return this.type === IgxProgressType.INFO;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--warning')\n    public get warning() {\n        return this.type === IgxProgressType.WARNING;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--success')\n    public get success() {\n        return this.type === IgxProgressType.SUCCESS;\n    }\n}\n\n@Component({\n    selector: 'igx-circular-bar',\n    templateUrl: 'templates/circular-bar.component.html'\n})\nexport class IgxCircularProgressBarComponent extends BaseProgress {\n\n    private readonly STROKE_OPACITY_DVIDER = 100;\n    private readonly STROKE_OPACITY_ADDITION = .2;\n\n    /** @hidden */\n    @HostBinding('class.igx-circular-bar')\n    public cssClass = 'igx-circular-bar';\n\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-circular-bar [value]=\"currentValue\" (onProgressChanged)=\"progressChange($event)\"></igx-circular-bar>\n     *```\n     */\n    @Output()\n    public onProgressChanged = new EventEmitter<IChangeProgressEventArgs>();\n\n    /**\n     *An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-circular-bar [id]=\"'igx-circular-bar-55'\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-circular-bar-${NEXT_CIRCULAR_ID++}`;\n\n    /**\n     *An @Input property that sets the value of the `indeterminate` attribute. If not provided it will be automatically set to false.\n     *```html\n     *<igx-circular-bar [indeterminate]=\"true\"></igx-circular-bar>\n     *```\n     */\n    @HostBinding('class.igx-circular-bar--indeterminate')\n    @Input()\n    public indeterminate = false;\n\n    /**\n     *Sets the text visibility. By default it is set to true.\n     *```html\n     *<igx-circular-bar [textVisibility]=\"false\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     * Sets/gets the text to be displayed inside the `igxCircularBar`.\n     *```html\n     *<igx-circular-bar text=\"Progress\"></igx-circular-bar>\n     *```\n     *```typescript\n     *let text = this.circularBar.text;\n     *```\n     */\n    @Input()\n    public text: string;\n\n    @ContentChild(IgxProcessBarTextTemplateDirective, { read: IgxProcessBarTextTemplateDirective })\n    public textTemplate: IgxProcessBarTextTemplateDirective;\n\n    /**\n     * @hidden\n    */\n    public get context(): any {\n        return {\n            $implicit: { value: this.value, valueInPercent: this.valueInPercent, max: this.max }\n        };\n    }\n\n    /**\n    *Animation on progress `IgxCircularProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-circular-bar [animate]=\"false\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    set animate(animate: boolean) {\n        this._animate = animate;\n    }\n\n    /**\n     *Returns whether the `IgxCircularProgressBarComponent` has animation true/false.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public animationStatus(event) {\n     *    let animationStatus = this.progressBar.animate;\n     *    alert(animationStatus);\n     *}\n     *```\n     */\n    get animate(): boolean {\n        return this._animate;\n    }\n\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-circular-bar [max]=\"200\" [value]=\"0\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    set max(maxNum: number) {\n        this._max = maxNum;\n    }\n\n    /**\n     *Returns the the maximum progress value of the `IgxCircularProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public maxValue(event) {\n     *    let max = this.progressBar.max;\n     *    alert(max);\n     *}\n     *```\n     *```html\n     *<igx-circular-bar [max]=\"245\" [animate]=\"false\" [value]=\"currentValue\"></igx-circular-bar>\n     *```\n     */\n    get max(): number {\n        return this._max;\n    }\n\n    /**\n     *Returns the value which update the progress indicator of the `IgxCircularProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    @Input()\n    get step(): number {\n        if (this._step) {\n            return this._step;\n        }\n\n        return this._max * ONE_PERCENT;\n    }\n\n    /**\n     *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     *```html\n     *<igx-circular-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-circular-bar>\n     *```\n    */\n    set step(val: number) {\n        this._step = Number(val);\n    }\n\n    /**\n     *Returns value that indicates the current `IgxCircularProgressBarComponent` position.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public getValue(event) {\n     *    let value = this.progressBar.value;\n     *    alert(value);\n     *}\n     *```\n     *```html\n     *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"getValue()\">Click</button>\n     *```\n     */\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     *Set value that indicates the current `IgxCircularProgressBarComponent` position.\n     *```html\n     *<igx-circular-bar [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    set value(val: number) {\n        val = Number(val);\n        if (this._value === val || this.indeterminate) {\n            return;\n        }\n\n        const valueInProperRange = getValueInProperRange(val, this.max);\n        if (isNaN(valueInProperRange)) {\n            return;\n        }\n\n        const changedValues = {\n            currentValue: valueInProperRange,\n            previousValue: this._value\n        };\n\n        const updateValue = super.directionFlow(this._value, val, this.step);\n        if (this.animate && val >= this.step) {\n            super.runAnimation(valueInProperRange, updateValue);\n        } else {\n            this.updateProgressDirectly(valueInProperRange);\n        }\n\n        this.onProgressChanged.emit(changedValues);\n    }\n\n    private _circleRadius = 46;\n    private _circumference = 2 * Math.PI * this._circleRadius;\n\n    @ViewChild('circle') private _svgCircle: ElementRef;\n\n    constructor(private renderer: Renderer2) {\n        super();\n    }\n\n    /**\n     * @hidden\n     */\n    public updateProgressSmoothly(val: number, step: number) {\n        // Set frames for the animation\n        const FRAMES = [{\n            strokeDashoffset: this.getProgress(this._value),\n            strokeOpacity: (this._value / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }, {\n            strokeDashoffset: this.getProgress(this.valueInPercent),\n            strokeOpacity: (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }];\n        this._svgCircle.nativeElement.animate(FRAMES, {\n            easing: 'ease-out',\n            fill: 'forwards'\n        });\n\n        super.updateProgressSmoothly(val, step);\n    }\n\n    /**\n     * @hidden\n    */\n    public get textContent(): string {\n        return this.text;\n    }\n\n    /**\n     * @hidden\n    */\n    public updateProgressDirectly(val: number) {\n        super.updateProgressDirectly(val);\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-dashoffset',\n            this.getProgress(this.valueInPercent));\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-opacity',\n            (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION);\n    }\n\n    private getProgress(percentage: number) {\n        return this._circumference - (percentage * this._circumference / 100);\n    }\n}\n\nexport function getValueInProperRange(value: number, max: number, min = 0): number {\n    return Math.max(Math.min(value, max), min);\n}\n\nexport function convertInPercentage(value: number, max: number) {\n    return Math.floor(100 * value / max);\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxLinearProgressBarComponent, IgxCircularProgressBarComponent, IgxProcessBarTextTemplateDirective],\n    exports: [IgxLinearProgressBarComponent, IgxCircularProgressBarComponent, IgxProcessBarTextTemplateDirective],\n    imports: [CommonModule]\n})\nexport class IgxProgressBarModule {\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { DataUtil } from '../data-operations/data-util';\nimport { cloneArray } from '../core/utils';\n\n@Pipe({\n    name: 'igxCellStyles'\n})\nexport class IgxGridCellStylesPipe implements PipeTransform {\n\n    transform(cssClasses: any, _value: any, data: any, field: string): string {\n        if (!cssClasses) {\n            return '';\n        }\n\n        const result = [];\n\n        Object.entries(cssClasses).forEach(([cssClass, callbackOrValue]) => {\n            const apply = typeof callbackOrValue === 'function' ? callbackOrValue(data, field) : callbackOrValue;\n            if (apply) {\n                result.push(cssClass);\n            }\n        });\n\n        return result.join(' ');\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxNotGrouped'\n})\nexport class IgxGridNotGroupedPipe implements PipeTransform {\n\n    transform(value: any[]): any[] {\n        return value.filter(item => !item.columnGroup);\n    }\n}\n\n@Pipe({\n    name: 'igxTopLevel'\n})\nexport class IgxGridTopLevelColumns implements PipeTransform {\n\n    transform(value: any[]): any[] {\n        return value.filter(item => item.level === 0);\n    }\n}\n/**\n *@hidden\n */\n@Pipe({\n    name: 'filterCondition',\n    pure: true\n})\nexport class IgxGridFilterConditionPipe implements PipeTransform {\n\n    public transform(value: string): string {\n        return value.split(/(?=[A-Z])/).join(' ');\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'gridTransaction',\n    pure: true\n})\nexport class IgxGridTransactionPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    transform(collection: any[], id: string, pipeTrigger: number) {\n        const grid: IgxGridBaseComponent = this.gridAPI.grid;\n\n        if (collection && grid.transactions.enabled) {\n            const result = DataUtil.mergeTransactions(\n                cloneArray(collection),\n                grid.transactions.getAggregatedChanges(true),\n                grid.primaryKey);\n            return result;\n        }\n        return collection;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IgxDatePipeComponent, IgxDecimalPipeComponent } from './grid.common';\nimport {\n    IgxGridFilterConditionPipe,\n    IgxGridTransactionPipe,\n    IgxGridNotGroupedPipe,\n    IgxGridTopLevelColumns,\n    IgxGridCellStylesPipe\n} from './grid-common.pipes';\n\n@NgModule({\n    declarations: [\n        IgxDatePipeComponent,\n        IgxDecimalPipeComponent,\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxGridNotGroupedPipe,\n        IgxGridTopLevelColumns,\n        IgxGridCellStylesPipe\n    ],\n    exports: [\n        IgxDatePipeComponent,\n        IgxDecimalPipeComponent,\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxGridNotGroupedPipe,\n        IgxGridTopLevelColumns,\n        IgxGridCellStylesPipe\n    ],\n    imports: [\n        CommonModule\n    ]\n  })\nexport class IgxGridPipesModule { }\n","import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from '../../column.component';\nimport { IgxGridBaseComponent } from '../../grid-base.component';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-column-moving',\n    templateUrl: './excel-style-column-moving.component.html'\n})\nexport class IgxExcelStyleColumnMovingComponent {\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public grid: IgxGridBaseComponent;\n\n    constructor() {}\n\n    private get visibleColumns() {\n        return this.grid.visibleColumns.filter(col => !(col instanceof IgxColumnGroupComponent));\n    }\n\n    get canNotMoveLeft() {\n        return this.column.visibleIndex === 0 ||\n            (this.grid.unpinnedColumns.indexOf(this.column) === 0 && this.column.disablePinning) ||\n            (this.column.level !== 0 && !this.findColumn(0, this.visibleColumns));\n    }\n\n    get canNotMoveRight() {\n        return this.column.visibleIndex === this.visibleColumns.length - 1 ||\n            (this.column.level !== 0 && !this.findColumn(1, this.visibleColumns));\n    }\n\n    public onMoveButtonClicked(moveDirection) {\n        let targetColumn;\n        if (this.column.pinned) {\n            if (this.column.isLastPinned && moveDirection === 1) {\n                targetColumn = this.grid.unpinnedColumns[0];\n                moveDirection = 0;\n            } else {\n                targetColumn = this.findColumn(moveDirection, this.grid.pinnedColumns);\n            }\n        } else if (this.grid.unpinnedColumns.indexOf(this.column) === 0 && moveDirection === 0) {\n            targetColumn = this.grid.pinnedColumns[this.grid.pinnedColumns.length - 1];\n            moveDirection = 1;\n        } else {\n            targetColumn = this.findColumn(moveDirection, this.grid.unpinnedColumns);\n        }\n        this.grid.moveColumn(this.column, targetColumn, moveDirection);\n    }\n\n    private findColumn(moveDirection: number, columns: IgxColumnComponent[]) {\n        let index = columns.indexOf(this.column);\n        if (moveDirection === 0) {\n            while (index > 0) {\n                index--;\n                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {\n                    return columns[index];\n                }\n            }\n        } else {\n            while (index < columns.length - 1) {\n                index++;\n                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {\n                    return columns[index];\n                }\n            }\n        }\n    }\n}\n","import { Directive, TemplateRef, EventEmitter, QueryList } from '@angular/core';\n\nexport interface IListChild {\n    index: number;\n}\n\n/** @hidden */\nexport abstract class IgxListBase {\n    onItemClicked: EventEmitter<any>;\n    allowLeftPanning: boolean;\n    allowRightPanning: boolean;\n    panEndTriggeringThreshold: number;\n    onLeftPan: EventEmitter<any>;\n    onRightPan: EventEmitter<any>;\n    onPanStateChange: EventEmitter<any>;\n    children: QueryList<any>;\n    listItemLeftPanningTemplate: IgxListItemLeftPanningTemplateDirective;\n    listItemRightPanningTemplate: IgxListItemRightPanningTemplateDirective;\n}\n\nexport enum IgxListPanState { NONE, LEFT, RIGHT }\n\n@Directive({\n    selector: '[igxEmptyList]'\n})\nexport class IgxEmptyListTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxDataLoading]'\n})\nexport class IgxDataLoadingTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemLeftPanning]'\n})\nexport class IgxListItemLeftPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemRightPanning]'\n})\nexport class IgxListItemRightPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    Renderer2,\n    ViewChild\n} from '@angular/core';\n\nimport {\n    IgxListPanState,\n    IListChild,\n    IgxListBase\n} from './list.common';\n\nimport { HammerGesturesManager } from '../core/touch';\n\n// ====================== ITEM ================================\n// The `<igx-item>` component is a container intended for row items in\n// a `<igx-list>` container.\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-list-item',\n    templateUrl: 'list-item.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IgxListItemComponent implements IListChild {\n\n    /**\n     *@hidden\n     */\n    private _panState: IgxListPanState = IgxListPanState.NONE;\n\n    /**\n     *@hidden\n     */\n    private panOffset = 0;\n\n    /**\n     * @hidden\n     */\n    private _index: number = null;\n\n    /**\n     *@hidden\n     */\n    private lastPanDir = IgxListPanState.NONE;\n\n    /**\n     * Provides a reference to the template's base element shown when left panning a list item.\n     * ```typescript\n     * const leftPanTmpl = this.listItem.leftPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('leftPanningTmpl')\n    public leftPanningTemplateElement;\n\n    /**\n     * Provides a reference to the template's base element shown when right panning a list item.\n     * ```typescript\n     * const rightPanTmpl = this.listItem.rightPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('rightPanningTmpl')\n    public rightPanningTemplateElement;\n\n    constructor(\n        public list: IgxListBase,\n        private elementRef: ElementRef,\n        private _renderer: Renderer2) {\n    }\n\n    /**\n     * Sets/gets whether the `list item` is a header.\n     * ```html\n     * <igx-list-item [isHeader] = \"true\">Header</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHeader =  this.listItem.isHeader;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public isHeader: boolean;\n\n    /**\n     * Sets/gets whether the `list item` is hidden.\n     * By default the `hidden` value is `false`.\n     * ```html\n     * <igx-list-item [hidden] = \"true\">Hidden Item</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHidden =  this.listItem.hidden;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public hidden = false;\n\n    /**\n     * Gets the `role` attribute of the `list item`.\n     * ```typescript\n     * let itemRole =  this.listItem.role;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return this.isHeader ? 'separator' : 'listitem';\n    }\n\n    /**\n     * Sets/gets the `aria-label` attribute of the `list item`.\n     * ```typescript\n     * this.listItem.ariaLabel = \"Item1\";\n     * ```\n     * ```typescript\n     * let itemAriaLabel = this.listItem.ariaLabel;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel: string;\n\n    /**\n     * Gets the `touch-action` style of the `list item`.\n     * ```typescript\n     * let touchAction = this.listItem.touchAction;\n     * ```\n     */\n    @HostBinding('style.touch-action')\n    public touchAction = 'pan-y';\n\n    /**\n     * Indicates whether `list item` should have header style.\n     * ```typescript\n     * let headerStyle =  this.listItem.headerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__header')\n    get headerStyle(): boolean {\n        return this.isHeader;\n    }\n\n    /**\n     * Applies the inner style of the `list item` if the item is not counted as header.\n     * ```typescript\n     * let innerStyle =  this.listItem.innerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__item-base')\n    get innerStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * Returns string value which describes the display mode of the `list item`.\n     * ```typescript\n     * let isHidden = this.listItem.display;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('style.display')\n    get display(): string {\n        return this.hidden ? 'none' : '';\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    clicked(evt) {\n        this.list.onItemClicked.emit({ item: this, event: evt, direction: this.lastPanDir });\n        this.lastPanDir = IgxListPanState.NONE;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panstart', ['$event'])\n    panStart(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panmove', ['$event'])\n    panMove(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n        const isPanningToLeft = ev.deltaX < 0;\n        if (isPanningToLeft && this.isTrue(this.list.allowLeftPanning)) {\n            this.showLeftPanTemplate();\n            this.setContentElementLeft(Math.max(this.maxLeft, ev.deltaX));\n        } else if (!isPanningToLeft && this.isTrue(this.list.allowRightPanning)) {\n            this.showRightPanTemplate();\n            this.setContentElementLeft(Math.min(this.maxRight, ev.deltaX));\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panend', ['$event'])\n    panEnd(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n\n        // the translation offset of the current list item content\n        const relativeOffset = this.panOffset;\n        const widthTriggeringGrip = this.width * this.list.panEndTriggeringThreshold;\n\n        if (relativeOffset === 0) {\n            return; // no panning has occured\n        }\n\n        const dir = relativeOffset > 0 ? IgxListPanState.RIGHT : IgxListPanState.LEFT;\n        this.lastPanDir = dir;\n\n        const oldPanState = this._panState;\n        if (Math.abs(relativeOffset) < widthTriggeringGrip) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n            this.hideLeftAndRightPanTemplates();\n            return;\n        }\n\n        const args = { item: this, direction: dir, keepItem: false};\n\n        if (dir === IgxListPanState.LEFT) {\n            this.list.onLeftPan.emit(args);\n        } else {\n            this.list.onRightPan.emit(args);\n        }\n\n        if (args.keepItem === true) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n        } else {\n            if (dir === IgxListPanState.LEFT) {\n                this.setContentElementLeft(this.maxLeft);\n                this._panState = IgxListPanState.LEFT;\n            } else {\n                this.setContentElementLeft(this.maxRight);\n                this._panState = IgxListPanState.RIGHT;\n            }\n        }\n\n        if (oldPanState !== this._panState) {\n            const args2 = { oldState: oldPanState, newState: this._panState, item: this };\n            this.list.onPanStateChange.emit(args2);\n        }\n        this.hideLeftAndRightPanTemplates();\n    }\n\n    /**\n     *@hidden\n     */\n    private showLeftPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('visible', 'hidden');\n    }\n\n    /**\n     *@hidden\n     */\n    private showRightPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('hidden', 'visible');\n    }\n\n    /**\n     *@hidden\n     */\n    private hideLeftAndRightPanTemplates() {\n        setTimeout(() => {\n            this.setLeftAndRightTemplatesVisibility('hidden', 'hidden');\n        }, 500);\n    }\n\n    /**\n     *@hidden\n     */\n    private setLeftAndRightTemplatesVisibility(leftVisibility, rightVisibility) {\n        if (this.leftPanningTemplateElement && this.leftPanningTemplateElement.nativeElement) {\n            this.leftPanningTemplateElement.nativeElement.style.visibility = leftVisibility;\n        }\n        if (this.rightPanningTemplateElement && this.rightPanningTemplateElement.nativeElement) {\n            this.rightPanningTemplateElement.nativeElement.style.visibility = rightVisibility;\n        }\n    }\n\n    /**\n     * Gets the `panState` of a `list item`.\n     * ```typescript\n     * let itemPanState =  this.listItem.panState;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get panState(): IgxListPanState {\n        return this._panState;\n    }\n\n    /**\n     * Gets the `index` of a `list item`.\n     * ```typescript\n     * let itemIndex =  this.listItem.index;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public get index(): number {\n        return this._index !== null ? this._index : this.list.children.toArray().indexOf(this);\n    }\n\n    /**\n     * Sets the `index` of the `list item`.\n     * ```typescript\n     * this.listItem.index = index;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public set index(value: number) {\n        this._index = value;\n    }\n\n    /**\n     * Returns an element reference to the list item.\n     * ```typescript\n     * let listItemElement =  this.listItem.element.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Returns a reference container which contains the list item's content.\n     * ```typescript\n     * let listItemContainer =  this.listItem.contentElement.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get contentElement() {\n        const candidates = this.element.getElementsByClassName('igx-list__item-content');\n        return (candidates && candidates.length > 0) ? candidates[0] : null;\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the `list item container`\n     * by providing the `$implicit` declaration which is the `IgxListItemComponent` itself.\n     * ```typescript\n     * let listItemComponent = this.listItem.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Gets the width of a `list item`.\n     * ```typescript\n     * let itemWidth = this.listItem.width;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get width() {\n        if (this.element) {\n            return this.element.offsetWidth;\n        }\n    }\n\n    /**\n     * Gets the maximum left position of the `list item`.\n     * ```typescript\n     * let maxLeft = this.listItem.maxLeft;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxLeft() {\n        return -this.width;\n    }\n\n    /**\n     * Gets the maximum right position of the `list item`.\n     * ```typescript\n     * let maxRight = this.listItem.maxRight;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxRight() {\n        return this.width;\n    }\n\n    /**\n     *@hidden\n     */\n    private setContentElementLeft(value: number) {\n        this.panOffset = value;\n        this.contentElement.style.transform = 'translateX(' + value + 'px)';\n    }\n\n    /**\n     *@hidden\n     */\n    private isTrue(value: boolean): boolean {\n        if (typeof (value) === 'boolean') {\n            return value;\n        } else {\n            return value === 'true';\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\n\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\n\nimport { IgxListItemComponent } from './list-item.component';\nimport {\n    IgxListBase,\n    IgxDataLoadingTemplateDirective,\n    IgxEmptyListTemplateDirective,\n    IgxListPanState,\n    IgxListItemLeftPanningTemplateDirective,\n    IgxListItemRightPanningTemplateDirective} from './list.common';\n\nlet NEXT_ID = 0;\nexport interface IPanStateChangeEventArgs {\n    oldState: IgxListPanState;\n    newState: IgxListPanState;\n    item: IgxListItemComponent;\n}\n\nexport interface IListItemClickEventArgs {\n    item: IgxListItemComponent;\n    event: Event;\n    direction: IgxListPanState;\n}\n\nexport interface IListItemPanningEventArgs {\n    item: IgxListItemComponent;\n    direction: IgxListPanState;\n    keepItem: boolean;\n}\n\n/**\n * **Ignite UI for Angular List** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/list.html)\n *\n * The Ignite UI List displays rows of items and supports one or more header items as well as search and filtering\n * of list items. Each list item is completely templateable and will support any valid HTML or Angular component.\n *\n * Example:\n * ```html\n * <igx-list>\n *   <igx-list-item isHeader=\"true\">Contacts</igx-list-item>\n *   <igx-list-item *ngFor=\"let contact of contacts\">\n *     <span class=\"name\">{{ contact.name }}</span>\n *     <span class=\"phone\">{{ contact.phone }}</span>\n *   </igx-list-item>\n * </igx-list>\n * ```\n */\n@Component({\n    selector: 'igx-list',\n    templateUrl: 'list.component.html',\n    providers: [{ provide: IgxListBase, useExisting: IgxListComponent }]\n})\nexport class IgxListComponent implements IgxListBase {\n\n    constructor(public element: ElementRef) {\n    }\n\n    /**\n     * Returns a collection of all items and headers in the list.\n     * ```typescript\n     * let listChildren: QueryList = this.list.children;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChildren(forwardRef(() => IgxListItemComponent))\n    public children: QueryList<IgxListItemComponent>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected get sortedChildren(): IgxListItemComponent[] {\n        if (this.children !== undefined) {\n            return this.children.toArray()\n                .sort((a: IgxListItemComponent, b: IgxListItemComponent) => {\n                    return a.index - b.index;\n                });\n        }\n        return null;\n    }\n\n    /**\n     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `false`.\n     * ```typescript\n     * let emptyTemplate = this.list.emptyListTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxEmptyListTemplateDirective, { read: IgxEmptyListTemplateDirective })\n    public emptyListTemplate: IgxEmptyListTemplateDirective;\n\n    /**\n     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `true`.\n     * ```typescript\n     * let loadingTemplate = this.list.dataLoadingTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxDataLoadingTemplateDirective, { read: IgxDataLoadingTemplateDirective })\n    public dataLoadingTemplate: IgxDataLoadingTemplateDirective;\n\n    /**\n     * Sets/gets the template shown when left panning a list item.\n     * Default value is `null`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let itemLeftPanTmpl = this.list.listItemLeftPanningTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxListItemLeftPanningTemplateDirective, { read: IgxListItemLeftPanningTemplateDirective })\n    public listItemLeftPanningTemplate: IgxListItemLeftPanningTemplateDirective;\n\n    /**\n     * Sets/gets the template shown when right panning a list item.\n     * Default value is `null`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let itemRightPanTmpl = this.list.listItemRightPanningTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxListItemRightPanningTemplateDirective, { read: IgxListItemRightPanningTemplateDirective })\n    public listItemRightPanningTemplate: IgxListItemRightPanningTemplateDirective;\n\n    /**\n     * Provides a threshold after which the item's panning will be completed automatically.\n     * By default this property is set to 0.5 which is 50% of the list item's width.\n     * ```typescript\n     * this.list.panEndTriggeringThreshold = 0.8;\n     * ```\n     */\n    @Input()\n    public panEndTriggeringThreshold = 0.5;\n\n    /**@hidden*/\n    @ViewChild('defaultEmptyList', { read: TemplateRef })\n    protected defaultEmptyListTemplate: TemplateRef<any>;\n\n    /**@hidden*/\n    @ViewChild('defaultDataLoading', { read: TemplateRef })\n    protected defaultDataLoadingTemplate: TemplateRef<any>;\n\n    /**\n     * Sets/gets the `id` of the list.\n     * If not set, the `id` of the first list component will be `\"igx-list-0\"`.\n     * ```html\n     * <igx-list id = \"my-first-list\"></igx-list>\n     * ```\n     * ```typescript\n     * let listId =  this.list.id;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-list-${NEXT_ID++}`;\n\n    /**\n     * Sets/gets whether the left panning of an item is allowed.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLeftPanningAllowed = this.list.allowLeftPanning;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public allowLeftPanning = false;\n\n    /**\n     * Sets/gets whether the right panning of an item is allowed.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [allowRightPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isRightPanningAllowed = this.list.allowRightPanning;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public allowRightPanning = false;\n\n    /**\n     * Sets/gets whether the list is currently loading data.\n     * Set it to display the dataLoadingTemplate while data is being retrieved.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [isLoading]=\"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLoading = this.list.isLoading;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public isLoading = false;\n\n    /**\n     * Emits an event within the current list when left pan gesture is executed on a list item.\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     * ```html\n     * <igx-list [allowLeftPanning]=\"true\" (onLeftPan)=\"onLeftPan($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onLeftPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n     * Emits an event within the current list when right pan gesture is executed on a list item.\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     * ```html\n     * <igx-list [allowRightPanning]=\"true\" (onRightPan)=\"onRightPan($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onRightPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n    * Emits an event within the current list when pan gesture is executed on list item.\n    * Provides references to the `IgxListItemComponent` and `IgxListPanState` as event arguments.\n    * ```html\n    * <igx-list (onPanStateChange) = \"onPanStateChange($event)\"></igx-list>\n    * ```\n    * @memberof IgxListComponent\n    */\n    @Output()\n    public onPanStateChange = new EventEmitter<IPanStateChangeEventArgs>();\n\n    /**\n     * Emits an event within the current list when a list item has been clicked.\n     * Provides references to the `IgxListItemComponent` and `Event` as event arguments.\n     *  ```html\n     * <igx-list (onItemClicked) = \"onItemClicked($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onItemClicked = new EventEmitter<IListItemClickEventArgs>();\n\n    /**\n     * Gets the `role` attribute.\n     * ```typescript\n     * let listRole =  this.list.role;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'list';\n    }\n\n    /**\n     * Returns boolean indicating if the list is empty.\n     * ```typescript\n     * let isEmpty =  this.list.isListEmpty;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('class.igx-list-empty')\n    public get isListEmpty(): boolean {\n        return !this.children || this.children.length === 0;\n    }\n\n    /**\n     * Returns boolean indicating if the list has a `cssClass` attribute.\n     * ```typescript\n     * let hasCssClass =  this.list.cssClass;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('class.igx-list')\n    public get cssClass(): boolean {\n        return this.children && this.children.length > 0;\n    }\n\n    /**\n     * Returns the `items` in the list excluding the headers.\n     * ```typescript\n     * let listItems: IgxListItemComponent[] = this.list.items;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get items(): IgxListItemComponent[] {\n        const items: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.sortedChildren) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n        return items;\n    }\n\n    /**\n     * Returns the headers in the list.\n     * ```typescript\n     * let listHeaders: IgxListItemComponent[] =  this.list.headers;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get headers(): IgxListItemComponent[] {\n        const headers: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n        return headers;\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the `list container`\n     * by providing the `$implicit` declaration which is the `IgxListComponent` itself.\n     * ```typescript\n     * let listComponent =  this.list.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Returns the `template` of an empty list.\n     * ```typescript\n     * let listTemplate = this.list.template;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get template(): TemplateRef<any> {\n        if (this.isLoading) {\n            return this.dataLoadingTemplate ? this.dataLoadingTemplate.template : this.defaultDataLoadingTemplate;\n        } else {\n            return this.emptyListTemplate ? this.emptyListTemplate.template : this.defaultEmptyListTemplate;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxListComponent, IgxListItemComponent,\n        IgxDataLoadingTemplateDirective, IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective, IgxListItemRightPanningTemplateDirective],\n    exports: [IgxListComponent, IgxListItemComponent,\n        IgxDataLoadingTemplateDirective, IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective, IgxListItemRightPanningTemplateDirective],\n    imports: [CommonModule, IgxRippleModule]\n})\nexport class IgxListModule {\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { FilterListItem } from './grid.excel-style-filtering.component';\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'excelStyleSearchFilter'\n})\nexport class IgxExcelStyleSearchFilterPipe implements PipeTransform {\n    transform(items: FilterListItem[], searchText: string): any[] {\n        if (!items || !items.length) {\n            return [];\n        }\n\n        if (!searchText) {\n            return items;\n        }\n\n        searchText = searchText.toLowerCase();\n        const result = items.filter((it, i) => (i === 0 && it.isSpecial) ||\n            (it.value || it.value === 0) &&\n            it.value.toString().toLowerCase().indexOf(searchText) > -1);\n\n        return result.length > 1 ? result : [];\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n    IgxGridExcelStyleFilteringComponent,\n    IgxExcelStyleSortingTemplateDirective,\n    IgxExcelStyleHidingTemplateDirective,\n    IgxExcelStyleMovingTemplateDirective,\n    IgxExcelStylePinningTemplateDirective\n} from './grid.excel-style-filtering.component';\nimport { IgxExcelStyleSortingComponent } from './excel-style-sorting.component';\nimport { IgxExcelStyleColumnMovingComponent } from './excel-style-column-moving.component';\nimport { IgxExcelStyleSearchComponent } from './excel-style-search.component';\nimport { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';\nimport { IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { IgxExcelStyleDateExpressionComponent } from './excel-style-date-expression.component';\nimport { IgxSelectionAPIService } from '../../../core/selection';\nimport { FormsModule } from '@angular/forms';\nimport { IgxGridPipesModule } from '../../grid-pipes.module';\nimport { IgxButtonModule } from '../../../directives/button/button.directive';\nimport { IgxButtonGroupModule } from '../../../buttonGroup/buttonGroup.component';\nimport { IgxDatePickerModule } from '../../../date-picker/date-picker.component';\nimport { IgxIconModule } from '../../../icon/index';\nimport { IgxRippleModule } from '../../../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../../../input-group/input-group.component';\nimport { IgxDropDownModule } from '../../../drop-down/index';\nimport { IgxForOfModule } from '../../../directives/for-of/for_of.directive';\nimport { IgxCheckboxModule } from '../../../checkbox/checkbox.component';\nimport { IgxFilterModule } from '../../../directives/filter/filter.directive';\nimport { IgxToggleModule } from '../../../directives/toggle/toggle.directive';\nimport { IgxListModule } from '../../../list/list.component';\nimport { IgxExcelStyleSearchFilterPipe } from './excel-style-search.pipe';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxGridExcelStyleFilteringComponent,\n        IgxExcelStyleSortingComponent,\n        IgxExcelStyleColumnMovingComponent,\n        IgxExcelStyleSearchComponent,\n        IgxExcelStyleCustomDialogComponent,\n        IgxExcelStyleDefaultExpressionComponent,\n        IgxExcelStyleDateExpressionComponent,\n        IgxExcelStyleSortingTemplateDirective,\n        IgxExcelStyleHidingTemplateDirective,\n        IgxExcelStyleMovingTemplateDirective,\n        IgxExcelStylePinningTemplateDirective,\n        IgxExcelStyleSearchFilterPipe\n    ],\n    exports: [\n        IgxGridExcelStyleFilteringComponent,\n        IgxExcelStyleSortingTemplateDirective,\n        IgxExcelStyleHidingTemplateDirective,\n        IgxExcelStyleMovingTemplateDirective,\n        IgxExcelStylePinningTemplateDirective,\n        IgxExcelStyleDateExpressionComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        IgxGridPipesModule,\n        IgxButtonModule,\n        IgxButtonGroupModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxDropDownModule,\n        IgxForOfModule,\n        IgxCheckboxModule,\n        IgxFilterModule,\n        IgxToggleModule,\n        IgxListModule\n    ],\n    entryComponents: [\n        IgxGridExcelStyleFilteringComponent\n    ],\n    providers: [\n        IgxSelectionAPIService\n    ]\n})\nexport class IgxGridExcelStyleFilteringModule {\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxDatePickerModule } from '../date-picker/date-picker.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxFocusModule } from '../directives/focus/focus.directive';\nimport { IgxForOfModule } from '../directives/for-of/for_of.directive';\nimport { IgxTemplateOutletModule } from '../directives/template-outlet/template_outlet.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxTextHighlightModule } from '../directives/text-highlight/text-highlight.directive';\nimport { IgxTextSelectionModule } from '../directives/text-selection/text-selection.directive';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxDropDownModule } from '../drop-down/index';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from './column.component';\nimport { IgxColumnHidingModule } from './column-hiding.component';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxGridToolbarComponent } from './grid-toolbar.component';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { IgxGridFilteringRowComponent } from './filtering/grid-filtering-row.component';\nimport {\n    IgxCellEditorTemplateDirective,\n    IgxCellFooterTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellTemplateDirective,\n    IgxColumnResizerDirective,\n    IgxColumnMovingDragDirective,\n    IgxColumnMovingDropDirective,\n    IgxGridBodyDirective,\n    IgxColumnMovingService,\n    IgxFilterCellTemplateDirective,\n    IgxResizeHandleDirective\n} from './grid.common';\nimport { IgxGridTransaction } from './grid-base.component';\nimport { IgxRowComponent } from './row.component';\nimport { IgxChipsModule } from '../chips/chips.module';\nimport { IgxDragDropModule } from '../directives/dragdrop/dragdrop.directive';\nimport { IgxButtonGroupModule } from '../buttonGroup/buttonGroup.component';\nimport { IgxColumnPinningModule } from './column-pinning.component';\nimport { IgxBaseTransactionService } from '../services/transaction/base-transaction';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditActionsDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditTabStopDirective\n} from './grid.rowEdit.directive';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxGridToolbarCustomContentDirective } from './grid-toolbar.component';\nimport { IgxSummaryRowComponent } from './summaries/summary-row.component';\nimport { IgxSummaryCellComponent } from './summaries/summary-cell.component';\nimport { IgxSummaryDataPipe } from './summaries/grid-root-summary.pipe';\nimport { IgxGridSelectionService } from '../core/grid-selection';\nimport { IgxGridSummaryService } from './summaries/grid-summary.service';\nimport { IgxProgressBarModule } from '../progressbar/progressbar.component';\nimport { IgxFilterModule } from '../directives/filter/filter.directive';\nimport { IgxGridPipesModule } from './grid-pipes.module';\nimport { IgxGridExcelStyleFilteringModule } from './filtering/excel-style/grid.excel-style-filtering.module';\nimport { IgxGridDragSelectDirective } from './drag-select.directive';\nimport { IgxGridColumnResizerComponent } from './grid-column-resizer.component';\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxGridCellComponent,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxGridHeaderComponent,\n        IgxGridToolbarComponent,\n        IgxGridToolbarCustomContentDirective,\n        IgxCellFooterTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxColumnResizerDirective,\n        IgxResizeHandleDirective,\n        IgxColumnMovingDragDirective,\n        IgxColumnMovingDropDirective,\n        IgxGridBodyDirective,\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent,\n        IgxSummaryDataPipe,\n        IgxRowComponent,\n        IgxGridHeaderGroupComponent,\n        IgxSummaryRowComponent,\n        IgxSummaryCellComponent,\n        IgxGridDragSelectDirective,\n        IgxGridColumnResizerComponent,\n        IgxFilterCellTemplateDirective\n    ],\n    entryComponents: [\n        IgxColumnComponent,\n        IgxColumnGroupComponent\n    ],\n    exports: [\n        IgxGridCellComponent,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxGridHeaderComponent,\n        IgxGridToolbarComponent,\n        IgxGridToolbarCustomContentDirective,\n        IgxCellFooterTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxColumnResizerDirective,\n        IgxColumnMovingDragDirective,\n        IgxColumnMovingDropDirective,\n        IgxGridBodyDirective,\n        IgxRowComponent,\n        IgxSummaryDataPipe,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxFocusModule,\n        IgxTextHighlightModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxColumnHidingModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxColumnPinningModule,\n        IgxProgressBarModule,\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent,\n        IgxGridHeaderGroupComponent,\n        IgxSummaryRowComponent,\n        IgxSummaryCellComponent,\n        IgxGridDragSelectDirective,\n        IgxGridColumnResizerComponent,\n        IgxFilterModule,\n        IgxGridPipesModule,\n        IgxGridExcelStyleFilteringModule,\n        IgxFilterCellTemplateDirective\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxFocusModule,\n        IgxTextHighlightModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxColumnHidingModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxColumnPinningModule,\n        IgxProgressBarModule,\n        IgxFilterModule,\n        IgxGridPipesModule,\n        IgxGridExcelStyleFilteringModule\n    ],\n    providers: [\n        IgxGridSelectionService,\n        IgxSelectionAPIService,\n        IgxColumnMovingService,\n        IgxGridNavigationService,\n        IgxColumnResizingService,\n        IgxGridSummaryService,\n        { provide: IgxGridTransaction, useClass: IgxBaseTransactionService }\n    ]\n})\nexport class IgxGridCommonModule { }\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxGridComponent } from './grid.component';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray } from '../../core/utils';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\n\nexport class IgxGridAPIService extends GridBaseAPIService<IgxGridComponent> {\n\n    public groupBy(expression: IGroupingExpression): void {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n        this.prepare_sorting_expression([sortingState, groupingState], expression);\n        this.grid.groupingExpressions = groupingState;\n        this.arrange_sorting_expressions();\n    }\n\n    public groupBy_multiple(expressions: IGroupingExpression[]): void {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        for (const each of expressions) {\n            this.prepare_sorting_expression([sortingState, groupingState], each);\n        }\n\n        this.grid.groupingExpressions = groupingState;\n        this.arrange_sorting_expressions();\n    }\n\n    public clear_groupby(name?: string | Array<string>) {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        if (name) {\n            const names = typeof name === 'string' ? [ name ] : name;\n            const groupedCols = groupingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            const newSortingExpr = sortingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            this.grid.groupingExpressions = groupedCols;\n            this.grid.sortingExpressions = newSortingExpr;\n            names.forEach((colName) => {\n                const grExprIndex = groupingState.findIndex((exp) => exp.fieldName === colName);\n                const grpExpandState = this.grid.groupingExpansionState;\n                /* remove expansion states related to the cleared group\n                and all with deeper hierarchy than the cleared group */\n                this.grid.groupingExpansionState = grpExpandState\n                    .filter((val) => {\n                        return val.hierarchy && val.hierarchy.length <= grExprIndex;\n                    });\n            });\n        } else {\n            // clear all\n            this.grid.groupingExpressions = [];\n            this.grid.groupingExpansionState = [];\n            for (const grExpr of groupingState) {\n                const sortExprIndex = sortingState.findIndex((exp) => exp.fieldName === grExpr.fieldName);\n                if (sortExprIndex > -1) {\n                    sortingState.splice(sortExprIndex, 1);\n                }\n            }\n            this.grid.sortingExpressions = sortingState;\n        }\n    }\n\n    public groupBy_get_expanded_for_group(groupRow: IGroupByRecord): IGroupByExpandState {\n        const grState = this.grid.groupingExpansionState;\n        const hierarchy = DataUtil.getHierarchy(groupRow);\n        return grState.find((state) =>\n            DataUtil.isHierarchyMatch(state.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy));\n    }\n\n    public groupBy_is_row_in_group(groupRow: IGroupByRecord, rowID): boolean {\n        const grid = this.grid;\n        let rowInGroup = false;\n        groupRow.records.forEach(row => {\n            if (grid.primaryKey ? row[grid.primaryKey] === rowID : row === rowID) {\n                rowInGroup = true;\n            }\n        });\n        return rowInGroup;\n    }\n\n    public groupBy_toggle_group(groupRow: IGroupByRecord) {\n        const grid = this.grid;\n        const expansionState = grid.groupingExpansionState;\n        let toggleRowEditingOverlay: boolean;\n        let isEditRowInGroup = false;\n        if (grid.rowEditable) {\n            const rowState = this.grid.crudService.row;\n\n            // Toggle only row editing overlays that are inside current expanded/collapsed group.\n            isEditRowInGroup = rowState ? this.groupBy_is_row_in_group(groupRow, rowState.id) : false;\n        }\n        const state: IGroupByExpandState = this.groupBy_get_expanded_for_group(groupRow);\n        if (state) {\n            state.expanded = !state.expanded;\n            if (isEditRowInGroup) {\n                toggleRowEditingOverlay = state.expanded;\n            }\n        } else {\n            expansionState.push({\n                expanded: !grid.groupsExpanded,\n                hierarchy: DataUtil.getHierarchy(groupRow)\n            });\n            if (isEditRowInGroup) {\n                toggleRowEditingOverlay = false;\n            }\n        }\n        this.grid.groupingExpansionState = expansionState;\n        if (grid.rowEditable) {\n            grid.repositionRowEditingOverlay(grid.rowInEditMode);\n        }\n    }\n\n    protected remove_grouping_expression(fieldName) {\n        const groupingExpressions = this.grid.groupingExpressions;\n        const index = groupingExpressions.findIndex((expr) => expr.fieldName === fieldName);\n        if (index !== -1) {\n            groupingExpressions.splice(index, 1);\n        }\n    }\n\n    public arrange_sorting_expressions() {\n        const groupingState = this.grid.groupingExpressions;\n        this.grid.sortingExpressions.sort((a, b) => {\n            const groupExprA = groupingState.find((expr) => expr.fieldName === a.fieldName);\n            const groupExprB = groupingState.find((expr) => expr.fieldName === b.fieldName);\n            if (groupExprA && groupExprB) {\n                return groupingState.indexOf(groupExprA) > groupingState.indexOf(groupExprB) ? 1 : -1;\n            } else if (groupExprA) {\n                return -1;\n            } else if (groupExprB) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n    }\n\n    public get_groupBy_record_id(gRow: IGroupByRecord): string {\n        let recordId = '{ ';\n        const hierrarchy = DataUtil.getHierarchy(gRow);\n\n        for (let i = 0; i < hierrarchy.length; i++) {\n            const groupByKey = hierrarchy[i];\n            recordId += `'${groupByKey.fieldName}': '${groupByKey.value}'`;\n\n            if (i < hierrarchy.length - 1) {\n                recordId += ', ';\n            }\n        }\n        recordId += ' }';\n\n        return recordId;\n    }\n\n}\n","import { Directive, ElementRef, Renderer2, NgZone, HostBinding, TemplateRef } from '@angular/core';\nimport { IgxDropDirective } from '../../directives/dragdrop/dragdrop.directive';\nimport { IgxColumnMovingDragDirective } from '../grid.common';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxGridComponent } from './grid.component';\nimport { SortingDirection } from '../../data-operations/sorting-expression.interface';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupByRow]'\n})\nexport class IgxGroupByRowTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupAreaDrop]'\n})\nexport class IgxGroupAreaDropDirective extends IgxDropDirective {\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone) {\n        super(elementRef, renderer, zone);\n    }\n\n    @HostBinding('class.igx-drop-area--hover')\n    public hovered = false;\n\n\n    public onDragEnter(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        const column: IgxColumnComponent = drag.column;\n        if (!this.columnBelongsToGrid(column)) {\n            return;\n        }\n        const grid = <IgxGridComponent>column.grid;\n        const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n        if (column.groupable && !isGrouped && !column.columnGroup) {\n            drag.icon.innerText = 'group_work';\n            this.hovered = true;\n        } else {\n            drag.icon.innerText = 'block';\n            this.hovered = false;\n        }\n    }\n\n    public onDragLeave(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        const column: IgxColumnComponent = drag.column;\n        if (!this.columnBelongsToGrid(column)) {\n            return;\n        }\n        event.detail.owner.icon.innerText = 'block';\n        this.hovered = false;\n    }\n\n    public onDragDrop(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        if (drag instanceof IgxColumnMovingDragDirective) {\n            const column: IgxColumnComponent = drag.column;\n            if (!this.columnBelongsToGrid(column)) {\n                return;\n            }\n            const grid = <IgxGridComponent>column.grid;\n            const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n            if (column.groupable && !isGrouped && !column.columnGroup) {\n                grid.groupBy({ fieldName: column.field, dir: SortingDirection.Asc, ignoreCase: column.sortingIgnoreCase,\n                    strategy: column.sortStrategy, groupingComparer: column.groupingComparer });\n            }\n        }\n    }\n\n    private closestParentByAttr(elem, attr) {\n        return elem.hasAttribute(attr) ?\n            elem :\n            this.closestParentByAttr(elem.parentElement, attr);\n    }\n\n    private columnBelongsToGrid(column) {\n        const elem = this.elementRef.nativeElement;\n        const closestGridID = this.closestParentByAttr(elem, 'igxGroupAreaDrop').getAttribute('gridId');\n        if (!column) {\n            return false;\n        } else {\n            const grid = <IgxGridComponent>column.grid;\n            if (!grid || grid.id !== closestGridID) {\n                return false;\n            }\n            return true;\n        }\n    }\n}\n","import {\n    Component, ChangeDetectionStrategy, Input, Output, EventEmitter, ContentChild, ViewChildren,\n    QueryList, ViewChild, ElementRef, TemplateRef, DoCheck, NgZone, ChangeDetectorRef, ComponentFactoryResolver,\n    IterableDiffers, ViewContainerRef, Inject, AfterContentInit, HostBinding, forwardRef, OnInit, Optional\n} from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IgxGridTransaction, IFocusChangeEventArgs, IGridDataBindable } from '../grid-base.component';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { cloneArray } from '../../core/utils';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IgxGroupByRowTemplateDirective } from './grid.directives';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IBaseChipEventArgs, IChipClickEventArgs, IChipKeyDownEventArgs } from '../../chips/chip.component';\nimport { IChipsAreaReorderEventArgs } from '../../chips/chips-area.component';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { TransactionService, Transaction, State } from '../../services/transaction/transaction';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxColumnComponent } from '../column.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxOverlayService } from '../../services/index';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\n\nlet NEXT_ID = 0;\n\nexport interface IGridFocusChangeEventArgs extends IFocusChangeEventArgs {\n    groupRow: IgxGridGroupByRowComponent;\n}\nexport interface IGroupingDoneEventArgs {\n    expressions: Array<ISortingExpression> | ISortingExpression;\n    groupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n    ungroupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n}\n\n/**\n * **Ignite UI for Angular Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html)\n *\n * The Ignite UI Grid is used for presenting and manipulating tabular data in the simplest way possible.  Once data\n * has been bound, it can be manipulated through filtering, sorting & editing operations.\n *\n * Example:\n * ```html\n * <igx-grid [data]=\"employeeData\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    providers: [IgxGridNavigationService, IgxGridSummaryService, IgxGridSelectionService, IgxGridCRUDService,\n        { provide: GridBaseAPIService, useClass: IgxGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxGridComponent) },\n        IgxFilteringService, IgxColumnResizingService, IgxForOfSyncService\n    ],\n    selector: 'igx-grid',\n    templateUrl: './grid.component.html'\n})\nexport class IgxGridComponent extends IgxGridBaseComponent implements IGridDataBindable, OnInit, DoCheck, AfterContentInit {\n    private _id = `igx-grid-${NEXT_ID++}`;\n    /**\n     * @hidden\n     */\n    protected _groupingExpressions: IGroupingExpression[] = [];\n    /**\n     * @hidden\n     */\n    protected _groupingExpandState: IGroupByExpandState[] = [];\n    /**\n     * @hidden\n     */\n    protected _groupRowTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected _groupAreaTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected groupingDiffer;\n    private _data;\n    private _hideGroupedColumns = false;\n    private _dropAreaMessage = null;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this._id = value;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxGridComponent` with an array of data.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridComponent\n    */\n    @Input()\n    public get data(): any[] {\n        return this._data;\n    }\n\n    public set data(value: any[]) {\n        this._data = value;\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n            this.reflow();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set filteredData(value) {\n        this._filteredData = value;\n\n        if (this.rowSelectable) {\n            this.updateHeaderCheckboxStatusOnFilter(this._filteredData);\n        }\n    }\n\n    /**\n     * Returns the state of the grid virtualization, including the start index and how many records are rendered.\n     * ```typescript\n     * const gridVirtState = this.grid1.virtualizationState;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get virtualizationState() {\n        return this.verticalScrollContainer.state;\n    }\n\n    /**\n     * @hidden\n     */\n    set virtualizationState(state) {\n        this.verticalScrollContainer.state = state;\n    }\n\n    /**\n     * Sets the total number of records in the data source.\n     * This property is required for remote grid virtualization to function when it is bound to remote data.\n     * ```typescript\n     * this.grid1.totalItemCount = 55;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set totalItemCount(count) {\n        this.verticalScrollContainer.totalItemCount = count;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns the total number of records in the data source.\n     * Works only with remote grid virtualization.\n     * ```typescript\n     * const itemCount = this.grid1.totalItemCount;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get totalItemCount() {\n        return this.verticalScrollContainer.totalItemCount;\n    }\n\n    private _gridAPI: IgxGridAPIService;\n    private _filteredData = null;\n\n    constructor(\n        selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        selection: IgxSelectionAPIService,\n        @Inject(IgxGridTransaction) _transactions: TransactionService<Transaction, State>,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(selectionService,\n                  crudService, gridAPI, selection, _transactions, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation,\n                  filteringService, overlayService, summaryService, _displayDensityOptions);\n            this._gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    /**\n     * Returns the group by state of the `IgxGridComponent`.\n     * ```typescript\n     * let groupByState = this.grid.groupingExpressions;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    get groupingExpressions(): IGroupingExpression[] {\n        return this._groupingExpressions;\n    }\n\n    /**\n     * Sets the group by state of the `IgxGridComponent` and emits the `onGroupingDone`\n     * event with the appropriate arguments.\n     * ```typescript\n     * this.grid.groupingExpressions = [{\n     *     fieldName: \"ID\",\n     *     dir: SortingDirection.Asc,\n     *     ignoreCase: false\n     * }];\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupingExpressions(value: IGroupingExpression[]) {\n        if (value && value.length > 10) {\n            throw Error('Maximum amount of grouped columns is 10.');\n        }\n        const oldExpressions: IGroupingExpression[] = this.groupingExpressions;\n        const newExpressions: IGroupingExpression[] = value;\n        this._groupingExpressions = cloneArray(value);\n        this.chipsGoupingExpressions = cloneArray(value);\n        if (this._gridAPI.grid) {\n            /* grouping should work in conjunction with sorting\n            and without overriding separate sorting expressions */\n            this._applyGrouping();\n            this._gridAPI.arrange_sorting_expressions();\n            this.cdr.markForCheck();\n        } else {\n            // setter called before grid is registered in grid API service\n            this.sortingExpressions.unshift.apply(this.sortingExpressions, this._groupingExpressions);\n        }\n        if (JSON.stringify(oldExpressions) !== JSON.stringify(newExpressions) && this.columnList) {\n            const groupedCols: IgxColumnComponent[] = [];\n            const ungroupedCols: IgxColumnComponent[] = [];\n            const groupedColsArr = newExpressions.filter((obj) => {\n                return !oldExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            groupedColsArr.forEach((elem) => {\n                groupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            const ungroupedColsArr = oldExpressions.filter((obj) => {\n                return !newExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            ungroupedColsArr.forEach((elem) => {\n                ungroupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            this.cdr.detectChanges();\n            const groupingDoneArgs: IGroupingDoneEventArgs = {\n                expressions: newExpressions,\n                groupedColumns: groupedCols,\n                ungroupedColumns: ungroupedCols\n            };\n            this.onGroupingDone.emit(groupingDoneArgs);\n        }\n    }\n\n    /**\n     * Returns a list of expansion states for group rows.\n     * Includes only states that differ from the default one (controlled through groupsExpanded and states that the user has changed.\n     * Contains the expansion state (expanded: boolean) and the unique identifier for the group row (Array).\n     * ```typescript\n     * const groupExpState = this.grid.groupingExpansionState;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    get groupingExpansionState() {\n        return this._groupingExpandState;\n    }\n\n    /**\n     * Sets a list of expansion states for group rows.\n     * ```typescript\n     *      this.grid.groupingExpansionState = [{\n     *      expanded: false,\n     *      hierarchy: [{ fieldName: 'ID', value: 1 }]\n     *   }];\n     * // You can use DataUtil.getHierarchy(groupRow) to get the group `IgxGridRowComponent` hierarchy.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupingExpansionState(value) {\n        this._groupingExpandState = cloneArray(value);\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * An @Input property that determines whether created groups are rendered expanded or collapsed.\n     * The default rendered state is expanded.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [groupsExpanded]=\"false\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public groupsExpanded = true;\n\n    /**\n     * A hierarchical representation of the group by records.\n     * ```typescript\n     * let groupRecords = this.grid.groupsRecords;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public groupsRecords: IGroupByRecord[] = [];\n\n    /**\n     * An @Input property that sets whether the grouped columns should be hidden as well.\n     * The default value is \"false\"\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [hideGroupedColumns]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public get hideGroupedColumns() {\n        return this._hideGroupedColumns;\n    }\n\n    public set hideGroupedColumns(value: boolean) {\n        if (value) {\n            this.groupingDiffer = this.differs.find(this.groupingExpressions).create();\n        } else {\n            this.groupingDiffer = null;\n        }\n        if (this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(value);\n        }\n\n        this._hideGroupedColumns = value;\n    }\n\n    /**\n     * An @Input property that sets the message displayed inside the GroupBy drop area where columns can be dragged on.\n     * Note: The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * ```html\n     * <igx-grid dropAreaMessage=\"Drop here to group!\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    set dropAreaMessage(value: string) {\n        this._dropAreaMessage = value;\n    }\n\n    /**\n     * An accessor that returns the message displayed inside the GroupBy drop area where columns can be dragged on.\n    */\n    get dropAreaMessage(): string {\n        return this._dropAreaMessage || this.resourceStrings.igx_grid_groupByArea_message;\n    }\n\n    /**\n     * An @Input property that sets the template that will be rendered as a GroupBy drop area.\n     * Note: The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * ```html\n     * <igx-grid [dropAreaTemplate]=\"dropAreaRef\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     *\n     * <ng-template #myDropArea>\n     *      <span> Custom drop area! </span>\n     * </ng-template>\n     * ```\n     * ```ts\n     * @ViewChild('myDropArea', { read: TemplateRef })\n     * public dropAreaRef: TemplateRef<any>;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public dropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * Emitted when a new `IgxColumnComponent` gets grouped/ungrouped, or multiple columns get\n     * grouped/ungrouped at once by using the Group By API.\n     * The `onGroupingDone` event would be raised only once if several columns get grouped at once by calling\n     * the `groupBy()` or `clearGrouping()` API methods and passing an array as an argument.\n     * The event arguments provide the `expressions`, `groupedColumns` and `ungroupedColumns` properties, which contain\n     * the `ISortingExpression` and the `IgxColumnComponent` related to the grouping/ungrouping operation.\n     * Please note that `groupedColumns` and `ungroupedColumns` show only the **newly** changed columns (affected by the **last**\n     * grouping/ungrouping operation), not all columns which are currently grouped/ungrouped.\n     * columns.\n     * ```typescript\n     * groupingDone(event: IGroupingDoneEventArgs){\n     *     const expressions = event.expressions;\n     *     //the newly grouped columns\n     *     const groupedColumns = event.groupedColumns;\n     *     //the newly ungrouped columns\n     *     const ungroupedColumns = event.ungroupedColumns;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onGroupingDone)=\"groupingDone($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onGroupingDone = new EventEmitter<IGroupingDoneEventArgs>();\n\n    @Output()\n    public onFocusChange = new EventEmitter<IGridFocusChangeEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxGroupByRowTemplateDirective, { read: IgxGroupByRowTemplateDirective })\n    protected groupTemplate: IgxGroupByRowTemplateDirective;\n\n    @ViewChildren(IgxGridGroupByRowComponent, { read: IgxGridGroupByRowComponent })\n    private _groupsRowList: QueryList<IgxGridGroupByRowComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultDropArea', { read: TemplateRef })\n    public defaultDropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * A list of all group rows.\n     * ```typescript\n     * const groupList = this.grid.groupsRowList;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public get groupsRowList() {\n        const res = new QueryList<any>();\n        if (!this._groupsRowList) {\n            return res;\n        }\n        const rList = this._groupsRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        });\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('groupArea')\n    public groupArea: ElementRef;\n\n    /**\n     * @hidden\n     */\n    get groupAreaHostClass(): string {\n        return this.getComponentDensityClass('igx-drop-area');\n    }\n\n    /**\n     * Returns the template reference of the `IgxGridComponent`'s group row.\n     * ```\n     * const groupRowTemplate = this.grid.groupRowTemplate;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get groupRowTemplate(): TemplateRef<any> {\n        return this._groupRowTemplate;\n    }\n\n    /**\n     * Sets the template reference of the `IgxGridComponent`'s group `IgxGridRowComponent`.\n     * ```typescript\n     * this.grid.groupRowTemplate = myRowTemplate.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupRowTemplate(template: TemplateRef<any>) {\n        this._groupRowTemplate = template;\n        this.markForCheck();\n    }\n\n\n    /**\n     * Returns the template reference of the `IgxGridComponent`'s group area.\n     * ```typescript\n     * const groupAreaTemplate = this.grid.groupAreaTemplate;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get groupAreaTemplate(): TemplateRef<any> {\n        return this._groupAreaTemplate;\n    }\n\n    /**\n     * Sets the template reference of the `IgxGridComponent`'s group area.\n     * ```typescript\n     * this.grid.groupAreaTemplate = myAreaTemplate.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupAreaTemplate(template: TemplateRef<any>) {\n        this._groupAreaTemplate = template;\n        this.markForCheck();\n    }\n\n    /**\n     * Groups by a new `IgxColumnComponent` based on the provided expression, or modifies an existing one.\n     * Also allows for multiple columns to be grouped at once if an array of `ISortingExpression` is passed.\n     * The onGroupingDone event would get raised only **once** if this method gets called multiple times with the same arguments.\n     * ```typescript\n     * this.grid.groupBy({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * this.grid.groupBy([\n            { fieldName: name1, dir: SortingDirection.Asc, ignoreCase: false },\n            { fieldName: name2, dir: SortingDirection.Desc, ignoreCase: true },\n            { fieldName: name3, dir: SortingDirection.Desc, ignoreCase: false }\n        ]);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public groupBy(expression: IGroupingExpression | Array<IGroupingExpression>): void {\n        this.endEdit(true);\n        this._gridAPI.submit_value();\n        if (expression instanceof Array) {\n            this._gridAPI.groupBy_multiple(expression);\n        } else {\n            this._gridAPI.groupBy(expression);\n        }\n        this.cdr.detectChanges();\n        this.calculateGridSizes();\n    }\n\n    /**\n     * Clears all grouping in the grid, if no parameter is passed.\n     * If a parameter is provided, clears grouping for a particular column or an array of columns.\n     * ```typescript\n     * this.grid.clearGrouping(); //clears all grouping\n     * this.grid.clearGrouping(\"ID\"); //ungroups a single column\n     * this.grid.clearGrouping([\"ID\", \"Column1\", \"Column2\"]); //ungroups multiple columns\n     * ```\n     *\n     */\n    public clearGrouping(name?: string | Array<string>): void {\n        this._gridAPI.clear_groupby(name);\n        this.calculateGridSizes();\n    }\n\n    /**\n     * Returns if a group is expanded or not.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const expandedGroup = this.grid.isExpandedGroup(this.groupRow);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public isExpandedGroup(group: IGroupByRecord): boolean {\n        const state: IGroupByExpandState = this._getStateForGroupRow(group);\n        return state ? state.expanded : this.groupsExpanded;\n    }\n\n    /**\n     * Toggles the expansion state of a group.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const toggleExpGroup = this.grid.toggleGroup(this.groupRow);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public toggleGroup(groupRow: IGroupByRecord) {\n        this._toggleGroup(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    public isGroupByRecord(record: any): boolean {\n        // return record.records instance of GroupedRecords fails under Webpack\n        return record.records && record.records.length;\n    }\n\n    /**\n     * Toggles the expansion state of all group rows recursively.\n     * ```typescript\n     * this.grid.toggleAllGroupRows;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public toggleAllGroupRows() {\n        this.groupingExpansionState = [];\n        this.groupsExpanded = !this.groupsExpanded;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has groupable columns.\n     * ```typescript\n     * const groupableGrid = this.grid.hasGroupableColumns;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get hasGroupableColumns(): boolean {\n        return this.columnList.some((col) => col.groupable && !col.columnGroup);\n    }\n\n    private _setGroupColsVisibility(value) {\n        this.groupingExpressions.forEach((expr) => {\n            const col = this.getColumnByName(expr.fieldName);\n            col.hidden = value;\n        });\n    }\n\n    /**\n     * Returns if the grid's group by drop area is visible.\n     * ```typescript\n     * const dropVisible = this.grid.dropAreaVisible;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public get dropAreaVisible(): boolean {\n        return (this.draggedColumn && this.draggedColumn.groupable) ||\n            !this.chipsGoupingExpressions.length;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _getStateForGroupRow(groupRow: IGroupByRecord): IGroupByExpandState {\n        return this._gridAPI.groupBy_get_expanded_for_group(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _toggleGroup(groupRow: IGroupByRecord) {\n        this._gridAPI.groupBy_toggle_group(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _applyGrouping() {\n        this._gridAPI.sort_multiple(this._groupingExpressions);\n    }\n\n    /**\n     * @hidden\n     */\n    public isColumnGrouped(fieldName: string): boolean {\n        return this.groupingExpressions.find(exp => exp.fieldName === fieldName) ? true : false;\n    }\n\n    /**\n    * @hidden\n    */\n    public getContext(rowData, rowIndex): any {\n        return {\n            $implicit: rowData,\n            index: rowIndex,\n            templateID: this.isGroupByRecord(rowData) ? 'groupRow' : this.isSummaryRow(rowData) ? 'summaryRow' : 'dataRow'\n        };\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupByRecords(): IGroupByRecord[] {\n        if (this.groupingExpressions && this.groupingExpressions.length) {\n            const state = {\n                expressions: this.groupingExpressions,\n                expansion: this.groupingExpansionState,\n                defaultExpanded: this.groupsExpanded\n            };\n\n            return DataUtil.group(cloneArray(this.filteredSortedData), state, this).metadata;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipRemoved(event: IBaseChipEventArgs) {\n        this.clearGrouping(event.owner.id);\n    }\n\n    /**\n     * @hidden\n     */\n    public chipsOrderChanged(event: IChipsAreaReorderEventArgs) {\n        const newGrouping = [];\n        for (let i = 0; i < event.chipsArray.length; i++) {\n            const expr = this.groupingExpressions.filter((item) => {\n                return item.fieldName === event.chipsArray[i].id;\n            })[0];\n\n            if (!this.getColumnByName(expr.fieldName).groupable) {\n                // disallow changing order if there are columns with groupable: false\n                return;\n            }\n            newGrouping.push(expr);\n        }\n        this.groupingExpansionState = [];\n        this.chipsGoupingExpressions = newGrouping;\n\n        if (event.originalEvent instanceof KeyboardEvent) {\n            // When reordered using keyboard navigation, we don't have `onMoveEnd` event.\n            this.groupingExpressions = this.chipsGoupingExpressions;\n        }\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public chipsMovingEnded() {\n        this.groupingExpressions = this.chipsGoupingExpressions;\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipClicked(event: IChipClickEventArgs) {\n        const sortingExpr = this.sortingExpressions;\n        const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n        columnExpr.dir = 3 - columnExpr.dir;\n        this.sort(columnExpr);\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipKeyDown(event: IChipKeyDownEventArgs) {\n        if (event.originalEvent.key === ' ' || event.originalEvent.key === 'Spacebar' || event.originalEvent.key === 'Enter') {\n            const sortingExpr = this.sortingExpressions;\n            const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n            columnExpr.dir = 3 - columnExpr.dir;\n            this.sort(columnExpr);\n            this.markForCheck();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected get defaultTargetBodyHeight(): number {\n        const allItems = this.totalItemCount || this.dataLength;\n        return this.renderedRowHeight * Math.min(this._defaultTargetRecordNumber,\n            this.paging ? Math.min(allItems, this.perPage) : allItems);\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number {\n        return this.groupArea ? this.groupArea.nativeElement.offsetHeight : 0;\n    }\n\n    /**\n     * Gets calculated width of the pinned area.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth();\n     * ```\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridComponent\n     */\n    public getPinnedWidth(takeHidden = false) {\n        let sum = super.getPinnedWidth(takeHidden);\n\n        if (this.groupingExpressions.length > 0 && this.headerGroupContainer) {\n            sum += this.headerGroupContainer.nativeElement.offsetWidth;\n        }\n        return sum;\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        if (this.groupingExpressions && this.groupingExpressions.length\n            && typeof(row) !== 'number') {\n            const groupByRecords = this.getGroupByRecords();\n            const rowIndex = this.filteredSortedData.indexOf(row);\n            const groupByRecord = groupByRecords[rowIndex];\n\n            if (groupByRecord && !this.isExpandedGroup(groupByRecord)) {\n                this.toggleGroup(groupByRecord);\n            }\n        }\n\n        super.scrollTo(row, column);\n    }\n\n    /**\n    * @hidden\n    */\n    public get dropAreaTemplateResolved(): TemplateRef<any> {\n        if (this.dropAreaTemplate) {\n            return this.dropAreaTemplate;\n        } else {\n            return this.defaultDropAreaTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getGroupByChipTitle(expression: IGroupingExpression): string {\n        return this.getColumnByName(expression.fieldName).header || expression.fieldName;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        if (this.groupTemplate) {\n            this._groupRowTemplate = this.groupTemplate.template;\n        }\n        super.ngAfterContentInit();\n\n        if (this.hideGroupedColumns && this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(this.hideGroupedColumns);\n        }\n    }\n\n    public ngOnInit() {\n        super.ngOnInit();\n        this.onGroupingDone.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.endEdit(true);\n            this.summaryService.updateSummaryCache(args);\n        });\n    }\n\n    public ngDoCheck(): void {\n        super.ngDoCheck();\n        if (this.groupingDiffer) {\n            const changes = this.groupingDiffer.diff(this.groupingExpressions);\n            if (changes && this.columnList) {\n                changes.forEachAddedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = true;\n                });\n                changes.forEachRemovedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = false;\n                });\n            }\n        }\n    }\n\n    getSelectedData(): any[] {\n        if (this.groupingExpressions.length) {\n            const source = [];\n\n            const process = (record) => {\n                if (record.expression || record.summaries) {\n                    source.push(null);\n                    return;\n                }\n                source.push(record);\n\n            };\n\n            this.verticalScrollContainer.igxForOf.forEach(process);\n            return this.extractDataFromSelection(source);\n        } else {\n            return super.getSelectedData();\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IGroupByResult } from '../../data-operations/grouping-strategy';\nimport { IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { IgxGridComponent } from './grid.component';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridSort',\n    pure: true\n})\nexport class IgxGridSortingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], expressions: ISortingExpression[], id: string, pipeTrigger: number): any[] {\n        const grid = this.gridAPI.grid;\n        let result: any[];\n\n        if (!expressions.length) {\n            result = collection;\n        } else {\n            result = DataUtil.sort(cloneArray(collection), expressions);\n        }\n        grid.filteredSortedData = result;\n\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridPreGroupBy',\n    pure: true\n})\nexport class IgxGridPreGroupingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], expression: IGroupingExpression | IGroupingExpression[],\n        expansion: IGroupByExpandState | IGroupByExpandState[], defaultExpanded: boolean,\n        id: string, groupsRecords: any[], pipeTrigger: number): IGroupByResult {\n\n        const state = { expressions: [], expansion: [], defaultExpanded };\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        state.expressions = grid.groupingExpressions;\n\n        if (!state.expressions.length) {\n            // empty the array without changing reference\n            groupsRecords.splice(0, groupsRecords.length);\n            return {\n                data: collection,\n                metadata: collection\n            };\n        }\n\n        state.expansion = grid.groupingExpansionState;\n        state.defaultExpanded = grid.groupsExpanded;\n\n        return DataUtil.group(cloneArray(collection), state, grid, groupsRecords);\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridPostGroupBy',\n    pure: true\n})\nexport class IgxGridPostGroupingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: IGroupByResult, expression: IGroupingExpression | IGroupingExpression[],\n        expansion: IGroupByExpandState | IGroupByExpandState[], defaultExpanded: boolean,\n        id: string, pipeTrigger: number): any[] {\n\n        const state = { expressions: [], expansion: [], defaultExpanded };\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        state.expressions = grid.groupingExpressions;\n\n        if (!state.expressions.length) {\n            return collection.data;\n        }\n\n        state.expansion = grid.groupingExpansionState;\n        state.defaultExpanded = grid.groupsExpanded;\n\n        return DataUtil.restoreGroups({\n            data: cloneArray(collection.data),\n            metadata: cloneArray(collection.metadata)\n        }, state);\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridPaging',\n    pure: true\n})\nexport class IgxGridPagingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    public transform(collection: IGroupByResult, page = 0, perPage = 15, id: string, pipeTrigger: number): IGroupByResult {\n\n        if (!this.gridAPI.grid.paging) {\n            return collection;\n        }\n\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n\n        const result: IGroupByResult = {\n            data: DataUtil.page(cloneArray(collection.data), state),\n            metadata: DataUtil.page(cloneArray(collection.metadata), state)\n        };\n        this.gridAPI.grid.pagingState = state;\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridFiltering',\n    pure: true\n})\nexport class IgxGridFilteringPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    public transform(collection: any[], expressionsTree: IFilteringExpressionsTree,\n        id: string, pipeTrigger: number) {\n        const grid = this.gridAPI.grid;\n        const state = { expressionsTree: expressionsTree };\n\n        if (!state.expressionsTree ||\n            !state.expressionsTree.filteringOperands ||\n            state.expressionsTree.filteringOperands.length === 0) {\n            return collection;\n        }\n\n        const result = DataUtil.filter(cloneArray(collection), state);\n        grid.filteredData = result;\n        return result;\n    }\n}\n","import { Component, forwardRef, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef } from '@angular/core';\nimport { IgxGridComponent } from './grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-row',\n    templateUrl: './grid-row.component.html',\n    providers: [{provide: IgxRowComponent, useExisting: forwardRef(() => IgxGridRowComponent)}]\n})\nexport class IgxGridRowComponent extends IgxRowComponent<IgxGridComponent> {\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxGridComponent>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        selection: IgxSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {\n            // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n            super(gridAPI, crudService, selectionService, selection, element, cdr);\n        }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, GridSummaryPosition, GridSummaryCalculationMode, IGridDataBindable } from '../grid-base.component';\nimport { IgxGridComponent } from './grid.component';\nimport { ISummaryRecord } from '../summaries/grid-summary';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\n\n/** @hidden */\n@Pipe({\n    name: 'gridSummary',\n    pure: true\n})\nexport class IgxGridSummaryPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(flatData: any[],\n        hasSummary: boolean,\n        summaryCalculationMode: GridSummaryCalculationMode,\n        summaryPosition: GridSummaryPosition,\n        id: string, pipeTrigger: number, summaryPipeTrigger: number): any[] {\n\n        if (!flatData || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {\n            return flatData;\n        }\n\n        return this.addSummaryRows(id, flatData, summaryPosition);\n    }\n\n    private addSummaryRows(gridId: string, collection: any[], summaryPosition: GridSummaryPosition): any[] {\n        const recordsWithSummary = [];\n        const lastChildMap = new Map<any, IGroupByRecord[]>();\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        const maxSummaryHeight = grid.summaryService.calcMaxSummaryHeight();\n\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            recordsWithSummary.push(record);\n\n            let recordId;\n            let groupByRecord: IGroupByRecord = null;\n\n            if (grid.isGroupByRecord(record)) {\n                groupByRecord = record as IGroupByRecord;\n                recordId = this.gridAPI.get_groupBy_record_id(groupByRecord);\n            } else {\n                recordId = this.gridAPI.get_row_id(record);\n            }\n\n            if (summaryPosition === GridSummaryPosition.bottom && lastChildMap.has(recordId)) {\n                const groupRecords = lastChildMap.get(recordId);\n\n                for (let j = 0; j < groupRecords.length; j++) {\n                    const groupRecord = groupRecords[j];\n                    const groupRecordId = this.gridAPI.get_groupBy_record_id(groupRecord);\n                    const records = this.removeDeletedRecord(grid, groupRecord.records.slice());\n                    const summaries = grid.summaryService.calculateSummaries(groupRecordId, records);\n                    const summaryRecord: ISummaryRecord = {\n                        summaries: summaries,\n                        max: maxSummaryHeight\n                    };\n                    recordsWithSummary.push(summaryRecord);\n                }\n            }\n\n            if (groupByRecord === null || !grid.isExpandedGroup(groupByRecord)) {\n                continue;\n            }\n\n            if (summaryPosition === GridSummaryPosition.top) {\n                const records = this.removeDeletedRecord(grid, groupByRecord.records.slice());\n                const summaries = grid.summaryService.calculateSummaries(recordId, records);\n                const summaryRecord: ISummaryRecord = {\n                    summaries: summaries,\n                    max:  maxSummaryHeight\n                };\n                recordsWithSummary.push(summaryRecord);\n            } else if (summaryPosition === GridSummaryPosition.bottom) {\n                let lastChild = groupByRecord;\n\n                while (lastChild.groups && lastChild.groups.length > 0 && grid.isExpandedGroup(lastChild)) {\n                    lastChild = lastChild.groups[lastChild.groups.length - 1];\n                }\n\n                let lastChildId;\n                if (grid.isExpandedGroup(lastChild)) {\n                    lastChildId = this.gridAPI.get_row_id(lastChild.records[lastChild.records.length - 1]);\n                } else {\n                    lastChildId = this.gridAPI.get_groupBy_record_id(lastChild);\n                }\n\n                let groupRecords = lastChildMap.get(lastChildId);\n                if (!groupRecords) {\n                    groupRecords = [];\n                    lastChildMap.set(lastChildId, groupRecords);\n                }\n                groupRecords.unshift(groupByRecord);\n            }\n    }\n\n        return recordsWithSummary;\n    }\n\n    private removeDeletedRecord(grid, data) {\n        if (!grid.transactions.enabled) {\n            return data;\n        }\n        const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === 'delete').map(t => t.id);\n        deletedRows.forEach(rowID => {\n            const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n            const index = tempData.indexOf(rowID);\n            if (index !== -1) {\n                data.splice(index, 1);\n            }\n        });\n        return data;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport {\n    IgxGroupAreaDropDirective,\n    IgxGroupByRowTemplateDirective\n} from './grid.directives';\nimport { IgxGridComponent } from './grid.component';\nimport {\n    IgxGridPagingPipe,\n    IgxGridPostGroupingPipe,\n    IgxGridPreGroupingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe\n} from './grid.pipes';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { IgxGridRowComponent } from './grid-row.component';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { DeprecateMethod } from '../../core/deprecateDecorators';\nimport { IgxGridSummaryPipe } from './grid.summary.pipe';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxGridComponent,\n    IgxGridRowComponent,\n    IgxGridGroupByRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridPreGroupingPipe,\n    IgxGridPostGroupingPipe,\n    IgxGridPagingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe,\n    IgxGridSummaryPipe\n  ],\n  exports: [\n    IgxGridComponent,\n    IgxGridGroupByRowComponent,\n    IgxGridRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridCommonModule,\n    IgxGridPreGroupingPipe,\n    IgxGridPostGroupingPipe,\n    IgxGridPagingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe,\n    IgxGridSummaryPipe\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridCommonModule\n  ]\n})\nexport class IgxGridModule {\n  @DeprecateMethod('IgxGridModule.forRoot method is deprecated. Use IgxGridModule instead.')\n  public static forRoot() {\n    return {\n        ngModule: IgxGridModule\n    };\n  }\n}\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { DataType } from '../../data-operations/data-util';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IRowToggleEventArgs } from './tree-grid.interfaces';\nimport { IgxColumnComponent } from '../column.component';\nimport { HierarchicalTransaction, TransactionType, State } from '../../services';\nimport { mergeObjects } from '../../core/utils';\n\nexport class IgxTreeGridAPIService extends GridBaseAPIService<IgxTreeGridComponent> {\n    public get_all_data(transactions?: boolean): any[] {\n        const grid = this.grid;\n        const data = transactions ? grid.dataWithAddedInTransactionRows : grid.flatData;\n        return data ? data : [];\n    }\n\n    public get_summary_data() {\n        const grid = this.grid;\n        const data = grid.processedRootRecords.filter(row => row.isFilteredOutParent === undefined || row.isFilteredOutParent === false)\n            .map(rec => rec.data);\n        if (grid.transactions.enabled) {\n            const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === TransactionType.DELETE).map(t => t.id);\n            deletedRows.forEach(rowID => {\n                const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n                const index = tempData.indexOf(rowID);\n                if (index !== -1) {\n                    data.splice(index, 1);\n                }\n            });\n        }\n        return data;\n    }\n\n    public expand_row(rowID: any) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(rowID, true);\n        grid.expansionStates = expandedStates;\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public collapse_row(rowID: any) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(rowID, false);\n        grid.expansionStates = expandedStates;\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public toggle_row_expansion(rowID: any) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n        const treeRecord = grid.records.get(rowID);\n\n        if (treeRecord) {\n            const isExpanded = this.get_row_expansion_state(treeRecord);\n            expandedStates.set(rowID, !isExpanded);\n            grid.expansionStates = expandedStates;\n        }\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public trigger_row_expansion_toggle(row: ITreeGridRecord, expanded: boolean, event?: Event, visibleColumnIndex?) {\n        const grid = this.grid;\n\n        if (!row.children || row.children.length <= 0 && row.expanded === expanded) {\n            return;\n        }\n\n        const args: IRowToggleEventArgs = {\n            rowID: row.rowID,\n            expanded: expanded,\n            event: event,\n            cancel: false\n        };\n        grid.onRowToggle.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n        visibleColumnIndex = visibleColumnIndex ? visibleColumnIndex : 0;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(row.rowID, expanded);\n        grid.expansionStates = expandedStates;\n\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n\n        requestAnimationFrame(() => {\n            const el = this.grid.selectionService.activeElement;\n            if (el) {\n                const cell = this.get_cell_by_visible_index(el.row, el.column);\n                if (cell) {\n                    cell.nativeElement.focus();\n                }\n            }\n        });\n    }\n\n    public expand_path_to_record(record: ITreeGridRecord) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n\n        while (record.parent) {\n            record = record.parent;\n            const expanded = this.get_row_expansion_state(record);\n\n            if (!expanded) {\n                expandedStates.set(record.rowID, true);\n            }\n        }\n        grid.expansionStates = expandedStates;\n\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public get_row_expansion_state(record: ITreeGridRecord): boolean {\n        const grid = this.grid;\n        const states = grid.expansionStates;\n        const expanded = states.get(record.rowID);\n\n        if (expanded !== undefined) {\n            return expanded;\n        } else {\n            return record.level < grid.expansionDepth;\n        }\n    }\n\n    protected update_row_in_array(value: any, rowID: any, index: number) {\n        const grid = this.grid;\n        if (grid.primaryKey && grid.foreignKey) {\n            super.update_row_in_array(value, rowID, index);\n        } else {\n            const record = grid.records.get(rowID);\n            const childData = record.parent ? record.parent.data[grid.childDataKey] : grid.data;\n            index = grid.primaryKey ? childData.map(c => c[grid.primaryKey]).indexOf(rowID) :\n                childData.indexOf(rowID);\n            childData[index] = value;\n        }\n    }\n\n    public should_apply_number_style(column: IgxColumnComponent): boolean {\n        return column.dataType === DataType.Number && column.visibleIndex !== 0;\n    }\n\n    public deleteRowById(rowID: any) {\n        const treeGrid = this.grid;\n        const flatDataWithCascadeOnDeleteAndTransactions =\n        treeGrid.primaryKey &&\n        treeGrid.foreignKey &&\n        treeGrid.cascadeOnDelete &&\n        treeGrid.transactions.enabled;\n\n        if (flatDataWithCascadeOnDeleteAndTransactions) {\n            treeGrid.transactions.startPending();\n        }\n\n        super.deleteRowById(rowID);\n\n        if (flatDataWithCascadeOnDeleteAndTransactions) {\n            treeGrid.transactions.endPending(true);\n        }\n    }\n\n    public deleteRowFromData(rowID: any, index: number) {\n        const treeGrid = this.grid;\n        const record = treeGrid.records.get(rowID);\n\n        if (treeGrid.primaryKey && treeGrid.foreignKey) {\n            index = treeGrid.primaryKey ?\n                treeGrid.data.map(c => c[treeGrid.primaryKey]).indexOf(rowID) :\n                treeGrid.data.indexOf(rowID);\n            super.deleteRowFromData(rowID, index);\n\n            if (treeGrid.cascadeOnDelete) {\n                if (record && record.children && record.children.length > 0) {\n                    for (let i = 0; i < record.children.length; i++) {\n                        const child = record.children[i];\n                        super.deleteRowById(child.rowID);\n                    }\n                }\n            }\n        } else {\n            const collection = record.parent ? record.parent.data[treeGrid.childDataKey] : treeGrid.data;\n            index = treeGrid.primaryKey ?\n                collection.map(c => c[treeGrid.primaryKey]).indexOf(rowID) :\n                collection.indexOf(rowID);\n\n            const selectedChildren = [];\n            this.get_selected_children(record, selectedChildren);\n            if (selectedChildren.length > 0) {\n                treeGrid.deselectRows(selectedChildren);\n            }\n\n            if (treeGrid.transactions.enabled) {\n                const path = treeGrid.generateRowPath(rowID);\n                treeGrid.transactions.add({\n                    id: rowID,\n                    type: TransactionType.DELETE,\n                    newValue: null,\n                    path: path\n                },\n                    collection[index]\n                );\n            } else {\n                collection.splice(index, 1);\n            }\n        }\n    }\n\n    /**\n     * Updates related row of provided grid's data source with provided new row value\n     * @param grid Grid to update data for\n     * @param rowID ID of the row to update\n     * @param rowValueInDataSource Initial value of the row as it is in data source\n     * @param rowCurrentValue Current value of the row as it is with applied previous transactions\n     * @param rowNewValue New value of the row\n     */\n    protected updateData(\n        grid: IgxTreeGridComponent,\n        rowID: any,\n        rowValueInDataSource: any,\n        rowCurrentValue: any,\n        rowNewValue: { [x: string]: any }) {\n        if (grid.transactions.enabled) {\n            const path = grid.generateRowPath(rowID);\n            const transaction: HierarchicalTransaction = {\n                id: rowID,\n                type: TransactionType.UPDATE,\n                newValue: rowNewValue,\n                path: path\n            };\n            grid.transactions.add(transaction, rowCurrentValue);\n        } else {\n            mergeObjects(rowValueInDataSource, rowNewValue);\n        }\n    }\n\n    public get_selected_children(record: ITreeGridRecord, selectedRowIDs: any[]) {\n        const grid = this.grid;\n        if (!record.children || record.children.length === 0) {\n            return;\n        }\n        for (const child of record.children) {\n            if (grid.selection.is_item_selected(grid.id, child.rowID)) {\n                selectedRowIDs.push(child.rowID);\n            }\n            this.get_selected_children(child, selectedRowIDs);\n        }\n    }\n\n    public row_deleted_transaction(rowID: any): boolean {\n        return this.row_deleted_parent(rowID) || super.row_deleted_transaction(rowID);\n    }\n\n    private row_deleted_parent(rowID: any): boolean {\n        const grid = this.grid;\n        if (!grid) {\n            return false;\n        }\n        if ((grid.cascadeOnDelete && grid.foreignKey) || grid.childDataKey) {\n            let node = grid.records.get(rowID);\n            while (node) {\n                const state: State = grid.transactions.getState(node.rowID);\n                if (state && state.type === TransactionType.DELETE) {\n                    return true;\n                }\n                node = node.parent;\n            }\n        }\n        return false;\n    }\n}\n","import { IgxGridNavigationService } from '../grid-navigation.service';\n\nexport class IgxTreeGridNavigationService extends IgxGridNavigationService {\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false): string {\n        if (isSummary) {\n            return 'igx-grid-summary-cell';\n        }\n        if (visibleIndex === 0) {\n            return 'igx-tree-grid-cell';\n        }\n        return 'igx-grid-cell';\n    }\n\n    protected getRowSelector() {\n        return 'igx-tree-grid-row';\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ElementRef,\n    HostBinding,\n    Input,\n    IterableDiffers,\n    ViewContainerRef,\n    Output,\n    EventEmitter,\n    Inject,\n    NgZone,\n    forwardRef,\n    Optional,\n    OnInit,\n    TemplateRef\n} from '@angular/core';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseComponent, IgxGridTransaction, IGridDataBindable } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { IRowToggleEventArgs } from './tree-grid.interfaces';\nimport { HierarchicalTransaction, HierarchicalState, TransactionType } from '../../services/transaction/transaction';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxHierarchicalTransactionService } from '../../services/index';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IgxTreeGridNavigationService } from './tree-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { mergeObjects } from '../../core/utils';\nimport { IgxOverlayService } from '../../services/index';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nimport { first } from 'rxjs/operators';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Tree Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html)\n *\n * The Ignite UI Tree Grid displays and manipulates hierarchical data with consistent schema formatted as a table and\n * provides features such as sorting, filtering, editing, column pinning, paging, column moving and hiding.\n *\n * Example:\n * ```html\n * <igx-tree-grid [data]=\"employeeData\" primaryKey=\"employeeID\" foreignKey=\"PID\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-tree-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-tree-grid',\n    templateUrl: 'tree-grid.component.html',\n    providers: [\n        IgxGridSelectionService, IgxGridCRUDService, IgxTreeGridNavigationService, IgxGridSummaryService,\n        { provide: GridBaseAPIService, useClass: IgxTreeGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxTreeGridComponent) }, IgxFilteringService, IgxForOfSyncService]\n})\nexport class IgxTreeGridComponent extends IgxGridBaseComponent implements IGridDataBindable, OnInit {\n    private _id = `igx-tree-grid-${NEXT_ID++}`;\n    private _data;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-tree-grid [id]=\"'igx-tree-grid-1'\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this._id = value;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxTreeGridComponent` with an array of data.\n     * ```html\n     * <igx-tree-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get data(): any[] {\n        return this._data;\n    }\n\n    public set data(value: any[]) {\n        this._data = value;\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n            this.reflow();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    set filteredData(value) {\n        this._filteredData = value;\n\n        if (this.rowSelectable) {\n            this.updateHeaderCheckboxStatusOnFilter(this._filteredData);\n        }\n    }\n\n    /**\n     * Get transactions service for the grid.\n     * @experimental @hidden\n     */\n    get transactions(): IgxHierarchicalTransactionService<HierarchicalTransaction, HierarchicalState> {\n        return this._transactions;\n    }\n\n    /**\n    * @hidden\n    */\n    public flatData: any[];\n\n    /**\n    * @hidden\n    */\n    public processedExpandedFlatData: any[];\n\n    /**\n     * Returns an array of the root level `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the root record with index=2\n     * const states = this.grid.rootRecords[2];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public rootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the record with primaryKey=2\n     * const states = this.grid.records.get(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public records: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * Returns an array of processed (filtered and sorted) root `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed root record with index=2\n     * const states = this.grid.processedRootRecords[2];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public processedRootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all processed (filtered and sorted) `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed record with primaryKey=2\n     * const states = this.grid.processedRecords.get(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public processedRecords: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * An @Input property that sets the child data key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"employees\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public childDataKey;\n\n    /**\n     * An @Input property that sets the foreign key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"employeeID\" [foreignKey]=\"parentID\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public foreignKey;\n\n    /**\n     * An @Input property indicating whether child records should be deleted when their parent gets deleted.\n     * By default it is set to true and deletes all children along with the parent.\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" [primaryKey]=\"employeeID\" [foreignKey]=\"parentID\" cascadeOnDelete=\"false\" [autoGenerate]=\"true\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public cascadeOnDelete = true;\n\n    private _expansionDepth = Infinity;\n\n    /**\n     * An @Input property that sets the count of levels to be expanded in the `IgxTreeGridComponent`. By default it is\n     * set to `Infinity` which means all levels would be expanded.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"employees\" expansionDepth=\"1\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get expansionDepth(): number {\n        return this._expansionDepth;\n    }\n\n    public set expansionDepth(value: number) {\n        this._expansionDepth = value;\n        this.cdr.markForCheck();\n    }\n\n    private _expansionStates: Map<any, boolean> = new Map<any, boolean>();\n\n    /**\n     * Returns a list of key-value pairs [row ID, expansion state]. Includes only states that differ from the default one.\n     * ```typescript\n     * const expansionStates = this.grid.expansionStates;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get expansionStates() {\n        return this._expansionStates;\n    }\n\n    /**\n     * Sets a list of key-value pairs [row ID, expansion state].\n     * ```typescript\n     * const states = new Map<any, boolean>();\n     * states.set(1, true);\n     * this.grid.expansionStates = states;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public set expansionStates(value) {\n        this._expansionStates = this.cloneMap(value);\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Emitted when the expanded state of a row gets changed.\n     * ```typescript\n     * rowToggle(event: IRowToggleEventArgs){\n     *  // the id of the row\n     *  const rowID = event.rowID;\n     *  // the new expansion state\n     *  const newExpandedState = event.expanded;\n     *  // the original event that triggered onRowToggle\n     *  const originalEvent = event.event;\n     *  // whether the event should be cancelled\n     *  event.cancel = true;\n     * }\n     * ```\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" (onRowToggle)=\"rowToggle($event)\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Output()\n    public onRowToggle = new EventEmitter<IRowToggleEventArgs>();\n\n    private _gridAPI: IgxTreeGridAPIService;\n    private _filteredData = null;\n\n    constructor(\n        selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        selection: IgxSelectionAPIService,\n        @Inject(IgxGridTransaction) protected _transactions: IgxHierarchicalTransactionService<HierarchicalTransaction, HierarchicalState>,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxTreeGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(selectionService, crudService, gridAPI, selection,\n                _transactions, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation,\n                filteringService, overlayService, summaryService, _displayDensityOptions);\n        this._gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public ngOnInit() {\n        super.ngOnInit();\n    }\n\n    private cloneMap(mapIn: Map<any, boolean>): Map<any, boolean> {\n        const mapCloned: Map<any, boolean> = new Map<any, boolean>();\n\n        mapIn.forEach((value: boolean, key: any, mapObj: Map<any, boolean>) => {\n\n            mapCloned.set(key, value);\n        });\n\n        return mapCloned;\n    }\n\n    /**\n     * Expands the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be expanded.\n     * ```typescript\n     * this.grid.expandRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public expandRow(rowID: any) {\n        this._gridAPI.expand_row(rowID);\n    }\n\n    /**\n     * Collapses the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be collapsed.\n     * ```typescript\n     * this.grid.collapseRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public collapseRow(rowID: any) {\n        this._gridAPI.collapse_row(rowID);\n    }\n\n    /**\n     * Toggles the expansion state of the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be toggled.\n     * ```typescript\n     * this.grid.toggleRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public toggleRow(rowID: any) {\n        this._gridAPI.toggle_row_expansion(rowID);\n    }\n\n    /**\n     * Expands all rows.\n     * ```typescript\n     * this.grid.expandAll();\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public expandAll() {\n        this._expansionDepth = Infinity;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Collapses all rows.\n     * ```typescript\n     * this.grid.collapseAll();\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public collapseAll() {\n        this._expansionDepth = 0;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Creates a new `IgxTreeGridRowComponent` with the given data. If a parentRowID is not specified, the newly created\n     * row would be added at the root level. Otherwise, it would be added as a child of the row whose primaryKey matches\n     * the specified parentRowID. If the parentRowID does not exist, an error would be thrown.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid.addRow(record, 1); // Adds a new child row to the row with ID=1.\n     * ```\n     * @param data\n     * @param parentRowID\n     * @memberof IgxTreeGridComponent\n     */\n    public addRow(data: any, parentRowID?: any) {\n        if (parentRowID !== undefined && parentRowID !== null) {\n            const parentRecord = this.records.get(parentRowID);\n\n            if (!parentRecord) {\n                throw Error('Invalid parent row ID!');\n            }\n            this.summaryService.clearSummaryCache({rowID: parentRecord.rowID});\n            if (this.primaryKey && this.foreignKey) {\n                data[this.foreignKey] = parentRowID;\n                super.addRow(data);\n            } else {\n                const parentData = parentRecord.data;\n                const childKey = this.childDataKey;\n                if (this.transactions.enabled) {\n                    const rowId = this.primaryKey ? data[this.primaryKey] : data;\n                    const path: any[] = [];\n                    path.push(...this.generateRowPath(parentRowID));\n                    path.push(parentRowID);\n                    this.transactions.add({\n                        id: rowId,\n                        path: path,\n                        newValue: data,\n                        type: TransactionType.ADD\n                    } as HierarchicalTransaction,\n                        null);\n                } else {\n                    if (!parentData[childKey]) {\n                        parentData[childKey] = [];\n                    }\n                    parentData[childKey].push(data);\n                }\n                this.onRowAdded.emit({ data });\n                this._pipeTrigger++;\n                this.cdr.markForCheck();\n            }\n        } else {\n            if (this.primaryKey && this.foreignKey) {\n                const rowID = data[this.foreignKey];\n                this.summaryService.clearSummaryCache({rowID: rowID});\n            }\n            super.addRow(data);\n        }\n    }\n\n    /** @hidden */\n    public deleteRowById(rowId: any) {\n        //  if this is flat self-referencing data, and CascadeOnDelete is set to true\n        //  and if we have transactions we should start pending transaction. This allows\n        //  us in case of delete action to delete all child rows as single undo action\n        this._gridAPI.deleteRowById(rowId);\n\n    }\n\n    /** @hidden */\n    public generateRowPath(rowId: any): any[] {\n        const path: any[] = [];\n        let record = this.records.get(rowId);\n\n        while (record.parent) {\n            path.push(record.parent.rowID);\n            record = record.parent;\n        }\n\n        return path.reverse();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected getDataBasedBodyHeight(): number {\n        return !this.flatData || (this.flatData.length < this._defaultTargetRecordNumber) ?\n            0 : this.defaultTargetBodyHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        let delayScrolling = false;\n        let record: ITreeGridRecord;\n\n        if (typeof(row) !== 'number') {\n            const rowData = row;\n            const rowID = this._gridAPI.get_row_id(rowData);\n            record = this.processedRecords.get(rowID);\n            this._gridAPI.expand_path_to_record(record);\n\n            if (this.paging) {\n                const rowIndex = this.processedExpandedFlatData.indexOf(rowData);\n                const page = Math.floor(rowIndex / this.perPage);\n\n                if (this.page !== page) {\n                    delayScrolling = true;\n                    this.page = page;\n                }\n            }\n        }\n\n        if (delayScrolling) {\n            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(() => {\n                this.scrollDirective(this.verticalScrollContainer,\n                    typeof(row) === 'number' ? row : this.verticalScrollContainer.igxForOf.indexOf(record));\n            });\n        } else {\n            this.scrollDirective(this.verticalScrollContainer,\n                typeof(row) === 'number' ? row : this.verticalScrollContainer.igxForOf.indexOf(record));\n        }\n\n        this.scrollToHorizontally(column);\n    }\n\n    /**\n    * @hidden\n    */\n    public getContext(rowData, rowIndex): any {\n        return {\n            $implicit: rowData,\n            index: rowIndex,\n            templateID: this.isSummaryRow(rowData) ? 'summaryRow' : 'dataRow'\n        };\n    }\n\n    getSelectedData(): any[] {\n        const source = [];\n\n        const process = (record) => {\n            if (record.summaries) {\n                source.push(null);\n                return;\n            }\n            source.push(record.data);\n        };\n\n        this.verticalScrollContainer.igxForOf.forEach(process);\n        return this.extractDataFromSelection(source);\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.flatData[rowIndex], value);\n    }\n}\n","import { Component, forwardRef, Input, ViewChildren, QueryList, HostBinding, ElementRef, ChangeDetectorRef } from '@angular/core';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\n@Component({\n    selector: 'igx-tree-grid-row',\n    templateUrl: 'tree-grid-row.component.html',\n    providers: [{ provide: IgxRowComponent, useExisting: forwardRef(() => IgxTreeGridRowComponent) }]\n})\nexport class IgxTreeGridRowComponent extends IgxRowComponent<IgxTreeGridComponent> {\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxTreeGridComponent>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        selection: IgxSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {\n            // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(gridAPI, crudService, selectionService, selection, element, cdr);\n    }\n    private _treeRow: ITreeGridRecord;\n\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1);\n     * const cells = row.cells;\n     * ```\n     */\n    @ViewChildren('treeCell')\n    public cells: QueryList<any>;\n\n    /**\n     * The `ITreeGridRecord` passed to the row component.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const treeRow = row.treeRow;\n     * ```\n     */\n    @Input()\n    public get treeRow(): ITreeGridRecord {\n        return this._treeRow;\n    }\n    public set treeRow(value: ITreeGridRecord) {\n        if (this._treeRow !== value) {\n            this._treeRow = value;\n            this.rowData = this._treeRow.data;\n        }\n    }\n\n    /**\n     * Returns a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const expanded = row.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this._treeRow.expanded;\n    }\n\n    /**\n     * Sets a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * row.expanded = true;\n     * ```\n     */\n    set expanded(value: boolean) {\n        (this.gridAPI as IgxTreeGridAPIService).trigger_row_expansion_toggle(this._treeRow, value);\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const classes = super.resolveClasses();\n        const filteredClass = this.treeRow.isFilteredOutParent ? 'igx-grid__tr--filtered' : '';\n        return `${classes} ${filteredClass}`;\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray, cloneHierarchicalArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'treeGridHierarchizing',\n    pure: true\n})\nexport class IgxTreeGridHierarchizingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], primaryKey: string, foreignKey: string, childDataKey: string,\n        id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n        let hierarchicalRecords: ITreeGridRecord[] = [];\n        const treeGridRecordsMap = new Map<any, ITreeGridRecord>();\n        const flatData: any[] = [];\n\n        if (primaryKey && foreignKey) {\n            hierarchicalRecords = this.hierarchizeFlatData(id, collection, primaryKey, foreignKey, treeGridRecordsMap, flatData);\n        } else if (childDataKey) {\n            hierarchicalRecords = this.hierarchizeRecursive(id, collection, primaryKey, childDataKey, undefined,\n                flatData, 0, treeGridRecordsMap);\n        }\n\n        grid.flatData = flatData;\n        grid.records = treeGridRecordsMap;\n        grid.rootRecords = hierarchicalRecords;\n        return hierarchicalRecords;\n    }\n\n    private getRowID(primaryKey: any, rowData: any) {\n        return primaryKey ? rowData[primaryKey] : rowData;\n    }\n\n    private hierarchizeFlatData(id: string, collection: any[], primaryKey: string, foreignKey: string,\n        map: Map<any, ITreeGridRecord>, flatData: any[]):\n        ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n        const missingParentRecords: ITreeGridRecord[] = [];\n        collection.forEach(row => {\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, row),\n                data: row,\n                children: []\n            };\n            const parent = map.get(row[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                parent.children.push(record);\n            } else {\n                missingParentRecords.push(record);\n            }\n\n            map.set(row[primaryKey], record);\n        });\n\n        missingParentRecords.forEach(record => {\n            const parent = map.get(record.data[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                parent.children.push(record);\n            } else {\n                result.push(record);\n            }\n        });\n\n        this.setIndentationLevels(id, result, 0, flatData);\n\n        return result;\n    }\n\n    private setIndentationLevels(id: string, collection: ITreeGridRecord[], indentationLevel: number, flatData: any[]) {\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            record.level = indentationLevel;\n            record.expanded = this.gridAPI.get_row_expansion_state(record);\n            flatData.push(record.data);\n\n            if (record.children && record.children.length > 0) {\n                this.setIndentationLevels(id, record.children, indentationLevel + 1, flatData);\n            }\n        }\n    }\n\n    private hierarchizeRecursive(id: string, collection: any[], primaryKey: string, childDataKey: string,\n        parent: ITreeGridRecord, flatData: any[], indentationLevel: number, map: Map<any, ITreeGridRecord>): ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n\n        for (let i = 0; i < collection.length; i++) {\n            const item = collection[i];\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, item),\n                data: item,\n                parent: parent,\n                level: indentationLevel\n            };\n            record.expanded = this.gridAPI.get_row_expansion_state(record);\n            flatData.push(item);\n            map.set(record.rowID, record);\n            record.children = item[childDataKey] ?\n                this.hierarchizeRecursive(id, item[childDataKey], primaryKey, childDataKey, record, flatData, indentationLevel + 1, map) :\n                undefined;\n            result.push(record);\n        }\n\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'treeGridFlattening',\n    pure: true\n})\nexport class IgxTreeGridFlatteningPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], id: string,\n        expandedLevels: number, expandedStates: Map<any, boolean>, pipeTrigger: number): any[] {\n\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        const data: ITreeGridRecord[] = [];\n\n        grid.processedRootRecords = collection;\n        grid.processedRecords = new Map<any, ITreeGridRecord>();\n\n        this.getFlatDataRecursive(collection, data, expandedLevels, expandedStates, id, true);\n\n        grid.processedExpandedFlatData = data.map(r => r.data);\n\n        return data;\n    }\n\n    private getFlatDataRecursive(collection: ITreeGridRecord[], data: ITreeGridRecord[],\n        expandedLevels: number, expandedStates: Map<any, boolean>, gridID: string,\n        parentExpanded: boolean) {\n        if (!collection || !collection.length) {\n            return;\n        }\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        for (let i = 0; i < collection.length; i++) {\n            const hierarchicalRecord = collection[i];\n\n            if (parentExpanded) {\n                data.push(hierarchicalRecord);\n            }\n\n            hierarchicalRecord.expanded = this.gridAPI.get_row_expansion_state(hierarchicalRecord);\n\n            this.updateNonProcessedRecordExpansion(grid, hierarchicalRecord);\n\n            grid.processedRecords.set(hierarchicalRecord.rowID, hierarchicalRecord);\n\n            this.getFlatDataRecursive(hierarchicalRecord.children, data, expandedLevels,\n                expandedStates, gridID, parentExpanded && hierarchicalRecord.expanded);\n        }\n    }\n\n    private updateNonProcessedRecordExpansion(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.expanded = record.expanded;\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridSorting',\n    pure: true\n})\nexport class IgxTreeGridSortingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(\n        hierarchicalData: ITreeGridRecord[],\n        expressions: ISortingExpression[],\n        id: string,\n        pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n\n        let result: ITreeGridRecord[];\n        if (!expressions.length) {\n            result = hierarchicalData;\n        } else {\n            result = DataUtil.treeGridSort(hierarchicalData, expressions);\n        }\n        const filteredSortedData = [];\n        this.flattenTreeGridRecords(result, filteredSortedData);\n        grid.filteredSortedData = filteredSortedData;\n\n        return result;\n    }\n\n    private flattenTreeGridRecords(records: ITreeGridRecord[], flatData: any[]) {\n        if (records && records.length) {\n            for (const record of records) {\n                flatData.push(record.data);\n                this.flattenTreeGridRecords(record.children, flatData);\n            }\n        }\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridPaging',\n    pure: true\n})\nexport class IgxTreeGridPagingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], page = 0, perPage = 15, id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n        if (!grid.paging) {\n            return collection;\n        }\n\n        const len = collection.length;\n        const totalPages = Math.ceil(len / perPage);\n\n        const state = {\n            index: (totalPages > 0 && page >= totalPages) ? totalPages - 1 : page,\n            recordsPerPage: perPage\n        };\n\n        const result: ITreeGridRecord[] = DataUtil.page(cloneArray(collection), state);\n        grid.pagingState = state;\n        (grid as any)._page = state.index;\n\n        return result;\n    }\n}\n/** @hidden */\n@Pipe({\n    name: 'treeGridTransaction',\n    pure: true\n})\nexport class IgxTreeGridTransactionPipe implements PipeTransform {\n\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    transform(collection: any[], id: string, pipeTrigger: number): any[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        if (collection && grid.transactions.enabled) {\n            const aggregatedChanges = grid.transactions.getAggregatedChanges(true);\n            if (aggregatedChanges.length > 0) {\n                const primaryKey = grid.primaryKey;\n                if (!primaryKey) {\n                    return collection;\n                }\n\n                const foreignKey = grid.foreignKey;\n                const childDataKey = grid.childDataKey;\n\n                if (foreignKey) {\n                    const flatDataClone = cloneArray(collection);\n                    return DataUtil.mergeTransactions(\n                        flatDataClone,\n                        aggregatedChanges,\n                        grid.primaryKey);\n                } else if (childDataKey) {\n                    const hierarchicalDataClone = cloneHierarchicalArray(collection, childDataKey);\n                    return DataUtil.mergeHierarchicalTransactions(\n                        hierarchicalDataClone,\n                        aggregatedChanges,\n                        childDataKey,\n                        grid.primaryKey);\n                }\n            }\n        }\n\n        return collection;\n    }\n}\n","import { Component, ChangeDetectorRef, ElementRef, ViewChild, Inject, ChangeDetectionStrategy, NgZone, OnInit, Input } from '@angular/core';\nimport { IgxGridCellComponent } from '../cell.component';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { getNodeSizeViaRange } from '../../core/utils';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { HammerGesturesManager } from '../../core/touch';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-tree-grid-cell',\n    templateUrl: 'tree-cell.component.html',\n    providers: [HammerGesturesManager]\n})\nexport class IgxTreeGridCellComponent extends IgxGridCellComponent implements OnInit {\n    private treeGridAPI: IgxTreeGridAPIService;\n\n    constructor(\n                selectionService: IgxGridSelectionService,\n                crudService: IgxGridCRUDService,\n                gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n                selection: IgxSelectionAPIService,\n                cdr: ChangeDetectorRef,\n                element: ElementRef,\n                protected zone: NgZone,\n                touchManager: HammerGesturesManager,\n                @Inject(DOCUMENT) public document) {\n        super(selectionService, crudService, gridAPI, selection, cdr, element, zone, touchManager);\n        this.treeGridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    @Input()\n    expanded = false;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    level = 0;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    showIndicator = false;\n\n    @ViewChild('indicator', { read: ElementRef })\n    public indicator: ElementRef;\n\n    @ViewChild('indentationDiv', { read: ElementRef })\n    public indentationDiv: ElementRef;\n\n    @ViewChild('defaultContentElement', { read: ElementRef })\n    public defaultContentElement: ElementRef;\n\n\n    /**\n     * @hidden\n     */\n    public get hasChildren() {\n        return this.row.treeRow.children && this.row.treeRow.children.length > 0;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        super.ngOnInit();\n    }\n\n    /**\n     * @hidden\n     */\n    public toggle(event: Event) {\n        event.stopPropagation();\n        this.treeGridAPI.trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n    }\n\n    /**\n     * @hidden\n     */\n    public onIndicatorFocus() {\n        this.gridAPI.submit_value();\n        this.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    public calculateSizeToFit(range: any): number {\n        const indicatorWidth = this.indicator.nativeElement.getBoundingClientRect().width;\n        const indicatorStyle = this.document.defaultView.getComputedStyle(this.indicator.nativeElement);\n        const indicatorMargin = parseFloat(indicatorStyle.marginRight);\n        let leftPadding = 0;\n        if (this.indentationDiv) {\n            const indentationStyle = this.document.defaultView.getComputedStyle(this.indentationDiv.nativeElement);\n            leftPadding = parseFloat(indentationStyle.paddingLeft);\n        }\n        const largestWidth = Math.max(...Array.from(this.nativeElement.children)\n            .map((child) => getNodeSizeViaRange(range, child)));\n        return largestWidth + indicatorWidth + indicatorMargin + leftPadding;\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, GridSummaryPosition, GridSummaryCalculationMode, IGridDataBindable } from '../grid-base.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { ISummaryRecord } from '../summaries/grid-summary';\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridSummary',\n    pure: true\n})\nexport class IgxTreeGridSummaryPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n     }\n\n    public transform(flatData: ITreeGridRecord[],\n        hasSummary: boolean,\n        summaryCalculationMode: GridSummaryCalculationMode,\n        summaryPosition: GridSummaryPosition,\n        id: string, pipeTrigger: number, summaryPipeTrigger: number): any[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        if (!flatData || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {\n            return flatData;\n        }\n\n        return this.addSummaryRows(grid, flatData, summaryPosition);\n    }\n\n    private addSummaryRows(grid: IgxTreeGridComponent, collection: ITreeGridRecord[], summaryPosition: GridSummaryPosition): any[] {\n        const recordsWithSummary = [];\n        const maxSummaryHeight = grid.summaryService.calcMaxSummaryHeight();\n\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            recordsWithSummary.push(record);\n\n            const isExpanded = record.children && record.children.length > 0 && record.expanded;\n\n            if (summaryPosition === GridSummaryPosition.bottom && !isExpanded) {\n                let childRecord = record;\n                let parent = record.parent;\n\n                while (parent) {\n                    const children = parent.children;\n\n                    if (children[children.length - 1] === childRecord ) {\n                        let childData = children.filter(r => !r.isFilteredOutParent).map(r => r.data);\n                        childData = this.removeDeletedRecord(grid, parent.rowID, childData);\n                        const summaries = grid.summaryService.calculateSummaries(parent.rowID, childData);\n                        const summaryRecord: ISummaryRecord = {\n                            summaries: summaries,\n                            max: maxSummaryHeight,\n                            cellIndentation: parent.level + 1\n                        };\n                        recordsWithSummary.push(summaryRecord);\n\n                        childRecord = parent;\n                        parent = childRecord.parent;\n                    } else {\n                        break;\n                    }\n                }\n            } else if (summaryPosition === GridSummaryPosition.top && isExpanded) {\n                let childData = record.children.filter(r => !r.isFilteredOutParent).map(r => r.data);\n                childData = this.removeDeletedRecord(grid, record.rowID, childData);\n                const summaries = grid.summaryService.calculateSummaries(record.rowID, childData);\n                const summaryRecord: ISummaryRecord = {\n                    summaries: summaries,\n                    max: maxSummaryHeight,\n                    cellIndentation: record.level + 1\n                };\n                recordsWithSummary.push(summaryRecord);\n            }\n        }\n        return recordsWithSummary;\n    }\n\n    private removeDeletedRecord(grid, rowId, data) {\n        if (!grid.transactions.enabled || !grid.cascadeOnDelete) {\n            return data;\n        }\n        const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === 'delete').map(t => t.id);\n        let row = grid.records.get(rowId);\n        if (!row && deletedRows.lenght === 0) { return []; }\n        row = row.children ? row : row.parent;\n        while (row) {\n            rowId = row.rowID;\n            if (deletedRows.indexOf(rowId) !== -1) {\n                return [];\n            }\n            row = row.parent;\n        }\n        deletedRows.forEach(rowID => {\n            const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n            const index = tempData.indexOf(rowID);\n            if (index !== -1) {\n                data.splice(index, 1);\n            }\n        });\n        return data;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxTreeGridRowComponent } from './tree-grid-row.component';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { IgxTreeGridHierarchizingPipe } from './tree-grid.pipes';\nimport { IgxTreeGridFlatteningPipe, IgxTreeGridSortingPipe, IgxTreeGridPagingPipe, IgxTreeGridTransactionPipe } from './tree-grid.pipes';\nimport { IgxTreeGridCellComponent } from './tree-cell.component';\nimport { IgxTreeGridFilteringPipe } from './tree-grid.filtering.pipe';\nimport { IgxTreeGridSummaryPipe } from './tree-grid.summary.pipe';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxTreeGridHierarchizingPipe,\n    IgxTreeGridFlatteningPipe,\n    IgxTreeGridSortingPipe,\n    IgxTreeGridFilteringPipe,\n    IgxTreeGridPagingPipe,\n    IgxTreeGridTransactionPipe,\n    IgxTreeGridSummaryPipe\n  ],\n  exports: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxGridCommonModule\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridCommonModule\n  ]\n})\nexport class IgxTreeGridModule {\n}\n","import { IgxSelectionAPIService } from '../../core/selection';\nimport { Injectable } from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\n\n/** @hidden */\nexport class IgxHierarchicalSelectionAPIService extends IgxSelectionAPIService {\n    protected hSelection: Map<string,  Map<string, any>> = new Map<string,   Map<string, any>>();\n\n    public add_sub_item(rootID: string,  parentID: string, cell: any) {\n        const selItem = new Map<string, any>();\n        selItem.set(parentID, cell);\n        this.hSelection.set(rootID, selItem);\n    }\n\n    public get_sub_item(rootID: string) {\n        let selItem;\n        const sel = this.hSelection.get(rootID);\n        if (sel) {\n            selItem = {\n                gridID: this.hSelection.get(rootID).keys().next().value ,\n                cell: this.hSelection.get(rootID).values().next().value\n            };\n        }\n        return selItem;\n    }\n\n    public clear_sub_item(rootID: string) {\n        return this.hSelection.set(rootID, null);\n    }\n\n}\n","import { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { first } from 'rxjs/operators';\nimport { FilterMode } from '../grid-base.component';\nimport { IgxColumnComponent } from '../../grids/column.component';\nimport { isIE } from '../../core/utils';\n\nexport class IgxHierarchicalGridNavigationService extends IgxGridNavigationService {\n    public grid: IgxHierarchicalGridComponent;\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false) {\n        return isSummary ? 'igx-grid-summary-cell' : 'igx-hierarchical-grid-cell';\n    }\n\n    protected getRowSelector() {\n        return 'igx-hierarchical-grid-row';\n    }\n\n    protected getRowByIndex(index) {\n        const selector = this.getRowSelector();\n        const rows = Array.from(this.grid.nativeElement.querySelectorAll(\n            `${selector}[data-rowindex=\"${index}\"]`));\n        let row;\n        rows.forEach((r) => {\n            const parentGrid = this.getClosestElemByTag(r, 'igx-hierarchical-grid');\n            if (parentGrid && parentGrid.getAttribute('id') === this.grid.id) {\n                    row = r;\n            }\n        });\n        return row;\n    }\n\n    private getChildContainer(grid?) {\n        const currGrid = grid || this.grid;\n        return currGrid.nativeElement.parentNode.parentNode.parentNode;\n    }\n\n    private getChildGridRowContainer(grid?) {\n        const currGrid = grid || this.grid;\n        return currGrid.nativeElement.parentNode.parentNode;\n    }\n\n    private getChildGrid(childGridID, grid) {\n        const cgrid = grid.hgridAPI.getChildGrids(true).filter((g) => g.id === childGridID)[0];\n        return cgrid;\n    }\n\n    private _isScrolledToBottom(grid) {\n        const scrollTop = grid.verticalScrollContainer.getVerticalScroll().scrollTop;\n        const scrollHeight = grid.verticalScrollContainer.getVerticalScroll().scrollHeight;\n        return scrollHeight === 0 || Math.round(scrollTop +  grid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n    }\n    private getIsChildAtIndex(index) {\n        return this.grid.isChildGridRecord(this.grid.verticalScrollContainer.igxForOf[index]);\n    }\n\n    public getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary = false) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        if (isSummary) {\n            const summaryRow =  this.grid.summariesRowList.toArray()[0].nativeElement;\n            return summaryRow.querySelector(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n        }\n        const row = this.getRowByIndex(rowIndex);\n        return row.querySelector(\n            `${cellSelector}[data-rowindex=\"${rowIndex}\"][data-visibleIndex=\"${visibleColumnIndex}\"]`);\n    }\n\n    public navigateUp(rowElement, currentRowIndex, visibleColumnIndex) {\n        const prevElem = rowElement.previousElementSibling;\n        if (prevElem) {\n            const nodeName =  prevElem.children[0].nodeName.toLowerCase();\n            const isElemChildGrid =  nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isElemChildGrid) {\n                this.focusPrevChild(prevElem, visibleColumnIndex, this.grid);\n            } else {\n                if (this.grid.parent !== null) {\n                    // currently navigating in child grid\n                    this._navigateUpInChild(rowElement, currentRowIndex, visibleColumnIndex);\n                } else {\n                    super.navigateUp(rowElement, currentRowIndex, visibleColumnIndex);\n                }\n            }\n        } else if (currentRowIndex !== 0) {\n            // handle scenario when prev item is child grid but is not yet in view\n            const isPrevChildGrid = this.getIsChildAtIndex(currentRowIndex - 1);\n            if (!isPrevChildGrid) {\n                super.navigateUp(rowElement, currentRowIndex, visibleColumnIndex);\n            } else {\n                this.scrollGrid(this.grid, -rowElement.offsetHeight,\n                    () => {\n                        rowElement = this.getRowByIndex(currentRowIndex);\n                        this.navigateUp(rowElement, currentRowIndex, visibleColumnIndex);\n                    });\n            }\n        } else if (this.grid.parent !== null &&\n            currentRowIndex === 0) {\n                // move to prev row in sibling layout or parent\n                this.focusPrev(visibleColumnIndex);\n        }\n    }\n    public navigateDown(rowElement, currentRowIndex, visibleColumnIndex) {\n        const nextElem = rowElement.nextElementSibling;\n        if (nextElem) {\n            // next elem is in DOM\n            const nodeName =  nextElem.children[0].nodeName.toLowerCase();\n            const isNextElemChildGrid =  nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isNextElemChildGrid) {\n                this.focusNextChild(nextElem, visibleColumnIndex, this.grid);\n            } else {\n                if (this.grid.parent !== null) {\n                    // currently navigating in child grid\n                    this._navigateDownInChild(rowElement, currentRowIndex, visibleColumnIndex);\n                } else {\n                    super.navigateDown(rowElement, currentRowIndex, visibleColumnIndex);\n                }\n            }\n        } else if (currentRowIndex !== this.grid.verticalScrollContainer.igxForOf.length - 1) {\n             // scroll next in view\n             super.navigateDown(rowElement, currentRowIndex, visibleColumnIndex);\n        } else if (this.grid.parent !== null &&\n            currentRowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1) {\n                // move to next row in sibling layout or in parent\n                this.focusNext(visibleColumnIndex);\n        }\n    }\n\n    public navigateTop(visibleColumnIndex) {\n        if (this.grid.parent !== null) {\n            // navigating in child\n            const childContainer = this.grid.nativeElement.parentNode.parentNode;\n            const diff =\n            childContainer.getBoundingClientRect().top - this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top;\n            const topIsVisible = diff >= 0;\n            const scrollable = this.getNextScrollable(this.grid);\n            if (!topIsVisible) {\n                this.scrollGrid(scrollable.grid, diff,\n                    () => super.navigateTop(visibleColumnIndex));\n            } else {\n                super.navigateTop(visibleColumnIndex);\n            }\n        } else {\n            super.navigateTop(visibleColumnIndex);\n        }\n    }\n\n    public navigateBottom(visibleColumnIndex) {\n        // handle scenario where last index is child grid\n        // in that case focus cell in last data row\n        const lastIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;\n        if (this.getIsChildAtIndex(lastIndex)) {\n            const targetIndex = lastIndex - 1;\n            const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n            const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n            const cellSelector = this.getCellSelector(visibleColumnIndex);\n            if (verticalScroll.scrollTop === scrTopPosition) {\n                const cells = this.getRowByIndex(targetIndex).querySelectorAll(\n                    `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                cells[cells.length - 1].focus();\n            } else {\n                this.scrollGrid(this.grid, scrTopPosition - verticalScroll.scrollTop,\n                () => {\n                    const cells = this.getRowByIndex(targetIndex).querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) { cells[cells.length - 1].focus(); }\n                });\n            }\n        } else  if (this.grid.parent !== null) {\n            const childContainer = this.grid.nativeElement.parentNode.parentNode;\n            const diff =\n            childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const endIsVisible = diff < 0;\n            const scrollable = this.getNextScrollableDown(this.grid);\n            if (!endIsVisible) {\n                this.scrollGrid(scrollable.grid, diff,\n                    () => super.navigateBottom(visibleColumnIndex));\n            } else {\n                super.navigateBottom(visibleColumnIndex);\n            }\n        } else {\n            super.navigateBottom(visibleColumnIndex);\n        }\n    }\n    public goToLastCell() {\n        // handle scenario where last index is child grid\n        // in that case focus last cell in last data row\n        const lastIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;\n        if (this.getIsChildAtIndex(lastIndex)) {\n            const targetIndex = lastIndex - 1;\n            const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n            const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n            if (verticalScroll.scrollTop === scrTopPosition) {\n                this.onKeydownEnd(targetIndex);\n            } else {\n                this.scrollGrid(this.grid, scrTopPosition - verticalScroll.scrollTop,\n                    () => {\n                        this.onKeydownEnd(targetIndex);\n                    });\n            }\n        } else {\n            super.goToLastCell();\n        }\n    }\n\n    public onKeydownEnd(rowIndex, isSummary = false) {\n        if (this.grid.parent && !isSummary) {\n            // handle scenario where last child row might not be in view\n            // parent should scroll to child grid end\n            const childContainer = this.grid.nativeElement.parentNode.parentNode;\n            const diffBottom =\n            childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.nativeElement.getBoundingClientRect().bottom;\n            const row = this.grid.getRowByIndex(rowIndex).element.nativeElement;\n            const rowBottom = row.getBoundingClientRect().bottom;\n            const rowIsVisible = rowBottom <= this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const gridTop = this._getMaxTop(this.grid);\n            const diffTop = row.getBoundingClientRect().bottom -\n            row.offsetHeight - gridTop;\n            const endIsVisible = diffBottom <= 0;\n            const topVisible = diffTop >= 0;\n            if (!endIsVisible && !rowIsVisible) {\n                this.scrollGrid(this.grid.parent, diffBottom, () => super.onKeydownEnd(rowIndex));\n            } else if (!topVisible) {\n                const scrGrid = this.grid.verticalScrollContainer.getVerticalScroll().scrollTop !== 0 ? this.grid :\n                this.getNextScrollable(this.grid).grid;\n                const topGrid = scrGrid.tbody.nativeElement.getBoundingClientRect().top >\n                this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top ? scrGrid : this.grid.rootGrid;\n                this.scrollGrid(topGrid, diffTop, () => super.onKeydownEnd(rowIndex));\n            } else {\n                super.onKeydownEnd(rowIndex, isSummary);\n            }\n        } else {\n            super.onKeydownEnd(rowIndex, isSummary);\n        }\n\n    }\n\n    public goToFirstCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const horizontalScroll = this.grid.dataRowList.first.virtDirRow.getHorizontalScroll();\n        if (verticalScroll.scrollTop === 0 && this.grid.parent) {\n            // scroll parent so that current child is in view\n            if (!horizontalScroll.clientWidth || parseInt(horizontalScroll.scrollLeft, 10) <= 1 || this.grid.pinnedColumns.length) {\n                this.navigateTop(0);\n            } else {\n                this.horizontalScroll(this.grid.dataRowList.first.index).scrollTo(0);\n                this.grid.parentVirtDir.onChunkLoad\n                    .pipe(first())\n                    .subscribe(() => {\n                        this.navigateTop(0);\n                    });\n            }\n        } else {\n            super.goToFirstCell();\n        }\n    }\n\n    public performTab(currentRowEl, rowIndex, visibleColumnIndex, isSummaryRow = false) {\n        const summaryRows = this.grid.summariesRowList.toArray();\n        const hasSummaries = summaryRows.length > 0;\n        const isLastDataRow = rowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1;\n        const nextIsDataRow = this.grid.dataRowList.find(row => row.index === rowIndex + 1) ;\n        const isLastColumn =  this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex;\n        const isLastSummaryRow = hasSummaries && isSummaryRow;\n        const nextIndex = rowIndex + 1;\n        const virt = this.grid.verticalScrollContainer;\n        const isNextChild = nextIndex <= virt.igxForOf.length - 1 &&\n            this.grid.isChildGridRecord(virt.igxForOf[nextIndex]);\n        if (this.grid.rowInEditMode) {\n            super.performTab(currentRowEl, rowIndex, visibleColumnIndex, isSummaryRow);\n            return;\n        }\n        if (!nextIsDataRow && !(isLastDataRow && hasSummaries) && isLastColumn && !isSummaryRow) {\n            // navigating in child, next is not summary\n            const childContainer = this.getChildGridRowContainer();\n            const nextIsSiblingChild = this.grid.parent ? !!childContainer.nextElementSibling : false;\n            if (nextIsSiblingChild) {\n                this.focusNextChildDOMElem(childContainer, this.grid.parent);\n            } else if (isNextChild) {\n                const isInView = virt.state.startIndex + virt.state.chunkSize > nextIndex;\n                if (!isInView) {\n                    this.scrollGrid(this.grid, 'next', () => {\n                        this.focusNextChildDOMElem(currentRowEl, this.grid);\n                    });\n                } else {\n                    this.focusNextChildDOMElem(currentRowEl, this.grid);\n                }\n            } else if (this.grid.parent && this.grid.parent.summariesRowList.length > 0) {\n               this._navigateToNextParentRow(currentRowEl);\n            } else {\n                this.navigateDown(currentRowEl, rowIndex, 0);\n            }\n        } else if (isLastSummaryRow && isLastColumn && this.grid.parent) {\n            this._navigateToNextParentRow(currentRowEl);\n        } else  if (isLastDataRow && hasSummaries && isLastColumn && this.grid.parent) {\n            // navigating in child rows, next is child grid's summary row\n           this.focusNextRow(summaryRows[0].nativeElement, 0, this.grid.parent, true);\n        } else {\n            super.performTab(currentRowEl, rowIndex, visibleColumnIndex, isSummaryRow);\n        }\n    }\n\n    private _navigateToNextParentRow(currentRowEl: any): void {\n         // next is parent summary or next parent row\n         const parent = this.grid.parent;\n         const parentHasSummary = parent.summariesRowList.length > 0;\n         const parentRowIndex = parseInt(\n            this.getClosestElemByTag(currentRowEl, 'igx-child-grid-row').parentNode.getAttribute('data-rowindex'), 10);\n         const isLastRowInParent = parent.verticalScrollContainer.igxForOf.length - 1 === parentRowIndex;\n         // check if next is sibling\n         const childRowContainer = this.getChildGridRowContainer(this.grid);\n         const nextIsSiblingChild = !!childRowContainer.nextElementSibling;\n         if (isLastRowInParent && parentHasSummary && !nextIsSiblingChild) {\n             // next is parent summary\n             const parentSummary = parent.summariesRowList.first.nativeElement;\n             parent.navigation.focusNextRow(parentSummary, 0, parent, true);\n         } else {\n             // next is sibling or parent\n             this.focusNext(0);\n         }\n    }\n\n    private focusNextChildDOMElem(currentRowEl, grid) {\n        const gridElem = currentRowEl.nextElementSibling.querySelector('igx-hierarchical-grid');\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n        if (childGrid.allowFiltering && childGrid.filterMode === FilterMode.quickFilter) {\n            childGrid.navigation.moveFocusToFilterCell(true);\n            return;\n        }\n        this.focusNextChild(currentRowEl.nextElementSibling, 0, grid);\n    }\n\n    public navigatePrevFilterCell(column: IgxColumnComponent, eventArgs) {\n        if (column.visibleIndex === 0 && this.grid.parent) {\n            eventArgs.preventDefault();\n            let targetGrid = this.grid.parent;\n            const prevSiblingChild = this.getChildGridRowContainer().previousElementSibling;\n            if (prevSiblingChild) {\n                const gridElem = prevSiblingChild.querySelectorAll('igx-hierarchical-grid')[0];\n                targetGrid = this.getChildGrid(gridElem.getAttribute('id'), this.grid.parent);\n            }\n            this.focusPrev(targetGrid.unpinnedColumns[targetGrid.unpinnedColumns.length - 1].visibleIndex);\n        } else {\n            super.navigatePrevFilterCell(column, eventArgs);\n        }\n    }\n\n    public navigateNextFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const nextFilterableIndex = cols.indexOf(column) + 1;\n        if (nextFilterableIndex >= this.grid.filteringService.unpinnedFilterableColumns.length) {\n            // next is not filter cell\n            const dataRows = this.grid.rowList.toArray();\n            const hasRows = dataRows.length !== 0;\n            const summaryRows = this.grid.summariesRowList.toArray();\n            const hasSummaries = summaryRows.length > 0 && summaryRows[0].summaryCells.length > 0;\n            if (hasRows) {\n                this.focusNextRow(dataRows[0].nativeElement, 0, this.grid, false);\n            } else if (hasSummaries) {\n                this.focusNextRow(summaryRows[0].nativeElement, 0, this.grid, true);\n            } else {\n                this.focusNext(0);\n            }\n            eventArgs.preventDefault();\n        } else {\n            super.navigateNextFilterCell(column, eventArgs);\n        }\n    }\n\n    public performShiftTabKey(currentRowEl, rowIndex, visibleColumnIndex, isSummary = false) {\n        if (this.grid.rowInEditMode) {\n            super.performShiftTabKey(currentRowEl, rowIndex, visibleColumnIndex, isSummary);\n            return;\n        }\n        if (visibleColumnIndex === 0 && rowIndex === 0 && this.grid.parent && !isSummary) {\n            if (this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                this.moveFocusToFilterCell();\n            } else {\n                const prevSiblingChild = this.getChildGridRowContainer().previousElementSibling;\n                if (prevSiblingChild) {\n                    const gridElem = prevSiblingChild.querySelectorAll('igx-hierarchical-grid')[0];\n                    this.performShiftTabIntoChild(gridElem, currentRowEl, rowIndex);\n                } else {\n                    this.navigateUp(currentRowEl, rowIndex,\n                        this.grid.parent.unpinnedColumns[this.grid.parent.unpinnedColumns.length - 1].visibleIndex);\n                }\n            }\n        } else if (visibleColumnIndex === 0 && currentRowEl.previousElementSibling &&\n            currentRowEl.previousElementSibling.children[0].tagName.toLowerCase() === 'igx-child-grid-row') {\n            const gridElem = this.getLastGridElem(currentRowEl.previousElementSibling);\n            this.performShiftTabIntoChild(gridElem, currentRowEl, rowIndex);\n        } else if (visibleColumnIndex === 0 && isSummary) {\n            const lastRowIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;\n            if (lastRowIndex === -1) {\n                // no child data\n                if (this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                    this.moveFocusToFilterCell();\n                } else {\n                    this.navigateUp(currentRowEl, rowIndex,\n                        this.grid.parent.unpinnedColumns[this.grid.parent.unpinnedColumns.length - 1].visibleIndex);\n                }\n            } else if (!this.getIsChildAtIndex(lastRowIndex)) {\n                super.goToLastCell();\n            } else {\n                const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(lastRowIndex, true);\n                const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n                if (verticalScroll.scrollTop === scrTopPosition || isNaN(scrTopPosition)) {\n                    const closestChild = this.getLastGridElem(this.grid.getRowByIndex(lastRowIndex).nativeElement.parentElement);\n                    this.performShiftTabIntoChild(closestChild, currentRowEl, rowIndex);\n                } else {\n                    this.scrollGrid(this.grid, scrTopPosition - verticalScroll.scrollTop,\n                        () => {\n                            const closestChild = this.getLastGridElem(this.grid.getRowByIndex(lastRowIndex).nativeElement.parentElement);\n                            this.performShiftTabIntoChild(closestChild, currentRowEl, rowIndex);\n                        });\n                }\n            }\n        } else {\n            super.performShiftTabKey(currentRowEl, rowIndex, visibleColumnIndex, isSummary);\n        }\n    }\n\n    public getFocusableGrid() {\n        return (isIE() && this.grid.rootGrid) ? this.grid.rootGrid : this.grid;\n    }\n\n    private getLastGridElem(trContainer) {\n        const children = trContainer.children;\n        const closestChild = children[children.length - 1].children[0].children[0];\n        return closestChild;\n    }\n\n    private performShiftTabIntoChild(gridElem, currentRowEl, rowIndex) {\n        const childGridID = gridElem.getAttribute('id');\n            const childGrid = this.getChildGrid(childGridID, this.grid) || this.getChildGrid(childGridID, this.grid.parent);\n            const lastIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n            const summaryRows = childGrid.summariesRowList.toArray();\n            if (summaryRows.length > 0 && summaryRows[0].summaryCells.length > 0) {\n                // move focus to last summary row cell\n                const summaryRow = summaryRows[0].nativeElement;\n                this.focusPrevRow(summaryRow, lastIndex, childGrid, true, true);\n            } else if (childGrid.rowList.toArray().length === 0 &&\n             childGrid.allowFiltering && childGrid.filterMode === FilterMode.quickFilter) {\n                 // move to filter cell\n                childGrid.navigation.moveFocusToFilterCell();\n            } else if (childGrid.rowList.length === 0) {\n                // move to prev child or parent row\n                const prevChild = this.getSibling(childGrid);\n                if (prevChild) {\n                    this.performShiftTabIntoChild(prevChild, currentRowEl, rowIndex);\n                } else {\n                    this.navigateUp(currentRowEl, rowIndex,\n                        this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex);\n                }\n            } else {\n                // move to prev cell\n                childGrid.navigation.goToLastCell();\n            }\n    }\n\n    private getSibling(childGrid) {\n        const prevChildRow = childGrid.childRow.nativeElement.previousElementSibling;\n        if (prevChildRow) {\n            return prevChildRow.children[0].children[0];\n        }\n        return null;\n    }\n\n    private focusNextChild(elem, visibleColumnIndex, grid) {\n        const gridElem = elem.querySelector('igx-hierarchical-grid');\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n\n        if (childGrid.rowList.toArray().length === 0) {\n            this.focusNext(visibleColumnIndex, childGrid);\n            return;\n        }\n\n        // Update column index since the next child can have in general less columns than visibleColumnIndex value.\n        const lastCellIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n\n        if (childGrid.verticalScrollContainer.state.startIndex !== 0) {\n            // scroll to top\n            this.scrollGrid(childGrid, 'top', () => this.focusNextRow(elem, visibleColumnIndex, childGrid));\n        } else {\n            this.focusNextRow(elem, visibleColumnIndex, childGrid);\n        }\n    }\n    private focusPrevChild(elem, visibleColumnIndex, grid) {\n        const grids = [];\n        const gridElems = Array.from(elem.querySelectorAll('igx-hierarchical-grid'));\n        const childLevel = grid.childLayoutList.first.level;\n        gridElems.forEach((hg) => {\n            const parentRow = this.getClosestElemByTag(hg, 'igx-child-grid-row');\n            if (parentRow && parseInt(parentRow.getAttribute('data-level'), 10) === childLevel) {\n                grids.push(hg);\n            }\n        });\n        const gridElem = grids[grids.length - 1];\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n\n        if (childGrid.rowList.toArray().length === 0) {\n            this.focusPrev(visibleColumnIndex, childGrid);\n            return;\n        }\n\n        // Update column index since the previous child can have in general less columns than visibleColumnIndex value.\n        const lastCellIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n\n        const isScrolledToBottom = this._isScrolledToBottom(childGrid);\n        const lastIndex = childGrid.verticalScrollContainer.igxForOf.length - 1;\n        if (!isScrolledToBottom) {\n            // scroll to end\n            this.scrollGrid(childGrid, 'bottom', () => this.focusPrevChild(elem, visibleColumnIndex, grid));\n        } else {\n            const lastRowInChild = childGrid.getRowByIndex(lastIndex);\n            const isChildGrid = lastRowInChild.nativeElement.nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isChildGrid) {\n                this.focusPrevChild(lastRowInChild.nativeElement.parentNode, visibleColumnIndex, childGrid);\n            } else {\n                this.focusPrevRow(lastRowInChild.nativeElement, visibleColumnIndex, childGrid, true);\n            }\n        }\n    }\n    private focusPrev(visibleColumnIndex, grid?) {\n        const currGrid = grid || this.grid;\n        let parentContainer = this.getChildContainer(currGrid);\n        let childRowContainer = this.getChildGridRowContainer(currGrid);\n        const prevIsSiblingChild = !!childRowContainer.previousElementSibling;\n        let prev = childRowContainer.previousElementSibling || parentContainer.previousElementSibling;\n        if (prev) {\n            if (prevIsSiblingChild) {\n                this.focusPrevChild(prev, visibleColumnIndex, currGrid.parent);\n            } else {\n                this.focusPrevRow(prev, visibleColumnIndex, currGrid.parent);\n            }\n        } else {\n            this.scrollGrid(currGrid.parent, 'prev',\n            () => {\n            parentContainer = this.getChildContainer(grid);\n            childRowContainer = this.getChildGridRowContainer(grid);\n            prev = childRowContainer.previousElementSibling || parentContainer.previousElementSibling;\n            if (prevIsSiblingChild) {\n                this.focusPrevChild(prev, visibleColumnIndex, currGrid.parent);\n            } else {\n                this.focusPrevRow(prev, visibleColumnIndex, currGrid.parent);\n            }\n            });\n        }\n    }\n\n    private getNextParentInfo(grid) {\n        // find next parent that is not at bottom\n        let currGrid = grid.parent;\n        let nextElem = this.getChildContainer(grid).nextElementSibling;\n        while (!nextElem && currGrid.parent !== null) {\n            nextElem = this.getChildContainer(currGrid).nextElementSibling;\n            currGrid = currGrid.parent;\n        }\n\n        return { grid: currGrid, nextElement: nextElem};\n    }\n    private getNextScrollable(grid) {\n        let currGrid = grid.parent;\n        if (!currGrid) {\n            return {grid: grid, prev: null };\n        }\n        let nonScrollable = currGrid.verticalScrollContainer.getVerticalScroll().scrollTop === 0;\n        let prev = grid;\n        while (nonScrollable && currGrid.parent !== null) {\n            prev = currGrid;\n            currGrid = currGrid.parent;\n            nonScrollable = currGrid.verticalScrollContainer.getVerticalScroll().scrollTop === 0;\n        }\n        return {grid: currGrid, prev: prev };\n    }\n\n    private focusNext(visibleColumnIndex, grid?) {\n        const currGrid = grid || this.grid;\n        const parentInfo = this.getNextParentInfo(currGrid);\n        const nextParentGrid = parentInfo.grid;\n        let nextParentElem = parentInfo.nextElement;\n        let childRowContainer = this.getChildGridRowContainer(currGrid);\n        const nextIsSiblingChild = !!childRowContainer.nextElementSibling;\n        let next = childRowContainer.nextElementSibling || nextParentElem;\n        const verticalScroll = nextParentGrid.verticalScrollContainer.getVerticalScroll();\n        const parentState = nextParentGrid.verticalScrollContainer.state;\n        const atLastChunk = parentState.startIndex + parentState.chunkSize ===\n         nextParentGrid.verticalScrollContainer.igxForOf.length;\n        if (next) {\n            if (nextIsSiblingChild) {\n                this.focusNextChild(next, visibleColumnIndex, nextParentGrid);\n            } else {\n                this.focusNextRow(next, visibleColumnIndex, grid || nextParentGrid);\n            }\n        } else if (verticalScroll.scrollTop !==\n            verticalScroll.scrollHeight - nextParentGrid.verticalScrollContainer.igxForContainerSize && !atLastChunk) {\n            this.scrollGrid(nextParentGrid, 'next',\n            () => {\n                nextParentElem = parentInfo.nextElement;\n                childRowContainer = this.getChildGridRowContainer();\n                next = childRowContainer.nextElementSibling || nextParentElem;\n                if (next && nextIsSiblingChild) {\n                    this.focusNextChild(next, visibleColumnIndex, nextParentGrid);\n                } else if (next) {\n                    this.focusNextRow(next, visibleColumnIndex, grid || nextParentGrid);\n                }\n            });\n        }\n    }\n    private getNextScrollableDown(grid) {\n        let currGrid = grid.parent;\n        if (!currGrid) {\n            return {grid: grid, prev: null };\n        }\n        let scrollTop = currGrid.verticalScrollContainer.getVerticalScroll().scrollTop;\n        let scrollHeight = currGrid.verticalScrollContainer.getVerticalScroll().scrollHeight;\n        let nonScrollable = scrollHeight === 0 ||\n        Math.round(scrollTop +  currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n        let prev = grid;\n        while (nonScrollable && currGrid.parent !== null) {\n            prev = currGrid;\n            currGrid = currGrid.parent;\n            scrollTop = currGrid.verticalScrollContainer.getVerticalScroll().scrollTop;\n            scrollHeight = currGrid.verticalScrollContainer.getVerticalScroll().scrollHeight;\n            nonScrollable = scrollHeight === 0 ||\n            Math.round(scrollTop +  currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n        }\n        return {grid: currGrid, prev: prev };\n    }\n\n    private _getMinBottom(grid) {\n        let currGrid = grid;\n        let bottom = currGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n            bottom = Math.min(bottom, currGrid.tbody.nativeElement.getBoundingClientRect().bottom);\n        }\n        return bottom;\n    }\n\n    private _getMaxTop(grid) {\n        let currGrid = grid;\n        let top = currGrid.tbody.nativeElement.getBoundingClientRect().top;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n            top = Math.max(top, currGrid.tbody.nativeElement.getBoundingClientRect().top);\n        }\n        return top;\n    }\n\n    private focusNextRow(elem, visibleColumnIndex, grid, isSummary?) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        if (grid.navigation.isColumnFullyVisible(visibleColumnIndex) && grid.navigation.isColumnLeftFullyVisible(visibleColumnIndex)) {\n            const cell =\n            elem.querySelector(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            const closestScrollableGrid = this.getNextScrollableDown(grid).grid;\n            // const diff = cell.getBoundingClientRect().bottom - grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const gridBottom = this._getMinBottom(grid);\n            const diff = cell.getBoundingClientRect().bottom - gridBottom;\n            const inView =  diff <= 0;\n            const scrollTop = closestScrollableGrid.verticalScrollContainer.getVerticalScroll().scrollTop;\n            const scrollHeight = closestScrollableGrid.verticalScrollContainer.getVerticalScroll().scrollHeight;\n            const canScroll = !(scrollHeight === 0 ||\n        Math.round(scrollTop +  closestScrollableGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight);\n            if (!inView && canScroll) {\n                this.scrollGrid(closestScrollableGrid, diff, () => cell.focus({ preventScroll: true }));\n            } else {\n                cell.focus({ preventScroll: true });\n            }\n        } else {\n            const cellElem = elem.querySelector(`${cellSelector}`);\n            const rowIndex = parseInt(cellElem.getAttribute('data-rowindex'), 10);\n            grid.navigation.performHorizontalScrollToCell(rowIndex, visibleColumnIndex);\n        }\n    }\n\n    private focusPrevRow(elem, visibleColumnIndex, grid, inChild?, isSummary?) {\n        if (grid.navigation.isColumnFullyVisible(visibleColumnIndex) && grid.navigation.isColumnLeftFullyVisible(visibleColumnIndex)) {\n            const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n            const cells =  elem.querySelectorAll(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            let cell = cells[cells.length - 1];\n            const rIndex = parseInt(elem.getAttribute('data-rowindex'), 10);\n            const scrGrid = grid.verticalScrollContainer.getVerticalScroll().scrollTop !== 0 ? grid :\n             this.getNextScrollable(grid).grid;\n            const topGrid = scrGrid.tbody.nativeElement.getBoundingClientRect().top >\n            grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top ? scrGrid : grid.rootGrid;\n            const gridTop = this._getMaxTop(grid);\n            const scrTop = scrGrid.verticalScrollContainer.getVerticalScroll().scrollTop;\n            const diff = cell.getBoundingClientRect().bottom -\n            cell.offsetHeight - gridTop;\n            if (scrTop !== 0 && diff < 0 && !inChild) {\n                this.scrollGrid(scrGrid, diff, () => {\n                    const el = !isSummary ? grid.navigation.getRowByIndex(rIndex) : elem;\n                    cell = el.querySelectorAll(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`)[0];\n                    cell.focus({ preventScroll: true });\n                });\n            } else if (diff < 0 && inChild) {\n                this.scrollGrid(topGrid, diff, () => {\n                    cell.focus({ preventScroll: true });\n                });\n            } else {\n                cell.focus({ preventScroll: true });\n            }\n        } else {\n            this.horizontalScrollGridToIndex(grid, visibleColumnIndex, () => {\n                this.focusPrevRow(elem, visibleColumnIndex, grid, inChild, isSummary);\n            });\n        }\n    }\n\n    private horizontalScrollGridToIndex(grid, visibleColumnIndex, callBackFunc) {\n        const unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex);\n        grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(callBackFunc);\n        if (grid.dataRowList.length > 0) {\n            grid.dataRowList.first.virtDirRow.scrollTo(unpinnedIndex);\n        } else {\n            grid.headerContainer.scrollTo(unpinnedIndex);\n        }\n\n    }\n    private scrollGrid(grid, target, callBackFunc) {\n        this.getFocusableGrid().nativeElement.focus({preventScroll: true});\n        requestAnimationFrame(() => {\n            if (typeof target === 'number') {\n                grid.verticalScrollContainer.addScrollTop(target);\n            } else {\n                switch (target) {\n                    case 'top' : grid.verticalScrollContainer.scrollTo(0); break;\n                    case 'bottom' : grid.verticalScrollContainer.scrollTo(grid.verticalScrollContainer.igxForOf.length - 1); break;\n                    case 'next' :  grid.verticalScrollContainer.scrollNext(); break;\n                    case 'prev' :  grid.verticalScrollContainer.scrollPrev(); break;\n                }\n            }\n            grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(callBackFunc);\n        });\n    }\n\n    private _navigateUpInChild(rowElement, currentRowIndex, visibleColumnIndex) {\n        const prevElem = rowElement.previousElementSibling;\n        const scrollable = this.getNextScrollable(this.grid);\n        const grid = scrollable.grid;\n        const scrTop = grid.verticalScrollContainer.getVerticalScroll().scrollTop;\n        const containerTop = scrollable.prev.nativeElement.parentNode.parentNode.parentNode.parentNode;\n        const top = parseInt(containerTop.style.top, 10);\n        if (scrTop !== 0 && top < 0) {\n            this.scrollGrid(grid, -prevElem.offsetHeight,\n                () => super.navigateUp(rowElement, currentRowIndex, visibleColumnIndex));\n        } else {\n            super.navigateUp(rowElement, currentRowIndex, visibleColumnIndex);\n        }\n    }\n\n    private _navigateDownInChild(rowElement, currentRowIndex, visibleColumnIndex) {\n        const nextElem = rowElement.nextElementSibling;\n        const childContainer = this.grid.nativeElement.parentNode.parentNode;\n        const diff =\n        childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.nativeElement.getBoundingClientRect().bottom;\n        const endIsVisible = diff < 0;\n        const scrollable = this.getNextScrollableDown(this.grid);\n        const grid = scrollable.grid;\n        if (!endIsVisible) {\n            this.scrollGrid(grid, nextElem.offsetHeight,\n                () => super.navigateDown(rowElement, currentRowIndex, visibleColumnIndex));\n        } else {\n            super.navigateDown(rowElement, currentRowIndex, visibleColumnIndex);\n        }\n    }\n\n    private getClosestElemByTag(sourceElem, targetTag) {\n        let result = sourceElem;\n        while (result !== null && result.nodeType === 1) {\n            if (result.tagName.toLowerCase() === targetTag.toLowerCase()) {\n                return result;\n            }\n            result = result.parentNode;\n        }\n        return null;\n    }\n}\n","import {\n    QueryList,\n    ContentChildren,\n    ElementRef,\n    NgZone,\n    ChangeDetectorRef,\n    IterableDiffers,\n    ViewContainerRef,\n    Inject,\n    ComponentFactoryResolver,\n    Optional,\n    Input\n} from '@angular/core';\nimport { IgxGridBaseComponent, IgxGridTransaction, IGridDataBindable } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from '../column.component';\nimport { IgxSummaryOperand } from '../summaries/grid-summary';\nimport { IgxHierarchicalTransactionService, IgxOverlayService } from '../../services/index';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\n\nexport const IgxHierarchicalTransactionServiceFactory = {\n    provide: IgxGridTransaction,\n    useFactory: hierarchicalTransactionServiceFactory\n};\n\nexport function hierarchicalTransactionServiceFactory() {\n    return () => new IgxHierarchicalTransactionService();\n}\n\nexport interface IPathSegment {\n    rowID: any;\n    rowIslandKey: string;\n}\n\nexport abstract class IgxHierarchicalGridBaseComponent extends IgxGridBaseComponent {\n    public abstract rootGrid;\n\n    @Input()\n    public expandChildren: boolean;\n\n    /**\n     * @hidden\n     */\n    get maxLevelHeaderDepth() {\n        if (this._maxLevelHeaderDepth === null) {\n            this._maxLevelHeaderDepth = this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);\n        }\n        return this._maxLevelHeaderDepth;\n    }\n\n     /**\n     * @hidden\n     */\n    protected get outlet() {\n        return this.rootGrid ? this.rootGrid.outletDirective : this.outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    public hgridAPI: IgxHierarchicalGridAPIService;\n\n    /**\n     * @hidden\n     */\n    public parentIsland: IgxRowIslandComponent;\n\n    /**\n     * @hidden\n    */\n    public childRow: IgxChildGridRowComponent;\n\n    protected _expandChildren = false;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        selection: IgxHierarchicalSelectionAPIService,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(\n            selectionService,\n            crudService,\n            gridAPI,\n            selection,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions);\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    public createColumnsList(cols: Array<any>) {\n        const columns = [];\n        const topLevelCols = this.onlyTopLevel(cols);\n        topLevelCols.forEach((col) => {\n            const ref = this._createColumn(col);\n            ref.changeDetectorRef.detectChanges();\n            columns.push(ref.instance);\n        });\n        const result = flatten(columns);\n        this.columnList.reset(result);\n        this.columnList.notifyOnChanges();\n    }\n\n    protected _createColumn(col) {\n        let ref;\n        if (col instanceof IgxColumnGroupComponent) {\n            ref = this._createColGroupComponent(col);\n        } else {\n            ref = this._createColComponent(col);\n        }\n        return ref;\n    }\n\n    protected _createColGroupComponent(col: IgxColumnGroupComponent) {\n        const factoryGroup = this.resolver.resolveComponentFactory(IgxColumnGroupComponent);\n        const ref = this.viewRef.createComponent(factoryGroup, null, this.viewRef.injector);\n        ref.changeDetectorRef.detectChanges();\n        factoryGroup.inputs.forEach((input) => {\n            const propName = input.propName;\n            (<any>ref.instance)[propName] = (<any>col)[propName];\n        });\n        if (col.children.length > 0) {\n            const newChildren = [];\n            col.children.forEach(child => {\n                const newCol = this._createColumn(child).instance;\n                newCol.parent = ref.instance;\n                newChildren.push(newCol);\n            });\n            (<IgxColumnGroupComponent>ref.instance).children.reset(newChildren);\n            (<IgxColumnGroupComponent>ref.instance).children.notifyOnChanges();\n        }\n        (<IgxColumnGroupComponent>ref.instance).grid = this;\n        return ref;\n    }\n\n    protected _createColComponent(col) {\n        const factoryColumn = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        const ref = this.viewRef.createComponent(factoryColumn, null, this.viewRef.injector);\n        factoryColumn.inputs.forEach((input) => {\n            const propName = input.propName;\n            if (!((<any>col)[propName] instanceof IgxSummaryOperand)) {\n                (<any>ref.instance)[propName] = (<any>col)[propName];\n            } else {\n                (<any>ref.instance)[propName] = col[propName].constructor;\n            }\n        });\n        (<IgxColumnComponent>ref.instance).grid = this;\n        return ref;\n    }\n\n    protected getGridsForIsland(rowIslandID: string) {\n        return this.hgridAPI.getChildGridsForRowIsland(rowIslandID);\n    }\n\n    protected getChildGrid(path: Array<IPathSegment>) {\n        if (!path) {\n            return;\n        }\n        return this.hgridAPI.getChildGrid(path);\n    }\n}\n\nfunction flatten(arr: any[]) {\n    let result = [];\n\n    arr.forEach(el => {\n        result.push(el);\n        if (el.children) {\n            result = result.concat(flatten(el.children.toArray()));\n        }\n    });\n    return result;\n}\n","import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { Subject } from 'rxjs';\nimport { IPathSegment } from './hierarchical-grid-base.component';\nimport { IgxGridBaseComponent, GridBaseAPIService, IGridDataBindable } from '../grid';\nexport class IgxHierarchicalGridAPIService extends GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable> {\n    protected childRowIslands: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected childGrids:  Map<string, Map<any, IgxHierarchicalGridComponent>> =\n        new Map<string, Map<any, IgxHierarchicalGridComponent>>();\n\n    registerChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.set(rowIsland.key, rowIsland);\n        this.destroyMap.set(rowIsland.key, new Subject<boolean>());\n    }\n\n    unsetChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childGrids.delete(rowIsland.key);\n        this.childRowIslands.delete(rowIsland.key);\n        this.destroyMap.delete(rowIsland.key);\n    }\n\n    getChildRowIsland(key: string) {\n        return this.childRowIslands.get(key);\n    }\n\n    getChildGrid(path: Array<IPathSegment>) {\n        const currPath = path;\n        let grid;\n        const pathElem = currPath.shift();\n        const childrenForLayout = this.childGrids.get(pathElem.rowIslandKey);\n        if (childrenForLayout) {\n            const childGrid = childrenForLayout.get(pathElem.rowID);\n            if (currPath.length === 0) {\n                grid = childGrid;\n            } else {\n                grid = childGrid.hgridAPI.getChildGrid(currPath);\n            }\n        }\n        return grid;\n    }\n\n    getChildGrids(inDepth?: boolean) {\n        const allChildren = [];\n        this.childGrids.forEach((layoutMap) => {\n            layoutMap.forEach((grid) => {\n                allChildren.push(grid);\n                if (inDepth) {\n                    const children = grid.hgridAPI.getChildGrids(inDepth);\n                    children.forEach((item) => {\n                        allChildren.push(item);\n                    });\n                }\n            });\n        });\n\n        return allChildren;\n    }\n\n    getParentRowId(childGrid: IgxHierarchicalGridComponent) {\n        let rowID;\n        this.childGrids.forEach((layoutMap) => {\n            layoutMap.forEach((grid, key) => {\n                if (grid === childGrid) {\n                    rowID = key;\n                    return;\n                }\n            });\n        });\n        return rowID;\n    }\n\n    registerChildGrid(parentRowID: string|object, rowIslandKey: string, grid: IgxHierarchicalGridComponent) {\n        let childrenForLayout = this.childGrids.get(rowIslandKey);\n        if (!childrenForLayout) {\n            this.childGrids.set(rowIslandKey, new Map<any, IgxHierarchicalGridComponent>());\n            childrenForLayout = this.childGrids.get(rowIslandKey);\n        }\n        childrenForLayout.set(parentRowID, grid);\n    }\n\n    getChildGridsForRowIsland(rowIslandKey): IgxHierarchicalGridComponent[] {\n        const childrenForLayout = this.childGrids.get(rowIslandKey);\n        const children = [];\n        if (childrenForLayout) {\n            childrenForLayout.forEach((child) => {\n                children.push(child);\n            });\n        }\n        return children;\n    }\n\n    getChildGridByID(rowIslandKey, rowID) {\n        const childrenForLayout = this.childGrids.get(rowIslandKey);\n        return childrenForLayout.get(rowID);\n    }\n}\n","import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { Subject } from 'rxjs';\n\nexport class IgxRowIslandAPIService {\n    public change: Subject<any> = new Subject<any>();\n    protected state: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected destroyMap: Map<string, Subject<boolean>> = new Map<string, Subject<boolean>>();\n\n    protected childRowIslands: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected childGrids:  Map<any, IgxHierarchicalGridComponent> = new Map<any, IgxHierarchicalGridComponent>();\n\n    public register(rowIsland: IgxRowIslandComponent) {\n        this.state.set(rowIsland.id, rowIsland);\n        this.destroyMap.set(rowIsland.id, new Subject<boolean>());\n    }\n\n    public unsubscribe(rowIsland: IgxRowIslandComponent) {\n        this.state.delete(rowIsland.id);\n    }\n\n    public get(id: string): IgxRowIslandComponent {\n        return this.state.get(id);\n    }\n\n    public unset(id: string) {\n        this.state.delete(id);\n        this.destroyMap.delete(id);\n    }\n\n    public reset(oldId: string, newId: string) {\n        const destroy = this.destroyMap.get(oldId);\n        const rowIsland = this.get(oldId);\n\n        this.unset(oldId);\n\n        if (rowIsland) {\n            this.state.set(newId, rowIsland);\n        }\n\n        if (destroy) {\n            this.destroyMap.set(newId, destroy);\n        }\n    }\n\n    registerChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.set(rowIsland.key, rowIsland);\n        this.destroyMap.set(rowIsland.key, new Subject<boolean>());\n    }\n\n    unsetChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.delete(rowIsland.key);\n        this.destroyMap.delete(rowIsland.key);\n    }\n\n    getChildRowIsland(rowIslandKey: string) {\n        return this.childRowIslands.get(rowIslandKey);\n    }\n\n    registerChildGrid(parentRowID: string|object, grid: IgxHierarchicalGridComponent) {\n        this.childGrids.set(parentRowID, grid);\n    }\n\n    getChildGrids(inDepth?: boolean) {\n        let allChildren = [];\n        this.childGrids.forEach((grid) => {\n            allChildren.push(grid);\n        });\n        if (inDepth) {\n            this.childRowIslands.forEach((layout) => {\n                allChildren = allChildren.concat(layout.rowIslandAPI.getChildGrids(inDepth));\n            });\n        }\n\n        return allChildren;\n    }\n\n    getChildGridByID(rowID) {\n        return this.childGrids.get(rowID);\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    Input,\n    QueryList,\n    OnInit,\n    Inject,\n    ElementRef,\n    ChangeDetectorRef,\n    ComponentFactoryResolver,\n    IterableDiffers,\n    ViewContainerRef,\n    NgZone,\n    AfterViewInit,\n    OnChanges,\n    Output,\n    EventEmitter,\n    Optional,\n    OnDestroy\n} from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxGridTransaction, IGridDataBindable, IgxGridBaseComponent } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { TransactionService, Transaction, State } from '../../services';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxHierarchicalGridBaseComponent } from './hierarchical-grid-base.component';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\nimport { IgxOverlayService } from '../../services/index';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxRowIslandAPIService } from './row-island-api.service';\nexport interface IGridCreatedEventArgs {\n    owner: IgxRowIslandComponent;\n    parentID: any;\n    grid: IgxHierarchicalGridComponent;\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-row-island',\n    template: ``,\n    providers: [IgxRowIslandAPIService]\n})\nexport class IgxRowIslandComponent extends IgxHierarchicalGridBaseComponent\n            implements AfterContentInit, AfterViewInit, OnChanges, OnInit, OnDestroy {\n    /**\n     * Sets the key of the row island by which child data would be taken from the row data if such is provided.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\">\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Input()\n    public key: string;\n\n    /**\n     * Sets if all immediate children of the grids for this `IgxRowIslandComponent` should be expanded/collapsed.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" [expandChildren]=\"true\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Input()\n    set expandChildren(value: boolean) {\n        this._expandChildren = value;\n        this.rowIslandAPI.getChildGrids().forEach((grid) => {\n            if (document.body.contains(grid.nativeElement)) {\n                // Detect changes right away if the grid is visible\n                grid.expandChildren = value;\n                grid.markForCheck();\n            } else {\n                // Else defer the detection on changes when the grid gets into view for performance.\n                grid.updateOnRender = true;\n            }\n        });\n    }\n\n    /**\n     * Gets if all immediate children of the grids for this `IgxRowIslandComponent` have been set to be expanded/collapsed.\n     * ```typescript\n     * const expanded = this.rowIsland.expandChildren;\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    get expandChildren(): boolean {\n        return this._expandChildren;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: false })\n    public children = new QueryList<IgxRowIslandComponent>();\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: false })\n    public childColumns = new QueryList<IgxColumnComponent>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onLayoutChange = new EventEmitter<any>();\n\n    /**\n     * Event emmited when a grid is being created based on this row island.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" (onGridCreated)=\"gridCreated($event)\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Output()\n    public onGridCreated = new EventEmitter<IGridCreatedEventArgs>();\n\n    /**\n     * @hidden\n     */\n    get id() {\n        const pId = this.parentId ? this.parentId.substring(this.parentId.indexOf(this.layout_id) + this.layout_id.length) + '-' : '';\n        return this.layout_id + pId +  this.key;\n    }\n\n    /**\n     * @hidden\n     */\n    get parentId() {\n       return this.parentIsland ? this.parentIsland.id : null;\n    }\n\n    /**\n     * @hidden\n     */\n    get level() {\n        let ptr = this.parentIsland;\n        let lvl = 0;\n        while (ptr) {\n            lvl++;\n            ptr = ptr.parentIsland;\n        }\n        return lvl + 1;\n    }\n\n    /**\n     * Get transactions service for the children grid components.\n     * @experimental @hidden\n     */\n    get transactions(): TransactionService<Transaction, State> {\n        const grids = this.rowIslandAPI.getChildGrids();\n        return grids.length ? grids[0].transactions : this._transactions;\n    }\n\n    /**\n     * @hidden\n     */\n    public initialChanges = [];\n\n    /**\n     * @hidden\n     */\n    public rootGrid = null;\n    readonly data: any[];\n    readonly filteredData: any[];\n    private layout_id = `igx-row-island-`;\n    private isInit = false;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        selection: IgxHierarchicalSelectionAPIService,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        public rowIslandAPI: IgxRowIslandAPIService) {\n        super(\n            selectionService,\n            crudService,\n            gridAPI,\n            selection,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions\n        );\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.rootGrid = this.hgridAPI.grid;\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        this.updateChildren();\n        this.children.notifyOnChanges();\n        this.children.changes.pipe(takeUntil(this.destroy$))\n        .subscribe((change) => {\n            this.updateChildren();\n            // update existing grids since their child ri have been changed.\n            this.getGridsForIsland(this.key).forEach(grid => {\n                (grid as any).onRowIslandChange(this.children);\n            });\n        });\n        const nestedColumns = this.children.map((layout) => layout.columnList.toArray());\n        const colsArray = [].concat.apply([], nestedColumns);\n        const topCols = this.columnList.filter((item) => {\n            return colsArray.indexOf(item) === -1;\n        });\n        this.childColumns.reset(topCols);\n        this.columnList.changes.pipe(takeUntil(this.destroy$)).subscribe(() => { this.updateColumnList(); });\n    }\n\n    protected updateChildren() {\n        this.children.reset(this.children.toArray().slice(1));\n        this.children.forEach(child => {\n            child.parentIsland = this;\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.rowIslandAPI.register(this);\n        if (this.parentIsland) {\n            this.parentIsland.rowIslandAPI.registerChildRowIsland(this);\n        } else {\n            this.rootGrid.hgridAPI.registerChildRowIsland(this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes) {\n        this.onLayoutChange.emit(changes);\n        if (!this.isInit) {\n            this.initialChanges.push(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        // Override the base destroy because we don't have rendered anything to use removeEventListener on\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this._destroyed = true;\n        this.rowIslandAPI.unset(this.id);\n        if (this.parentIsland) {\n            this.getGridsForIsland(this.key).forEach(grid => {\n                this.cleanGridState(grid);\n                grid.hgridAPI.unsetChildRowIsland(this);\n            });\n            this.parentIsland.rowIslandAPI.unsetChildRowIsland(this);\n        } else {\n            this.rootGrid.hgridAPI.unsetChildRowIsland(this);\n            this.cleanGridState(this.rootGrid);\n        }\n    }\n\n    private cleanGridState(grid) {\n        grid.childGridTemplates.forEach((tmpl) => {\n            tmpl.owner.cleanView(tmpl.context.templateID);\n        });\n        grid.childGridTemplates.clear();\n        grid.onRowIslandChange();\n    }\n\n    /**\n     * @hidden\n     */\n    reflow() {}\n\n    /**\n     * @hidden\n     */\n    calculateGridHeight() {}\n\n    protected updateColumnList() {\n        const nestedColumns = this.children.map((layout) => layout.columnList.toArray());\n        const colsArray = [].concat.apply([], nestedColumns);\n        const topCols = this.columnList.filter((item) => {\n            if (colsArray.indexOf(item) === -1) {\n                /* Reset the default width of the columns that come into this row island,\n                because the root catches them first during the detectChanges() and sets their defaultWidth. */\n                item.defaultWidth = undefined;\n                return true;\n            }\n            return false;\n        });\n        this.childColumns.reset(topCols);\n\n        if (this.parentIsland) {\n            this.parentIsland.columnList.notifyOnChanges();\n        } else {\n            this.rootGrid.columnList.notifyOnChanges();\n        }\n\n        this.rowIslandAPI.getChildGrids().forEach((grid: IgxHierarchicalGridComponent) => {\n            grid.createColumnsList(this.childColumns.toArray());\n            if (!document.body.contains(grid.nativeElement)) {\n                grid.updateOnRender = true;\n            }\n        });\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnInit,\n    ViewChild,\n    AfterViewInit,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { GridBaseAPIService } from '.././api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-child-grid-row',\n    templateUrl: './child-grid-row.component.html'\n})\nexport class IgxChildGridRowComponent implements AfterViewInit, OnInit {\n\n\n    /**\n * Returns whether the row is expanded.\n * ```typescript\n * const RowExpanded = this.grid1.rowList.first.expanded;\n * ```\n */\n    public expanded = false;\n\n    @Input()\n    layout: IgxRowIslandComponent;\n\n    /**\n     * @hidden\n     */\n    public get parentHasScroll() {\n        return !this.parentGrid.verticalScrollContainer.dc.instance.notVirtual;\n    }\n\n\n    /**\n     * @hidden\n     */\n    // public get layout() {\n    //     const layout = (this.gridAPI as IgxHierarchicalGridAPIService).getLayout(`igx-row-island-` + this.rowData.key);\n    //    return layout;\n    // }\n    /**\n    * @hidden\n    */\n    @Input()\n    public parentGridID: string;\n\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    @Input()\n    public rowData: any = [];\n\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    @ViewChild('hgrid')\n    private hGrid: any/* TODO: IgxHierarchicalGridComponent*/;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'row';\n\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    // TODO: Refactor\n    get parentGrid(): any/* TODO: IgxHierarchicalGridComponent*/ {\n        return this.gridAPI.grid;\n    }\n\n    @HostBinding('attr.data-level')\n    get level() {\n        return this.layout.level;\n    }\n\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<any/* TODO: IgxHierarchicalGridComponent*/>,\n        private selectionAPI: IgxSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.layout.onLayoutChange.subscribe((ch) => {\n            this._handleLayoutChanges(ch);\n        });\n        const changes = this.layout.initialChanges;\n        changes.forEach(change => {\n            this._handleLayoutChanges(change);\n        });\n        this.hGrid.parent = this.parentGrid;\n        this.hGrid.parentIsland = this.layout;\n        this.hGrid.childRow =  this;\n        if (this.hGrid.isPercentHeight) {\n            this.hGrid._autoSize = true;\n        }\n        this.layout.onGridCreated.emit({\n            owner: this.layout,\n            parentID: this.rowData.rowID,\n            grid: this.hGrid\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.hGrid.childLayoutList = this.layout.children;\n        if (this.layout.childColumns.length > 0 && !this.hGrid.autoGenerate) {\n            this.hGrid.createColumnsList(this.layout.childColumns.toArray());\n        }\n        const layouts = this.hGrid.childLayoutList.toArray();\n        layouts.forEach((l) => this.hGrid.hgridAPI.registerChildRowIsland(l));\n        this.parentGrid.hgridAPI.registerChildGrid(this.rowData.rowID, this.layout.key, this.hGrid);\n        this.layout.rowIslandAPI.registerChildGrid(this.rowData.rowID, this.hGrid);\n\n        this.hGrid.cdr.detectChanges();\n    }\n\n\n    private _handleLayoutChanges(changes: SimpleChanges) {\n        for (const change in changes) {\n            if (changes.hasOwnProperty(change)) {\n                this.hGrid[change] = changes[change].currentValue;\n            }\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    Input,\n    forwardRef,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    QueryList,\n    ContentChildren,\n    ElementRef,\n    NgZone,\n    ChangeDetectorRef,\n    IterableDiffers,\n    ViewContainerRef,\n    Inject,\n    ComponentFactoryResolver,\n    AfterViewInit,\n    AfterContentInit,\n    Optional,\n    OnInit,\n    OnDestroy\n} from '@angular/core';\nimport { IgxGridBaseComponent, IgxGridTransaction } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensity } from '../../core/displayDensity';\nimport { IGridDataBindable, IgxColumnComponent, } from '../grid/index';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxHierarchicalGridBaseComponent } from './hierarchical-grid-base.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxTemplateOutletDirective } from '../../directives/template-outlet/template_outlet.directive';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxOverlayService } from '../../services/index';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\n\nlet NEXT_ID = 0;\n\nexport interface HierarchicalStateRecord {\n    rowID: any;\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid',\n    templateUrl: 'hierarchical-grid.component.html',\n    providers: [\n        IgxGridSelectionService,\n        IgxGridCRUDService,\n        { provide: GridBaseAPIService, useClass: IgxHierarchicalGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxHierarchicalGridComponent) },\n        IgxGridSummaryService,\n        IgxFilteringService,\n        IgxHierarchicalGridNavigationService,\n        IgxForOfSyncService\n    ]\n})\nexport class IgxHierarchicalGridComponent extends IgxHierarchicalGridBaseComponent\n    implements IGridDataBindable, AfterViewInit, AfterContentInit, OnInit, OnDestroy {\n    /**\n     * Sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-hgrid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this.h_id;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxHierarchicalGridComponent` with an array of data.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @Input()\n    public set data(value: any[]) {\n        this._data = value;\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n            this.reflow();\n        }\n        this.cdr.markForCheck();\n        if (this.parent && (this.height === null || this.height.indexOf('%') !== -1)) {\n            // If the height will change based on how much data there is, recalculate sizes in igxForOf.\n            requestAnimationFrame(() => {\n                this.updateParentSizes();\n            });\n        }\n    }\n\n    /**\n     * Returns an array of data set to the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get data(): any[] {\n        return this._data;\n    }\n\n    /**\n    * Sets the state of the `IgxHierarchicalGridComponent` containing which rows are expanded.\n    * ```typescript\n    * this.gridState = [{ rowID: 1 }, { rowID: 4}];\n    * ```\n    * ```html\n    * <igx-hierarchical-grid [primaryKey]=\"'ID'\" [data]=\"Data\" [autoGenerate]=\"false\" [hierarchicalState]=\"hgridState\">\n    *      <igx-column field=\"ID\"  [dataType]='number'></igx-column>\n    *      <igx-column field=\"Product\"  [dataType]='string'></igx-column>\n    *      <igx-column field=\"Description\"  [dataType]='string'></igx-column>\n    * </igx-hierarchical-grid>\n    * ```\n    * @memberof IgxHierarchicalGridComponent\n    */\n    @Input()\n    public get hierarchicalState() {\n        return this._hierarchicalState;\n    }\n    public set hierarchicalState(val) {\n        this._hierarchicalState = val;\n        if (this.parent) {\n            requestAnimationFrame(() => {\n                this.updateParentSizes();\n            });\n        }\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public set filteredData(value) {\n        this._filteredData = value;\n\n        if (this.rowSelectable) {\n            this.updateHeaderCheckboxStatusOnFilter(this._filteredData);\n        }\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets if all immediate children of the `IgxHierarchicalGridComponent` should be expanded/collapsed.\n     * Defult value is false.\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\" [expandChildren]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @Input()\n    set expandChildren(value: boolean) {\n        this._expandChildren = value;\n        if (value && this.data) {\n            this.hierarchicalState = this.data.map((rec) => {\n                return { rowID: this.primaryKey ? rec[this.primaryKey] : rec };\n            });\n        } else if (this.data) {\n            this.hierarchicalState = [];\n        }\n    }\n\n    /**\n     * Gets if all immediate children of the `IgxHierarchicalGridComponent` previously have been set to be expanded/collapsed.\n     * If previously set and some rows have been manually expanded/collapsed it will still return the last set value.\n     * ```typescript\n     * const expanded = this.grid.expandChildren;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    get expandChildren(): boolean {\n        return this._expandChildren;\n    }\n\n    /**\n     * Gets the unique identifier of the parent row. It may be a `string` or `number` if `primaryKey` of the\n     * parent grid is set or an object reference of the parent record otherwise.\n     * ```typescript\n     * const foreignKey = this.grid.foreignKey;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get foreignKey() {\n        if (!this.parent) {\n            return null;\n        }\n        return this.parent.hgridAPI.getParentRowId(this);\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: false })\n    public childLayoutList: QueryList<IgxRowIslandComponent>;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: true })\n    public allLayoutList: QueryList<IgxRowIslandComponent>;\n\n    @ViewChild('hierarchical_record_template', { read: TemplateRef })\n    protected hierarchicalRecordTemplate: TemplateRef<any>;\n\n    @ViewChild('child_record_template', { read: TemplateRef })\n    protected childTemplate: TemplateRef<any>;\n\n    @ViewChild('headerHierarchyExpander', { read: ElementRef })\n    protected headerHierarchyExpander: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxTemplateOutletDirective, { read: IgxTemplateOutletDirective })\n    public templateOutlets: QueryList<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxChildGridRowComponent, { read: IgxChildGridRowComponent })\n    public hierarchicalRows: QueryList<IgxChildGridRowComponent>;\n\n    /**\n     * @hidden\n     */\n    get hasExpandableChildren() {\n        return !!this.childLayoutKeys.length;\n    }\n\n    /**\n     * @hidden\n     */\n    public childLayoutKeys = [];\n\n    /**\n     * @hidden\n     */\n    public highlightedRowID = null;\n\n    /**\n     * @hidden\n     */\n    public updateOnRender = false;\n\n    /**\n     * @hidden\n     */\n    public parent = null;\n\n    private _hierarchicalState = [];\n    private _data;\n    private _filteredData = null;\n    private h_id = `igx-hierarchical-grid-${NEXT_ID++}`;\n    private childGridTemplates: Map<any, any> = new Map();\n    private scrollTop = 0;\n    private scrollLeft = 0;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        selection: IgxHierarchicalSelectionAPIService,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(\n            selectionService,\n            crudService,\n            gridAPI,\n            selection,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions);\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this._transactions = this.parentIsland ? this.parentIsland.transactions : this._transactions;\n        super.ngOnInit();\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        this.verticalScrollContainer.getVerticalScroll().addEventListener('scroll', this.hg_verticalScrollHandler.bind(this));\n        this.parentVirtDir.getHorizontalScroll().addEventListener('scroll', this.hg_horizontalScrollHandler.bind(this));\n\n        if (this.expandChildren && this.data && this.hierarchicalState.length !== this.data.length) {\n            this.hierarchicalState = this.data.map((rec) => {\n                return { rowID: this.primaryKey ? rec[this.primaryKey] : rec };\n            });\n        }\n\n        this.verticalScrollContainer.onBeforeViewDestroyed.pipe(takeUntil(this.destroy$)).subscribe((view) => {\n            const rowData = view.context.$implicit;\n            if (this.isChildGridRecord(rowData)) {\n                const cachedData = this.childGridTemplates.get(rowData.rowID);\n                if (cachedData) {\n                    const tmlpOutlet = cachedData.owner;\n                    tmlpOutlet._viewContainerRef.detach(0);\n                }\n            }\n        });\n\n        if (this.parent) {\n            this._displayDensity = this.rootGrid._displayDensity;\n            this.rootGrid.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                requestAnimationFrame(() => {\n                    this._displayDensity = this.rootGrid._displayDensity;\n                    if (document.body.contains(this.nativeElement)) {\n                        this.reflow();\n                        this.cdr.detectChanges();\n                    } else {\n                        this.updateOnRender = true;\n                    }\n                });\n            });\n            this.parent.verticalScrollContainer.onDataChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                requestAnimationFrame(() => {\n                        this.updateSizes();\n                });\n            });\n            this.childLayoutKeys = this.parentIsland.children.map((item) => item.key);\n        } else {\n            this.childLayoutKeys = this.childLayoutList.map((item) => item.key);\n            this.cdr.detectChanges();\n        }\n\n        this.toolbarCustomContentTemplates = this.parentIsland ?\n            this.parentIsland.toolbarCustomContentTemplates :\n            this.toolbarCustomContentTemplates;\n    }\n\n    private updateSizes() {\n        if (!this._destroyed && document.body.contains(this.nativeElement) && this.isPercentWidth) {\n            this.reflow();\n\n            this.hgridAPI.getChildGrids(false).forEach((grid) => {\n                grid.updateSizes();\n            });\n        }\n    }\n\n    public get outletDirective() {\n        return this.rootGrid._outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    public get parentRowOutletDirective() {\n        return this === this.rootGrid ? null : this.rootGrid.rowEditingOutletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        this.updateColumnList(false);\n        this.childLayoutList.notifyOnChanges();\n        this.childLayoutList.changes.pipe(takeUntil(this.destroy$))\n        .subscribe(() => this.onRowIslandChange());\n        super.ngAfterContentInit();\n    }\n\n    /**\n    * @hidden\n    */\n    public onRowIslandChange() {\n        if (this.parent) {\n            this.childLayoutKeys = this.parentIsland.children.filter(item => !(item as any)._destroyed).map((item) => item.key);\n        } else {\n            this.childLayoutKeys = this.childLayoutList.filter(item => !(item as any)._destroyed).map((item) => item.key);\n        }\n        if (!(this.cdr as any).destroyed) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>) {\n        this.updateColumnList();\n        const cols = change.filter(c => c.grid === this);\n        if (cols.length > 0) {\n            this.columnList.reset(cols);\n            super.onColumnsChanged(this.columnList);\n        }\n    }\n\n    private updateColumnList(recalcColSizes = true) {\n        const childLayouts = this.parent ? this.childLayoutList : this.allLayoutList;\n        const nestedColumns = childLayouts.map((layout) => {\n            return layout.columnList.toArray();\n        });\n        const colsArray = [].concat.apply([], nestedColumns);\n        const colLength = this.columnList.length;\n        if (colsArray.length > 0) {\n            const topCols = this.columnList.filter((item) => {\n                return colsArray.indexOf(item) === -1;\n            });\n            this.columnList.reset(topCols);\n            if (recalcColSizes && this.columnList.length !== colLength) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        if (!this.parent) {\n            this.hgridAPI.getChildGrids(true).forEach((grid) => {\n                if (!grid.childRow.cdr.destroyed) {\n                    grid.childRow.cdr.destroy();\n                }\n            });\n        }\n        if (this.parent && this.selectionService.activeElement) {\n            // in case selection is in destroyed child grid, selection should be cleared.\n            this._clearSeletionHighlights();\n        }\n        super.ngOnDestroy();\n    }\n\n    private _clearSeletionHighlights() {\n        [this.rootGrid, ...this.rootGrid.getChildGrids(true)].forEach(grid => {\n            grid.selectionService.clear();\n            grid.selectionService.activeElement = null;\n            grid.nativeElement.classList.remove('igx-grid__tr--highlighted');\n            grid.highlightedRowID = null;\n            grid.cdr.markForCheck();\n        });\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    /**\n     * Gets calculated width of the pinned area.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth();\n     * ```\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public getPinnedWidth(takeHidden = false) {\n        let width = super.getPinnedWidth(takeHidden);\n        if (this.hasExpandableChildren) {\n            width += this.headerHierarchyExpander.nativeElement.clientWidth || this.getDefaultExpanderWidth();\n        }\n        return width;\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * Method used to override the calculations.\n     */\n    public getFeatureColumnsWidth() {\n        let width = super.getFeatureColumnsWidth();\n        if (this.hasExpandableChildren) {\n            width += this.headerHierarchyExpander.nativeElement.clientWidth || this.getDefaultExpanderWidth();\n        }\n        return width;\n    }\n\n     private getDefaultExpanderWidth(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 57;\n            case DisplayDensity.compact:\n                return 49;\n            default:\n                return 72;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public isRowHighlighted(rowData) {\n        return this.highlightedRowID === rowData.rowID;\n    }\n\n    /**\n     * @hidden\n     */\n    public isHierarchicalRecord(record: any): boolean {\n        return this.childLayoutList.length !== 0 && record[this.childLayoutList.first.key];\n    }\n\n    /**\n     * @hidden\n     */\n    public isChildGridRecord(record: any): boolean {\n        // Can be null when there is defined layout but no child data was found\n        return record.childGridsData !== undefined;\n    }\n\n    /**\n     * @hidden\n     */\n    public trackChanges(index, rec) {\n        if (rec.childGridsData !== undefined) {\n            // if is child rec\n            return rec.rowID;\n        }\n        return rec;\n    }\n\n    /**\n     * @hidden\n     */\n    public getContext(rowData): any {\n        if (this.isChildGridRecord(rowData)) {\n            const cachedData = this.childGridTemplates.get(rowData.rowID);\n            if (cachedData) {\n                const view = cachedData.view;\n                const tmlpOutlet = cachedData.owner;\n                return {\n                    $implicit: rowData,\n                    moveView: view,\n                    owner: tmlpOutlet,\n                    index: this.verticalScrollContainer.igxForOf.indexOf(rowData)\n                };\n            } else {\n                const rowID = this.primaryKey ? rowData.rowID : this.data.indexOf(rowData.rowID);\n                // child rows contain unique grids, hence should have unique templates\n                return {\n                    $implicit: rowData,\n                    templateID: 'childRow-' + rowID,\n                    index: this.verticalScrollContainer.igxForOf.indexOf(rowData)\n                };\n            }\n        } else {\n            return {\n                $implicit: rowData,\n                templateID: 'dataRow',\n                index: this.verticalScrollContainer.igxForOf.indexOf(rowData)\n            };\n        }\n    }\n\n    /**\n     * @hidden\n    */\n    public get rootGrid() {\n        let currGrid = this;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n        }\n        return currGrid;\n    }\n\n    /**\n     * @hidden\n     * Gets the visible content height that includes header + tbody + footer.\n     * For hierarchical child grid it may be scrolled and not fully visible.\n     */\n    public getVisibleContentHeight() {\n        let height = super.getVisibleContentHeight();\n        if (this.parent) {\n            const rootHeight = this.rootGrid.getVisibleContentHeight();\n            const topDiff = this.nativeElement.getBoundingClientRect().top - this.rootGrid.nativeElement.getBoundingClientRect().top;\n            height = rootHeight - topDiff > height ? height : rootHeight - topDiff;\n        }\n        return height;\n    }\n\n    /**\n     * @hidden\n    */\n    public collapseAllRows() {\n        this.hierarchicalState = [];\n    }\n\n    /**\n     * @hidden\n     */\n    public isExpanded(record: any): boolean {\n        let inState;\n        if (record.childGridsData !== undefined) {\n            inState = !!this.hierarchicalState.find(v => v.rowID === record.rowID);\n        } else {\n            inState = !!this.hierarchicalState.find(v => {\n                return this.primaryKey ? v.rowID === record[this.primaryKey] : v.rowID === record;\n            });\n        }\n        return inState && this.childLayoutList.length !== 0;\n    }\n\n    /**\n     * @hidden\n     */\n    public viewCreatedHandler(args) {\n        if (this.isChildGridRecord(args.context.$implicit)) {\n            const key = args.context.$implicit.rowID;\n            this.childGridTemplates.set(key, args);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public viewMovedHandler(args) {\n        if (this.isChildGridRecord(args.context.$implicit)) {\n            // view was moved, update owner in cache\n            const key = args.context.$implicit.rowID;\n            const cachedData = this.childGridTemplates.get(key);\n            cachedData.owner = args.owner;\n\n            this.childLayoutList.forEach((layout) => {\n                const relatedGrid = this.hgridAPI.getChildGridByID(layout.key, args.context.$implicit.rowID);\n                if (relatedGrid && relatedGrid.updateOnRender) {\n                    // Detect changes if `expandChildren` has changed when the grid wasn't visible. This is for performance reasons.\n                    relatedGrid.reflow();\n                    relatedGrid.updateOnRender = false;\n                }\n            });\n\n            const childGrids = this.getChildGrids(true);\n            childGrids.forEach((grid) => {\n                if (grid.isPercentWidth) {\n                    grid.reflow();\n                }\n                grid.updateScrollPosition();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public updateScrollPosition() {\n        const vScr = this.verticalScrollContainer.getVerticalScroll();\n        const hScr = this.parentVirtDir.getHorizontalScroll();\n        if (vScr) {\n            vScr.scrollTop = this.scrollTop;\n        }\n        if (hScr) {\n            hScr.scrollLeft = this.scrollLeft;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getPossibleColumnWidth() {\n        let computedWidth = this.calcWidth || parseInt(\n            this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width'), 10);\n        computedWidth -= this.headerHierarchyExpander.nativeElement.clientWidth;\n        return super.getPossibleColumnWidth(computedWidth);\n    }\n\n    protected getChildGrids(inDeph?: boolean) {\n        return this.hgridAPI.getChildGrids(inDeph);\n    }\n\n    protected generateDataFields(data: any[]): string[] {\n        return super.generateDataFields(data).filter((field) => {\n            const layoutsList = this.parentIsland ? this.parentIsland.children : this.childLayoutList;\n            const keys = layoutsList.map((item) => item.key);\n            return keys.indexOf(field) === -1;\n        });\n    }\n\n    private hg_verticalScrollHandler(event) {\n        this.scrollTop = event.target.scrollTop;\n    }\n\n    public onContainerScroll() {\n        this.hideOverlays();\n    }\n\n    private hg_horizontalScrollHandler(event) {\n        this.scrollLeft = event.target.scrollLeft;\n    }\n\n    private updateParentSizes() {\n        let currGrid = this.parent;\n        while (currGrid) {\n            const hadScrollbar = currGrid.hasVerticalSroll();\n            const virt = currGrid.verticalScrollContainer;\n            virt.recalcUpdateSizes();\n            const offset = parseInt(virt.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n            const scr = virt.getVerticalScroll();\n            scr.scrollTop = virt.getScrollForIndex(virt.state.startIndex) - offset;\n\n            if (hadScrollbar !== currGrid.hasVerticalSroll()) {\n                // If after recalculations the grid should show vertical scrollbar it should also reflow.\n                currGrid.reflow();\n            }\n\n            currGrid = currGrid.parent;\n        }\n    }\n}\n","import { IgxGridCellComponent } from '../cell.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { ChangeDetectorRef, ElementRef, ChangeDetectionStrategy, Component,\n     OnInit, HostListener, NgZone } from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { HammerGesturesManager } from '../../core/touch';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid-cell',\n    templateUrl: './../cell.component.html',\n    providers: [HammerGesturesManager]\n})\nexport class IgxHierarchicalGridCellComponent extends IgxGridCellComponent implements OnInit {\n\n    protected hSelection;\n    protected _rootGrid;\n\n    constructor(\n        protected selectionService: IgxGridSelectionService,\n        protected crudService: IgxGridCRUDService,\n        public gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>,\n        public selection: IgxHierarchicalSelectionAPIService,\n        public cdr: ChangeDetectorRef,\n        private helement: ElementRef,\n        protected zone: NgZone,\n        touchManager: HammerGesturesManager\n        ) {\n            super(selectionService, crudService, gridAPI, selection, cdr, helement, zone, touchManager);\n            this.hSelection = <IgxHierarchicalSelectionAPIService>selection;\n         }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this._rootGrid = this._getRootGrid();\n    }\n\n    private _getRootGrid() {\n        let currGrid = this.grid;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n        }\n        return currGrid;\n    }\n\n    // TODO: Extend the new selection service to avoid complete traversal\n    _clearAllHighlights() {\n        [this._rootGrid, ...this._rootGrid.getChildGrids(true)].forEach(grid => {\n            grid.selectionService.clear();\n            grid.selectionService.activeElement = null;\n            grid.nativeElement.classList.remove('igx-grid__tr--highlighted');\n            grid.highlightedRowID = null;\n            grid.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('focus', ['$event'])\n    onFocus(event) {\n        this._clearAllHighlights();\n        const currentElement = this.grid.nativeElement;\n        let parentGrid = this.grid;\n        let childGrid;\n        // add highligh to the current grid\n        if (this._rootGrid.id !== currentElement.id) {\n            currentElement.classList.add('igx-grid__tr--highlighted');\n        }\n\n        // add highligh to the current grid\n        while (this._rootGrid.id !== parentGrid.id) {\n            childGrid = parentGrid;\n            parentGrid = parentGrid.parent;\n\n            const parentRowID = parentGrid.hgridAPI.getParentRowId(childGrid);\n            parentGrid.highlightedRowID = parentRowID;\n        }\n        super.onFocus(event);\n    }\n\n    // TODO: Refactor\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        if (event.altKey) {\n            const grid = this.gridAPI.grid;\n            const state = this.gridAPI.grid.hierarchicalState;\n            const collapse = this.row.expanded && (key === 'left' || key === 'arrowleft' || key === 'up' || key === 'arrowup');\n            const expand = !this.row.expanded && (key === 'right' || key === 'arrowright' || key === 'down' || key === 'arrowdown');\n            if (collapse) {\n                grid.hierarchicalState = state.filter(v => {\n                    return v.rowID !== this.row.rowID;\n                });\n            } else if (expand) {\n                state.push({ rowID: this.row.rowID });\n                grid.hierarchicalState = [...state];\n            }\n            if (expand || collapse) {\n                const rowID = this.cellID.rowID;\n                grid.cdr.detectChanges();\n                this.persistFocusedCell(rowID);\n            }\n            return;\n        }\n        super.dispatchEvent(event);\n    }\n\n    protected persistFocusedCell(rowID) {\n        requestAnimationFrame(() => {\n            // TODO: Test it out\n            const cell = this.gridAPI.get_cell_by_key(rowID, this.column.field);\n            if (cell) {\n                cell.nativeElement.focus();\n            }\n        });\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    forwardRef,\n    ElementRef,\n    ChangeDetectorRef,\n    ViewChildren,\n    QueryList,\n    ViewChild\n} from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { GridBaseAPIService } from '.././api.service';\nimport { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';\nimport { IgxGridCRUDService, IgxGridSelectionService } from '../../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid-row',\n    templateUrl: './hierarchical-row.component.html',\n    providers: [{ provide: IgxRowComponent, useExisting: forwardRef(() => IgxHierarchicalRowComponent) }]\n})\nexport class IgxHierarchicalRowComponent extends IgxRowComponent<IgxHierarchicalGridComponent> {\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxHierarchicalGridCellComponent), { read: IgxHierarchicalGridCellComponent })\n    public cells: QueryList<IgxHierarchicalGridCellComponent>;\n\n    @ViewChild('expander', { read: ElementRef })\n    public expander: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n        /**\n     * Returns whether the row is expanded.\n     * ```typescript\n     * const RowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    @HostBinding('class.igx-grid__tr--expanded')\n    public get expanded() {\n        return this.grid.isExpanded(this.rowData);\n    }\n\n    public get hasChildren() {\n        return  !!this.grid.childLayoutKeys.length;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-grid__tr--highlighted')\n    public get highlighted() {\n        return this.grid && this.grid.highlightedRowID === this.rowID;\n    }\n\n    /**\n     * Toggles the hierarchical row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    public toggle() {\n        if (this.added) {\n            return;\n        }\n        const grid = this.gridAPI.grid;\n        const state = this.gridAPI.grid.hierarchicalState;\n        if (!this.expanded) {\n            state.push({ rowID: this.rowID });\n            grid.hierarchicalState = [...state];\n        } else {\n            grid.hierarchicalState = state.filter(v => {\n                return v.rowID !== this.rowID;\n            });\n        }\n        grid.cdr.detectChanges();\n        requestAnimationFrame(() => {\n            grid.reflow();\n        });\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        private hselection: IgxHierarchicalSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {\n            super(gridAPI, crudService, selectionService, hselection, element, cdr);\n        }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../../core/utils';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { DataUtil } from '../../data-operations/data-util';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridHierarchical',\n    pure: true\n})\nexport class IgxGridHierarchicalPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>) { }\n\n    public transform(\n        collection: any,\n        state = [],\n        id: string,\n        primaryKey: any,\n        childKeys: string[],\n        pipeTrigger: number\n        ): any[] {\n        if (childKeys.length === 0) {\n            return collection;\n        }\n        const grid: IgxHierarchicalGridComponent = this.gridAPI.grid;\n        const result = this.addHierarchy(grid, cloneArray(collection), state, primaryKey, childKeys);\n\n        return result;\n    }\n\n    public addHierarchy<T>(grid, data: T[], state, primaryKey, childKeys: string[]): T[] {\n        const result = [];\n\n        data.forEach((v) => {\n            result.push(v);\n            const childGridsData = {};\n            childKeys.forEach((childKey) => {\n                const childData = v[childKey] ? v[childKey] : null;\n                childGridsData[childKey] = childData;\n            });\n            if (grid.isExpanded(v)) {\n                result.push({ rowID: primaryKey ? v[primaryKey] : v, childGridsData: childGridsData});\n            }\n        });\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridHierarchicalPaging',\n    pure: true\n})\nexport class IgxGridHierarchicalPagingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>) { }\n\n    public transform(collection: any[], page = 0, perPage = 15, id: string, pipeTrigger: number): any[] {\n\n        if (!this.gridAPI.grid.paging) {\n            return collection;\n        }\n\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n\n        const result: any[] = DataUtil.page(cloneArray(collection), state);\n        this.gridAPI.grid.pagingState = state;\n        return result;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { IgxGridModule } from '../grid/grid.module';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxHierarchicalRowComponent } from './hierarchical-row.component';\nimport { IgxGridHierarchicalPipe, IgxGridHierarchicalPagingPipe } from './hierarchical-grid.pipes';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxRowIslandAPIService } from './row-island-api.service';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxHierarchicalGridComponent,\n    IgxHierarchicalRowComponent,\n    IgxRowIslandComponent,\n    IgxChildGridRowComponent,\n    IgxHierarchicalGridCellComponent,\n    IgxGridHierarchicalPipe,\n    IgxGridHierarchicalPagingPipe\n  ],\n  exports: [\n    IgxGridModule,\n    IgxHierarchicalGridComponent,\n    IgxHierarchicalRowComponent,\n    IgxHierarchicalGridCellComponent,\n    IgxRowIslandComponent,\n    IgxChildGridRowComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridModule\n  ],\n  providers: [\n    IgxRowIslandAPIService,\n    IgxHierarchicalSelectionAPIService\n  ]\n})\nexport class IgxHierarchicalGridModule {\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Directive,\n    ContentChild\n} from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxIconModule } from '../icon/index';\n\n/**\n * IgxActionIcon is a container for the action nav icon of the IgxNavbar.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-action-icon'\n})\nexport class IgxActionIconDirective { }\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navbar.html)\n *\n * The Ignite UI Navbar is most commonly used to provide an app header with a hamburger menu and navigation\n * state such as a \"Go Back\" button. It also supports other actions represented by icons.\n *\n * Example:\n * ```html\n * <igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n *   <igx-icon>search</igx-icon>\n *   <igx-icon>favorite</igx-icon>\n *   <igx-icon>more_vert</igx-icon>\n * </igx-navbar>\n * ```\n */\n\n@Component({\n    selector: 'igx-navbar',\n    templateUrl: 'navbar.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `\n    ]\n})\n\nexport class IgxNavbarComponent {\n    private static NEXT_ID = 1;\n    private isVisible = true;\n\n    /**\n     *An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-navbar [id]=\"'igx-navbar-12'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-navbar-${NEXT_ID++}`;\n    /**\n     *Returns whether the `IgxNavbarComponent` action button is visible, true/false.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public navBar: IgxNavbarComponent;\n     *ngAfterViewInit(){\n     *    let actionButtonVisibile = this.navBar.isActionButtonVisible;\n     *}\n     *```\n     */\n    @Input()\n    public get isActionButtonVisible(): boolean {\n        if (this.actionIconTemplate || !this.actionButtonIcon) {\n            return false;\n        }\n        return this.isVisible;\n    }\n\n    /**\n     *Sets whether the action button of the `IgxNavbarComponent` is visible.\n     *```html\n     *<igx-navbar [title]=\"currentView\" [isActionButtonVisible]=\"'false'\"></igx-navbar>\n     *```\n     */\n    public set isActionButtonVisible(value: boolean) {\n        this.isVisible = value;\n    }\n    /**\n     *An @Input property that sets the icon of the `IgxNavbarComponent`.\n     *```html\n     *<igx-navbar [title]=\"currentView\" actionButtonIcon=\"arrow_back\"></igx-navbar>\n     *```\n     */\n    @Input() public actionButtonIcon: string;\n\n    /**\n     *An @Input property that sets the title of the `IgxNavbarComponent`.\n     *```html\n     *<igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Input() public title: string;\n\n    /**\n     *The event that will be thrown when the action is executed,\n     *provides reference to the `IgxNavbar` component as argument\n     *```typescript\n     *public actionExc(event){\n     *    alert(\"Action Execute!\");\n     *}\n     * //..\n     *```\n     *```html\n     *<igx-navbar (onAction)=\"actionExc($event)\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Output() public onAction = new EventEmitter<IgxNavbarComponent>();\n\n    /**\n     *An @Input property that sets the titleId of the `IgxNavbarComponent`. If not set it will be automatically generated.\n     *```html\n     *<igx-navbar [titleId]=\"'igx-navbar-7'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Input()\n    public titleId = `igx-navbar-${IgxNavbarComponent.NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxActionIconDirective, { read: IgxActionIconDirective })\n    protected actionIconTemplate: IgxActionIconDirective;\n\n    /**\n     *@hidden\n     */\n    public _triggerAction() {\n        this.onAction.emit(this);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxNavbarComponent, IgxActionIconDirective],\n    exports: [IgxNavbarComponent, IgxActionIconDirective],\n    imports: [IgxButtonModule, IgxIconModule, CommonModule]\n})\nexport class IgxNavbarModule {\n}\n","import { Directive, HostBinding, Input, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxDrawerItem]',\n    exportAs: 'igxDrawerItem'\n})\nexport class IgxNavDrawerItemDirective {\n\n    /**\n     * @hidden\n     */\n    @Input('active') public active = false;\n\n    /**\n     * @hidden\n     */\n    @Input('isHeader') public isHeader = false;\n\n    /**\n     * @hidden\n     */\n    public readonly activeClass = 'igx-nav-drawer__item--active';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item')\n    get defaultCSS(): boolean {\n        return !this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--active')\n    get currentCSS(): boolean {\n        return this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--header')\n    get headerCSS(): boolean {\n        return this.isHeader;\n    }\n}\n\n@Directive({\n    selector: '[igxDrawer]'\n})\nexport class IgxNavDrawerTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n\n@Directive({\n    selector: '[igxDrawerMini]'\n})\nexport class IgxNavDrawerMiniTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n","import {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    Renderer,\n    SimpleChange,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { fromEvent, interval, Subscription } from 'rxjs';\nimport { debounce } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { HammerGesturesManager } from '../core/touch';\nimport { IgxNavDrawerMiniTemplateDirective, IgxNavDrawerTemplateDirective } from './navigation-drawer.directives';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navigation Drawer** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navdrawer.html)\n *\n * The Ignite UI Navigation Drawer is a collapsible side navigation container commonly used in combination with the Navbar.\n *\n * Example:\n * ```html\n * <igx-nav-drawer id=\"navigation\" [isOpen]=\"true\">\n *   <ng-template igxDrawer>\n *     <nav>\n *       <span igxDrawerItem [isHeader]=\"true\">Email</span>\n *       <span igxDrawerItem igxRipple>Inbox</span>\n *       <span igxDrawerItem igxRipple>Deleted</span>\n *       <span igxDrawerItem igxRipple>Sent</span>\n *     </nav>\n *   </ng-template>\n * </igx-nav-drawer>\n * ```\n */\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-nav-drawer',\n    templateUrl: 'navigation-drawer.component.html',\n    styles: [`\n        :host {\n            display: block;\n            height: 100%;\n        }\n    `]\n})\nexport class IgxNavigationDrawerComponent implements\n    IToggleView,\n    OnInit,\n    AfterContentInit,\n    OnDestroy,\n    OnChanges {\n\n    @HostBinding('class') public cssClass = 'igx-nav-drawer';\n\n    /**\n     * ID of the component\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerId = this.navdrawer.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     *  <igx-nav-drawer id='navdrawer'></igx-nav-drawer>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-nav-drawer-${NEXT_ID++}`;\n\n    /**\n     * Position of the Navigation Drawer. Can be \"left\"(default) or \"right\".\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerPosition = this.navdrawer.position;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [position]=\"'left'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public position = 'left';\n\n    /**\n     * Enables the use of touch gestures to manipulate the drawer:\n     * - swipe/pan from edge to open, swipe-toggle and pan-drag.\n     *\n     * ```typescript\n     * // get\n     * let gesturesEnabled = this.navdrawer.enableGestures;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [enableGestures]='true'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public enableGestures = true;\n\n    /**\n     * State of the drawer.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsOpen = this.navdrawer.isOpen;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [isOpen]='false'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public isOpen = false;\n\n    /**\n     * When pinned the drawer is relatively positioned instead of sitting above content.\n     * May require additional layout styling.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsPinned = this.navdrawer.pin;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pin]='false'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pin = false;\n\n    /**\n     * Minimum device width required for automatic pin to be toggled.\n     * Default is 1024, can be set to a falsy value to disable this behavior.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerPinTreshold = this.navdrawer.pinThreshold;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pinTreshold]='1024'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pinThreshold = 1024;\n\n    /**\n     * Returns nativeElement of the component.\n     *\n     * @hidden\n     */\n    get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Width of the drawer in its open state. Defaults to \"280px\".\n     *\n     * ```typescript\n     * // get\n     * let navDrawerWidth = this.navdrawer.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [width]=\"'228px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public width = '280px';\n\n    /**\n     * Width of the drawer in its mini state. Defaults to 60px.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerMiniWidth = this.navdrawer.miniWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [miniWidth]=\"'34px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public miniWidth = '60px';\n\n    /**\n     * Pinned state change output for two-way binding.\n     *\n     * ```html\n     * <igx-nav-drawer [(pin)]='isPinned'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public pinChange = new EventEmitter<boolean>(true);\n    /**\n     * Event fired as the Navigation Drawer is about to open.\n     *\n     * ```html\n     *  <igx-nav-drawer (opening)='onOpening()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opening = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has opened.\n     *\n     * ```html\n     * <igx-nav-drawer (opened)='onOpened()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opened = new EventEmitter();\n    /**\n     * Event fired as the Navigation Drawer is about to close.\n     *\n     * ```html\n     * <igx-nav-drawer (closing)='onClosing()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closing = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has closed.\n     *\n     * ```html\n     * <igx-nav-drawer (closed)='onClosed()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closed = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    get template() {\n        if (this.miniTemplate && !this.isOpen) {\n            return this.miniTemplate.template;\n        } else if (this.contentTemplate) {\n            return this.contentTemplate.template;\n        }\n    }\n\n    private _miniTemplate: IgxNavDrawerMiniTemplateDirective;\n    /**\n     * @hidden\n     */\n    public get miniTemplate(): IgxNavDrawerMiniTemplateDirective {\n        return this._miniTemplate;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerMiniTemplateDirective, { read: IgxNavDrawerMiniTemplateDirective })\n    public set miniTemplate(v: IgxNavDrawerMiniTemplateDirective) {\n        if (!this.isOpen) {\n            this.setDrawerWidth(v ? this.miniWidth : '');\n        }\n        this._miniTemplate = v;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerTemplateDirective, { read: IgxNavDrawerTemplateDirective })\n    protected contentTemplate: IgxNavDrawerTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flexBasis')\n    get flexWidth() {\n        if (!this.pin) {\n            return '0px';\n        }\n        if (this.isOpen) {\n            return this.width;\n        }\n        if (this.miniTemplate && this.miniWidth) {\n            return this.miniWidth;\n        }\n\n        return '0px';\n    }\n\n    /** @hidden */\n    @HostBinding('style.order')\n    get isPinnedRight() {\n        return this.pin && this.position === 'right' ? '1' : '0';\n    }\n\n    private _gesturesAttached = false;\n    private _widthCache: { width: number, miniWidth: number, windowWidth: number } = { width: null, miniWidth: null, windowWidth: null };\n    private _resizeObserver: Subscription;\n    private css: { [name: string]: string; } = {\n        drawer: 'igx-nav-drawer__aside',\n        mini: 'igx-nav-drawer__aside--mini',\n        overlay: 'igx-nav-drawer__overlay',\n        styleDummy: 'igx-nav-drawer__style-dummy'\n    };\n\n    @ViewChild('aside') private _drawer: ElementRef;\n    @ViewChild('overlay') private _overlay: ElementRef;\n    @ViewChild('dummy') private _styleDummy: ElementRef;\n\n    /**\n      * @hidden\n      */\n    get drawer() {\n        return this._drawer.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get overlay() {\n        return this._overlay.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get styleDummy() {\n        return this._styleDummy.nativeElement;\n    }\n\n    /** Pan animation properties */\n    private _panning = false;\n    private _panStartWidth: number;\n    private _panLimit: number;\n\n    /**\n     * Property to decide whether to change width or translate the drawer from pan gesture.\n     *\n     * @hidden\n     */\n    public get hasAnimateWidth(): boolean {\n        return this.pin || !!this.miniTemplate;\n    }\n\n    private _maxEdgeZone = 50;\n    /**\n     * Used for touch gestures (swipe and pan).\n     * Defaults to 50 (in px) and is extended to at least 110% of the mini template width if available.\n     *\n     * @hidden\n     */\n    public get maxEdgeZone() {\n        return this._maxEdgeZone;\n    }\n\n    /**\n     * Gets the Drawer width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     *\n     * @hidden\n     */\n    public get expectedWidth() {\n        return this.getExpectedWidth(false);\n    }\n\n    /**\n     * Get the Drawer mini width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     */\n    public get expectedMiniWidth() {\n        return this.getExpectedWidth(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public get touchManager() {\n        return this._touchManager;\n    }\n\n    /**\n     * Exposes optional navigation service\n     *\n     * @hidden\n     */\n    public get state() {\n        return this._state;\n    }\n\n    constructor(\n        @Inject(ElementRef) private elementRef: ElementRef,\n        @Optional() private _state: IgxNavigationService,\n        // private animate: AnimationBuilder, TODO\n        protected renderer: Renderer,\n        private _touchManager: HammerGesturesManager) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        // DOM and @Input()-s initialized\n        if (this._state) {\n            this._state.add(this.id, this);\n        }\n        if (this.isOpen) {\n            this.setDrawerWidth(this.width);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        // wait for template and ng-content to be ready\n        this.updateEdgeZone();\n        this.checkPinThreshold();\n\n        this.ensureEvents();\n\n        // TODO: apply platform-safe Ruler from http://plnkr.co/edit/81nWDyreYMzkunihfRgX?p=preview\n        // (https://github.com/angular/angular/issues/6515), blocked by https://github.com/angular/angular/issues/6904\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._touchManager.destroy();\n        if (this._state) {\n            this._state.remove(this.id);\n        }\n        if (this._resizeObserver) {\n            this._resizeObserver.unsubscribe();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: { [propName: string]: SimpleChange }) {\n        // simple settings can come from attribute set (rather than binding), make sure boolean props are converted\n        if (changes.enableGestures && changes.enableGestures.currentValue !== undefined) {\n            this.enableGestures = !!(this.enableGestures && this.enableGestures.toString() === 'true');\n            this.ensureEvents();\n        }\n        if (changes.pin && changes.pin.currentValue !== undefined) {\n            this.pin = !!(this.pin && this.pin.toString() === 'true');\n            if (this.pin) {\n                this._touchManager.destroy();\n                this._gesturesAttached = false;\n            } else {\n                this.ensureEvents();\n            }\n        }\n\n        if (changes.pinThreshold) {\n            if (this.pinThreshold) {\n                this.ensureEvents();\n                this.checkPinThreshold();\n            }\n        }\n\n        if (changes.width && this.isOpen) {\n            this.setDrawerWidth(changes.width.currentValue);\n        }\n\n        if (changes.miniWidth) {\n            if (!this.isOpen) {\n                this.setDrawerWidth(changes.miniWidth.currentValue);\n            }\n            this.updateEdgeZone();\n        }\n    }\n\n    /**\n     * Toggle the open state of the Navigation Drawer.\n     *\n     * ```typescript\n     * this.navdrawer.toggle();\n     * ```\n     */\n    public toggle() {\n        if (this.isOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /**\n     * Open the Navigation Drawer. Has no effect if already opened.\n     *\n     * ```typescript\n     * this.navdrawer.open();\n     * ```\n     */\n    public open() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (this.isOpen) {\n            return;\n        }\n        this.opening.emit();\n        this.isOpen = true;\n\n        // TODO: Switch to animate API when available\n        // var animationCss = this.animate.css();\n        //     animationCss\n        //         .setStyles({'width':'50px'}, {'width':'400px'})\n        //         .start(this.elementRef.nativeElement)\n        //         .onComplete(() => animationCss.setToStyles({'width':'auto'}).start(this.elementRef.nativeElement));\n\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.setDrawerWidth(this.width);\n    }\n\n    /**\n     * Close the Navigation Drawer. Has no effect if already closed.\n     *\n     * ```typescript\n     * this.navdrawer.close();\n     * ```\n     */\n    public close() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (!this.isOpen) {\n            return;\n        }\n        this.closing.emit();\n\n        this.isOpen = false;\n        this.setDrawerWidth(this.miniTemplate ? this.miniWidth : '');\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleClosedEvent, false);\n    }\n\n    /**\n     * @hidden\n     */\n    protected set_maxEdgeZone(value: number) {\n        this._maxEdgeZone = value;\n    }\n\n    /**\n     * Get the Drawer width for specific state. Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     * @param [mini] - Request mini width instead\n     */\n    protected getExpectedWidth(mini?: boolean): number {\n        if (mini) {\n            if (!this.miniTemplate) {\n                return 0;\n            }\n            if (this.miniWidth) {\n                return parseFloat(this.miniWidth);\n            } else {\n                // if (!this.isOpen) { // This WON'T work due to transition timings...\n                //     return this.elementRef.nativeElement.children[1].offsetWidth;\n                // } else {\n                if (this._widthCache.miniWidth === null) {\n                    // force class for width calc. TODO?\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, true);\n                    this.renderer.setElementClass(this.styleDummy, this.css.mini, true);\n                    this._widthCache.miniWidth = this.styleDummy.offsetWidth;\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, false);\n                    this.renderer.setElementClass(this.styleDummy, this.css.mini, false);\n                }\n                return this._widthCache.miniWidth;\n            }\n        } else {\n            if (this.width) {\n                return parseFloat(this.width);\n            } else {\n                if (this._widthCache.width === null) {\n                    // force class for width calc. TODO?\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, true);\n                    this._widthCache.width = this.styleDummy.offsetWidth;\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, false);\n                }\n                return this._widthCache.width;\n            }\n        }\n    }\n\n    private getWindowWidth() {\n        return (window.innerWidth > 0) ? window.innerWidth : screen.width;\n    }\n\n    /**\n     * Sets the drawer width.\n     */\n    private setDrawerWidth(width: string) {\n        window.requestAnimationFrame(() => {\n            if (this.drawer) {\n                this.renderer.setElementStyle(this.drawer, 'width', width);\n            }\n        });\n    }\n\n    /**\n     * Get current Drawer width.\n     */\n    private getDrawerWidth(): number {\n        return this.drawer.offsetWidth;\n    }\n\n    private ensureEvents() {\n        // set listeners for swipe/pan only if needed, but just once\n        if (this.enableGestures && !this.pin && !this._gesturesAttached) {\n            // Built-in manager handler(L20887) causes endless loop and max stack exception.\n            // https://github.com/angular/angular/issues/6993\n            // Use ours for now (until beta.10):\n            // this.renderer.listen(document, \"swipe\", this.swipe);\n            this._touchManager.addGlobalEventListener('document', 'swipe', this.swipe);\n            this._gesturesAttached = true;\n\n            // this.renderer.listen(document, \"panstart\", this.panstart);\n            // this.renderer.listen(document, \"pan\", this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panstart', this.panstart);\n            this._touchManager.addGlobalEventListener('document', 'panmove', this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panend', this.panEnd);\n        }\n        if (!this._resizeObserver) {\n            this._resizeObserver = fromEvent(window, 'resize').pipe(debounce(() => interval(150)))\n                .subscribe((value) => {\n                    this.checkPinThreshold(value);\n                });\n        }\n    }\n\n    private updateEdgeZone() {\n        let maxValue;\n\n        if (this.miniTemplate) {\n            maxValue = Math.max(this._maxEdgeZone, this.getExpectedWidth(true) * 1.1);\n            this.set_maxEdgeZone(maxValue);\n        }\n    }\n\n    private checkPinThreshold = (evt?: Event) => {\n        let windowWidth;\n        if (this.pinThreshold) {\n            windowWidth = this.getWindowWidth();\n            if (evt && this._widthCache.windowWidth === windowWidth) {\n                return;\n            }\n            this._widthCache.windowWidth = windowWidth;\n            if (!this.pin && windowWidth >= this.pinThreshold) {\n                this.pin = true;\n                this.pinChange.emit(true);\n            } else if (this.pin && windowWidth < this.pinThreshold) {\n                this.pin = false;\n                this.pinChange.emit(false);\n            }\n        }\n    }\n\n    private swipe = (evt: HammerInput) => {\n        // TODO: Could also force input type: http://stackoverflow.com/a/27108052\n        if (!this.enableGestures || evt.pointerType !== 'touch') {\n            return;\n        }\n\n        // HammerJS swipe is horizontal-only by default, don't check deltaY\n        let deltaX;\n        let startPosition;\n        if (this.position === 'right') {\n            // when on the right use inverse of deltaX\n            deltaX = -evt.deltaX;\n            startPosition = this.getWindowWidth() - (evt.center.x + evt.distance);\n        } else {\n            deltaX = evt.deltaX;\n            startPosition = evt.center.x - evt.distance;\n        }\n        // only accept closing swipe (ignoring minEdgeZone) when the drawer is expanded:\n        if ((this.isOpen && deltaX < 0) ||\n            // positive deltaX from the edge:\n            (deltaX > 0 && startPosition < this.maxEdgeZone)) {\n            this.toggle();\n        }\n    }\n\n    private panstart = (evt: HammerInput) => { // TODO: test code\n        if (!this.enableGestures || this.pin || evt.pointerType !== 'touch') {\n            return;\n        }\n        const startPosition = this.position === 'right' ? this.getWindowWidth() - (evt.center.x + evt.distance)\n            : evt.center.x - evt.distance;\n\n        // cache width during animation, flag to allow further handling\n        if (this.isOpen || (startPosition < this.maxEdgeZone)) {\n            this._panning = true;\n            this._panStartWidth = this.getExpectedWidth(!this.isOpen);\n            this._panLimit = this.getExpectedWidth(this.isOpen);\n\n            this.renderer.setElementClass(this.overlay, 'panning', true);\n            this.renderer.setElementClass(this.drawer, 'panning', true);\n        }\n    }\n\n    private pan = (evt: HammerInput) => {\n        // TODO: input.deltaX = prevDelta.x + (center.x - offset.x);\n        // get actual delta (not total session one) from event?\n        // pan WILL also fire after a full swipe, only resize on flag\n        if (!this._panning) {\n            return;\n        }\n        const right: boolean = this.position === 'right';\n        // when on the right use inverse of deltaX\n        const deltaX = right ? -evt.deltaX : evt.deltaX;\n        let visibleWidth;\n        let newX;\n        let percent;\n\n        visibleWidth = this._panStartWidth + deltaX;\n\n        if (this.isOpen && deltaX < 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth <= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panLimit) / (this._panStartWidth - this._panLimit);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panStartWidth;\n                newX = evt.deltaX;\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n\n        } else if (!this.isOpen && deltaX > 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth >= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panStartWidth) / (this._panLimit - this._panStartWidth);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panLimit;\n                newX = (this._panLimit - visibleWidth) * (right ? 1 : -1);\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n        }\n    }\n\n    private panEnd = (evt: HammerInput) => {\n        if (this._panning) {\n            const deltaX = this.position === 'right' ? -evt.deltaX : evt.deltaX;\n            const visibleWidth: number = this._panStartWidth + deltaX;\n            this.resetPan();\n\n            // check if pan brought the drawer to 50%\n            if (this.isOpen && visibleWidth <= this._panStartWidth / 2) {\n                this.close();\n            } else if (!this.isOpen && visibleWidth >= this._panLimit / 2) {\n                this.open();\n            }\n            this._panStartWidth = null;\n        }\n    }\n\n    private resetPan() {\n        this._panning = false;\n        /* styles fail to apply when set on parent due to extra attributes, prob ng bug */\n        this.renderer.setElementClass(this.overlay, 'panning', false);\n        this.renderer.setElementClass(this.drawer, 'panning', false);\n        this.setXSize(0, '');\n    }\n\n    /**\n     * Sets the absolute position or width in case the drawer doesn't change position.\n     * @param x the number pixels to translate on the X axis or the width to set. 0 width will clear the style instead.\n     * @param opacity optional value to apply to the overlay\n     */\n    private setXSize(x: number, opacity?: string) {\n        // Angular polyfills patches window.requestAnimationFrame, but switch to DomAdapter API (TODO)\n        window.requestAnimationFrame(() => {\n            if (this.hasAnimateWidth) {\n                this.renderer.setElementStyle(this.drawer, 'width', x ? Math.abs(x) + 'px' : '');\n            } else {\n                this.renderer.setElementStyle(this.drawer, 'transform', x ? 'translate3d(' + x + 'px,0,0)' : '');\n                this.renderer.setElementStyle(this.drawer, '-webkit-transform',\n                    x ? 'translate3d(' + x + 'px,0,0)' : '');\n            }\n            if (opacity !== undefined) {\n                this.renderer.setElementStyle(this.overlay, 'opacity', opacity);\n            }\n        });\n    }\n\n    private toggleOpenedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.opened.emit();\n    }\n\n    private toggleClosedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleClosedEvent, false);\n        this.closed.emit();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxNavigationDrawerComponent } from './navigation-drawer.component';\nimport {\n    IgxNavDrawerItemDirective,\n    IgxNavDrawerMiniTemplateDirective,\n    IgxNavDrawerTemplateDirective\n} from './navigation-drawer.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    exports: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    imports: [CommonModule]\n})\nexport class IgxNavigationDrawerModule {}\n","import {\n    NgModule,\n    Component,\n    Input,\n    HostListener,\n    ElementRef,\n    HostBinding,\n    Output,\n    EventEmitter,\n    OnInit,\n    OnDestroy,\n    TemplateRef} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { SliderHandle } from '../slider.component';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-thumb',\n    templateUrl: 'thumb-slider.component.html',\n})\nexport class IgxSliderThumbComponent implements OnInit, OnDestroy {\n\n    private _timer;\n    private _isActiveLabel = false;\n    private _destroy$ = new Subject<boolean>();\n\n    public isActive = false;\n\n    @Input()\n    public value: number;\n\n    @Input()\n    public continuous: boolean;\n\n    @Input()\n    public thumbLabelVisibilityDuration;\n\n    @Input()\n    public disabled: boolean;\n\n    @Input()\n    public onPan: Subject<number>;\n\n    @Input()\n    public stepDistance: number;\n\n    @Input()\n    public step: number;\n\n    @Input()\n    public fromHandler: boolean;\n\n    @Input()\n    public templateRef: TemplateRef<any>;\n\n    @Input()\n    public context: any;\n\n    @Input()\n    public type: SliderHandle;\n\n    @Output()\n    public onThumbValueChange = new EventEmitter<number>();\n\n    @Output()\n    public onChange = new EventEmitter<any>();\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-slider__thumb-from')\n    public get thumbFromClass() {\n        return this.fromHandler;\n    }\n\n    @HostBinding('class.igx-slider__thumb-to')\n    public get thumbToClass() {\n        return !this.fromHandler;\n    }\n\n    @HostBinding('class.igx-slider__thumb-from--active')\n    public get thumbFromActiveClass() {\n        return this.fromHandler && this._isActiveLabel;\n    }\n\n    @HostBinding('class.igx-slider__thumb-to--active')\n    public get thumbToActiveClass() {\n        return !this.fromHandler && this._isActiveLabel;\n    }\n\n    public get nativeElement() {\n        return this._elementRef.nativeElement;\n    }\n\n    private get thumbPositionX() {\n        const thumbBounderies = this.nativeElement.getBoundingClientRect();\n        const thumbCenter = (thumbBounderies.right - thumbBounderies.left) / 2;\n        return thumbBounderies.left + thumbCenter;\n    }\n\n    public get destroy(): Subject<boolean> {\n        return this._destroy$;\n    }\n\n    constructor (private _elementRef: ElementRef) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.onPan\n            .pipe(takeUntil(this._destroy$))\n            .subscribe(mouseX =>\n                this.updateThumbValue(mouseX)\n            );\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    @HostListener('keydown', ['$event'])\n    public onKeyDown(event: KeyboardEvent) {\n        if (this.disabled) {\n            return;\n        }\n\n        let increment = 0;\n        if (event.key.endsWith('Left')) {\n            increment = this.step * - 1;\n        } else if (event.key.endsWith('Right')) {\n            increment = this.step;\n        } else {\n            return;\n        }\n\n        this.onChange.emit();\n        this.onThumbValueChange.emit(increment);\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.isActive = false;\n    }\n\n    @HostListener('focus')\n    public onFocusListener() {\n        this.isActive = true;\n    }\n\n    public showThumbLabel() {\n        if (this.disabled) {\n            return;\n        }\n\n        if (this.continuous) {\n            return;\n        }\n\n        if (this._timer !== null) {\n            clearTimeout(this._timer);\n        }\n\n        this._isActiveLabel = true;\n    }\n\n\n    public hideThumbLabel() {\n        if (this.disabled) {\n            return;\n        }\n\n        if (this.continuous) {\n            return;\n        }\n\n        this._timer = setTimeout(\n            () => this._isActiveLabel = false,\n            this.thumbLabelVisibilityDuration\n        );\n    }\n\n    private updateThumbValue(mouseX: number) {\n        const updateValue = this.calculateTrackUpdate(mouseX);\n        if (this.isActive && updateValue !== 0) {\n            this.onThumbValueChange.emit(updateValue);\n        }\n    }\n\n    private calculateTrackUpdate(mouseX: number): number {\n        const scaleX = mouseX - this.thumbPositionX;\n        const stepDistanceCenter = this.stepDistance / 2;\n\n        // If the thumb scale range (slider update) is less thÃ n a half step,\n        // the position stays the same.\n        const scaleXPositive = Math.abs(scaleX);\n        if (scaleXPositive < stepDistanceCenter) {\n            return 0;\n        }\n\n        return this.stepToProceed(scaleX, this.stepDistance);\n    }\n\n    private stepToProceed(scaleX, stepDist) {\n        return Math.round(scaleX / stepDist) * this.step;\n    }\n}\n@NgModule({\n    declarations: [IgxSliderThumbComponent],\n    imports: [CommonModule],\n    exports: [IgxSliderThumbComponent]\n})\nexport class IgxSliderThumbModule {}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, Component, ElementRef, EventEmitter,\n    HostBinding, Input, NgModule, OnInit, Output, Renderer2,\n    ViewChild,\n    Directive,\n    TemplateRef,\n    ContentChild,\n    AfterContentInit,\n    OnDestroy,\n    HostListener,\n    ViewChildren,\n    QueryList\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { EditorProvider } from '../core/edit-provider';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { IgxSliderThumbModule, IgxSliderThumbComponent } from './thumb/thumb-slider.component';\nimport { Subject, merge, concat } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * Template directive that allows you to set a custom template representing the lower label value of the {@link IgxSliderComponent}\n *\n *```html\n * <igx-slider>\n *  <ng-template igxSliderThumbFrom let-value let-labels>{{value}}</ng-template>\n * </igx-slider>\n * ```\n *\n * @context {@link IgxSliderComponent.context}\n */\n@Directive({\n    selector: '[igxSliderThumbFrom]'\n})\nexport class IgxThumbFromTemplateDirective {}\n\n/**\n * Template directive that allows you to set a custom template representing the upper label value of the {@link IgxSliderComponent}\n *\n * ```html\n * <igx-slider>\n *  <ng-template igxSliderThumbTo let-value let-labels>{{value}}</ng-template>\n * </igx-slider>\n * ```\n *\n * @context {@link IgxSliderComponent.context}\n */\n@Directive({\n    selector: '[igxSliderThumbTo]'\n})\nexport class IgxThumbToTemplateDirective {}\n\nexport enum SliderType {\n    /**\n     * Slider with single thumb.\n     */\n    SLIDER,\n    /**\n     *  Range slider with multiple thumbs, that can mark the range.\n     */\n    RANGE\n}\n\nexport enum SliderHandle {\n    FROM,\n    TO\n}\n\nexport interface IRangeSliderValue {\n    lower: number;\n    upper: number;\n}\n\nexport interface ISliderValueChangeEventArgs {\n    oldValue: number | IRangeSliderValue;\n    value: number | IRangeSliderValue;\n}\n\nconst noop = () => {\n};\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Slider** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/slider.html)\n *\n * The Ignite UI Slider allows selection in a given range by moving the thumb along the track. The track\n * can be defined as continuous or stepped, and you can choose between single and range slider types.\n *\n * Example:\n * ```html\n * <igx-slider id=\"slider\"\n *            [minValue]=\"0\" [maxValue]=\"100\"\n *            [continuous]=true [(ngModel)]=\"volume\">\n * </igx-slider>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSliderComponent, multi: true }],\n    selector: 'igx-slider',\n    templateUrl: 'slider.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSliderComponent implements\n    ControlValueAccessor,\n    EditorProvider,\n    OnInit,\n    AfterViewInit,\n    AfterContentInit,\n    OnDestroy {\n\n    // Limit handle travel zone\n    private _pMin = 0;\n    private _pMax = 1;\n\n    // From/upperValue in percent values\n    private _hasViewInit = false;\n    private _minValue = 0;\n    private _maxValue = 100;\n    private _lowerBound?: number;\n    private _upperBound?: number;\n    private _lowerValue?: number;\n    private _upperValue?: number;\n    private _countinuous = false;\n    private _disabled = false;\n    private _step = 1;\n\n    private _labels = new Array<number|string|boolean|null|undefined>();\n    private _type = SliderType.SLIDER;\n\n    private _destroy$ = new Subject<boolean>();\n\n    private _onChangeCallback: (_: any) => void = noop;\n    private _onTouchedCallback: () => void = noop;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('track')\n    private track: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('ticks')\n    private ticks: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxSliderThumbComponent)\n    private thumbs: QueryList<IgxSliderThumbComponent> = new QueryList<IgxSliderThumbComponent>();\n\n    private get thumbFrom(): IgxSliderThumbComponent {\n        return this.thumbs.find(thumb => thumb.type === SliderHandle.FROM);\n    }\n\n    private get thumbTo(): IgxSliderThumbComponent {\n        return this.thumbs.find(thumb => thumb.type === SliderHandle.TO);\n    }\n\n    /**\n     * @hidden\n     */\n    public stepDistance = this._step;\n\n    /**\n     * @hidden\n     */\n    public onPan: Subject<number> = new Subject<number>();\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxThumbFromTemplateDirective, { read: TemplateRef })\n    public thumbFromTemplateRef: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxThumbToTemplateDirective, { read: TemplateRef })\n    public thumbToTemplateRef: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.role`)\n    public role = 'slider';\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-valuemin`)\n    public get valuemin() {\n        return this.minValue;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-valuemax`)\n    public get valuemax() {\n        return this.maxValue;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-readonly`)\n    public get readonly() {\n        return this.disabled;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider')\n    public slierClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider--disabled')\n    public get disabledClass() {\n        return this.disabled;\n    }\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * If not provided it will be automatically generated.\n     * ```html\n     * <igx-slider [id]=\"'igx-slider-32'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-slider-${NEXT_ID++}`;\n\n    /**\n     * An @Input property that gets the type of the `IgxSliderComponent`. The slider can be SliderType.SLIDER(default) or SliderType.RANGE.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let type = this.slider.type;\n     * }\n     */\n    @Input()\n    public get type() {\n        return this._type;\n    }\n\n    /**\n     * An @Input property that sets the type of the `IgxSliderComponent`. The slider can be SliderType.SLIDER(default) or SliderType.RANGE.\n     * ```typescript\n     * sliderType: SliderType = SliderType.RANGE;\n     * ```\n     * ```html\n     * <igx-slider #slider2 [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"0\" [maxValue]=\"100\">\n     * ```\n     */\n    public set type(type: SliderType) {\n        this._type = type;\n\n        if (type === SliderType.SLIDER) {\n            this.lowerValue = 0;\n        }\n\n        if (this.labelsViewEnabled && this.upperValue > this.maxValue) {\n            this.upperValue = this.labels.length - 1;\n        }\n\n        if (this._hasViewInit) {\n            this.updateTrack();\n        }\n    }\n\n    /**\n     *An @Input property that sets the duration visibility of thumbs labels. The default value is 750 milliseconds.\n     *```html\n     *<igx-slider #slider [thumbLabelVisibilityDuration]=\"3000\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     *```\n     */\n    @Input()\n    public thumbLabelVisibilityDuration = 750;\n\n\n    /**\n     * Enables `labelView`, by accepting a collection of primitive values with more than one element.\n     * Each element will be equally spread over the slider and it will serve as a thumb label.\n     * Once the property is set, it will precendence over {@link maxValue}, {@link minValue}, {@link step}.\n     * This means that the manipulation for those properties won't be allowed.\n     */\n    @Input()\n    public get labels() {\n        return this._labels;\n    }\n\n    public set labels(labels: Array<number|string|boolean|null|undefined>) {\n        this._labels = labels;\n\n        this._pMax = 1;\n\n        if (this._hasViewInit) {\n            this.stepDistance = this.calculateStepDistance();\n            this.positionHandlesAndUpdateTrack();\n            this.setTickInterval(labels);\n        }\n    }\n\n    /**\n     * Returns the template context corresponding\n     * to {@link IgxThumbFromTemplateDirective} and {@link IgxThumbToTemplateDirective} templates.\n     *\n     * return {\n     *  $implicit: {@link value},\n     *  labels: {@link labels}\n     * }\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this.value,\n            labels: this.labels\n        };\n    }\n\n    /**\n     * An @Input property that sets the incremental/decremental step of the value when dragging the thumb.\n     * The default step is 1, and step should not be less or equal than 0.\n     * ```html\n     * <igx-slider #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Input()\n    public set step(step: number) {\n        this._step = step;\n    }\n\n    /**\n     * Returns the incremental/decremental dragging step of the {@link IgxSliderComponent}.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let step = this.slider.step;\n     * }\n     * ```\n     */\n    public get step() {\n        return this.labelsViewEnabled ? 1 : this._step;\n    }\n\n    /**\n     * Returns if the {@link IgxSliderComponent} is disabled.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let isDisabled = this.slider.disabled;\n     * }\n     * ```\n     */\n    @Input()\n    public get disabled(): boolean {\n        return this._disabled;\n    }\n\n    /**\n     *An @Input property that disables or enables UI interaction.\n     *```html\n     *<igx-slider #slider [disabled]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     *```\n     */\n    public set disabled(disable: boolean) {\n        this._disabled = disable;\n    }\n\n    /**\n     * Returns if the {@link IgxSliderComponent} is set as continuous.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let continuous = this.slider.continuous;\n     * }\n     * ```\n     */\n    @Input()\n    public get continuous(): boolean {\n        return this._countinuous;\n    }\n\n    /**\n     * An @Input property that marks the {@link IgxSliderComponent} as continuous.\n     * By default is considered that the {@link IgxSliderComponent} is discrete.\n     * Discrete {@link IgxSliderComponent} does not have ticks and does not shows bubble labels for values.\n     * ```html\n     * <igx-slider #slider [continuous]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    public set continuous(continuous: boolean) {\n        if (this.labelsViewEnabled) {\n            return;\n        }\n\n        this._countinuous = continuous;\n    }\n\n    /**\n     * Returns if the {@link IgxSliderComponent} is set as continuous.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let continuous = this.slider.continuous;\n     * }\n     * ```\n     */\n    @Input()\n    @DeprecateProperty(`IgxSliderComponent \\`isContinuous\\` property is deprecated.\\nUse \\`continuous\\` instead.`)\n    public get isContinuous(): boolean {\n        return this.continuous;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public set isContinuous(continuous: boolean) {\n        this.continuous = continuous;\n    }\n\n    /**\n     * Returns the maximum value for the {@link IgxSliderComponent}.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMax = this.slider.maxValue;\n     *}\n     * ```\n     */\n    public get maxValue(): number {\n        return this.labelsViewEnabled ?\n            this.labels.length - 1 :\n            this._maxValue;\n    }\n\n    /**\n     * Sets the maximal value for the `IgxSliderComponent`.\n     * The default maximum value is 100.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set maxValue(value: number) {\n        if (value <= this._minValue) {\n            this._maxValue = this._minValue + 1;\n        } else {\n            this._maxValue = value;\n        }\n\n        if (value < this.lowerBound) {\n            this.updateLowerBoundAndMinTravelZone();\n            this.upperBound = value;\n        }\n\n        // refresh max travel zone limits.\n        this._pMax = 1;\n        // recalculate step distance.\n        this.stepDistance = this.calculateStepDistance();\n        this.positionHandlesAndUpdateTrack();\n        this.setTickInterval(null);\n    }\n\n    /**\n     *Returns the minimal value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMin = this.slider.minValue;\n     *}\n     *```\n     */\n    public get minValue(): number {\n        if (this.labelsViewEnabled) {\n            return 0;\n        }\n\n        return this._minValue;\n    }\n\n    /**\n     * Sets the minimal value for the `IgxSliderComponent`.\n     * The default minimal value is 0.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"100\">\n     * ```\n     */\n    @Input()\n    public set minValue(value: number) {\n        if (value >= this.maxValue) {\n            this._minValue = this.maxValue - 1;\n        } else {\n            this._minValue = value;\n        }\n\n        if (value > this.upperBound) {\n            this.updateUpperBoundAndMaxTravelZone();\n            this.lowerBound = value;\n        }\n\n        // Refresh min travel zone limit.\n        this._pMin = 0;\n        // Recalculate step distance.\n        this.stepDistance = this.calculateStepDistance();\n        this.positionHandlesAndUpdateTrack();\n        this.setTickInterval(null);\n    }\n\n    /**\n     * Returns the lower boundary of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderLowBound = this.slider.lowerBound;\n     *}\n     *```\n     */\n    public get lowerBound(): number {\n        if (!Number.isNaN(this._lowerBound) && this._lowerBound !== undefined) {\n            return this.valueInRange(this._lowerBound, this.minValue, this.maxValue);\n        }\n\n        return this.minValue;\n    }\n\n    /**\n     * Sets the lower boundary of the `IgxSliderComponent`.\n     * If not set is the same as min value.\n     * ```html\n     * <igx-slider [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set lowerBound(value: number) {\n        if (value >= this.upperBound || (this.labelsViewEnabled && value < 0)) {\n            return;\n        }\n\n        this._lowerBound = this.valueInRange(value, this.minValue, this.maxValue);\n\n        // Refresh time travel zone.\n        this._pMin = this.valueToFraction(this._lowerBound) || 0;\n        this.positionHandlesAndUpdateTrack();\n    }\n\n    /**\n     * Returns the upper boundary of the `IgxSliderComponent`.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderUpBound = this.slider.upperBound;\n     *}\n     * ```\n     */\n    public get upperBound(): number {\n        if (!Number.isNaN(this._upperBound) && this._upperBound !== undefined) {\n            return this.valueInRange(this._upperBound, this.minValue, this.maxValue);\n        }\n\n        return this.maxValue;\n    }\n\n    /**\n     * Sets the upper boundary of the `IgxSliderComponent`.\n     * If not set is the same as max value.\n     * ```html\n     * <igx-slider [step]=\"5\" [upperBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set upperBound(value: number) {\n        if (value <= this.lowerBound || (this.labelsViewEnabled && value > this.labels.length - 1)) {\n            return;\n        }\n\n        this._upperBound = this.valueInRange(value, this.minValue, this.maxValue);\n        // Refresh time travel zone.\n        this._pMax = this.valueToFraction(this._upperBound) || 1;\n        this.positionHandlesAndUpdateTrack();\n    }\n\n    /**\n     * Returns the slider value. If the slider is of type {@link SliderType.SLIDER} the returned value is number.\n     * If the slider type is {@link SliderType.RANGE} the returned value represents an object of {@link lowerValue} and {@link upperValue}.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public sliderValue(event){\n     *    let sliderVal = this.slider.value;\n     *}\n     *```\n     */\n    public get value(): number | IRangeSliderValue {\n        if (this.isRange) {\n            return {\n                lower: this.valueInRange(this.lowerValue, this.lowerBound, this.upperBound),\n                upper: this.valueInRange(this.upperValue, this.lowerBound, this.upperBound)\n            };\n        } else {\n            return this.valueInRange(this.upperValue, this.lowerBound, this.upperBound);\n        }\n    }\n\n    /**\n     * Sets the slider value.\n     * If the slider is of type {@link SliderType.SLIDER} the argument is number. By default the {@link value} gets the {@link lowerBound}.\n     * If the slider type is {@link SliderType.RANGE} the argument\n     * represents an object of {@link lowerValue} and {@link upperValue} properties.\n     * By default the object is associated with the {@link lowerBound} and {@link upperBound} property values.\n     * ```typescript\n     *rangeValue = {\n     *   lower: 30,\n     *   upper: 60\n     *};\n     * ```\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set value(value: number | IRangeSliderValue) {\n        if (!this.isRange) {\n            this.upperValue = value as number;\n        } else {\n            value = this.validateInitialValue(value as IRangeSliderValue);\n            this.upperValue = (value as IRangeSliderValue).upper;\n            this.lowerValue = (value as IRangeSliderValue).lower;\n        }\n\n        this._onChangeCallback(this.value);\n\n        if (this._hasViewInit) {\n            this.positionHandlesAndUpdateTrack();\n        }\n    }\n\n    /**\n     * This event is emitted when user has stopped interacting the thumb and value is changed.\n     * ```typescript\n     * public change(event){\n     *    alert(\"The value has been changed!\");\n     *}\n     * ```\n     * ```html\n     * <igx-slider (onValueChange)=\"change($event)\" #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<ISliderValueChangeEventArgs>();\n\n\n    constructor(private renderer: Renderer2, private _el: ElementRef) { }\n\n    /**\n     * @hidden\n     */\n    @HostListener('pointerdown', ['$event'])\n    public onPointerDown($event) {\n        this.findClosestThumb($event);\n\n        if (!this.thumbTo.isActive && this.thumbFrom === undefined) {\n            return;\n        }\n\n        this.showThumbLabels();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('pointerup')\n    public onPointerUp() {\n        if (!this.thumbTo.isActive && this.thumbFrom === undefined) {\n            return;\n        }\n\n        this.hideThumbLabels();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('focus')\n    public onFocus() {\n        this.toggleThumbLabels();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('blur')\n    public onBlur() {\n        this.hideThumbLabels();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('pan', ['$event'])\n    public onPanListener($event) {\n        this.update($event.srcEvent.clientX);\n    }\n\n    @HostListener('panstart')\n    public onPanStart() {\n        this.showThumbLabels();\n    }\n\n    @HostListener('panend')\n    public onPanEnd() {\n        this.hideThumbLabels();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('tap', ['$event'])\n    public onTapListener($event) {\n        this.onTap($event);\n    }\n\n    /**\n     *Returns whether the `IgxSliderComponent` type is RANGE.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderRange = this.slider.isRange;\n     *}\n     * ```\n     */\n    public get isRange(): boolean {\n        return this.type === SliderType.RANGE;\n    }\n\n    /**\n     * Returns the lower value of the `IgxSliderComponent`.\n     * ```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * public lowValue(event){\n     *    let sliderLowValue = this.slider.lowerValue;\n     *}\n     *```\n     */\n    public get lowerValue(): number {\n        if (!Number.isNaN(this._lowerValue) && this._lowerValue !== undefined && this._lowerValue >= this.lowerBound) {\n            return this._lowerValue;\n        }\n\n        return this.lowerBound;\n    }\n\n    /**\n     *Sets the lower value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public lowValue(event){\n     *    this.slider.lowerValue = 120;\n     *}\n     *```\n     */\n    public set lowerValue(value: number) {\n        value = this.valueInRange(value, this.lowerBound, this.upperBound);\n        this._lowerValue = value;\n\n    }\n\n    /**\n     *Returns the upper value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public upperValue(event){\n     *    let upperValue = this.slider.upperValue;\n     *}\n     *```\n     */\n    public get upperValue() {\n        if (!Number.isNaN(this._upperValue) && this._upperValue !== undefined && this._upperValue <= this.upperBound) {\n            return this._upperValue;\n        }\n\n        return this.upperBound;\n    }\n\n    /**\n     *Sets the upper value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public upperValue(event){\n     *    this.slider.upperValue = 120;\n     *}\n     *```\n     */\n    public set upperValue(value: number) {\n        value = this.valueInRange(value, this.lowerBound, this.upperBound);\n        this._upperValue = value;\n    }\n\n    /**\n     * Returns the value corresponding the lower label.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let label = this.slider.lowerLabel;\n     *```\n     */\n    public get lowerLabel() {\n        return this.labelsViewEnabled ?\n            this.labels[this.lowerValue] :\n            this.lowerValue;\n    }\n\n    /**\n     * Returns the value corresponding the upper label.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let label = this.slider.upperLabel;\n     *```\n     */\n    public get upperLabel() {\n        return this.labelsViewEnabled ?\n            this.labels[this.upperValue] :\n            this.upperValue;\n    }\n\n    /**\n     * Returns if label view is enabled.\n     * If the {@link labels} is set, the view is automatically activated.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let labelView = this.slider.labelsViewEnabled;\n     *```\n     */\n    public get labelsViewEnabled(): boolean {\n        return !!(this.labels && this.labels.length > 1);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.sliderSetup();\n\n        // Set track travel zone\n        this._pMin = this.valueToFraction(this.lowerBound) || 0;\n        this._pMax = this.valueToFraction(this.upperBound) || 1;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this._hasViewInit = true;\n        this.positionHandlesAndUpdateTrack();\n        this.setTickInterval(this.labels);\n\n        this.subscribeTo(this.thumbFrom, this.thumbChanged.bind(this));\n        this.subscribeTo(this.thumbTo, this.thumbChanged.bind(this));\n\n        this.thumbs.changes.pipe(takeUntil(this._destroy$)).subscribe(change => {\n            const t = change.find((thumb: IgxSliderThumbComponent) => thumb.type === SliderHandle.FROM);\n            this.positionHandle(t, this.lowerValue);\n            this.subscribeTo(t, this.thumbChanged.bind(this));\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        // Calculates the distance between every step in pixels.\n        this.stepDistance = this.calculateStepDistance();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy$.next(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: any): void {\n        if (!value) {\n            return;\n        }\n\n        this.value = value;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: any): void {\n        this._onTouchedCallback = fn;\n    }\n\n    /** @hidden */\n    public getEditElement() {\n        return this.isRange ? this.thumbFrom.nativeElement : this.thumbTo.nativeElement;\n    }\n\n    /**\n     *\n     * @hidden\n     */\n    public onTap($event) {\n        this.update($event.srcEvent.clientX);\n    }\n    /**\n     *\n     * @hidden\n     */\n    public update(mouseX) {\n        if (this.disabled) {\n            return;\n        }\n\n        // Update To/From Values\n        this.onPan.next(mouseX);\n\n        // Finally do positionHandlesAndUpdateTrack the DOM\n        // based on data values\n        this.positionHandlesAndUpdateTrack();\n        this._onTouchedCallback();\n    }\n\n    /**\n     * @hidden\n     */\n    public thumbChanged(value: number, thumbType: number) {\n        const oldValue = this.value;\n\n        let newVal: IRangeSliderValue;\n        if (this.isRange) {\n            if (thumbType === SliderHandle.FROM) {\n                newVal = {\n                    lower: (this.value as IRangeSliderValue).lower + value,\n                    upper: (this.value as IRangeSliderValue).upper\n                };\n            } else {\n                newVal = {\n                    lower: (this.value as IRangeSliderValue).lower,\n                    upper: (this.value as IRangeSliderValue).upper + value\n                };\n            }\n\n            // Swap the thumbs if a collision appears.\n            if (newVal.lower >= newVal.upper) {\n                this.value = this.swapThumb(newVal);\n            } else {\n                this.value = newVal;\n            }\n\n        } else {\n            this.value = this.value as number + value;\n        }\n\n        if (this.hasValueChanged(oldValue)) {\n            this.emitValueChanged(oldValue);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onThumbChange() {\n        this.toggleThumbLabels();\n    }\n\n    private swapThumb(value: IRangeSliderValue) {\n        if (this.thumbFrom.isActive) {\n            value.upper = this.upperValue;\n            value.lower = this.upperValue;\n        } else {\n            value.upper = this.lowerValue;\n            value.lower = this.lowerValue;\n        }\n\n        this.toggleThumb();\n\n        return value;\n    }\n\n    private findClosestThumb(event) {\n        if (this.isRange) {\n            this.closestHandle(event.clientX);\n        } else {\n            this.thumbTo.nativeElement.focus();\n        }\n\n        this.update(event.clientX);\n\n        event.preventDefault();\n    }\n\n    private updateLowerBoundAndMinTravelZone() {\n        this.lowerBound = this.minValue;\n        this._pMin = 0;\n    }\n\n    private updateUpperBoundAndMaxTravelZone() {\n        this.upperBound = this.maxValue;\n        this._pMax = 1;\n    }\n\n    private sliderSetup() {\n        /**\n         * if {@link SliderType.SLIDER} than the initial value shold be the lowest one.\n         */\n        if (!this.isRange && this.value === this.upperBound) {\n            this.value = this.lowerBound;\n        }\n\n    }\n\n    private calculateStepDistance() {\n        return this._el.nativeElement.getBoundingClientRect().width / (this.maxValue - this.minValue) * this.step;\n    }\n\n    private toggleThumb() {\n        return this.thumbFrom.isActive ?\n            this.thumbTo.nativeElement.focus() :\n            this.thumbFrom.nativeElement.focus();\n    }\n\n    private valueInRange(value, min = 0, max = 100) {\n        return Math.max(Math.min(value, max), min);\n    }\n\n    private generateTickMarks(color: string, interval: number) {\n        return interval !== null ? `repeating-linear-gradient(\n            ${'to left'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        ), repeating-linear-gradient(\n            ${'to right'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        )` : interval;\n    }\n\n    private positionHandle(handle: ElementRef, position: number) {\n        if (!handle) {\n            return;\n        }\n\n        handle.nativeElement.style.left = `${this.valueToFraction(position) * 100}%`;\n    }\n\n    private positionHandlesAndUpdateTrack() {\n        if (!this.isRange) {\n            this.positionHandle(this.thumbTo, this.value as number);\n        } else {\n            this.positionHandle(this.thumbTo, (this.value as IRangeSliderValue).upper);\n            this.positionHandle(this.thumbFrom, (this.value as IRangeSliderValue).lower);\n        }\n\n        this.updateTrack();\n    }\n\n    private closestHandle(mouseX) {\n        const fromOffset = this.thumbFrom.nativeElement.offsetLeft + this.thumbFrom.nativeElement.offsetWidth / 2;\n        const toOffset = this.thumbTo.nativeElement.offsetLeft + this.thumbTo.nativeElement.offsetWidth / 2;\n        const xPointer = mouseX - this._el.nativeElement.getBoundingClientRect().left;\n        const match = this.closestTo(xPointer, [fromOffset, toOffset]);\n\n        if (match === fromOffset) {\n            this.thumbFrom.nativeElement.focus();\n        } else if (match === toOffset) {\n            this.thumbTo.nativeElement.focus();\n        }\n    }\n\n    private setTickInterval(labels) {\n        if (this.continuous) {\n            return;\n        }\n\n        let interval;\n        const trackProgress = 100;\n        if (this.labelsViewEnabled) {\n            // Calc ticks depending on the labels length;\n            interval = ((trackProgress / (this.labels.length - 1) * 10)) / 10;\n        } else {\n            const trackRange = this.maxValue - this.minValue;\n            interval = this.step > 1 ?\n                (trackProgress / ((trackRange / this.step)) * 10) / 10\n                : null;\n        }\n        this.renderer.setStyle(this.ticks.nativeElement, 'background', this.generateTickMarks('white', interval));\n    }\n\n    private showThumbLabels() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.thumbTo.showThumbLabel();\n        if (this.thumbFrom) {\n            this.thumbFrom.showThumbLabel();\n        }\n    }\n\n    private hideThumbLabels() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.thumbTo.hideThumbLabel();\n        if (this.thumbFrom) {\n            this.thumbFrom.hideThumbLabel();\n        }\n    }\n\n    private toggleThumbLabels() {\n        this.showThumbLabels();\n        this.hideThumbLabels();\n    }\n\n    private closestTo(goal: number, positions: number[]): number {\n        return positions.reduce((previous, current) => {\n            return (Math.abs(goal - current) < Math.abs(goal - previous) ? current : previous);\n        });\n    }\n\n    private valueToFraction(value: number, pMin = this._pMin, pMax = this._pMax) {\n        return this.valueInRange((value - this.minValue) / (this.maxValue - this.minValue), pMin, pMax);\n    }\n\n    private updateTrack() {\n        const fromPosition = this.valueToFraction(this.lowerValue);\n        const toPosition = this.valueToFraction(this.upperValue);\n        const positionGap = toPosition - fromPosition;\n\n        let trackLeftIndention = fromPosition;\n        if (this.isRange) {\n            if (positionGap) {\n                trackLeftIndention = Math.round((1 / positionGap * fromPosition) * 100);\n            }\n\n            this.renderer.setStyle(this.track.nativeElement, 'transform', `scaleX(${positionGap}) translateX(${trackLeftIndention}%)`);\n        } else {\n            this.renderer.setStyle(this.track.nativeElement, 'transform', `scaleX(${toPosition})`);\n        }\n    }\n\n    private validateInitialValue(value: IRangeSliderValue) {\n        if (value.lower < this.lowerBound && value.upper < this.lowerBound) {\n            value.upper = this.lowerBound;\n            value.lower = this.lowerBound;\n        }\n\n        if (value.lower > this.upperBound && value.upper > this.upperBound) {\n            value.upper = this.upperBound;\n            value.lower = this.upperBound;\n        }\n\n        if (value.upper < value.lower) {\n            value.upper = this.upperValue;\n            value.lower = this.lowerValue;\n        }\n\n        return value;\n    }\n\n    private subscribeTo(thumb: IgxSliderThumbComponent, callback: (a: number, b: number) => void) {\n        if (!thumb) {\n            return;\n        }\n\n        thumb.onThumbValueChange\n            .pipe(takeUntil(this.unsubscriber(thumb)))\n            .subscribe(value => callback(value, thumb.type));\n    }\n\n    private unsubscriber(thumb: IgxSliderThumbComponent) {\n        return merge(this._destroy$, thumb.destroy);\n    }\n\n    private hasValueChanged(oldValue) {\n        const isSliderWithDifferentValue: boolean = !this.isRange && oldValue !== this.value;\n        const isRangeWithOneDifferentValue: boolean = this.isRange &&\n            ((oldValue as IRangeSliderValue).lower !== (this.value as IRangeSliderValue).lower ||\n                (oldValue as IRangeSliderValue).upper !== (this.value as IRangeSliderValue).upper);\n\n        return isSliderWithDifferentValue || isRangeWithOneDifferentValue;\n    }\n\n    private emitValueChanged(oldValue: number | IRangeSliderValue) {\n        this.onValueChange.emit({ oldValue, value: this.value });\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSliderComponent, IgxThumbFromTemplateDirective, IgxThumbToTemplateDirective],\n    exports: [IgxSliderComponent, IgxThumbFromTemplateDirective, IgxThumbToTemplateDirective],\n    imports: [CommonModule, IgxSliderThumbModule]\n})\nexport class IgxSliderModule {\n}\n","import {\n    animate,\n    AnimationEvent,\n    state,\n    style,\n    transition,\n    trigger,\n    useAnimation\n} from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    NgZone,\n    Output\n} from '@angular/core';\nimport { fadeIn, fadeOut, slideInBottom, slideOutBottom } from '../animations/main';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Snackbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/snackbar.html)\n *\n * The Ignite UI Snack Bar provides feedback about an operation with a single-line message, which can\n * include a link to an action such as Undo.\n *\n * Example:\n * ```html\n * <button (click)=\"snackbar.show()\">Send message</button>\n * <div>\n *   <igx-snackbar #snackbar message=\"Message sent\">\n *   </igx-snackbar>\n * </div>\n * ```\n */\n@Component({\n    animations: [\n        trigger('slideInOut', [\n            transition('void => *', [\n                useAnimation(slideInBottom, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'cubic-bezier(0.0, 0.0, 0.2, 1)',\n                        fromPosition: 'translateY(100%)',\n                        toPosition: 'translateY(0)'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(slideOutBottom, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'cubic-bezier(0.4, 0.0, 1, 1)',\n                        fromPosition: 'translateY(0)',\n                        toOpacity: 1,\n                        toPosition: 'translateY(100%)'\n                    }\n                })\n            ])\n        ]),\n        trigger('fadeInOut', [\n            transition('void => *', [\n                useAnimation(fadeIn, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'ease-out'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(fadeOut, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'ease-out'\n                    }\n                })\n            ])\n        ])\n    ],\n    selector: 'igx-snackbar',\n    templateUrl: 'snackbar.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSnackbarComponent {\n\n    /**\n     * Sets/gets the `id` of the snackbar.\n     * If not set, the `id` of the first snackbar component  will be `\"igx-snackbar-0\"`;\n     * ```html\n     * <igx-snackbar id = \"Snackbar1\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let snackbarId = this.snackbar.id;\n     * ```\n     * @memberof IgxSnackbarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-snackbar-${NEXT_ID++}`;\n    /**\n     * Sets/gets the `message` attribute.\n     * ```html\n     * <igx-snackbar [message] = \"'Snackbar Component'\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let message =  this.snackbar.message;\n     * ```\n     */\n    @Input() public message: string;\n\n    /**\n     * Enables/Disables the visibility of the snackbar.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-snackbar [isVisible] = \"true\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let isVisible =  this.snackbar.isVisible;\n     * ```\n     */\n    @Input() public isVisible = false;\n\n    /**\n     * Sets/gets if the snackbar will be automatically hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-snackbar [autoHide] = \"false\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let autoHide =  this.snackbar.autoHide;\n     * ```\n     */\n    @Input() public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time(in milliseconds) in which the snackbar will be visible after it is being shown.\n     * Default value is 4000.\n     * ```html\n     * <igx-snackbar [displayTime] = \"2000\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let displayTime = this.snackbar.displayTime;\n     * ```\n     */\n    @Input() public displayTime = 4000;\n\n    /**\n     * Sets/gets the `actionText` attribute.\n     * ```html\n     * <igx-snackbar [actionText] = \"'Action Text'\"></igx-snackbar>\n     * ```\n     */\n    @Input() public actionText?: string;\n\n    /**\n     * An event that will be emitted when the action is executed.\n     * Provides reference to the `IgxSnackbarComponent` as an argument.\n     * ```html\n     * <igx-snackbar (onAction) = \"onAction($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public onAction = new EventEmitter<IgxSnackbarComponent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation starts.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationStarted) = \"animationStarted($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationStarted = new EventEmitter<AnimationEvent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation ends.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationDone) = \"animationDone($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationDone = new EventEmitter<AnimationEvent>();\n    /**\n     *@hidden\n     */\n    private timeoutId;\n\n    constructor(private zone: NgZone) { }\n\n    /**\n     * Shows the snackbar and hides it after the `displayTime` is over if `autoHide` is set to `true`.\n     * ```typescript\n     * this.snackbar.show();\n     * ```\n     */\n    public show(): void {\n        clearTimeout(this.timeoutId);\n        setTimeout(this.timeoutId);\n        this.isVisible = true;\n\n        if (this.autoHide) {\n            this.timeoutId = setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n    }\n\n    /**\n     * Hides the snackbar.\n     * ```typescript\n     * this.snackbar.hide();\n     * ```\n     */\n    public hide(): void {\n        this.isVisible = false;\n        clearTimeout(this.timeoutId);\n    }\n    /**\n     *@hidden\n     */\n    public triggerAction(): void {\n        this.onAction.emit(this);\n    }\n    /**\n     *@hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationStarted(evt: AnimationEvent): void {\n        if (evt.fromState === 'void') {\n            this.animationStarted.emit(evt);\n        }\n    }\n    /**\n     *@hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationDone(evt: AnimationEvent): void {\n        if (evt.fromState === 'show') {\n            this.animationDone.emit(evt);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSnackbarComponent],\n    exports: [IgxSnackbarComponent],\n    imports: [CommonModule]\n})\nexport class IgxSnackbarModule { }\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum SwitchLabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nexport interface IChangeSwitchEventArgs {\n    checked: boolean;\n    switch: IgxSwitchComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n * **Ignite UI for Angular Switch** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/switch.html)\n *\n * The Ignite UI Switch lets the user toggle between on/off or true/false states.\n *\n * Example:\n * ```html\n * <igx-switch [checked]=\"true\">\n *   Simple switch\n * </igx-switch>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSwitchComponent, multi: true }],\n    selector: 'igx-switch',\n    templateUrl: 'switch.component.html'\n})\nexport class IgxSwitchComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     *@hidden\n     */\n    protected _value: any;\n    /**\n     * Returns reference to the native checkbox element.\n     * ```typescript\n     * let checkboxElement =  this.switch.nativeCheckbox;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('checkbox') public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     * ```typescript\n     * let labelElement =  this.switch.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('label') public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.switch.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel') public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the switch component.\n     * If not set, the `id` of the first switch component will be `\"igx-switch-0\"`.\n     * ```html\n     * <igx-switch id=\"my-first-switch\"></igx-switch>\n     * ```\n     * ```typescript\n     * let switchId =  this.switch.id;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-switch-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element in the switch component.\n     * If not set, the label of the first switch component will have value `\"igx-switch-0-label\"`.\n     * ```html\n     * <igx-switch labelId=\"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let labelId =  this.switch.labelId;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute of the switch component.\n     * ```html\n     * <igx-switch [value] = \"switchValue\"></igx-switch>\n     * ```\n     * ```typescript\n     * let value =  this.switch.value;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the switch component.\n     * ```html\n     * <igx-switch name = \"Switch1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let name =  this.switch.name;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-switch [tabindex]=\"1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.switch.tabindex;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Sets/gets the position of the `label` in the switch component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-switch labelPosition=\"before\"></igx-switch>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.switch.labelPosition;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public labelPosition: SwitchLabelPosition | string = 'after';\n    /**\n     * Enables/Disables the ripple effect\n     * If not set, `disableRipple` will have value `false`.\n     * ```html\n     * <igx-switch [disableRipple]=\"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isRippleDisabled = this.switch.disableRipple;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether switch is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-switch [required]=\"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isRequired = this.switch.required;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledBy` attribute.\n     * If not set, the  value of `aria-labelledBy` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-switch aria-labelledby = \"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy = this.switch.ariaLabelledBy;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     * ```html\n     * <igx-switch aria-label=\"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let ariaLabel =  this.switch.ariaLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the switch state is changed.\n     * Provides references to the `IgxSwitchComponent` and the `checked` property as event arguments.\n     * @memberof IgxSwitchComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeSwitchEventArgs> = new EventEmitter<IChangeSwitchEventArgs>();\n    /**\n     *@hidden\n     * @memberof IgxSwitchComponent\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     *@hidden\n     * @memberof IgxSwitchComponent\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * Returns the class of the switch component.\n     * ```typescript\n     * let switchClass = this.switch.cssClass;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch')\n    public cssClass = 'igx-switch';\n    /**\n     * Sets/gets whether the switch is on or off.\n     * Default value is 'false'.\n     * ```html\n     *  <igx-switch [checked] = \"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isChecked =  this.switch.checked;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets the `disabled` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-switch [disabled] = \"true\"><igx-switch>\n     * ```\n     * ```typescript\n     * let isDisabled =  this.switch.disabled;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the switch component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.switch.focused = true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.switch.focused;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--focused')\n    public focused = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     * Toggles the checked state of the switch.\n     * ```typescript\n     * this.switch.toggle();\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    public toggle() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = !this.checked;\n        this.focused = false;\n        this.change.emit({ checked: this.checked, switch: this });\n        this._onChangeCallback(this.checked);\n    }\n    /**\n     *@hidden\n     */\n    public _onSwitchChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onSwitchClick(event) {\n        event.stopPropagation();\n        this.toggle();\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick(event) {\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /** @hidden */\n    getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case SwitchLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case SwitchLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n\nexport const IGX_SWITCH_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxSwitchRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-switch[required][formControlName],\n    igx-switch[required][formControl],\n    igx-switch[required][ngModel]`,\n    providers: [IGX_SWITCH_REQUIRED_VALIDATOR]\n})\nexport class IgxSwitchRequiredDirective extends CheckboxRequiredValidator { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    exports: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxSwitchModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewChecked,\n    AfterViewInit,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren\n} from '@angular/core';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxIconModule } from '../icon/index';\n\nexport interface ISelectTabEventArgs {\n    tab: IgxTabComponent;\n    panel: IgxTabPanelComponent;\n}\n\nlet NEXT_ID = 0;\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n/**\n * **Ignite UI for Angular Tab Bar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tabbar.html)\n *\n * The Ignite UI Tab Bar enables the user to navigate among a number of content panels displayed in a single view.\n *\n * Example:\n * ```html\n * <igx-bottom-nav>\n *   <igx-tab-panel label=\"Tab 1\">Tab 1 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 2\">Tab 2 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 3\">Tab 3 Content</igx-tab-panel>\n * </igx-bottom-nav>\n * ```\n */\n@Component({\n    selector: 'igx-bottom-nav',\n    templateUrl: 'tab-bar-content.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxBottomNavComponent implements AfterViewInit {\n    /**\n     * Gets the `IgxTabComponent` elements in the tab bar component.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.tabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ViewChildren(forwardRef(() => IgxTabComponent)) public tabs: QueryList<IgxTabComponent>;\n    /**\n     * Gets the `IgxTabPanelComponent` elements in the tab bar component.\n     * ```typescript\n     * let tabPanels: QueryList<IgxTabPanelComponent> = this.tabBar.panels;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ContentChildren(forwardRef(() => IgxTabPanelComponent)) public panels: QueryList<IgxTabPanelComponent>;\n\n    /**\n     * Sets/gets the `id` of the tab bar.\n     * If not set, the `id` of the first tab bar component will be `\"igx-bottom-nav-0\"`.\n     * ```html\n     * <igx-bottom-nav id = \"my-first-tab-bar\"></igx-bottom-nav>\n     * ```\n     * ```typescript\n     * let tabBarId =  this.tabBar.id;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-bottom-nav-${NEXT_ID++}`;\n    /**\n     * Emits an event when a new tab is selected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTableSelected) = \"onTabSelected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabSelected = new EventEmitter<ISelectTabEventArgs>();\n    /**\n     * Emits an event when a tab is deselected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTabDeselected) = \"onTabDeselected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabDeselected = new EventEmitter<ISelectTabEventArgs>();\n    /**\n     * Gets the `index` of selected tab/panel in the respective collection.\n     * ```typescript\n     * let index =  this.tabBar.selectedIndex;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public selectedIndex = -1;\n    /**\n     * Gets the `itemStyle` of the tab bar.\n     * ```typescript\n     * let itemStyle =  this.tabBar.itemStyle;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n    /**\n     *@hidden\n     */\n    private _itemStyle = 'igx-bottom-nav';\n    /**\n     * Gets the selected tab in the tab bar.\n     * ```typescript\n     * let tab =  this.tabBar.selectedTab;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    get selectedTab(): IgxTabComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef) {\n    }\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        // initial selection\n        setTimeout(() => {\n            if (this.selectedIndex === -1) {\n                const selectablePanels = this.panels.filter((p) => !p.disabled);\n                const panel = selectablePanels[0];\n\n                if (panel) {\n                    panel.select();\n                }\n            }\n        }, 0);\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('onTabSelected', ['$event'])\n    public _selectedPanelHandler(args) {\n        this.selectedIndex = args.panel.index;\n\n        this.panels.forEach((p) => {\n            if (p.index !== this.selectedIndex) {\n                this._deselectPanel(p);\n            }\n        });\n    }\n    /**\n     *@hidden\n     */\n    private _deselectPanel(panel: IgxTabPanelComponent) {\n        // Cannot deselect the selected tab - this will mean that there will be not selected tab left\n        if (panel.disabled || this.selectedTab.index === panel.index) {\n            return;\n        }\n\n        panel.isSelected = false;\n        this.onTabDeselected.emit({ tab: this.tabs[panel.index], panel });\n    }\n}\n\n// ================================= IgxTabPanelComponent ======================================\n\n@Component({\n    selector: 'igx-tab-panel',\n    templateUrl: 'tab-panel.component.html'\n})\n\nexport class IgxTabPanelComponent implements AfterContentInit, AfterViewChecked {\n    /**\n     *@hidden\n     */\n    private _itemStyle = 'igx-tab-panel';\n    /**\n     * Sets/gets the `label` of the tab panel.\n     * ```html\n     * <igx-tab-panel [label] = \"'Tab panel label'\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelLabel = this.tabPanel.label;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public label: string;\n    /**\n     * Sets/gets  the `icon` of the tab panel.\n     * ```html\n     * <igx-tab-panel [icon] = \"panel_icon\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelIcon =  this.tabPanel.icon;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public icon: string;\n    /**\n     * Sets/gets whether the tab panel is disabled.\n     * ```html\n     * <igx-tab-panel [disabled] = \"true\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let isDisabled = this.tabPanel.disabled;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public disabled: boolean;\n    /**\n     * Gets the role of the tab panel.\n     * ```typescript\n     * let tabPanelRole = this.tabPanel.role;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('attr.role') public role = 'tabpanel';\n    /**\n     * Gets whether a tab panel will have `igx-bottom-nav__panel` class.\n     * ```typescript\n     * let styleClass = this.tabPanel.styleClass;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel')\n    get styleClass(): boolean {\n        return (!this.isSelected);\n    }\n    /**\n     * Sets/gets whether a tab panel is selected.\n     * ```typescript\n     * this.tabPanel.isSelected = true;\n     * ```\n     * ```typescript\n     * let isSelected =  this.tabPanelIsSelected;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel--selected')\n    public isSelected = false;\n    /**\n     * Gets the `itemStyle` of the tab panel.\n     * ```typescript\n     * let itemStyle = this.tabPanel.itemStyle;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n    /**\n     * Gets the tab associated with the panel.\n     * ```typescript\n     * let tab = this.tabPanel.relatedTab;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get relatedTab(): IgxTabComponent {\n        if (this._tabBar.tabs) {\n            return this._tabBar.tabs.toArray()[this.index];\n        }\n    }\n    /**\n     * Gets the index of a panel in the panels collection.\n     * ```typescript\n     * let panelIndex =  this.tabPanel.index\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get index() {\n        if (this._tabBar.panels) {\n            return this._tabBar.panels.toArray().indexOf(this);\n        }\n    }\n    /**\n     * Gets the tab template.\n     * ```typescript\n     * let tabTemplate = this.tabPanel.customTabTemplate\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n    /**\n     * Sets the tab template.\n     * ```typescript\n     * this.tabPanel.customTabTemplate(tabTemplate);\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n    /**\n     *@hidden\n     */\n    private _tabTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTabTemplateDirective, { read: IgxTabTemplateDirective })\n    protected tabTemplate: IgxTabTemplateDirective;\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n    /**\n     *@hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngAfterViewChecked() {\n        this._element.nativeElement.setAttribute('aria-labelledby', `igx-tab-${this.index}`);\n        this._element.nativeElement.setAttribute('id', `igx-bottom-nav__panel-${this.index}`);\n    }\n    /**\n     * Selects the current tab and the tab panel.\n     * ```typescript\n     * this.tabPanel.select();\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public select() {\n        if (this.disabled || this._tabBar.selectedIndex === this.index) {\n            return;\n        }\n\n        this.isSelected = true;\n        this._tabBar.onTabSelected.emit({ tab: this._tabBar.tabs.toArray()[this.index], panel: this });\n    }\n}\n\n// ======================================= IgxTabComponent ==========================================\n\n@Component({\n    selector: 'igx-tab',\n    templateUrl: 'tab.component.html'\n})\n\nexport class IgxTabComponent {\n    /**\n     * Gets the `role` attribute.\n     * ```typescript\n     * let tabRole = this.tab.role;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @HostBinding('attr.role') public role = 'tab';\n    /**\n     * Gets the panel associated with the tab.\n     * ```typescript\n     * let tabPanel =  this.tab.relatedPanel;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input() public relatedPanel: IgxTabPanelComponent;\n    /**\n     *@hidden\n     */\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n    /**\n     * Gets the changes and updates accordingly applied to the tab.\n     *\n     * @memberof IgxTabComponent\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n    /**\n     * Gets whether the tab is disabled.\n     * ```typescript\n     * let isDisabled = this.tab.disabled;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    get disabled(): boolean {\n        const panel = this.relatedPanel;\n\n        if (panel) {\n            return panel.disabled;\n        }\n    }\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * let isSelected  = this.tab.isSelected;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    get isSelected(): boolean {\n        const panel = this.relatedPanel;\n\n        if (panel) {\n            return panel.isSelected;\n        }\n    }\n    /**\n     * Gets the `index` of the tab.\n     * ```typescript\n     * let tabIndex = this.tab.index;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    get index(): number {\n        return this._tabBar.tabs.toArray().indexOf(this);\n    }\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n    /**\n     * Selects the current tab and the associated panel.\n     * ```typescript\n     * this.tab.select();\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public select() {\n        this.relatedPanel.select();\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    exports: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule]\n})\nexport class IgxBottomNavModule {\n}\n","import { ElementRef, QueryList, EventEmitter } from '@angular/core';\n\n/** @hidden */\nexport abstract class IgxTabsBase {\n    selectedIndicator: ElementRef<any>;\n    tabs: QueryList<IgxTabItemBase>;\n    groups: QueryList<IgxTabsGroupBase>;\n    offset: number;\n    selectedIndex: number;\n    viewPort: ElementRef;\n    contentsContainer: ElementRef;\n    tabsContainer: ElementRef;\n    itemsContainer: ElementRef;\n    headerContainer: ElementRef;\n    onTabItemSelected: EventEmitter<{}>; // TODO: Define event arg interface!\n    scrollElement(element: any, scrollRight: boolean) {}\n}\n\n/** @hidden */\nexport interface IgxTabItemBase {\n    nativeTabItem: ElementRef;\n    select(focusDelay?: number);\n}\n\n/** @hidden */\nexport interface IgxTabsGroupBase {\n    select(focusDelay?: number);\n}\n","import {\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input\n} from '@angular/core';\n\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxTabItemBase, IgxTabsBase } from './tabs.common';\n\n@Component({\n    selector: 'igx-tab-item',\n    templateUrl: 'tab-item.component.html'\n})\n\nexport class IgxTabItemComponent implements IgxTabItemBase {\n\n    /**\n    * Gets the group associated with the tab.\n    * ```html\n    * const relatedGroup = this.tabbar.tabs.toArray()[1].relatedGroup;\n    * ```\n    */\n    @Input()\n    public relatedGroup: IgxTabsGroupComponent;\n\n    private _nativeTabItem: ElementRef;\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n\n    constructor(private _tabs: IgxTabsBase, private _element: ElementRef) {\n        this._nativeTabItem = _element;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'tab';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex;\n\n    /**\n     * @hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        this.select();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('window:resize', ['$event'])\n    public onResize(event) {\n        if (this.isSelected) {\n            this._tabs.selectedIndicator.nativeElement.style.width = `${this.nativeTabItem.nativeElement.offsetWidth}px`;\n            this._tabs.selectedIndicator.nativeElement.style.transform = `translate(${this.nativeTabItem.nativeElement.offsetLeft}px)`;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        this.onKeyDown(false);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        this.onKeyDown(true);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        this.onKeyDown(false, 0);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        this.onKeyDown(false, this._tabs.tabs.toArray().length - 1);\n    }\n\n    /**\n     * @hidden\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n\n    /**\n     * @hidden\n     */\n    get nativeTabItem(): ElementRef {\n        return this._nativeTabItem;\n    }\n\n    /**\n    * \tGets whether the tab is disabled.\n    * ```\n    * const disabledItem = this.myTabComponent.tabs.first.disabled;\n    * ```\n    */\n    get disabled(): boolean {\n        const group = this.relatedGroup;\n\n        if (group) {\n            return group.disabled;\n        }\n    }\n\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * const selectedItem = this.myTabComponent.tabs.first.isSelected;\n     * ```\n     */\n    get isSelected(): boolean {\n        const group = this.relatedGroup;\n\n        if (group) {\n            return group.isSelected;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get index(): number {\n        return this._tabs.tabs.toArray().indexOf(this);\n    }\n\n    /**\n     * @hidden\n     */\n    public select(focusDelay = 200): void {\n        this.relatedGroup.select(focusDelay);\n    }\n\n    private onKeyDown(isLeftArrow: boolean, index = null): void {\n        const tabsArray = this._tabs.tabs.toArray();\n        if (index === null) {\n            index = (isLeftArrow)\n                ? (this._tabs.selectedIndex === 0) ? tabsArray.length - 1 : this._tabs.selectedIndex - 1\n                : (this._tabs.selectedIndex === tabsArray.length - 1) ? 0 : this._tabs.selectedIndex + 1;\n        }\n        const tab = tabsArray[index];\n        tab.select(200);\n    }\n}\n","import {\n    Directive,\n    HostBinding,\n    TemplateRef\n} from '@angular/core';\nimport { IgxTabsBase } from './tabs.common';\n\nenum ButtonStyle {\n    VISIBLE = 'visible',\n    HIDDEN = 'hidden',\n    NOT_DISPLAYED = 'not_displayed'\n}\n\n@Directive({\n    selector: '[igxRightButtonStyle]'\n})\n\nexport class IgxRightButtonStyleDirective {\n    constructor(public tabs: IgxTabsBase) {\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n\n    private getRightButtonStyle(): string {\n        const viewPortWidth = this.tabs.viewPort.nativeElement.offsetWidth;\n\n        // We use this hacky way to get the width of the itemsContainer,\n        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.\n        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;\n        let itemsContainerWidth = 0;\n        if (itemsContainerChildrenCount > 1) {\n            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];\n            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;\n        }\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n        const total = offset + viewPortWidth;\n\n        // Fix for IE 11, a difference is accumulated from the widths calculations.\n        if (itemsContainerWidth - headerContainerWidth <= 1 && offset === 0) {\n            return ButtonStyle.NOT_DISPLAYED;\n        }\n\n        if (itemsContainerWidth > total) {\n            return ButtonStyle.VISIBLE;\n        } else {\n            return ButtonStyle.HIDDEN;\n        }\n    }\n}\n\n@Directive({\n    selector: '[igxLeftButtonStyle]'\n})\n\nexport class IgxLeftButtonStyleDirective {\n    constructor(public tabs: IgxTabsBase) {\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n\n    private getLeftButtonStyle(): string {\n        // We use this hacky way to get the width of the itemsContainer,\n        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.\n        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;\n        let itemsContainerWidth = 0;\n        if (itemsContainerChildrenCount > 1) {\n            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];\n            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;\n        }\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n\n        if (offset === 0) {\n            // Fix for IE 11, a difference is accumulated from the widths calculations.\n            if (itemsContainerWidth - headerContainerWidth <= 1) {\n                return ButtonStyle.NOT_DISPLAYED;\n            }\n            return ButtonStyle.HIDDEN;\n        } else {\n            return ButtonStyle.VISIBLE;\n        }\n    }\n}\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabItemTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n","import {\n    AfterContentInit,\n    AfterViewChecked,\n    Component,\n    ContentChild,\n    ElementRef,\n    HostBinding,\n    Input,\n    TemplateRef,\n    HostListener\n} from '@angular/core';\n\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabItemTemplateDirective } from './tabs.directives';\nimport { IgxTabsBase, IgxTabsGroupBase } from './tabs.common';\n\n@Component({\n    selector: 'igx-tabs-group',\n    templateUrl: 'tabs-group.component.html'\n})\n\nexport class IgxTabsGroupComponent implements IgxTabsGroupBase, AfterContentInit, AfterViewChecked {\n\n    /**\n    * An @Input property that allows you to enable/disable the `IgxTabGroupComponent`.\n    *```html\n    *<igx-tabs-group label=\"Tab 2  Lorem ipsum dolor sit\" icon=\"home\" [disabled]=\"true\">\n    *```\n    */\n    @Input()\n    public disabled = false;\n\n    /**\n    * An @Input property that sets the value of the `icon`.\n    * The value should be valid icon name from {@link https://material.io/tools/icons/?style=baseline}.\n    *```html\n    *<igx-tabs-group label=\"Tab 1\" icon=\"home\">\n    *```\n    */\n    @Input()\n    public icon: string;\n\n    /**\n    * An @Input property that sets the value of the `label`.\n    *```html\n    *<igx-tabs-group label=\"Tab 1\" icon=\"folder\">\n    *```\n    */\n    @Input()\n    public label: string;\n\n    public isSelected = false;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective })\n    protected tabTemplate: IgxTabItemTemplateDirective;\n\n    private _tabTemplate: TemplateRef<any>;\n\n    constructor(private _tabs: IgxTabsBase, private _element: ElementRef) {\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'tabpanel';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tabs__group')\n    public styleClass = true;\n\n    @HostListener('window:resize', ['$event'])\n    public onResize(event) {\n        if (this.isSelected) {\n            this.transformContentAnimation(0);\n        }\n    }\n\n    /**\n     * An accessor that returns the `IgxTabItemComponent` component.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabComponent = this.tab.relatedTab;\n     * }\n     * ```\n     */\n    get relatedTab(): IgxTabItemComponent {\n        if (this._tabs.tabs) {\n            return this._tabs.tabs.toArray()[this.index] as IgxTabItemComponent;\n        }\n    }\n\n    /**\n     * An accessor that returns the value of the index of the `IgxTabsGroupComponent`.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabIndex = this.tab.index;\n     * }\n     * ```\n     */\n    get index(): number {\n        if (this._tabs.groups) {\n            return this._tabs.groups.toArray().indexOf(this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n\n    /**\n     *@hidden\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewChecked() {\n        this._element.nativeElement.setAttribute('aria-labelledby', `igx-tab-item-${this.index}`);\n        this._element.nativeElement.setAttribute('id', `igx-tabs__group-${this.index}`);\n\n        if (this.isSelected) {\n            const tabItem = this.relatedTab.nativeTabItem.nativeElement;\n            this.transformContentAnimation(0);\n            this.transformIndicatorAnimation(tabItem);\n        }\n    }\n\n    /**\n     * A method that sets the focus on a tab.\n     * @memberof {@link IgxTabsGroupComponent}\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public tab : IgxTabsGroupComponent;\n     *ngAfterViewInit(){\n     *    this.tab.select();\n     *}\n     *```\n     * @param focusDelay A number representing the expected delay.\n     */\n    public select(focusDelay = 200): void {\n        if (this.disabled || this.isSelected) {\n            return;\n        }\n\n        this.isSelected = true;\n        this.relatedTab.tabindex = 0;\n\n        if (focusDelay !== 0) {\n            setTimeout(() => {\n                this.relatedTab.nativeTabItem.nativeElement.focus();\n            }, focusDelay);\n        }\n        this.handleSelection();\n        this._tabs.onTabItemSelected.emit({ tab: this._tabs.tabs.toArray()[this.index], group: this });\n    }\n\n    private handleSelection(): void {\n        const tabElement = this.relatedTab.nativeTabItem.nativeElement;\n\n        // Scroll to the left\n        if (tabElement.offsetLeft < this._tabs.offset) {\n            this._tabs.scrollElement(tabElement, false);\n        }\n\n        // Scroll to the right\n        const viewPortOffsetWidth = this._tabs.viewPort.nativeElement.offsetWidth;\n        const delta = (tabElement.offsetLeft + tabElement.offsetWidth) - (viewPortOffsetWidth + this._tabs.offset);\n        // Fix for IE 11, a difference is accumulated from the widths calculations\n        if (delta > 1) {\n            this._tabs.scrollElement(tabElement, true);\n        }\n\n        this.transformContentAnimation(0.2);\n        this.transformIndicatorAnimation(tabElement);\n    }\n\n    private transformContentAnimation(duration: number): void {\n        const contentOffset = this._tabs.tabsContainer.nativeElement.offsetWidth * this.index;\n        this._tabs.contentsContainer.nativeElement.style.transitionDuration = `${duration}s`;\n        this._tabs.contentsContainer.nativeElement.style.transform = `translate(${-contentOffset}px)`;\n    }\n\n    private transformIndicatorAnimation(element: HTMLElement): void {\n        this._tabs.selectedIndicator.nativeElement.style.width = `${element.offsetWidth}px`;\n        this._tabs.selectedIndicator.nativeElement.style.transform = `translate(${element.offsetLeft}px)`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n    OnDestroy\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxLeftButtonStyleDirective, IgxRightButtonStyleDirective, IgxTabItemTemplateDirective } from './tabs.directives';\nimport { IgxTabsBase } from './tabs.common';\n\nexport enum TabsType {\n    FIXED = 'fixed',\n    CONTENTFIT = 'contentfit'\n}\n\n@Component({\n    selector: 'igx-tabs',\n    templateUrl: 'tabs.component.html',\n    providers: [{ provide: IgxTabsBase, useExisting: IgxTabsComponent }]\n})\n\nexport class IgxTabsComponent implements IgxTabsBase, AfterViewInit, OnDestroy {\n\n    /**\n    * Provides an observable collection of all `IgxTabsGroupComponent`s.\n    * ```typescript\n    * const groupItems = this.myTabComponent.tabs;\n    * ```\n    */\n    @ContentChildren(forwardRef(() => IgxTabsGroupComponent))\n    public groups: QueryList<IgxTabsGroupComponent>;\n\n    /**\n    * An @Input property that sets the value of the `selectedIndex`.\n    * Default value is 0.\n    * ```html\n    * <igx-tabs selectedIndex=\"1\">\n    * ```\n    */\n    @Input()\n    public get selectedIndex(): number {\n        return this._selectedIndex;\n    }\n\n    public set selectedIndex(index: number) {\n        this._selectedIndex = index;\n        this.setSelectedGroup();\n    }\n\n    /**\n     * Defines the tab header sizing mode. You can choose between `contentfit` or `fixed`.\n     * By default the header sizing mode is `contentfit`.\n     * ```html\n     * <igx-tabs tabsType=\"fixed\">\n     *     <igx-tabs-group label=\"HOME\">Home</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     */\n    @Input('tabsType')\n    public tabsType: string | TabsType = 'contentfit';\n\n    /**\n    * @hidden\n    */\n    @Input()\n    public class = '';\n\n    /**\n     * Emitted when a tab item is deselected.\n     * ```html\n     * <igx-tabs (onTabItemDeselected)=\"itemDeselected($event)\">\n     *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n     *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     * ```typescript\n     * itemDeselected(e){\n     *      const tabGroup = e.group;\n     *      const tabItem = e.tab;\n     * }\n     * ```\n     */\n    @Output() public onTabItemDeselected = new EventEmitter();\n\n    /**\n    * Emitted when a tab item is selected.\n    * ```html\n    * <igx-tabs (onTabItemSelected)=\"itemSelected($event)\">\n    *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n    *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n    * </igx-tabs>\n    * ```\n    * ```typescript\n    * itemSelected(e){\n    *      const tabGroup = e.group;\n    *      const tabItem = e.tab;\n    * }\n    * ```\n    */\n    @Output() public onTabItemSelected = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('contentsContainer')\n    public contentsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerContainer')\n    public headerContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('itemsContainer')\n    public itemsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('selectedIndicator')\n    public selectedIndicator: ElementRef;\n\n    /**\n    * @hidden\n    */\n    @ViewChild('tabsContainer')\n    public tabsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('viewPort')\n    public viewPort: ElementRef;\n\n    /**\n     * Provides an observable collection of all `IgxTabItemComponent`s.\n     * ```typescript\n     * const tabItems = this.myTabComponent.tabs;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxTabItemComponent))\n    public tabs: QueryList<IgxTabItemComponent>;\n\n    /**\n     * @hidden\n     */\n    public calculatedWidth: number;\n\n    /**\n     * @hidden\n     */\n    public visibleItemsWidth: number;\n\n    /**\n     * @hidden\n     */\n    public offset = 0;\n\n    private _groupChanges$: Subscription;\n    private _selectedIndex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    public get cssClass() {\n        const defaultStyle = `igx-tabs`;\n        const fixedStyle = `igx-tabs--fixed`;\n        const iconStyle = `igx-tabs--icons`;\n        const iconLabelFound = this.groups.find((group) => group.icon != null && group.label != null);\n        let css;\n        switch (TabsType[this.tabsType.toUpperCase()]) {\n            case TabsType.FIXED: {\n                css = fixedStyle;\n                break;\n            }\n            default: {\n                css = defaultStyle;\n                break;\n            }\n        }\n\n        // Layout fix for items with icons\n        if (iconLabelFound !== undefined) {\n            css = `${css} ${iconStyle}`;\n        }\n\n        return `${css} ${this.class}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('onTabItemSelected', ['$event'])\n    public selectedGroupHandler(args) {\n        const prevSelectedIndex = this.selectedIndex;\n        if (prevSelectedIndex !== -1 && this.groups.toArray()[prevSelectedIndex] !== undefined) {\n            this.onTabItemDeselected.emit(\n                {\n                    tab: this.groups.toArray()[prevSelectedIndex].relatedTab,\n                    group: this.groups.toArray()[prevSelectedIndex]\n                });\n        }\n\n        this.selectedIndex = args.group.index;\n        this.groups.forEach((p) => {\n            if (p.index !== this.selectedIndex) {\n                this.deselectGroup(p);\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollLeft(event): void {\n        this.scroll(false);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollRight(event): void {\n        this.scroll(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollElement(element: any, scrollRight: boolean): void {\n        const viewPortWidth = this.viewPort.nativeElement.offsetWidth;\n\n        this.offset = (scrollRight) ? element.offsetWidth + element.offsetLeft - viewPortWidth : element.offsetLeft;\n        this.itemsContainer.nativeElement.style.transform = `translate(${-this.offset}px)`;\n    }\n\n    /**\n     * Gets the selected `IgxTabItemComponent`.\n     * ```\n     * const selectedItem = this.myTabComponent.selectedTabItem;\n     * ```\n     */\n    get selectedTabItem(): IgxTabItemComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this.setSelectedGroup();\n        this._groupChanges$ = this.groups.changes.subscribe(() => {\n            this.resetSelectionOnCollectionChanged();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._groupChanges$) {\n            this._groupChanges$.unsubscribe();\n        }\n    }\n\n    private setSelectedGroup(): void {\n        requestAnimationFrame(() => {\n            if (this.selectedIndex <= 0 || this.selectedIndex >= this.groups.length) {\n                // if nothing is selected - select the first tabs group\n                this.selectGroupByIndex(0);\n            } else {\n                this.selectGroupByIndex(this.selectedIndex);\n            }\n        });\n    }\n\n    private resetSelectionOnCollectionChanged(): void {\n        setTimeout(() => {\n            if (this.groups.toArray()[this.selectedIndex] !== undefined) {\n                // persist the selected index and applied it to the new collection\n                this.selectGroupByIndex(this.selectedIndex);\n            } else {\n                if (this.selectedIndex >= this.groups.length) {\n                    // in case the selected index is no longer valid, select the last group in the new collection\n                    this.selectGroupByIndex(this.groups.length - 1);\n                }\n            }\n        }, 0);\n    }\n\n    private selectGroupByIndex(selectedIndex: number): void {\n        const selectableGroups = this.groups.filter((selectableGroup) => !selectableGroup.disabled);\n        const group = selectableGroups[selectedIndex];\n\n        if (group) {\n            group.select(0);\n        }\n    }\n\n    private deselectGroup(group: IgxTabsGroupComponent): void {\n        // Cannot deselect the selected tab - this will mean that there will be not selected tab left\n        if (group.disabled || this.selectedTabItem.index === group.index) {\n            return;\n        }\n\n        group.isSelected = false;\n        group.relatedTab.tabindex = -1;\n    }\n\n    private scroll(scrollRight: boolean): void {\n        const tabsArray = this.tabs.toArray();\n        for (const tab of tabsArray) {\n            const element = tab.nativeTabItem.nativeElement;\n            if (scrollRight) {\n                if (element.offsetWidth + element.offsetLeft > this.viewPort.nativeElement.offsetWidth + this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            } else {\n                if (element.offsetWidth + element.offsetLeft >= this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            }\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    exports: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule, IgxRippleModule]\n})\n\nexport class IgxTabsModule {\n}\n","import { ElementRef } from '@angular/core';\nimport { InteractionMode } from '../core/enums';\n\n/** @hidden */\nexport const IGX_TIME_PICKER_COMPONENT = 'IgxTimePickerComponentToken';\n\n/** @hidden */\nexport interface IgxTimePickerBase {\n    _ampmItems: any[];\n    hourList: ElementRef;\n    minuteList: ElementRef;\n    ampmList: ElementRef;\n    selectedHour: string;\n    selectedMinute: string;\n    selectedAmPm: string;\n    format: string;\n    promptChar: string;\n    cleared: boolean;\n    mode: InteractionMode;\n    nextHour();\n    prevHour();\n    nextMinute();\n    prevMinute();\n    nextAmPm();\n    prevAmPm();\n    okButtonClick(): boolean;\n    cancelButtonClick(): void;\n    scrollHourIntoView(item: string): void;\n    scrollMinuteIntoView(item: string): void;\n    scrollAmPmIntoView(item: string): void;\n    hideOverlay(): void;\n    parseMask(preserveAmPm?: boolean): string;\n}\n\n","/**\n * This file contains all the directives used by the @link IgxTimePickerComponent.\n * You should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    TemplateRef\n} from '@angular/core';\nimport { IGX_TIME_PICKER_COMPONENT, IgxTimePickerBase } from './time-picker.common';\nimport { InteractionMode } from '../core/enums';\n\n/** @hidden */\n@Directive({\n    selector: '[igxItemList]'\n})\nexport class IgxItemListDirective {\n\n    @Input('igxItemList')\n    public type: string;\n\n    public isActive: boolean;\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private elementRef: ElementRef) { }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-time-picker__column')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__hourList')\n    get hourCSS(): boolean {\n        return this.type === 'hourList';\n    }\n\n    @HostBinding('class.igx-time-picker__minuteList')\n    get minuteCSS(): boolean {\n        return this.type === 'minuteList';\n    }\n\n    @HostBinding('class.igx-time-picker__ampmList')\n    get ampmCSS(): boolean {\n        return this.type === 'ampmList';\n    }\n\n    @HostListener('focus')\n    public onFocus() {\n        this.isActive = true;\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.isActive = false;\n    }\n\n    private nextItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.nextHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.nextMinute();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.nextAmPm();\n                break;\n            }\n        }\n    }\n\n    private prevItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.prevHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.prevMinute();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.prevAmPm();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.nextItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.prevItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('hourList') !== -1) {\n            this.timePicker.minuteList.nativeElement.focus();\n        } else if (listName.indexOf('minuteList') !== -1 && this.timePicker._ampmItems.length !== 0) {\n            this.timePicker.ampmList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('minuteList') !== -1) {\n            this.timePicker.hourList.nativeElement.focus();\n        } else if (listName.indexOf('ampmList') !== -1) {\n            this.timePicker.minuteList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter', ['$event'])\n    public onKeydownEnter(event: KeyboardEvent) {\n        event.preventDefault();\n\n        if (this.timePicker.mode === InteractionMode.DropDown) {\n            this.timePicker.hideOverlay();\n            return;\n        }\n        this.timePicker.okButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.escape', ['$event'])\n    public onKeydownEscape(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.timePicker.cancelButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseover')\n    public onHover() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('wheel', ['$event'])\n    public onScroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (event.deltaY > 0) {\n            this.nextItem();\n        } else if (event.deltaY < 0) {\n            this.prevItem();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('panmove', ['$event'])\n    public onPanMove(event) {\n        if (event.deltaY < 0) {\n            this.nextItem();\n        } else if (event.deltaY > 0) {\n            this.prevItem();\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHourItem]'\n})\nexport class IgxHourItemDirective {\n\n    @Input('igxHourItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedHour;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedHour && this.itemList.isActive;\n    }\n\n    get isSelectedHour(): boolean {\n        return this.timePicker.selectedHour === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollHourIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxMinuteItem]'\n})\nexport class IgxMinuteItemDirective {\n\n    @Input('igxMinuteItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedMinute;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedMinute && this.itemList.isActive;\n    }\n\n    get isSelectedMinute(): boolean {\n        return this.timePicker.selectedMinute === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollMinuteIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxAmPmItem]'\n})\nexport class IgxAmPmItemDirective {\n\n    @Input('igxAmPmItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedAmPm;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedAmPm && this.itemList.isActive;\n    }\n\n    get isSelectedAmPm(): boolean {\n        return this.timePicker.selectedAmPm === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollAmPmIntoView(item);\n        }\n    }\n}\n\n/**\n * This directive should be used to mark which ng-template will be used from IgxTimePicker when re-templating its input group.\n */\n@Directive({\n    selector: '[igxTimePickerTemplate]'\n})\nexport class IgxTimePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n","import { Pipe, PipeTransform, Inject} from '@angular/core';\nimport { IGX_TIME_PICKER_COMPONENT, IgxTimePickerBase } from './time-picker.common';\n\n\n/**\n * Formats `IgxTimePickerComponent` display value according to the `format` property,\n * when the input element loses focus.\n **/\n@Pipe({ name: 'displayFormat'})\nexport class TimeDisplayFormatPipe implements PipeTransform {\n\n     constructor(@Inject(IGX_TIME_PICKER_COMPONENT) private timePicker: IgxTimePickerBase) { }\n\n     transform(value: any): string {\n\n        const maskAmPM = this.timePicker.parseMask();\n        const mask = this.timePicker.parseMask(false);\n        if (!value || value === mask || value === maskAmPM) {\n            return '';\n        }\n\n        const sections = value.split(/[\\s:]+/);\n\n        let hour = sections[0];\n        let minutes = sections[1];\n        let amPM = sections[2];\n\n        const format = this.timePicker.format;\n        const prompt = this.timePicker.promptChar;\n        const regExp = new RegExp(this.timePicker.promptChar, 'g');\n\n        if (format.indexOf('hh') !== -1 || format.indexOf('HH') !== -1 && hour.indexOf(prompt) !== -1) {\n           hour = hour === prompt + prompt ? '00' : hour.replace(regExp, '0');\n        }\n\n        if (format.indexOf('mm') !== -1 && minutes.indexOf(prompt) !== -1) {\n           minutes = minutes === prompt + prompt ? '00' : minutes.replace(regExp, '0');\n        }\n\n        if (format.indexOf('hh') === -1 && format.indexOf('HH') === -1) {\n            hour = hour.indexOf(prompt) !== -1 ? hour.replace(regExp, '') : hour;\n            const hourVal = parseInt(hour, 10);\n            hour = !hourVal ? '0' : hourVal < 10 && hourVal !== 0 ? hour.replace('0', '') : hour;\n        }\n\n        if (format.indexOf('mm') === -1) {\n            minutes = minutes.indexOf(prompt) !== -1 ? minutes.replace(regExp, '') : minutes;\n            const minutesVal = parseInt(minutes, 10);\n            minutes = !minutesVal ? '0' : minutesVal < 10 && minutesVal !== 0 ? minutes.replace('0', '') : minutes;\n        }\n\n        if (format.indexOf('tt') !== -1 && (amPM !== 'AM' || amPM !== 'PM')) {\n           amPM = amPM.indexOf('p') !== -1 || amPM.indexOf('P') !== -1 ? 'PM' : 'AM';\n        }\n\n        return amPM ? `${hour}:${minutes} ${amPM}` : `${hour}:${minutes}`;\n    }\n}\n\n/**\n * Formats `IgxTimePickerComponent` display value according to the `format` property,\n * when the input element gets focus.\n **/\n@Pipe({ name: 'inputFormat' })\nexport class TimeInputFormatPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT) private timePicker: IgxTimePickerBase) { }\n\n    transform(value: any): string {\n        const prompt = this.timePicker.promptChar;\n        const regExp = new RegExp(prompt, 'g');\n\n        let mask: string;\n        if (this.timePicker.cleared) {\n            this.timePicker.cleared = false;\n            mask = this.timePicker.parseMask(false);\n        } else {\n            mask = this.timePicker.parseMask();\n        }\n\n        if (!value || value === mask) {\n            return mask;\n        }\n\n        const sections = value.split(/[\\s:]+/);\n\n        let hour = sections[0].replace(regExp, '');\n        let minutes = sections[1].replace(regExp, '');\n        const amPM = sections[2];\n\n        const leadZeroHour = (parseInt(hour, 10) < 10 && !hour.startsWith('0')) || hour === '0';\n        const leadZeroMinutes = (parseInt(minutes, 10) < 10 && !minutes.startsWith('0')) || minutes === '0';\n\n        hour = leadZeroHour ? '0' + hour : hour;\n        minutes = leadZeroMinutes ? '0' + minutes : minutes;\n\n        return amPM ? `${hour}:${minutes} ${amPM}` : `${hour}:${minutes}`;\n    }\n}\n","import {\n    CommonModule\n} from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output,\n    TemplateRef,\n    ViewChild,\n    ContentChild,\n    Injectable,\n    AfterViewInit\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { HAMMER_GESTURE_CONFIG, HammerGestureConfig } from '@angular/platform-browser';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule, IgxInputGroupComponent } from '../input-group/input-group.component';\nimport { IgxInputDirective } from '../directives/input/input.directive';\nimport {\n    IgxAmPmItemDirective,\n    IgxHourItemDirective,\n    IgxItemListDirective,\n    IgxMinuteItemDirective,\n    IgxTimePickerTemplateDirective\n} from './time-picker.directives';\nimport { Subject, fromEvent, interval, animationFrameScheduler } from 'rxjs';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxTimePickerBase, IGX_TIME_PICKER_COMPONENT } from './time-picker.common';\nimport { AbsoluteScrollStrategy } from '../services/overlay/scroll';\nimport { AutoPositionStrategy } from '../services/overlay/position';\nimport { OverlaySettings } from '../services/overlay/utilities';\nimport { takeUntil, throttle } from 'rxjs/operators';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxMaskModule } from '../directives/mask/mask.directive';\nimport { IgxOverlayOutletDirective, IgxToggleModule, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { TimeDisplayFormatPipe, TimeInputFormatPipe } from './time-picker.pipes';\nimport { ITimePickerResourceStrings, TimePickerResourceStringsEN } from '../core/i18n/time-picker-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { KEYS } from '../core/utils';\nimport { InteractionMode } from '../core/enums';\n\nlet NEXT_ID = 0;\n\nconst HOURS_POS = [0, 1, 2];\nconst MINUTES_POS = [3, 4, 5];\nconst AMPM_POS = [6, 7, 8];\n\nconst ITEMS_COUNT = 7;\n\n@Injectable()\nexport class TimePickerHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\nexport interface IgxTimePickerValueChangedEventArgs {\n    oldValue: Date;\n    newValue: Date;\n}\n\nexport interface IgxTimePickerValidationFailedEventArgs {\n    timePicker: IgxTimePickerComponent;\n    currentValue: Date;\n    setThroughUI: boolean;\n}\n\n@Component({\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxTimePickerComponent,\n            multi: true\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: TimePickerHammerConfig\n        },\n        {\n            provide: IGX_TIME_PICKER_COMPONENT,\n            useExisting: IgxTimePickerComponent\n        }\n    ],\n    selector: 'igx-time-picker',\n    templateUrl: 'time-picker.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ]\n})\nexport class IgxTimePickerComponent implements\n    IgxTimePickerBase,\n    ControlValueAccessor,\n    EditorProvider,\n    OnInit,\n    OnDestroy,\n    AfterViewInit {\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * ```html\n     * <igx-time-picker [id]=\"'igx-time-picker-5'\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-time-picker-${NEXT_ID++}`;\n\n    /**\n     * An accessor that allows you to set a time using the `value` input.\n     * ```html\n     *public date: Date = new Date(Date.now());\n     *  //...\n     *<igx-time-picker [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set value(value: Date) {\n        if (this._isValueValid(value)) {\n            const oldVal = this._value;\n\n            this._value = value;\n            this._onChangeCallback(value);\n\n            const dispVal = this._formatTime(this.value, this.format);\n            if (this.mode === InteractionMode.DropDown && this._displayValue !== dispVal) {\n                this.displayValue = dispVal;\n            }\n\n            const args: IgxTimePickerValueChangedEventArgs = {\n                oldValue: oldVal,\n                newValue: value\n            };\n            this.onValueChanged.emit(args);\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: value,\n                setThroughUI: false\n            };\n            this.onValidationFailed.emit(args);\n        }\n    }\n\n    /**\n     * An accessor that returns the value of `igx-time-picker` component.\n     * ```html\n     *@ViewChild(\"MyPick\")\n     *public pick: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let pickSelect = this.pick.value;\n     * }\n     * ```\n     */\n    get value(): Date {\n        return this._value;\n    }\n\n    /**\n     * An @Input property that allows you to disable the `igx-time-picker` component. By default `disabled` is set to false.\n     * ```html\n     * <igx-time-picker [disabled]=\"'true'\" [vertical]=\"true\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n    */\n    @Input()\n    set resourceStrings(value: ITimePickerResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    /**\n     * An accessor that returns the resource strings.\n    */\n    get resourceStrings(): ITimePickerResourceStrings {\n        return this._resourceStrings;\n    }\n\n    /**\n     * An @Input property that renders OK button with custom text. By default `okButtonLabel` is set to OK.\n     * ```html\n     * <igx-time-picker okButtonLabel='SET' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set okButtonLabel(value: string) {\n        this._okButtonLabel = value;\n    }\n\n    /**\n     * An accessor that returns the label of ok button.\n    */\n    get okButtonLabel(): string {\n        return this._okButtonLabel || this.resourceStrings.igx_time_picker_ok;\n    }\n\n    /**\n     * An @Input property that renders cancel button with custom text.\n     * By default `cancelButtonLabel` is set to Cancel.\n     * ```html\n     * <igx-time-picker cancelButtonLabel='Exit' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set cancelButtonLabel(value: string) {\n        this._cancelButtonLabel = value;\n    }\n\n    /**\n    * An accessor that returns the label of cancel button.\n    */\n    get cancelButtonLabel(): string {\n        return this._cancelButtonLabel || this.resourceStrings.igx_time_picker_cancel;\n    }\n\n    /**\n     * An @Input property that gets/sets the delta by which hour and minute items would be changed <br>\n     * when the user presses the Up/Down keys.\n     * By default `itemsDelta` is set to `{hours: 1, minutes:1}`\n     * ```html\n     *<igx-time-picker [itemsDelta]=\"{hours:3, minutes:5}\" id=\"time-picker\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public itemsDelta = { hours: 1, minutes: 1 };\n\n    /**\n     * An @Input property that allows you to set the `minValue` to limit the user input.\n     *```html\n     *public min: string = \"09:00\";\n     *  //..\n     *<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [minValue]=\"min\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public minValue: string;\n\n    /**\n     * An @Input property that allows you to set the `maxValue` to limit the user input.\n     *```html\n     *public max: string = \"18:00\";\n     *  //..\n     *<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [maxValue]=\"max\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public maxValue: string;\n\n    /**\n     * An @Input property that determines the spin behavior. By default `isSpinLoop` is set to true.\n     *The minutes and hour spinning will wrap around by default.\n     *```html\n     *<igx-time-picker [isSpinLoop]=\"false\" id=\"time-picker\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public isSpinLoop = true;\n\n    /**\n     * An @Input property that Gets/Sets the orientation of the `igxTimePicker`. By default `vertical` is set to false.\n     * ```html\n     *<igx-time-picker [vertical]=\"true\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * An @Input property that Gets/Sets format of time while `igxTimePicker` does not have focus. <br>\n     * By default `format` is set to hh:mm tt. <br>\n     * List of time-flags: <br>\n     * `h` : hours field in 12-hours format without leading zero <br>\n     * `hh` : hours field in 12-hours format with leading zero <br>\n     * `H` : hours field in 24-hours format without leading zero <br>\n     * `HH` : hours field in 24-hours format with leading zero <br>\n     * `m` : minutes field without leading zero <br>\n     * `mm` : minutes field with leading zero <br>\n     * `tt` : 2 character string which represents AM/PM field <br>\n     * ```html\n     *<igx-time-picker format=\"HH:m\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    get format() {\n        return this._format || 'hh:mm tt';\n    }\n\n    set format(formatValue: string) {\n        this._format = formatValue;\n        this.mask = this._format.indexOf('tt') !== -1 ? '00:00 LL' : '00:00';\n\n        if (this.displayValue) {\n            this.displayValue = this._formatTime(this.value, this._format);\n        }\n    }\n\n    /**\n     * Sets the character used to prompt the user for input.\n     * Default value is \"'-'\".\n     * ```html\n     * <igx-time-picker [promptChar] = \"'_'\">\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public promptChar = '-';\n\n    /**\n     * An @Input property that allows you to switch the interaction mode between\n     * a dialog picker or dropdown with editable masked input.\n     * Deafult is dialog picker.\n     *```html\n     *public mode = InteractionMode.DROPDOWN;\n     *  //..\n     *<igx-time-picker [mode]=\"mode\"></igx-time-picker>\n     *```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public mode = InteractionMode.Dialog;\n\n    /**\n     *@hidden\n     */\n    @Input()\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n    * An @Input property that allows you to modify overlay positioning, interaction and scroll behavior.\n    * ```typescript\n    * const settings: OverlaySettings = {\n    *      closeOnOutsideClick: true,\n    *      modal: false\n    *  }\n    * ```\n    * ---\n    * ```html\n    * <igx-time-picker [overlaySettings]=\"settings\"></igx-time-picker>\n    * ```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public overlaySettings: OverlaySettings;\n\n    /**\n     * Emitted when selection is made. The event contains the selected value. Returns {`oldValue`: `Date`, `newValue`: `Date`}.\n     *```typescript\n     * @ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onValueChanged(timepicker){\n     *    this.toast.show()\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker (onValueChanged)=\"onValueChanged($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"The value has been changed!\"></igx-toast>\n     *```\n     */\n    @Output()\n    public onValueChanged = new EventEmitter<IgxTimePickerValueChangedEventArgs>();\n\n    /**\n     * Emitted when an invalid value is being set. Returns {`timePicker`: `any`, `currentValue`: `Date`, `setThroughUI`: `boolean`}\n     * ```typescript\n     *public min: string = \"09:00\";\n     *public max: string = \"18:00\";\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onValidationFailed(timepicker){\n     *    this.toast.show();\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onValidationFailed)=\"onValidationFailed($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"Value must be between 09:00 and 18:00!\"></igx-toast>\n     * ```\n     */\n    @Output()\n    public onValidationFailed = new EventEmitter<IgxTimePickerValidationFailedEventArgs>();\n\n    /**\n     * Emitted when a timePicker is being opened.\n     * ```html\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onOpen(timepicker){\n     *    this.toast.show();\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onOpen)=\"onOpen($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"The time picker has been opened!\"></igx-toast>\n     * ```\n     */\n    @Output()\n    public onOpen = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * Emitted when a timePicker is being closed.\n     */\n    @Output()\n    public onClose = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('hourList')\n    public hourList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('minuteList')\n    public minuteList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('ampmList')\n    public ampmList: ElementRef;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('defaultTimePickerTemplate', { read: TemplateRef })\n    protected defaultTimePickerTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTimePickerTemplateDirective, { read: IgxTimePickerTemplateDirective })\n    protected timePickerTemplateDirective: IgxTimePickerTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxInputDirective, { read: ElementRef })\n    private _input: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('container')\n    public container: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxToggleDirective)\n    public toggleRef: IgxToggleDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('input', { read: ElementRef })\n    private input: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('group', { read: IgxInputGroupComponent })\n    private group: IgxInputGroupComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('dropdownInputTemplate', { read: TemplateRef })\n    private dropdownInputTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden\n     */\n    @ContentChild('dropDownTarget', { read: ElementRef })\n    protected templateDropDownTarget: ElementRef;\n\n    /**\n     * @hidden\n     */\n    public _hourItems = [];\n    /**\n     * @hidden\n     */\n    public _minuteItems = [];\n    /**\n     * @hidden\n     */\n    public _ampmItems = [];\n\n    /**\n     * @hidden\n    */\n    public mask: string;\n    /**\n     * @hidden\n    */\n    public cleared = false;\n    /**\n     * @hidden\n    */\n    public isNotEmpty = false;\n    /**\n     * @hidden\n    */\n    public displayFormat = new TimeDisplayFormatPipe(this);\n    /**\n     * @hidden\n    */\n    public inputFormat = new TimeInputFormatPipe(this);\n\n    /**\n     * @hidden\n     */\n    public selectedHour: string;\n    /**\n     * @hidden\n     */\n    public selectedMinute: string;\n    /**\n     * @hidden\n     */\n    public selectedAmPm: string;\n\n    private _value: Date;\n    private _resourceStrings = CurrentResourceStrings.TimePickerResStrings;\n    private _okButtonLabel = null;\n    private _cancelButtonLabel = null;\n    private _format: string;\n    private _displayValue: string;\n\n    private _isHourListLoop = this.isSpinLoop;\n    private _isMinuteListLoop = this.isSpinLoop;\n\n    private _hourView = [];\n    private _minuteView = [];\n    private _ampmView = [];\n\n    private _dateFromModel: Date;\n    private _destroy$ = new Subject<boolean>();\n    private _dropDownOverlaySettings: OverlaySettings;\n\n    private _prevSelectedHour: string;\n    private _prevSelectedMinute: string;\n    private _prevSelectedAmPm: string;\n\n    private _onTouchedCallback: () => void = () => { };\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    /**\n     * @hidden\n     */\n    get displayValue(): string {\n        if (this._displayValue === undefined) {\n            return this._formatTime(this.value, this.format);\n        }\n        return this._displayValue;\n    }\n\n    set displayValue(value: string) {\n        this._displayValue = value;\n    }\n\n    /**\n     * Returns the current time formatted as string using the `format` option.\n     * If there is no set time the return is an empty string.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let time = this.picker.displayTime;\n     *}\n     *```\n     */\n    public get displayTime(): string {\n        if (this.value) {\n            return this._formatTime(this.value, this.format);\n        }\n        return '';\n    }\n\n    /**\n     * @hidden\n     */\n    get hourView(): string[] {\n        return this._hourView;\n    }\n\n    /**\n     * @hidden\n     */\n    get minuteView(): string[] {\n        return this._minuteView;\n    }\n\n    /**\n     * @hidden\n     */\n    get ampmView(): string[] {\n        return this._ampmView;\n    }\n\n    /**\n     * @hidden\n     */\n    get showClearButton(): boolean {\n        return (this.displayValue && this.displayValue !== this.parseMask(false)) || this.isNotEmpty;\n    }\n\n    /**\n     * @hidden\n     */\n    get validMinuteEntries(): any[] {\n        const minuteEntries = [];\n        for (let i = 0; i < 60; i++) {\n            minuteEntries.push(i);\n        }\n        return minuteEntries;\n    }\n\n    /**\n     * @hidden\n     */\n    get validHourEntries(): any[] {\n        const hourEntries = [];\n        const index = this.format.indexOf('h') !== -1 ? 13 : 24;\n        for (let i = 0; i < index; i++) {\n            hourEntries.push(i);\n        }\n        return hourEntries;\n    }\n\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.timePickerTemplateDirective) {\n            return this.timePickerTemplateDirective.template;\n        }\n        return this.mode === InteractionMode.Dialog ? this.defaultTimePickerTemplate : this.dropdownInputTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     * @memberof IgxTimePickerComponent\n     */\n    get context() {\n        return {\n            value: this.value,\n            displayTime: this.displayTime,\n            displayValue: this.displayValue,\n            openDialog: () => { this.openDialog(); }\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        this._generateHours();\n        this._generateMinutes();\n        if (this.format.indexOf('tt') !== -1) {\n            this._generateAmPm();\n        }\n\n        this._dropDownOverlaySettings = {\n            modal: false,\n            closeOnOutsideClick: true,\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            positionStrategy: new AutoPositionStrategy()\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit(): void {\n        if (this.mode === InteractionMode.DropDown && this.input) {\n            fromEvent(this.input.nativeElement, 'keydown').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy$)\n            ).subscribe((event: KeyboardEvent) => {\n                if (event.key === KEYS.UP_ARROW || event.key === KEYS.UP_ARROW_IE ||\n                    event.key === KEYS.DOWN_ARROW || event.key === KEYS.DOWN_ARROW_IE) {\n                    this.spinOnEdit(event);\n                }\n            });\n        }\n\n        if (this.container && this.group) {\n            this.container.nativeElement.style.width = this.group.element.nativeElement.getBoundingClientRect().width + 'px';\n        }\n\n        if (this.toggleRef) {\n            this.toggleRef.onClosed.pipe(takeUntil(this._destroy$)).subscribe(() => {\n\n                if (this._input) {\n                    this._input.nativeElement.focus();\n                }\n\n                if (this.mode === InteractionMode.DropDown) {\n                    this._onDropDownClosed();\n                }\n\n                this.onClose.emit(this);\n            });\n\n            this.toggleRef.onOpened.pipe(takeUntil(this._destroy$)).subscribe(() => {\n                this.onOpen.emit(this);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onKeydownSpace(event) {\n        this.openDialog();\n        event.preventDefault();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.Alt.ArrowDown')\n    public onAltArrowDown() {\n        this.openDialog();\n    }\n\n    private _scrollItemIntoView(item: string, items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        let itemIntoView;\n        if (items) {\n            const index = (item === 'AM' || item === 'PM') ? items.indexOf(item) : items.indexOf(parseInt(item, 10));\n            let view;\n\n            if (index !== -1) {\n                if (isListLoop) {\n                    if (index > 0) {\n                        selectedItem = this._itemToString(items[index - 1], viewType);\n                        itemIntoView = this._nextItem(items, selectedItem, isListLoop, viewType);\n                    } else {\n                        selectedItem = this._itemToString(items[1], viewType);\n                        itemIntoView = this._prevItem(items, selectedItem, isListLoop, viewType);\n                    }\n                } else {\n                    view = items.slice(index - 3, index + 4);\n                    selectedItem = this._itemToString(items[index], viewType);\n                    itemIntoView = { selectedItem, view };\n                }\n                itemIntoView.view = this._viewToString(itemIntoView.view, viewType);\n            }\n        }\n        return itemIntoView;\n    }\n\n    private _viewToString(view: any, viewType: string): any {\n        for (let i = 0; i < view.length; i++) {\n            if (typeof (view[i]) !== 'string') {\n                view[i] = this._itemToString(view[i], viewType);\n            }\n        }\n        return view;\n    }\n\n    private _itemToString(item: any, viewType: string): string {\n        if (item === null) {\n            item = '';\n        } else if (viewType && typeof (item) !== 'string') {\n            const leadZeroHour = (item < 10 && (this.format.indexOf('hh') !== -1 || this.format.indexOf('HH') !== -1));\n            const leadZeroMinute = (item < 10 && this.format.indexOf('mm') !== -1);\n\n            const leadZero = (viewType === 'hour') ? leadZeroHour : leadZeroMinute;\n            item = (leadZero) ? '0' + item : `${item}`;\n        }\n        return item;\n    }\n\n    private _prevItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex - 4 < 0) {\n                view = items.slice(itemsCount - (4 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3));\n            } else if (selectedIndex + 4 > itemsCount) {\n                view = items.slice(selectedIndex - 4, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            }\n\n            selectedItem = (selectedIndex === 0) ? items[itemsCount - 1] : items[selectedIndex - 1];\n        } else if (selectedIndex > 3) {\n            view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            selectedItem = items[selectedIndex - 1];\n        } else if (selectedIndex === 3) {\n            view = items.slice(0, 7);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _nextItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex < 2) {\n                view = items.slice(itemsCount - (2 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5));\n            } else if (selectedIndex + 4 >= itemsCount) {\n                view = items.slice(selectedIndex - 2, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            }\n\n            selectedItem = (selectedIndex === itemsCount - 1) ? items[0] : items[selectedIndex + 1];\n        } else if (selectedIndex + 1 < itemsCount - 3) {\n            view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            selectedItem = items[selectedIndex + 1];\n        } else if (selectedIndex === itemsCount - 4) {\n            view = items.slice(selectedIndex - 3, itemsCount);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _formatTime(value: Date, format: string): string {\n        if (!value) {\n            return '';\n        } else {\n            let hour = value.getHours();\n            const minute = value.getMinutes();\n            let formattedMinute;\n            let formattedHour;\n            let amPM;\n\n            if (format.indexOf('h') !== -1) {\n                amPM = (hour > 11) ? 'PM' : 'AM';\n\n                if (hour > 12) {\n                    hour -= 12;\n                    formattedHour = hour < 10 && format.indexOf('hh') !== -1 ? '0' + hour : `${hour}`;\n                } else if (hour === 0) {\n                    formattedHour = '12';\n                } else if (hour < 10 && format.indexOf('hh') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            } else {\n                if (hour < 10 && format.indexOf('HH') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            }\n\n            formattedMinute = minute < 10 && format.indexOf('mm') !== -1 ? '0' + minute : `${minute}`;\n\n            return format.replace('hh', formattedHour).replace('h', formattedHour)\n                .replace('HH', formattedHour).replace('H', formattedHour)\n                .replace('mm', formattedMinute).replace('m', formattedMinute)\n                .replace('tt', amPM);\n        }\n    }\n\n    private _updateHourView(start: any, end: any): void {\n        this._hourView = this._viewToString(this._hourItems.slice(start, end), 'hour');\n    }\n\n    private _updateMinuteView(start: any, end: any): void {\n        this._minuteView = this._viewToString(this._minuteItems.slice(start, end), 'minute');\n    }\n\n    private _updateAmPmView(start: any, end: any): void {\n        this._ampmView = this._ampmItems.slice(start, end);\n    }\n\n    private _addEmptyItems(items: string[]): void {\n        for (let i = 0; i < 3; i++) {\n            items.push(null);\n        }\n    }\n\n    private _generateHours(): void {\n        let hourItemsCount = 24;\n        if (this.format.indexOf('h') !== -1) {\n            hourItemsCount = 13;\n        }\n\n        hourItemsCount /= this.itemsDelta.hours;\n\n        let i = this.format.indexOf('H') !== -1 ? 0 : 1;\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n            this._isHourListLoop = false;\n        }\n\n        if (hourItemsCount > 1) {\n            for (i; i < hourItemsCount; i++) {\n                this._hourItems.push(i * this.itemsDelta.hours);\n            }\n        } else {\n            this._hourItems.push(0);\n        }\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n        }\n    }\n\n    private _generateMinutes(): void {\n        const minuteItemsCount = 60 / this.itemsDelta.minutes;\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n            this._isMinuteListLoop = false;\n        }\n\n        for (let i = 0; i < minuteItemsCount; i++) {\n            this._minuteItems.push(i * this.itemsDelta.minutes);\n        }\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n        }\n    }\n\n    private _generateAmPm(): void {\n\n        this._addEmptyItems(this._ampmItems);\n\n        this._ampmItems.push('AM');\n        this._ampmItems.push('PM');\n\n        this._addEmptyItems(this._ampmItems);\n    }\n\n    private _getSelectedTime(): Date {\n        const date = this.value ? new Date(this.value) : new Date();\n        date.setHours(parseInt(this.selectedHour, 10));\n        date.setMinutes(parseInt(this.selectedMinute, 10));\n        date.setSeconds(0);\n        if (this.selectedAmPm === 'PM' && this.selectedHour !== '12') {\n            date.setHours(date.getHours() + 12);\n        }\n        if (this.selectedAmPm === 'AM' && this.selectedHour === '12') {\n            date.setHours(0);\n        }\n        return date;\n    }\n\n    private _convertMinMaxValue(value: string): Date {\n        const date = this.value ? new Date(this.value) : this._dateFromModel ? new Date(this._dateFromModel) : new Date();\n        const sections = value.split(/[\\s:]+/);\n\n        date.setHours(parseInt(sections[0], 10));\n        date.setMinutes(parseInt(sections[1], 10));\n        date.setSeconds(0);\n        if (sections[2] && sections[2] === 'PM' && sections[0] !== '12') {\n            date.setHours(date.getHours() + 12);\n        }\n        if (sections[0] === '12' && sections[2] && sections[2] === 'AM') {\n            date.setHours(0);\n        }\n\n        return date;\n    }\n\n    private _isValueValid(value: Date): boolean {\n        if (this.maxValue && value > this._convertMinMaxValue(this.maxValue)) {\n            return false;\n        } else if (this.minValue && value < this._convertMinMaxValue(this.minValue)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private _isEntryValid(val: string): boolean {\n        const sections = val.split(/[\\s:]+/);\n        const re = new RegExp(this.promptChar, 'g');\n\n        const hour = parseInt(sections[0].replace(re, ''), 10);\n        const minutes = parseInt(sections[1].replace(re, ''), 10);\n\n        return this.validHourEntries.indexOf(hour) !== -1 && this.validMinuteEntries.indexOf(minutes) !== -1;\n    }\n\n    private _getCursorPosition(): number {\n        return this.input.nativeElement.selectionStart;\n    }\n\n    private _setCursorPosition(start: number, end: number = start): void {\n        this.input.nativeElement.setSelectionRange(start, end);\n    }\n\n    private _updateEditableInput(): void {\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this._getSelectedTime(), this.format);\n        }\n    }\n\n    private _spinHours(currentVal: Date, minVal: Date, maxVal: Date, hDelta: number, sign: number): Date {\n        const oldVal = new Date(currentVal);\n\n        currentVal.setMinutes(sign * hDelta);\n        if (currentVal.getDate() !== oldVal.getDate() && this.isSpinLoop) {\n            currentVal.setDate(oldVal.getDate());\n        }\n\n        let minutes = currentVal.getMinutes();\n        if (currentVal.getTime() > maxVal.getTime()) {\n            if (this.isSpinLoop) {\n                minutes = minutes < minVal.getMinutes() ? 60 + minutes : minutes;\n                minVal.setMinutes(sign * minutes);\n                return minVal;\n            } else {\n                return oldVal;\n            }\n        } else if (currentVal.getTime() < minVal.getTime()) {\n            if (this.isSpinLoop) {\n                minutes = minutes <= maxVal.getMinutes() ? minutes : minutes - 60;\n                maxVal.setMinutes(minutes);\n                return maxVal;\n            } else {\n                return oldVal;\n            }\n        } else {\n            return currentVal;\n        }\n    }\n\n    private _spinMinutes(currentVal: Date, mDelta: number, sign: number) {\n        let minutes = currentVal.getMinutes() + (sign * mDelta);\n\n        if (minutes < 0 || minutes >= 60) {\n            minutes = this.isSpinLoop ? minutes - (sign * 60) : currentVal.getMinutes();\n        }\n\n        currentVal.setMinutes(minutes);\n        return currentVal;\n    }\n\n    private _initializeContainer() {\n        if (this.value) {\n            const formttedTime = this._formatTime(this.value, this.format);\n            const sections = formttedTime.split(/[\\s:]+/);\n\n            this.selectedHour = sections[0];\n            this.selectedMinute = sections[1];\n\n            if (this._ampmItems !== null) {\n                this.selectedAmPm = sections[2];\n            }\n        }\n\n        if (this.selectedHour === undefined) {\n            this.selectedHour = `${this._hourItems[3]}`;\n        }\n        if (this.selectedMinute === undefined) {\n            this.selectedMinute = '0';\n        }\n        if (this.selectedAmPm === undefined && this._ampmItems !== null) {\n            this.selectedAmPm = this._ampmItems[3];\n        }\n\n        this._prevSelectedHour = this.selectedHour;\n        this._prevSelectedMinute = this.selectedMinute;\n        this._prevSelectedAmPm = this.selectedAmPm;\n\n        this._onTouchedCallback();\n\n        this._updateHourView(0, ITEMS_COUNT);\n        this._updateMinuteView(0, ITEMS_COUNT);\n        this._updateAmPmView(0, ITEMS_COUNT);\n\n        if (this.selectedHour) {\n            this.scrollHourIntoView(this.selectedHour);\n        }\n        if (this.selectedMinute) {\n            this.scrollMinuteIntoView(this.selectedMinute);\n        }\n        if (this.selectedAmPm) {\n            this.scrollAmPmIntoView(this.selectedAmPm);\n        }\n\n        requestAnimationFrame(() => {\n            this.hourList.nativeElement.focus();\n        });\n    }\n\n    private _closeDropDown() {\n        this.toggleRef.close();\n        this._onDropDownClosed();\n    }\n\n    private _onDropDownClosed(): void {\n        const oldValue = this.value;\n        const newVal = this._convertMinMaxValue(this.displayValue);\n\n        if (this._isValueValid(newVal)) {\n            if (!this.value || oldValue.getTime() !== newVal.getTime()) {\n                this.value = newVal;\n            }\n        } else {\n            this.displayValue = this.inputFormat.transform(this._formatTime(oldValue, this.format));\n\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: newVal,\n                setThroughUI: true\n            };\n            this.onValidationFailed.emit(args);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    getEditElement() {\n        return this._input.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        // use this flag to make sure that min/maxValue are checked (in _convertMinMaxValue() method)\n        // against the real value when initializing the component and value is bound via ngModel\n        this._dateFromModel = value;\n\n        this.value = value;\n\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this.value, this.format);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /**\n     * opens the dialog.\n     * ```html\n     *<igx-time-picker #timePicker></igx-time-picker>\n     * ```\n     * ```typescript\n     * @ViewChild('timePicker', { read: IgxTimePickerComponent }) picker: IgxTimePickerComponent;\n     * picker.openDialog();\n     * ```\n     */\n    public openDialog(timePicker: IgxTimePickerComponent = this): void {\n        if (this.toggleRef.collapsed) {\n            let settings;\n            if (this.mode === InteractionMode.Dialog && this.overlaySettings ) {\n                settings = this.overlaySettings;\n            }\n\n            if (this.mode === InteractionMode.DropDown) {\n                settings = this.overlaySettings || this._dropDownOverlaySettings;\n                const posStrategy = settings.positionStrategy;\n\n                if (this.group && posStrategy) {\n                    posStrategy.settings.target = this.group.element.nativeElement;\n                } else if (this.templateDropDownTarget && posStrategy) {\n                    posStrategy.settings.target = this.templateDropDownTarget.nativeElement;\n                } else if (!posStrategy || (posStrategy && !posStrategy.settings.target)) {\n                    throw new Error('There is no target element for the dropdown to attach.' +\n                        'Mark a DOM element with #dropDownTarget ref variable or provide correct overlay positionStrategy.');\n                }\n            }\n\n            if (this.outlet) {\n                settings.outlet = this.outlet;\n            }\n\n            this.toggleRef.open(settings);\n            this._initializeContainer();\n\n        } else if (this.mode === InteractionMode.DropDown) {\n            this._closeDropDown();\n        }\n    }\n\n    /**\n     * Scrolls a hour item into view.\n     * ```typescript\n     *scrhintoView(picker) {\n     *picker.scrollHourIntoView('2');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrhintoView(picker)\"></igx-time-picker>\n     *```\n     *@param item to be scrolled in view.\n     */\n    public scrollHourIntoView(item: string): void {\n        const hourIntoView = this._scrollItemIntoView(item, this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        if (hourIntoView) {\n            this._hourView = hourIntoView.view;\n            this.selectedHour = hourIntoView.selectedItem;\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * Scrolls a minute item into view.\n     * ```typescript\n     *scrMintoView(picker) {\n     *picker.scrollMinuteIntoView('3');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrMintoView(picker)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollMinuteIntoView(item: string): void {\n        const minuteIntoView = this._scrollItemIntoView(item, this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        if (minuteIntoView) {\n            this._minuteView = minuteIntoView.view;\n            this.selectedMinute = minuteIntoView.selectedItem;\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * Scrolls an ampm item into view.\n     * ```typescript\n     *scrAmPmIntoView(picker) {\n     *picker.scrollAmPmIntoView('PM');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrAmPmIntoView(picker)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollAmPmIntoView(item: string): void {\n        const ampmIntoView = this._scrollItemIntoView(item, this._ampmItems, this.selectedAmPm, false, null);\n        if (ampmIntoView) {\n            this._ampmView = ampmIntoView.view;\n            this.selectedAmPm = ampmIntoView.selectedItem;\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public nextHour() {\n        const nextHour = this._nextItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = nextHour.view;\n        this.selectedHour = nextHour.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public prevHour() {\n        const prevHour = this._prevItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = prevHour.view;\n        this.selectedHour = prevHour.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public nextMinute() {\n        const nextMinute = this._nextItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = nextMinute.view;\n        this.selectedMinute = nextMinute.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public prevMinute() {\n        const prevMinute = this._prevItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = prevMinute.view;\n        this.selectedMinute = prevMinute.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public nextAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex + 1 < this._ampmItems.length - 3) {\n            this._updateAmPmView(selectedIndex - 2, selectedIndex + 5);\n            this.selectedAmPm = this._ampmItems[selectedIndex + 1];\n\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public prevAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex > 3) {\n            this._updateAmPmView(selectedIndex - 4, selectedIndex + 3);\n            this.selectedAmPm = this._ampmItems[selectedIndex - 1];\n\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * If current value is valid selects it, closes the dialog and returns true, otherwise returns false.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [rightButtonLabel]=\"okButtonLabel\" (onRightButtonSelect)=\"okButtonClick()\">\n     * //..\n     * </igx-dialog>\n     * ```\n     */\n    public okButtonClick(): boolean {\n        const time = this._getSelectedTime();\n        if (this._isValueValid(time)) {\n            this.hideOverlay();\n            this.value = time;\n            return true;\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: time,\n                setThroughUI: true\n            };\n            this.onValidationFailed.emit(args);\n            return false;\n        }\n    }\n\n    /**\n     * Closes the dialog without selecting the current value.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [leftButtonLabel]=\"cancelButtonLabel\" (onLeftButtonSelect)=\"cancelButtonClick()\">\n     * //...\n     * </igx-dialog>\n     * ```\n     */\n    public cancelButtonClick(): void {\n        this.hideOverlay();\n\n        this.selectedHour = this._prevSelectedHour;\n        this.selectedMinute = this._prevSelectedMinute;\n        this.selectedAmPm = this._prevSelectedAmPm;\n    }\n\n    /**\n     * Returns an array of the hours currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let hInView = this.picker.hoursInView;\n     *}\n     *```\n     */\n    public hoursInView(): string[] {\n        return this._hourView.filter((hour) => hour !== '');\n    }\n\n    /**\n     * Returns an array of the minutes currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let minInView = this.picker.minutesInView;\n     *}\n     *```\n     */\n    public minutesInView(): string[] {\n        return this._minuteView.filter((minute) => minute !== '');\n    }\n\n    /**\n     * Returns an array of the AM/PM currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let ApInView = this.picker.ampmInView;\n     *}\n     *```\n     */\n    public ampmInView(): string[] {\n        return this._ampmView.filter((ampm) => ampm !== '');\n    }\n\n    /**\n     * @hidden\n     */\n    public hideOverlay(): void {\n        this.toggleRef.close();\n    }\n\n    /**\n     * @hidden\n     */\n    public parseMask(preserveAmPm = true): string {\n        const prompts = this.promptChar + this.promptChar;\n        const amPm = preserveAmPm ? 'AM' : prompts;\n\n        return this.format.indexOf('tt') !== -1 ? `${prompts}:${prompts} ${amPm}` : `${prompts}:${prompts}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public clear(): void {\n        if (this.toggleRef.collapsed) {\n            this.cleared = true;\n            this.isNotEmpty = false;\n\n            const oldVal = new Date(this.value);\n\n            this.displayValue = '';\n            this.value.setHours(0, 0);\n\n            if (oldVal.getTime() !== this.value.getTime()) {\n                const args: IgxTimePickerValueChangedEventArgs = {\n                    oldValue: oldVal,\n                    newValue: this.value\n                };\n                this.onValueChanged.emit(args);\n            }\n        } else {\n            this.hideOverlay();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onInput(event): void {\n        const val = event.target.value;\n        const oldVal = new Date(this.value);\n\n        this.isNotEmpty = val !== this.parseMask(false);\n\n        // handle cases where all empty positions (promts) are filled and we want to update\n        // timepicker own value property if it is a valid Date\n        if (val.indexOf(this.promptChar) === -1) {\n            if (this._isEntryValid(val)) {\n                const newVal = this._convertMinMaxValue(val);\n                if (oldVal.getTime() !== newVal.getTime()) {\n                    this.value = newVal;\n                }\n            } else {\n                const args: IgxTimePickerValidationFailedEventArgs = {\n                    timePicker: this,\n                    currentValue: val,\n                    setThroughUI: false\n                };\n                this.onValidationFailed.emit(args);\n            }\n            // handle cases where the user deletes the display value (when pressing backspace or delete)\n        } else if (!this.value || !val || val === this.parseMask(false)) {\n            this.isNotEmpty = false;\n\n            this.value.setHours(0, 0);\n            this.displayValue = val;\n\n            if (oldVal.getTime() !== this.value.getTime()) {\n                const args: IgxTimePickerValueChangedEventArgs = {\n                    oldValue: oldVal,\n                    newValue: this.value\n                };\n                this.onValueChanged.emit(args);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onFocus(event): void {\n        this.isNotEmpty = event.target.value !== this.parseMask(false);\n    }\n\n    /**\n     * @hidden\n     */\n    public onBlur(event): void {\n        const value = event.target.value;\n\n        this.isNotEmpty = value !== '';\n        this.displayValue = value;\n\n        if (value && value !== this.parseMask()) {\n            if (this._isEntryValid(value)) {\n                const newVal = this._convertMinMaxValue(value);\n                if (!this.value || this.value.getTime() !== newVal.getTime()) {\n                    this.value = newVal;\n                }\n            } else {\n                const args: IgxTimePickerValidationFailedEventArgs = {\n                    timePicker: this,\n                    currentValue: value,\n                    setThroughUI: false\n                };\n                this.onValidationFailed.emit(args);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public spinOnEdit(event): void {\n        event.preventDefault();\n\n        let sign: number;\n        let displayVal: string;\n        const currentVal = new Date(this.value);\n        const min = this.minValue ? this._convertMinMaxValue(this.minValue) : this._convertMinMaxValue('00:00');\n        const max = this.maxValue ? this._convertMinMaxValue(this.maxValue) : this._convertMinMaxValue('24:00');\n\n        const cursor = this._getCursorPosition();\n\n        if (event.key) {\n            const key = event.key;\n            sign = key === KEYS.DOWN_ARROW || key === KEYS.DOWN_ARROW_IE ? -1 : 1;\n        }\n\n        if (event.deltaY) {\n            sign = event.deltaY < 0 ? 1 : -1;\n        }\n\n        if (!this.displayValue) {\n            this.value = min;\n            displayVal = this._formatTime(this.value, this.format);\n        } else {\n            const hDelta = this.itemsDelta.hours * 60 + (sign * this.value.getMinutes());\n            const mDelta = this.itemsDelta.minutes;\n            const sections = this.displayValue.split(/[\\s:]+/);\n\n            if (HOURS_POS.indexOf(cursor) !== -1) {\n                this.value = this._spinHours(currentVal, min, max, hDelta, sign);\n            }\n\n            if (MINUTES_POS.indexOf(cursor) !== -1) {\n                this.value = this._spinMinutes(currentVal, mDelta, sign);\n            }\n\n            if (AMPM_POS.indexOf(cursor) !== -1 && this.format.indexOf('tt') !== -1) {\n                sign = sections[2] && sections[2] === 'AM' ? 1 : -1;\n                currentVal.setHours(currentVal.getHours() + (sign * 12));\n\n                this.value = currentVal;\n            }\n\n            displayVal = this._formatTime(this.value, this.format);\n        }\n\n        // minor hack for preventing cursor jumping in IE\n        this._displayValue = this.inputFormat.transform(displayVal);\n        this.input.nativeElement.value = this._displayValue;\n        this._setCursorPosition(cursor);\n\n        requestAnimationFrame(() => {\n            this._setCursorPosition(cursor);\n        });\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxTimePickerComponent,\n        IgxHourItemDirective,\n        IgxItemListDirective,\n        IgxMinuteItemDirective,\n        IgxAmPmItemDirective,\n        IgxTimePickerTemplateDirective,\n        TimeDisplayFormatPipe,\n        TimeInputFormatPipe\n    ],\n    exports: [\n        IgxTimePickerComponent,\n        IgxTimePickerTemplateDirective,\n        TimeDisplayFormatPipe,\n        TimeInputFormatPipe\n    ],\n    imports: [\n        CommonModule,\n        IgxInputGroupModule,\n        IgxIconModule,\n        IgxButtonModule,\n        IgxMaskModule,\n        IgxToggleModule\n    ],\n    providers: []\n})\nexport class IgxTimePickerModule { }\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Toast** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/toast.html)\n *\n * The Ignite UI Toast provides information and warning messages that are non-interactive and cannot\n * be dismissed by the user. Toasts can be displayed at the bottom, middle, or top of the page.\n *\n * Example:\n * ```html\n * <button (click)=\"toast.show()\">Show notification</button>\n * <igx-toast #toast\n *           message=\"Notification displayed\"\n *           displayTime=\"1000\">\n * </igx-toast>\n * ```\n */\n@Component({\n    animations: [\n        trigger('animate', [\n            state('show', style({\n                opacity: 1\n            })),\n            transition('* => show', animate('.20s ease')),\n            transition('show => *', animate('.40s ease-out'))\n        ])\n    ],\n    selector: 'igx-toast',\n    templateUrl: 'toast.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxToastComponent implements IToggleView, OnInit, OnDestroy {\n    /**\n     * Returns a list of available CSS classes.\n     * ```typescript\n     * let toastClasses =  this.toast.CSS_CLASSES;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public readonly CSS_CLASSES = {\n        IGX_TOAST_BOTTOM: 'igx-toast--bottom',\n        IGX_TOAST_MIDDLE: 'igx-toast--middle',\n        IGX_TOAST_TOP: 'igx-toast--top'\n    };\n\n    /**\n     * Sets/gets the `id` of the toast.\n     * If not set, the `id` will have value `\"igx-toast-0\"`.\n     * ```html\n     * <igx-toast id = \"my-first-toast\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastId = this.toast.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-toast-${NEXT_ID++}`;\n\n    /**\n     * Emits an event prior the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShowing) = \"onShowing($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShowing = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event when the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShown) = \"onShown($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShown = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event prior the toast is hidden.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHiding) = \"onHiding($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHiding = new EventEmitter<IgxToastComponent>();\n\n    /**\n     *  Emits an event when the toast is hidden.\n     *  Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHidden) = \"onHidden($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHidden = new EventEmitter<IgxToastComponent>();\n    /**\n     * Sets/gets the `role` attribute.\n     * If not set, `role` will have value `\"alert\"`.\n     * ```html\n     * <igx-toast [role] = \"'notify'\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastRole = this.toast.role;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public role = 'alert';\n    /**\n     * Sets/gets whether the toast will be hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-toast [autoHide] = \"false\"></igx-toast>\n     * ```\n     * ```typescript\n     * let autoHide = this.toast.autoHide;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time span(in milliseconds) which the toast will be visible\n     * after it is being shown.\n     * Default value is `4000`.\n     * ```html\n     * <igx-toast [displayTime] = \"2500\"></igx-toast>\n     * ```\n     * ```typescript\n     * let displayTime = this.toast.displayTime;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public displayTime = 4000;\n\n    /**\n     * Enables/Disables the visibility of the toast.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-toast [isVisible] = \"true\"></igx-toast>\n     * ```\n     * ```typescript\n     * let isVisible = this.toast.isVisible;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public isVisible = false;\n\n    /**\n     * Sets/gets the message that will be shown by the toast.\n     * ```html\n     * <igx-toast [message] = \"Notification\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastMessage = this.toast.message;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public message: string;\n\n    /**\n     * Sets/gets the position of the toast.\n     * If not set, the `position` attribute will have value `IgxToastPosition.Bottom`.\n     * ```html\n     * <igx-toast [position] = \"top\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastPosition = this.toast.position;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public position: IgxToastPosition = IgxToastPosition.Bottom;\n\n    /**\n     * Gets the nativeElement of the toast.\n     * ```typescript\n     * let nativeElement = this.toast.element;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    private timeoutId;\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private navService: IgxNavigationService) { }\n\n    /**\n     * Shows the toast.\n     * If `autoHide` is enabled, the toast will hide after `displayTime` is over.\n     * ```typescript\n     * this.toast.show();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public show(): void {\n        clearInterval(this.timeoutId);\n        this.onShowing.emit(this);\n        this.isVisible = true;\n\n        if (this.autoHide) {\n            this.timeoutId = setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n\n        this.onShown.emit(this);\n    }\n\n    /**\n     * Hides the toast.\n     * ```typescript\n     * this.toast.hide();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public hide(): void {\n        this.onHiding.emit(this);\n        this.isVisible = false;\n        this.onHidden.emit(this);\n\n        clearInterval(this.timeoutId);\n    }\n\n    /**\n     * Wraps @show() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public open() {\n        this.show();\n    }\n\n    /**\n     * Wraps @hide() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public close() {\n        this.hide();\n    }\n\n    /**\n     * Toggles the visible state of the toast.\n     * ```typescript\n     * this.toast.toggle();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public toggle() {\n        this.isVisible ? this.close() : this.open();\n    }\n    /**\n     * Sets/gets the class name of the toast based on the `position` value.\n     * ```typescript\n     * let className =  this.toast.mapPositionToClassName();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public mapPositionToClassName(): any {\n        if (this.position === IgxToastPosition.Top) {\n            return this.CSS_CLASSES.IGX_TOAST_TOP;\n        }\n\n        if (this.position === IgxToastPosition.Middle) {\n            return this.CSS_CLASSES.IGX_TOAST_MIDDLE;\n        }\n\n        if (this.position === IgxToastPosition.Bottom) {\n            return this.CSS_CLASSES.IGX_TOAST_BOTTOM;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngOnInit() {\n        if (this.navService && this.id) {\n            this.navService.add(this.id, this);\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        if (this.navService && this.id) {\n            this.navService.remove(this.id);\n        }\n    }\n}\n\n/**\n * Enumeration for toast position\n * Can be:\n * Bottom\n * Middle\n * Top\n */\nexport enum IgxToastPosition {\n    Bottom,\n    Middle,\n    Top\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxToastComponent],\n    exports: [IgxToastComponent],\n    imports: [CommonModule]\n})\nexport class IgxToastModule { }\n","import { Component } from '@angular/core';\nimport { IgxDropDownGroupComponent } from '../drop-down/index';\n\n/**\n * The `<igx-select-item>` is a container intended for row items in\n * a `<igx-select>` container.\n */\n@Component({\n    selector: 'igx-select-item-group',\n    template: `\n        <label id=\"{{labelId}}\">{{ label }}</label>\n        <ng-content select=\"igx-select-item\"></ng-content>\n    `\n})\nexport class IgxSelectGroupComponent extends IgxDropDownGroupComponent {\n}\n","import { IgxDropDownItemComponent } from './../drop-down/drop-down-item.component';\nimport { Component, HostBinding, Input, DoCheck } from '@angular/core';\n\n@Component({\n    selector: 'igx-select-item',\n    template: '<ng-content></ng-content>'\n})\nexport class IgxSelectItemComponent extends IgxDropDownItemComponent implements DoCheck {\n\n    /** @hidden @internal */\n    public get itemText() {\n        return this.elementRef.nativeElement.innerText.trim();\n    }\n\n    /**\n     * Sets/Gets if the item is the currently selected one in the select\n     *\n     * ```typescript\n     *  let mySelectedItem = this.select.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.selected; // true\n     * ```\n     */\n    public get selected() {\n        return !this.isHeader && !this.disabled && this.selection.is_item_selected(this.dropDown.id, this);\n    }\n\n    public set selected(value: any) {\n        if (value && !this.isHeader && !this.disabled) {\n            this.dropDown.selectItem(this);\n        }\n    }\n\n    /** @hidden @internal */\n    public isHeader: boolean;\n\n    ngDoCheck(): void {\n    }\n}\n","import { VerticalAlignment, HorizontalAlignment, PositionSettings, Size, Point, getViewportRect } from '../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../services/overlay/position/connected-positioning-strategy';\nimport { IPositionStrategy } from '../services/overlay/position';\nimport { fadeOut, fadeIn } from '../animations/main';\nimport { IgxSelectComponent } from './select.component';\nimport { isIE } from '../core/utils';\n\n/** @hidden */\nenum Direction {\n    Top = -1,\n    Bottom = 1,\n    None = 0\n}\n\n/** @hidden @internal */\nexport class SelectPositioningStrategy extends ConnectedPositioningStrategy implements IPositionStrategy {\n\n    private _selectDefaultSettings = {\n        target: null,\n        horizontalDirection: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Top,\n        openAnimation: fadeIn,\n        closeAnimation: fadeOut\n    };\n    public settings: PositionSettings;\n\n    constructor(public select: IgxSelectComponent, settings?: PositionSettings) {\n        super();\n        this.settings = Object.assign({}, this._selectDefaultSettings, settings);\n    }\n\n    private defaultWindowToListOffset = 5;\n    private viewPort = getViewportRect(document);\n    private deltaY: number;\n    private deltaX: number;\n    private itemTextPadding: number;\n    private itemTextIndent: number;\n    private listContainerBoundRect: DOMRect;\n    private itemTextToInputTextDiff: number;\n\n    private positionAndScrollBottom(contentElement: HTMLElement, outBoundsAmount: number) {\n        contentElement.style.top = `${this.viewPort.bottom - this.listContainerBoundRect.height - this.defaultWindowToListOffset}px`;\n        contentElement.firstElementChild.scrollTop -= outBoundsAmount - (this.defaultWindowToListOffset);\n        this.deltaY = this.viewPort.bottom - this.listContainerBoundRect.height -\n            this.defaultWindowToListOffset - (this.select.input.nativeElement.getBoundingClientRect() as DOMRect).top;\n    }\n\n    private positionNoScroll(contentElement: HTMLElement, CURRENT_POSITION_Y: number) {\n        contentElement.style.top = `${CURRENT_POSITION_Y - this.itemTextToInputTextDiff }px`;\n        this.deltaY = CURRENT_POSITION_Y -\n            (this.select.input.nativeElement.getBoundingClientRect() as DOMRect).top - this.itemTextToInputTextDiff;\n    }\n\n    private positionAndScrollTop(contentElement: HTMLElement, outBoundsAmount: number) {\n        contentElement.style.top = `${this.viewPort.top + this.defaultWindowToListOffset}px`;\n        contentElement.firstElementChild.scrollTop += outBoundsAmount + this.itemTextToInputTextDiff + this.defaultWindowToListOffset;\n        this.deltaY = this.viewPort.top + this.defaultWindowToListOffset -\n            (this.select.input.nativeElement.getBoundingClientRect() as DOMRect).top;\n    }\n\n    private getItemsOutOfView(contentElement: HTMLElement, itemHeight: number): {\n        'currentScroll': number,\n        'remainingScroll': number\n    } {\n        if (contentElement.firstElementChild.scrollHeight <= contentElement.firstElementChild.clientHeight) {\n            return {\n                'currentScroll': 0,\n                'remainingScroll': 0\n            };\n        }\n        const currentScroll = contentElement.firstElementChild.scrollTop;\n        const remainingScroll = this.select.items.length * itemHeight - currentScroll - this.listContainerBoundRect.height;\n        return {\n            'currentScroll': currentScroll,\n            'remainingScroll': remainingScroll\n        };\n    }\n\n    private listOutOfBounds(elementContainer: { top: number, bottom: number }, document: Document): {\n        Direction: Direction,\n        Amount: number\n    } {\n        const container = {\n            TOP: elementContainer.top,\n            BOTTOM: elementContainer.bottom,\n        };\n        const viewPort = getViewportRect(document);\n        const documentElement = {\n            TOP: viewPort.top,\n            BOTTOM: viewPort.bottom\n        };\n        const returnVals = {\n            Direction: Direction.None,\n            Amount: 0\n        };\n        if (documentElement.TOP + this.defaultWindowToListOffset > container.TOP) {\n            returnVals.Direction = Direction.Top;\n            returnVals.Amount = documentElement.TOP - container.TOP;\n        } else if (documentElement.BOTTOM - this.defaultWindowToListOffset < container.BOTTOM) {\n            returnVals.Direction = Direction.Bottom;\n            returnVals.Amount = container.BOTTOM - documentElement.BOTTOM;\n        } else {\n            return null;\n        }\n        return returnVals;\n    }\n\n    position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n        const inputElement = this.select.input.nativeElement;\n        const inputRect = inputElement.getBoundingClientRect() as DOMRect;\n        this.listContainerBoundRect = contentElement.getBoundingClientRect() as DOMRect;\n        const LIST_HEIGHT = this.listContainerBoundRect.height;\n        if (!initialCall) {\n            this.deltaX = inputRect.left - this.itemTextPadding - this.itemTextIndent;\n            const point = new Point(this.deltaX, inputRect.top + this.deltaY);\n            this.settings.target = point;\n            super.position(contentElement, size);\n            return;\n        }\n\n        const START = {\n            X: inputRect.left,\n            Y: inputRect.top\n        };\n\n        let itemElement;\n        if (this.select.selectedItem) {\n            itemElement = this.select.selectedItem.element.nativeElement;\n            // D.P. Feb 22 2019, #3921 Force item scroll before measuring in IE11, due to base scrollToItem delay\n            if (isIE()) {\n                contentElement.firstElementChild.scrollTop = this.select.calculateScrollPosition(this.select.selectedItem);\n            }\n        } else {\n            itemElement = this.select.getFirstItemElement();\n        }\n        const inputHeight = inputRect.height;\n        const itemBoundRect = itemElement.getBoundingClientRect() as DOMRect;\n        const itemTopListOffset = itemBoundRect.top - this.listContainerBoundRect.top;\n        const itemHeight = itemBoundRect.height;\n\n        const inputFontSize = window.getComputedStyle(inputElement).fontSize;\n        const numericInputFontSize = parseInt(inputFontSize.slice(0, inputFontSize.indexOf('p')), 10) || 0;\n        const itemFontSize = window.getComputedStyle(itemElement).fontSize;\n        const numericItemFontSize = parseInt(itemFontSize.slice(0, itemFontSize.indexOf('p')), 10) || 0;\n        const inputTextToInputTop = (inputHeight - numericInputFontSize) / 2;\n        const itemTextToItemTop = (itemHeight - numericItemFontSize) / 2;\n        this.itemTextToInputTextDiff = itemTextToItemTop - inputTextToInputTop;\n\n        let CURRENT_POSITION_Y = START.Y - itemTopListOffset;\n        const CURRENT_BOTTOM_Y = CURRENT_POSITION_Y + this.listContainerBoundRect.height;\n\n        const OUT_OF_BOUNDS: {\n            Direction: Direction,\n            Amount: number\n        } = this.listOutOfBounds({ top: CURRENT_POSITION_Y, bottom: CURRENT_BOTTOM_Y }, document);\n        if (OUT_OF_BOUNDS) {\n            if (OUT_OF_BOUNDS.Direction === Direction.Top) {\n                CURRENT_POSITION_Y = START.Y;\n            } else {\n                CURRENT_POSITION_Y = -1 * (LIST_HEIGHT - (itemHeight - (itemHeight - inputHeight) / 2));\n                CURRENT_POSITION_Y += START.Y;\n            }\n        }\n        const selectItemPaddingHorizontal = 24;\n        const itemLeftPadding = window.getComputedStyle(itemElement).paddingLeft;\n        const itemTextIndent = window.getComputedStyle(itemElement).textIndent;\n        const numericLeftPadding = parseInt(itemLeftPadding.slice(0, itemLeftPadding.indexOf('p')), 10) || 0;\n        const numericTextIndent = parseInt(itemTextIndent.slice(0, itemTextIndent.indexOf('r')), 10) || 0;\n        this.itemTextPadding = numericLeftPadding;\n        this.itemTextIndent = numericTextIndent;\n        contentElement.style.left += `${START.X - numericLeftPadding - numericTextIndent}px`;\n        contentElement.style.width = inputRect.width + 24 + selectItemPaddingHorizontal * 2 + 'px';\n        this.deltaX = START.X - numericLeftPadding - numericTextIndent;\n        const currentScroll = this.getItemsOutOfView(contentElement, itemHeight)['currentScroll'];\n        const remainingScroll = this.getItemsOutOfView(contentElement, itemHeight)['remainingScroll'];\n\n        // (5 items or less) no scroll and respectively no remaining scroll\n        if (remainingScroll === 0 && currentScroll === 0) {\n            this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n        }\n        // (more than 5 items) there is scroll OR remaining scroll\n        if (remainingScroll !== 0 || currentScroll !== 0) {\n            if (remainingScroll !== 0 && !OUT_OF_BOUNDS) {\n                this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n            }\n            // (more than 5 items) and container getting out of the visible port\n            if (remainingScroll !== 0 && OUT_OF_BOUNDS) {\n                // if there is enough remaining scroll to scroll the item\n                if (remainingScroll > itemHeight) {\n                    if (OUT_OF_BOUNDS.Direction === Direction.Top) {\n                        this.positionAndScrollTop(contentElement, OUT_OF_BOUNDS.Amount);\n                        return;\n                    }\n                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {\n                        // (more than 5 items) and no current scroll\n                        if (currentScroll === 0) {\n                            this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n                            return;\n                        // (more than 5 items) and current scroll\n                        } else {\n                            this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);\n                            return;\n                        }\n                    }\n                }\n                // if there is no enough remaining scroll to scroll the item\n                if (remainingScroll < itemHeight) {\n                    if (OUT_OF_BOUNDS.Direction === Direction.Top) {\n                        this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n\n                    }\n                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {\n                        this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);\n                    }\n                }\n            }\n            // (more than 5 items) and no remaining scroll\n            if (remainingScroll === 0 && currentScroll !== 0) {\n                if (OUT_OF_BOUNDS) {\n                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {\n                        this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);\n                        return;\n                    }\n                }\n                this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n            }\n        }\n    }\n}\n","import { IgxInputDirective } from './../directives/input/input.directive';\nimport {\n    Component, ContentChildren, forwardRef, QueryList, ViewChild, Input, ContentChild,\n    AfterContentInit, HostBinding, Directive, TemplateRef, ElementRef, ChangeDetectorRef, Optional, Inject\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { IgxDropDownItemBase } from '../drop-down/index';\nimport { IgxInputGroupComponent } from '../input-group/input-group.component';\n\nimport { IgxDropDownComponent } from './../drop-down/drop-down.component';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { SelectPositioningStrategy } from './select-positioning-strategy';\n\nimport { OverlaySettings, AbsoluteScrollStrategy } from '../services/index';\nimport { IGX_DROPDOWN_BASE, ISelectionEventArgs, Navigate } from '../drop-down/drop-down.common';\nimport { CancelableEventArgs } from '../core/utils';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { IgxSelectBase } from './select.common';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectToggleIcon]'\n})\nexport class IgxSelectToggleIconDirective {\n}\n\nconst noop = () => { };\n\n/**\n * **Ignite UI for Angular Select** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/select.html)\n *\n * The `igxSelect` provides an input with dropdown list allowing selection of a single item.\n *\n * Example:\n * ```html\n * <igx-select #select1 [placeholder]=\"'Pick One'\">\n *   <label igxLabel>Select Label</label>\n *   <igx-select-item *ngFor=\"let item of items\" [value]=\"item.field\">\n *     {{ item.field }}\n *   </igx-select-item>\n * </igx-select>\n * ```\n */\n@Component({\n    selector: 'igx-select',\n    templateUrl: './select.component.html',\n    providers: [\n        { provide: NG_VALUE_ACCESSOR, useExisting: IgxSelectComponent, multi: true },\n        { provide: IGX_DROPDOWN_BASE, useExisting: IgxSelectComponent }],\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSelectComponent extends IgxDropDownComponent implements IgxSelectBase, ControlValueAccessor, AfterContentInit,\n    EditorProvider {\n\n    /** @hidden @internal do not use the drop-down container class */\n    public cssClass = false;\n\n    /** @hidden @internal */\n    @ViewChild('inputGroup', { read: IgxInputGroupComponent }) public inputGroup: IgxInputGroupComponent;\n\n    /** @hidden @internal */\n    @ViewChild('input', { read: IgxInputDirective }) public input: IgxInputDirective;\n\n    /** @hidden @internal */\n    @ContentChildren(forwardRef(() => IgxSelectItemComponent), { descendants: true })\n    public children: QueryList<IgxSelectItemComponent>;\n\n    /** @hidden @internal */\n    @ContentChild(forwardRef(() => IgxLabelDirective)) label: IgxLabelDirective;\n\n    /** @hidden @internal */\n    public allowItemsFocus = false;\n\n    /** @hidden @internal */\n    public height: string;\n\n    private _overlayDefaults: OverlaySettings;\n\n    private _value: any;\n\n    /**\n     * An @Input property that gets/sets the component value.\n     *\n     * ```typescript\n     * // get\n     * let selectValue = this.select.value;\n     * ```\n     *\n     * ```typescript\n     * // set\n     * this.select.value = 'London';\n     * ```\n     * ```html\n     * <igx-select [value]=\"value\"></igx-select>\n     * ```\n     */\n    @Input()\n    public get value(): any {\n        return this._value;\n    }\n    public set value(v: any) {\n        if (this._value === v) {\n            return;\n        }\n        this._value = v;\n        this.setSelection(this.items.find(x => x.value === this.value));\n        this.cdr.detectChanges();\n    }\n    /**\n     * An @Input property that sets input placeholder.\n     *\n     */\n    @Input() public placeholder = '';\n    /**\n     * An @Input property that disables the `IgxSelectComponent`.\n     * ```html\n     * <igx-select [disabled]=\"'true'\"></igx-select>\n     * ```\n     */\n    @Input() public disabled = false;\n\n    /**\n     * An @Input property that sets custom OverlaySettings `IgxSelectComponent`.\n     * ```html\n     * <igx-select [overlaySettings] = \"customOverlaySettings\"></igx-select>\n     * ```\n     */\n    @Input()\n    overlaySettings: OverlaySettings;\n\n    /** @hidden @internal */\n    @HostBinding('style.maxHeight')\n    public maxHeight = '256px';\n\n    /** @hidden @internal */\n    public width: string;\n\n    /**\n     * An @Input property that sets how the select will be styled.\n     * The allowed values are `line`, `box` and `border`. The default is `line`.\n     * ```html\n     *<igx-select [type]=\"'box'\"></igx-select>\n     * ```\n     */\n    @Input()\n    public type = 'line';\n\n    /**\n     * An @Input property that sets what display density to be used for the input group.\n     * The allowed values are `compact`, `cosy` and `comfortable`. The default is `comfortable`.\n     * ```html\n     *<igx-select [displayDensity]=\"'compact'\"></igx-select>\n     * ```\n     */\n    @Input()\n    public displayDensity = 'comfortable';\n\n    /**\n     * The custom template, if any, that should be used when rendering the select TOGGLE(open/close) button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.select.toggleIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-select #select>\n     *      ...\n     *      <ng-template igxSelectToggleIcon let-collapsed>\n     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>\n     *      </ng-template>\n     *  </igx-select>\n     * ```\n     */\n    @ContentChild(IgxSelectToggleIconDirective, { read: TemplateRef })\n    public toggleIconTemplate: TemplateRef<any> = null;\n\n    /** @hidden @internal */\n    public get selectionValue() {\n        const selectedItem = this.selectedItem;\n        return selectedItem ? selectedItem.itemText : '';\n    }\n\n    /** @hidden @internal */\n    public get selectedItem(): IgxSelectItemComponent {\n        return this.selection.first_item(this.id);\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(elementRef, cdr, selection, _displayDensityOptions);\n    }\n\n    /** @hidden @internal */\n    private _onChangeCallback: (_: any) => void = noop;\n\n    /** @hidden @internal */\n    public writeValue = (value: any) => {\n        this.value = value;\n    }\n\n    /** @hidden @internal */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /** @hidden @internal */\n    public registerOnTouched(fn: any): void { }\n\n    /** @hidden @internal */\n    public getEditElement(): HTMLElement {\n        return this.input.nativeElement;\n    }\n\n    /** @hidden @internal */\n    public selectItem(newSelection: IgxDropDownItemBase, event?) {\n        const oldSelection = this.selectedItem;\n\n        if (event) {\n            this.toggleDirective.close();\n        }\n        if (newSelection === null || newSelection === oldSelection || newSelection.disabled || newSelection.isHeader) {\n            return;\n        }\n\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n\n        this.setSelection(newSelection);\n        this._value = newSelection.value;\n        this.cdr.detectChanges();\n        this._onChangeCallback(this.value);\n    }\n\n    /** @hidden @internal */\n    public getFirstItemElement(): HTMLElement {\n        return this.children.first.element.nativeElement;\n    }\n\n    /**\n     * Opens the select\n     *\n     * ```typescript\n     * this.select.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        if (this.disabled || this.items.length === 0) {\n            return;\n        }\n        if (!this.selectedItem) {\n            this.navigateFirst();\n        }\n\n        super.open(Object.assign({}, this._overlayDefaults, this.overlaySettings, overlaySettings));\n    }\n\n    /** @hidden @internal */\n    ngAfterContentInit() {\n        this._overlayDefaults = {\n            modal: false,\n            closeOnOutsideClick: false,\n            positionStrategy: new SelectPositioningStrategy(this, { target: this.inputGroup.element.nativeElement }),\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            excludePositionTarget: true\n        };\n        this.children.changes.subscribe(() => {\n            this.setSelection(this.items.find(x => x.value === this.value));\n            this.cdr.detectChanges();\n        });\n        Promise.resolve().then(() => this.children.notifyOnChanges());\n    }\n\n    /** @hidden @internal */\n    public onToggleOpening(event: CancelableEventArgs) {\n        this.onOpening.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.scrollToItem(this.selectedItem);\n    }\n\n    protected navigate(direction: Navigate, currentIndex?: number) {\n        if (this.collapsed && this.selectedItem) {\n            this.navigateItem(this.selectedItem.itemIndex);\n        }\n        super.navigate(direction, currentIndex);\n    }\n\n    private setSelection(item: IgxDropDownItemBase) {\n        if (item && item.value !== undefined && item.value !== null) {\n            this.selection.set(this.id, new Set([item]));\n        } else {\n            this.selection.clear(this.id);\n        }\n    }\n\n    /** @hidden @internal */\n    public onBlur(): void {\n        if (!this.collapsed) {\n            this.toggleDirective.close();\n        }\n    }\n}\n\n","import { IgxDropDownItemNavigationDirective } from '../drop-down/drop-down-navigation.directive';\nimport { Directive, Input, HostListener, OnDestroy } from '@angular/core';\nimport { Subscription, timer } from 'rxjs';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { IgxSelectBase } from './select.common';\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectItemNavigation]'\n})\nexport class IgxSelectItemNavigationDirective extends IgxDropDownItemNavigationDirective implements OnDestroy {\n\n    @Input('igxSelectItemNavigation')\n    public target: IgxSelectBase;\n\n    constructor() { super(null); }\n\n    /** Captures keydown events and calls the appropriate handlers on the target component */\n    handleKeyDown(event: KeyboardEvent) {\n        if (!event || event.shiftKey) {\n            return;\n        }\n\n        const key = event.key.toLowerCase();\n        if (event.altKey && (key === 'arrowdown' || key === 'arrowup' || key === 'down' || key === 'up')) {\n            this.target.toggle();\n            return;\n        }\n\n        if (this.target.collapsed) {\n            switch (key) {\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                case 'enter':\n                    event.preventDefault();\n                    this.target.open();\n                    return;\n                case 'arrowdown':\n                case 'down':\n                    this.target.navigateNext();\n                    this.target.selectItem(this.target.focusedItem);\n                    event.preventDefault();\n                    return;\n                case 'arrowup':\n                case 'up':\n                    this.target.navigatePrev();\n                    this.target.selectItem(this.target.focusedItem);\n                    event.preventDefault();\n                    return;\n                default:\n                    break;\n            }\n        }\n\n        super.handleKeyDown(event);\n    }\n\n    // tslint:disable:member-ordering\n    private inputStream = '';\n    private clearStream$ = Subscription.EMPTY;\n\n    /** Handle continuous letter typing navigation */\n    @HostListener('keyup', ['$event'])\n    public captureKey(event: KeyboardEvent) {\n        // relying only on key, available on all major browsers:\n        // https://caniuse.com/#feat=keyboardevent-key (IE/Edge quirk doesn't affect letter typing)\n        if (!event || !event.key || event.key.length > 1) {\n            // ignore longer keys ('Alt', 'ArrowDown', etc)\n            return;\n        }\n\n        this.clearStream$.unsubscribe();\n        this.clearStream$ = timer(500).subscribe(() => {\n            this.inputStream = '';\n        });\n        this.inputStream += event.key;\n        const focusedItem = this.target.focusedItem as IgxSelectItemComponent;\n\n        // select the item\n        if (focusedItem && this.inputStream.length > 1 && focusedItem.itemText.toLowerCase().startsWith(this.inputStream.toLowerCase())) {\n            return;\n        }\n        this.activateItemByText(this.inputStream);\n    }\n\n    public activateItemByText(text: string) {\n        const items = this.target.items as IgxSelectItemComponent[];\n        const activeItemIndex = items.indexOf(this.target.focusedItem as IgxSelectItemComponent) || 0;\n        // ^ this is focused OR selected if the dd is closed\n        let nextItem = items.slice(activeItemIndex + 1).find(x => !x.disabled && (x.itemText.toLowerCase().startsWith(text.toLowerCase())));\n\n        if (!nextItem) {\n            nextItem = items.slice(0, activeItemIndex).find(x => !x.disabled && (x.itemText.toLowerCase().startsWith(text.toLowerCase())));\n        }\n\n        if (!nextItem) {\n            return;\n        }\n\n        if (this.target.collapsed) {\n            this.target.selectItem(nextItem);\n        }\n        this.target.navigateItem(items.indexOf(nextItem));\n    }\n\n    ngOnDestroy(): void {\n        this.clearStream$.unsubscribe();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxDropDownModule } from './../drop-down/index';\nimport { IgxToggleModule } from './../directives/toggle/toggle.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\n\nimport { IgxSelectComponent, IgxSelectToggleIconDirective } from './select.component';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { IgxSelectItemNavigationDirective } from './select-navigation.directive';\nimport { IgxSelectGroupComponent } from './select-group.component';\n\n/** @hidden */\n@NgModule({\n    declarations: [IgxSelectComponent, IgxSelectItemComponent, IgxSelectItemNavigationDirective,\n        IgxSelectToggleIconDirective, IgxSelectGroupComponent],\n    exports: [IgxSelectComponent, IgxSelectItemComponent, IgxSelectItemNavigationDirective,\n         IgxSelectToggleIconDirective, IgxSelectGroupComponent],\n    imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,\n        IgxToggleModule, IgxDropDownModule, IgxButtonModule, IgxIconModule],\n    providers: []\n})\nexport class IgxSelectModule { }\n"]}