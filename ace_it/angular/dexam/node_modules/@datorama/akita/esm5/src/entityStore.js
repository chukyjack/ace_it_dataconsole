/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { isEmpty } from './isEmpty';
import { setEntities } from './setEntities';
import { Store } from './store';
import { getActiveEntities } from './getActiveEntities';
import { addEntities } from './addEntities';
import { coerceArray } from './coerceArray';
import { removeEntities } from './removeEntities';
import { getInitialEntitiesState } from './getInitialEntitiesState';
import { isDefined } from './isDefined';
import { updateEntities } from './updateEntities';
import { transaction } from './transaction';
import { isNil } from './isNil';
import { isFunction } from './isFunction';
import { isUndefined } from './isUndefined';
import { logAction, setAction } from './actions';
import { isDev } from './env';
import { hasEntity } from './hasEntity';
import { Subject } from 'rxjs';
import { EntityActions } from './entityActions';
import { DEFAULT_ID_KEY } from './defaultIDKey';
/**
 *
 * Store for managing a collection of entities
 *
 * \@example
 *
 * export interface WidgetsState extends EntityState<Widget> { }
 *
 * \@StoreConfig({ name: 'widgets' })
 *  export class WidgetsStore extends EntityStore<WidgetsState> {
 *   constructor() {
 *     super();
 *   }
 * }
 *
 *
 * @template S, EntityType, IDType
 */
var EntityStore = /** @class */ (function (_super) {
    tslib_1.__extends(EntityStore, _super);
    function EntityStore(initialState, options) {
        if (initialState === void 0) { initialState = {}; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, tslib_1.__assign({}, getInitialEntitiesState(), initialState), options) || this;
        _this.options = options;
        _this.entityActions = new Subject();
        return _this;
    }
    Object.defineProperty(EntityStore.prototype, "selectEntityAction$", {
        // @internal
        get: 
        // @internal
        /**
         * @return {?}
         */
        function () {
            return this.entityActions.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EntityStore.prototype, "idKey", {
        // @internal
        get: 
        // @internal
        /**
         * @return {?}
         */
        function () {
            return ((/** @type {?} */ (this.config))).idKey || this.options.idKey || DEFAULT_ID_KEY;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     * Replace current collection with provided collection
     *
     * @example
     *
     * this.store.set([Entity, Entity])
     * this.store.set({ids: [], entities: {}})
     * this.store.set({ 1: {}, 2: {}})
     *
     */
    /**
     *
     * Replace current collection with provided collection
     *
     * \@example
     *
     * this.store.set([Entity, Entity])
     * this.store.set({ids: [], entities: {}})
     * this.store.set({ 1: {}, 2: {}})
     *
     * @param {?} entities
     * @return {?}
     */
    EntityStore.prototype.set = /**
     *
     * Replace current collection with provided collection
     *
     * \@example
     *
     * this.store.set([Entity, Entity])
     * this.store.set({ids: [], entities: {}})
     * this.store.set({ 1: {}, 2: {}})
     *
     * @param {?} entities
     * @return {?}
     */
    function (entities) {
        var _this = this;
        if (isNil(entities))
            return;
        isDev() && setAction('Set Entity');
        /** @type {?} */
        var isNativePreAdd = this.akitaPreAddEntity === EntityStore.prototype.akitaPreAddEntity;
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            return setEntities({
                state: state,
                entities: entities,
                idKey: _this.idKey,
                preAddEntity: _this.akitaPreAddEntity,
                isNativePreAdd: isNativePreAdd
            });
        }));
        this.setHasCache(true, { restartTTL: true });
        if (this.hasInitialUIState()) {
            this.handleUICreation();
        }
        this.entityActions.next({ type: EntityActions.Set, ids: this.ids });
    };
    /**
     * Add entities
     *
     * @example
     *
     * this.store.add([Entity, Entity])
     * this.store.add(Entity)
     * this.store.add(Entity, { prepend: true })
     *
     * this.store.add(Entity, { loading: false })
     */
    /**
     * Add entities
     *
     * \@example
     *
     * this.store.add([Entity, Entity])
     * this.store.add(Entity)
     * this.store.add(Entity, { prepend: true })
     *
     * this.store.add(Entity, { loading: false })
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    EntityStore.prototype.add = /**
     * Add entities
     *
     * \@example
     *
     * this.store.add([Entity, Entity])
     * this.store.add(Entity)
     * this.store.add(Entity, { prepend: true })
     *
     * this.store.add(Entity, { loading: false })
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    function (entities, options) {
        if (options === void 0) { options = { loading: false }; }
        /** @type {?} */
        var collection = coerceArray(entities);
        if (isEmpty(collection))
            return;
        /** @type {?} */
        var data = addEntities({
            state: this._value(),
            preAddEntity: this.akitaPreAddEntity,
            entities: collection,
            idKey: this.idKey,
            options: options
        });
        if (data) {
            isDev() && setAction('Add Entity');
            data.newState.loading = options.loading;
            this._setState((/**
             * @return {?}
             */
            function () { return data.newState; }));
            if (this.hasInitialUIState()) {
                this.handleUICreation(true);
            }
            this.entityActions.next({ type: EntityActions.Add, ids: data.newIds });
        }
    };
    /**
     * @param {?} idsOrFnOrState
     * @param {?=} newStateOrFn
     * @return {?}
     */
    EntityStore.prototype.update = /**
     * @param {?} idsOrFnOrState
     * @param {?=} newStateOrFn
     * @return {?}
     */
    function (idsOrFnOrState, newStateOrFn) {
        var _this = this;
        if (isUndefined(newStateOrFn)) {
            _super.prototype.update.call(this, (/** @type {?} */ (idsOrFnOrState)));
            return;
        }
        /** @type {?} */
        var ids = [];
        if (isFunction(idsOrFnOrState)) {
            // We need to filter according the predicate function
            ids = this.ids.filter((/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return ((/** @type {?} */ (idsOrFnOrState)))(_this.entities[id]); }));
        }
        else {
            // If it's nil we want all of them
            ids = isNil(idsOrFnOrState) ? this.ids : coerceArray((/** @type {?} */ (idsOrFnOrState)));
        }
        if (isEmpty(ids))
            return;
        isDev() && setAction('Update Entity', ids);
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            return updateEntities({
                idKey: _this.idKey,
                ids: ids,
                preUpdateEntity: _this.akitaPreUpdateEntity,
                state: state,
                newStateOrFn: newStateOrFn,
                producerFn: _this._producerFn
            });
        }));
        this.entityActions.next({ type: EntityActions.Update, ids: ids });
    };
    /**
     *
     * Create or update
     *
     * @example
     *
     * store.upsert(1, { active: true })
     * store.upsert([2, 3], { active: true })
     * store.upsert([2, 3], entity => ({ isOpen: !entity.isOpen}))
     *
     */
    /**
     *
     * Create or update
     *
     * \@example
     *
     * store.upsert(1, { active: true })
     * store.upsert([2, 3], { active: true })
     * store.upsert([2, 3], entity => ({ isOpen: !entity.isOpen}))
     *
     * @param {?} ids
     * @param {?} newState
     * @param {?=} options
     * @return {?}
     */
    EntityStore.prototype.upsert = /**
     *
     * Create or update
     *
     * \@example
     *
     * store.upsert(1, { active: true })
     * store.upsert([2, 3], { active: true })
     * store.upsert([2, 3], entity => ({ isOpen: !entity.isOpen}))
     *
     * @param {?} ids
     * @param {?} newState
     * @param {?=} options
     * @return {?}
     */
    function (ids, newState, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var toArray = coerceArray(ids);
        /** @type {?} */
        var predicate = (/**
         * @param {?} isUpdate
         * @return {?}
         */
        function (isUpdate) { return (/**
         * @param {?} id
         * @return {?}
         */
        function (id) { return hasEntity(_this.entities, id) === isUpdate; }); });
        /** @type {?} */
        var isClassBased = isFunction(options.baseClass);
        /** @type {?} */
        var updateIds = toArray.filter(predicate(true));
        /** @type {?} */
        var newEntities = toArray.filter(predicate(false)).map((/**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            var _a;
            /** @type {?} */
            var entity = isFunction(newState) ? newState((/** @type {?} */ ({}))) : newState;
            /** @type {?} */
            var withId = tslib_1.__assign({}, ((/** @type {?} */ (entity))), (_a = {}, _a[_this.idKey] = id, _a));
            if (isClassBased) {
                return new options.baseClass(withId);
            }
            return withId;
        }));
        // it can be any of the three types
        this.update((/** @type {?} */ (updateIds)), (/** @type {?} */ (newState)));
        this.add(newEntities);
        isDev() && logAction('Upsert Entity');
    };
    /**
     *
     * Upsert entity collection (idKey must be present)
     *
     * @example
     *
     * store.upsertMany([ { id: 1 }, { id: 2 }]);
     *
     * store.upsertMany([ { id: 1 }, { id: 2 }], { loading: true  });
     * store.upsertMany([ { id: 1 }, { id: 2 }], { baseClass: Todo  });
     *
     */
    /**
     *
     * Upsert entity collection (idKey must be present)
     *
     * \@example
     *
     * store.upsertMany([ { id: 1 }, { id: 2 }]);
     *
     * store.upsertMany([ { id: 1 }, { id: 2 }], { loading: true  });
     * store.upsertMany([ { id: 1 }, { id: 2 }], { baseClass: Todo  });
     *
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    EntityStore.prototype.upsertMany = /**
     *
     * Upsert entity collection (idKey must be present)
     *
     * \@example
     *
     * store.upsertMany([ { id: 1 }, { id: 2 }]);
     *
     * store.upsertMany([ { id: 1 }, { id: 2 }], { loading: true  });
     * store.upsertMany([ { id: 1 }, { id: 2 }], { baseClass: Todo  });
     *
     * @param {?} entities
     * @param {?=} options
     * @return {?}
     */
    function (entities, options) {
        if (options === void 0) { options = {}; }
        var e_1, _a;
        /** @type {?} */
        var addedIds = [];
        /** @type {?} */
        var updatedIds = [];
        /** @type {?} */
        var updatedEntities = {};
        try {
            // Update the state directly to optimize performance
            for (var entities_1 = tslib_1.__values(entities), entities_1_1 = entities_1.next(); !entities_1_1.done; entities_1_1 = entities_1.next()) {
                var entity = entities_1_1.value;
                /** @type {?} */
                var withPreCheckHook = this.akitaPreCheckEntity(entity);
                /** @type {?} */
                var id = withPreCheckHook[this.idKey];
                if (hasEntity(this.entities, id)) {
                    /** @type {?} */
                    var prev = this._value().entities[id];
                    /** @type {?} */
                    var merged = tslib_1.__assign({}, this._value().entities[id], withPreCheckHook);
                    /** @type {?} */
                    var next = options.baseClass ? new options.baseClass(merged) : merged;
                    /** @type {?} */
                    var withHook = this.akitaPreUpdateEntity(prev, next);
                    /** @type {?} */
                    var nextId = withHook[this.idKey];
                    updatedEntities[nextId] = withHook;
                    updatedIds.push(nextId);
                }
                else {
                    /** @type {?} */
                    var newEntity = options.baseClass ? new options.baseClass(withPreCheckHook) : withPreCheckHook;
                    /** @type {?} */
                    var withHook = this.akitaPreAddEntity(newEntity);
                    /** @type {?} */
                    var nextId = withHook[this.idKey];
                    addedIds.push(nextId);
                    updatedEntities[nextId] = withHook;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (entities_1_1 && !entities_1_1.done && (_a = entities_1.return)) _a.call(entities_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        isDev() && logAction('Upsert Many');
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return (tslib_1.__assign({}, state, { ids: addedIds.length ? tslib_1.__spread(state.ids, addedIds) : state.ids, entities: tslib_1.__assign({}, state.entities, updatedEntities), loading: !!options.loading })); }));
        updatedIds.length && this.entityActions.next({ type: EntityActions.Update, ids: updatedIds });
        addedIds.length && this.entityActions.next({ type: EntityActions.Add, ids: addedIds });
        if (addedIds.length && this.hasUIStore()) {
            this.handleUICreation(true);
        }
    };
    /**
     *
     * Replace one or more entities (except the id property)
     *
     *
     * @example
     *
     * this.store.replace(5, newEntity)
     * this.store.replace([1,2,3], newEntity)
     */
    /**
     *
     * Replace one or more entities (except the id property)
     *
     *
     * \@example
     *
     * this.store.replace(5, newEntity)
     * this.store.replace([1,2,3], newEntity)
     * @param {?} ids
     * @param {?} newState
     * @return {?}
     */
    EntityStore.prototype.replace = /**
     *
     * Replace one or more entities (except the id property)
     *
     *
     * \@example
     *
     * this.store.replace(5, newEntity)
     * this.store.replace([1,2,3], newEntity)
     * @param {?} ids
     * @param {?} newState
     * @return {?}
     */
    function (ids, newState) {
        var e_2, _a;
        /** @type {?} */
        var toArray = coerceArray(ids);
        if (isEmpty(toArray))
            return;
        /** @type {?} */
        var replaced = {};
        try {
            for (var toArray_1 = tslib_1.__values(toArray), toArray_1_1 = toArray_1.next(); !toArray_1_1.done; toArray_1_1 = toArray_1.next()) {
                var id = toArray_1_1.value;
                newState[this.idKey] = id;
                replaced[id] = newState;
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (toArray_1_1 && !toArray_1_1.done && (_a = toArray_1.return)) _a.call(toArray_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        isDev() && setAction('Replace Entity', ids);
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return (tslib_1.__assign({}, state, { entities: tslib_1.__assign({}, state.entities, replaced) })); }));
    };
    /**
     *
     * Move entity inside the collection
     *
     *
     * @example
     *
     * this.store.move(fromIndex, toIndex)
     */
    /**
     *
     * Move entity inside the collection
     *
     *
     * \@example
     *
     * this.store.move(fromIndex, toIndex)
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    EntityStore.prototype.move = /**
     *
     * Move entity inside the collection
     *
     *
     * \@example
     *
     * this.store.move(fromIndex, toIndex)
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    function (from, to) {
        /** @type {?} */
        var ids = this.ids.slice();
        ids.splice(to < 0 ? ids.length + to : to, 0, ids.splice(from, 1)[0]);
        isDev() && setAction('Move Entity');
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return (tslib_1.__assign({}, state, { entities: tslib_1.__assign({}, state.entities), ids: ids })); }));
    };
    /**
     * @param {?=} idsOrFn
     * @return {?}
     */
    EntityStore.prototype.remove = /**
     * @param {?=} idsOrFn
     * @return {?}
     */
    function (idsOrFn) {
        var _this = this;
        if (isEmpty(this.ids))
            return;
        /** @type {?} */
        var idPassed = isDefined(idsOrFn);
        // null means remove all
        /** @type {?} */
        var ids = [];
        if (isFunction(idsOrFn)) {
            ids = this.ids.filter((/**
             * @param {?} entityId
             * @return {?}
             */
            function (entityId) { return idsOrFn(_this.entities[entityId]); }));
        }
        else {
            ids = idPassed ? coerceArray(idsOrFn) : null;
        }
        if (isEmpty(ids))
            return;
        isDev() && setAction('Remove Entity', ids);
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return removeEntities({ state: state, ids: ids }); }));
        if (ids === null) {
            this.setHasCache(false);
        }
        this.handleUIRemove(ids);
        this.entityActions.next({ type: EntityActions.Remove, ids: ids });
    };
    /**
     *
     * Update the active entity
     *
     * @example
     *
     * this.store.updateActive({ completed: true })
     * this.store.updateActive(active => {
     *   return {
     *     config: {
     *      ..active.config,
     *      date
     *     }
     *   }
     * })
     */
    /**
     *
     * Update the active entity
     *
     * \@example
     *
     * this.store.updateActive({ completed: true })
     * this.store.updateActive(active => {
     *   return {
     *     config: {
     *      ..active.config,
     *      date
     *     }
     *   }
     * })
     * @param {?} newStateOrCallback
     * @return {?}
     */
    EntityStore.prototype.updateActive = /**
     *
     * Update the active entity
     *
     * \@example
     *
     * this.store.updateActive({ completed: true })
     * this.store.updateActive(active => {
     *   return {
     *     config: {
     *      ..active.config,
     *      date
     *     }
     *   }
     * })
     * @param {?} newStateOrCallback
     * @return {?}
     */
    function (newStateOrCallback) {
        /** @type {?} */
        var ids = coerceArray(this.active);
        isDev() && setAction('Update Active', ids);
        this.update(ids, (/** @type {?} */ (newStateOrCallback)));
    };
    /**
     * @param {?} idOrOptions
     * @return {?}
     */
    EntityStore.prototype.setActive = /**
     * @param {?} idOrOptions
     * @return {?}
     */
    function (idOrOptions) {
        /** @type {?} */
        var active = getActiveEntities(idOrOptions, this.ids, this.active);
        if (active === undefined) {
            return;
        }
        isDev() && setAction('Set Active', active);
        this._setActive(active);
    };
    /**
     * Add active entities
     *
     * @example
     *
     * store.addActive(2);
     * store.addActive([3, 4, 5]);
     */
    /**
     * Add active entities
     *
     * \@example
     *
     * store.addActive(2);
     * store.addActive([3, 4, 5]);
     * @template T
     * @param {?} ids
     * @return {?}
     */
    EntityStore.prototype.addActive = /**
     * Add active entities
     *
     * \@example
     *
     * store.addActive(2);
     * store.addActive([3, 4, 5]);
     * @template T
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        var _this = this;
        /** @type {?} */
        var toArray = coerceArray(ids);
        if (isEmpty(toArray))
            return;
        /** @type {?} */
        var everyExist = toArray.every((/**
         * @param {?} id
         * @return {?}
         */
        function (id) { return _this.active.indexOf(id) > -1; }));
        if (everyExist)
            return;
        isDev() && setAction('Add Active', ids);
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            /**
             * Protect against case that one of the items in the array exist
             * @type {?}
             */
            var uniques = Array.from(new Set(tslib_1.__spread(((/** @type {?} */ (state.active))), toArray)));
            return tslib_1.__assign({}, state, { active: uniques });
        }));
    };
    /**
     * Remove active entities
     *
     * @example
     *
     * store.removeActive(2)
     * store.removeActive([3, 4, 5])
     */
    /**
     * Remove active entities
     *
     * \@example
     *
     * store.removeActive(2)
     * store.removeActive([3, 4, 5])
     * @template T
     * @param {?} ids
     * @return {?}
     */
    EntityStore.prototype.removeActive = /**
     * Remove active entities
     *
     * \@example
     *
     * store.removeActive(2)
     * store.removeActive([3, 4, 5])
     * @template T
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        var _this = this;
        /** @type {?} */
        var toArray = coerceArray(ids);
        if (isEmpty(toArray))
            return;
        /** @type {?} */
        var someExist = toArray.some((/**
         * @param {?} id
         * @return {?}
         */
        function (id) { return _this.active.indexOf(id) > -1; }));
        if (!someExist)
            return;
        isDev() && setAction('Remove Active', ids);
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            return tslib_1.__assign({}, state, { active: Array.isArray(state.active) ? state.active.filter((/**
                 * @param {?} currentId
                 * @return {?}
                 */
                function (currentId) { return toArray.indexOf(currentId) === -1; })) : null });
        }));
    };
    /**
     * Toggle active entities
     *
     * @example
     *
     * store.toggle(2)
     * store.toggle([3, 4, 5])
     */
    /**
     * Toggle active entities
     *
     * \@example
     *
     * store.toggle(2)
     * store.toggle([3, 4, 5])
     * @template T
     * @param {?} ids
     * @return {?}
     */
    EntityStore.prototype.toggleActive = /**
     * Toggle active entities
     *
     * \@example
     *
     * store.toggle(2)
     * store.toggle([3, 4, 5])
     * @template T
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        var _this = this;
        /** @type {?} */
        var toArray = coerceArray(ids);
        /** @type {?} */
        var filterExists = (/**
         * @param {?} remove
         * @return {?}
         */
        function (remove) { return (/**
         * @param {?} id
         * @return {?}
         */
        function (id) { return _this.active.includes(id) === remove; }); });
        /** @type {?} */
        var remove = toArray.filter(filterExists(true));
        /** @type {?} */
        var add = toArray.filter(filterExists(false));
        this.removeActive(remove);
        this.addActive(add);
        isDev() && logAction('Toggle Active');
    };
    /**
     *
     * Create sub UI store for managing Entity's UI state
     *
     * @example
     *
     * export type ProductUI = {
     *   isLoading: boolean;
     *   isOpen: boolean
     * }
     *
     * interface ProductsUIState extends EntityState<ProductUI> {}
     *
     * export class ProductsStore EntityStore<ProductsState, Product> {
     *   ui: EntityUIStore<ProductsUIState, ProductUI>;
     *
     *   constructor() {
     *     super();
     *     this.createUIStore();
     *   }
     *
     * }
     */
    /**
     *
     * Create sub UI store for managing Entity's UI state
     *
     * \@example
     *
     * export type ProductUI = {
     *   isLoading: boolean;
     *   isOpen: boolean
     * }
     *
     * interface ProductsUIState extends EntityState<ProductUI> {}
     *
     * export class ProductsStore EntityStore<ProductsState, Product> {
     *   ui: EntityUIStore<ProductsUIState, ProductUI>;
     *
     *   constructor() {
     *     super();
     *     this.createUIStore();
     *   }
     *
     * }
     * @param {?=} initialState
     * @param {?=} storeConfig
     * @return {?}
     */
    EntityStore.prototype.createUIStore = /**
     *
     * Create sub UI store for managing Entity's UI state
     *
     * \@example
     *
     * export type ProductUI = {
     *   isLoading: boolean;
     *   isOpen: boolean
     * }
     *
     * interface ProductsUIState extends EntityState<ProductUI> {}
     *
     * export class ProductsStore EntityStore<ProductsState, Product> {
     *   ui: EntityUIStore<ProductsUIState, ProductUI>;
     *
     *   constructor() {
     *     super();
     *     this.createUIStore();
     *   }
     *
     * }
     * @param {?=} initialState
     * @param {?=} storeConfig
     * @return {?}
     */
    function (initialState, storeConfig) {
        if (initialState === void 0) { initialState = {}; }
        if (storeConfig === void 0) { storeConfig = {}; }
        /** @type {?} */
        var defaults = { name: "UI/" + this.storeName, idKey: this.idKey };
        this.ui = new EntityUIStore(initialState, tslib_1.__assign({}, defaults, storeConfig));
        return this.ui;
    };
    // @internal
    // @internal
    /**
     * @return {?}
     */
    EntityStore.prototype.destroy = 
    // @internal
    /**
     * @return {?}
     */
    function () {
        _super.prototype.destroy.call(this);
        if (this.ui instanceof EntityStore) {
            this.ui.destroy();
        }
        this.entityActions.complete();
    };
    // @internal
    // @internal
    /**
     * @param {?} _
     * @param {?} nextEntity
     * @return {?}
     */
    EntityStore.prototype.akitaPreUpdateEntity = 
    // @internal
    /**
     * @param {?} _
     * @param {?} nextEntity
     * @return {?}
     */
    function (_, nextEntity) {
        return (/** @type {?} */ (nextEntity));
    };
    // @internal
    // @internal
    /**
     * @param {?} newEntity
     * @return {?}
     */
    EntityStore.prototype.akitaPreAddEntity = 
    // @internal
    /**
     * @param {?} newEntity
     * @return {?}
     */
    function (newEntity) {
        return (/** @type {?} */ (newEntity));
    };
    // @internal
    // @internal
    /**
     * @param {?} newEntity
     * @return {?}
     */
    EntityStore.prototype.akitaPreCheckEntity = 
    // @internal
    /**
     * @param {?} newEntity
     * @return {?}
     */
    function (newEntity) {
        return newEntity;
    };
    Object.defineProperty(EntityStore.prototype, "ids", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this._value().ids;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EntityStore.prototype, "entities", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this._value().entities;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EntityStore.prototype, "active", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this._value().active;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} ids
     * @return {?}
     */
    EntityStore.prototype._setActive = /**
     * @private
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        this._setState((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            return tslib_1.__assign({}, state, { active: ids });
        }));
    };
    /**
     * @private
     * @param {?=} add
     * @return {?}
     */
    EntityStore.prototype.handleUICreation = /**
     * @private
     * @param {?=} add
     * @return {?}
     */
    function (add) {
        var _this = this;
        if (add === void 0) { add = false; }
        /** @type {?} */
        var ids = this.ids;
        /** @type {?} */
        var isFunc = isFunction(this.ui._akitaCreateEntityFn);
        /** @type {?} */
        var uiEntities;
        /** @type {?} */
        var createFn = (/**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            var _a;
            /** @type {?} */
            var current = _this.entities[id];
            /** @type {?} */
            var ui = isFunc ? _this.ui._akitaCreateEntityFn(current) : _this.ui._akitaCreateEntityFn;
            return tslib_1.__assign((_a = {}, _a[_this.idKey] = current[_this.idKey], _a), ui);
        });
        if (add) {
            uiEntities = this.ids.filter((/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return isUndefined(_this.ui.entities[id]); })).map(createFn);
        }
        else {
            uiEntities = ids.map(createFn);
        }
        add ? this.ui.add(uiEntities) : this.ui.set(uiEntities);
    };
    /**
     * @private
     * @return {?}
     */
    EntityStore.prototype.hasInitialUIState = /**
     * @private
     * @return {?}
     */
    function () {
        return this.hasUIStore() && isUndefined(this.ui._akitaCreateEntityFn) === false;
    };
    /**
     * @private
     * @param {?} ids
     * @return {?}
     */
    EntityStore.prototype.handleUIRemove = /**
     * @private
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        if (this.hasUIStore()) {
            this.ui.remove(ids);
        }
    };
    /**
     * @private
     * @return {?}
     */
    EntityStore.prototype.hasUIStore = /**
     * @private
     * @return {?}
     */
    function () {
        return this.ui instanceof EntityUIStore;
    };
    var _a;
    tslib_1.__decorate([
        transaction(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object, Object, Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], EntityStore.prototype, "upsert", null);
    tslib_1.__decorate([
        transaction(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof T !== "undefined" && T) === "function" ? _a : Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], EntityStore.prototype, "toggleActive", null);
    return EntityStore;
}(Store));
export { EntityStore };
if (false) {
    /** @type {?} */
    EntityStore.prototype.ui;
    /**
     * @type {?}
     * @private
     */
    EntityStore.prototype.entityActions;
    /**
     * @type {?}
     * @protected
     */
    EntityStore.prototype.options;
}
// @internal
/**
 * @template UIState, DEPRECATED
 */
var 
// @internal
/**
 * @template UIState, DEPRECATED
 */
EntityUIStore = /** @class */ (function (_super) {
    tslib_1.__extends(EntityUIStore, _super);
    function EntityUIStore(initialState, storeConfig) {
        if (initialState === void 0) { initialState = {}; }
        if (storeConfig === void 0) { storeConfig = {}; }
        return _super.call(this, initialState, storeConfig) || this;
    }
    /**
     *
     * Set the initial UI entity state. This function will determine the entity's
     * initial state when we call `set()` or `add()`.
     *
     * @example
     *
     * constructor() {
     *   super();
     *   this.createUIStore().setInitialEntityState(entity => ({ isLoading: false, isOpen: true }));
     *   this.createUIStore().setInitialEntityState({ isLoading: false, isOpen: true });
     * }
     *
     */
    /**
     *
     * Set the initial UI entity state. This function will determine the entity's
     * initial state when we call `set()` or `add()`.
     *
     * \@example
     *
     * constructor() {
     *   super();
     *   this.createUIStore().setInitialEntityState(entity => ({ isLoading: false, isOpen: true }));
     *   this.createUIStore().setInitialEntityState({ isLoading: false, isOpen: true });
     * }
     *
     * @template EntityUI, Entity
     * @param {?} createFn
     * @return {?}
     */
    EntityUIStore.prototype.setInitialEntityState = /**
     *
     * Set the initial UI entity state. This function will determine the entity's
     * initial state when we call `set()` or `add()`.
     *
     * \@example
     *
     * constructor() {
     *   super();
     *   this.createUIStore().setInitialEntityState(entity => ({ isLoading: false, isOpen: true }));
     *   this.createUIStore().setInitialEntityState({ isLoading: false, isOpen: true });
     * }
     *
     * @template EntityUI, Entity
     * @param {?} createFn
     * @return {?}
     */
    function (createFn) {
        this._akitaCreateEntityFn = createFn;
    };
    return EntityUIStore;
}(EntityStore));
// @internal
/**
 * @template UIState, DEPRECATED
 */
export { EntityUIStore };
if (false) {
    /** @type {?} */
    EntityUIStore.prototype._akitaCreateEntityFn;
}
//# sourceMappingURL=data:application/json;base64,