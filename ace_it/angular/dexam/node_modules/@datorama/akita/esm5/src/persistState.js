/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { filter, skip } from 'rxjs/operators';
import { from, isObservable, of, ReplaySubject } from 'rxjs';
import { isFunction } from './isFunction';
import { AkitaError } from './errors';
import { __stores__ } from './stores';
import { getValue } from './getValueByString';
import { setAction } from './actions';
import { setValue } from './setValueByString';
import { $$addStore, $$deleteStore } from './dispatchers';
import { isNil } from './isNil';
import { isObject } from './isObject';
import { isNotBrowser } from './root';
/** @type {?} */
var skipStorageUpdate = false;
/** @type {?} */
var _persistStateInit = new ReplaySubject(1);
/**
 * @return {?}
 */
export function selectPersistStateInit() {
    return _persistStateInit.asObservable();
}
/**
 * @param {?} skip
 * @return {?}
 */
export function setSkipStorageUpdate(skip) {
    skipStorageUpdate = skip;
}
/**
 * @return {?}
 */
export function getSkipStorageUpdate() {
    return skipStorageUpdate;
}
/**
 * @record
 */
export function PersistStateStorage() { }
if (false) {
    /**
     * @param {?} key
     * @return {?}
     */
    PersistStateStorage.prototype.getItem = function (key) { };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    PersistStateStorage.prototype.setItem = function (key, value) { };
    /**
     * @return {?}
     */
    PersistStateStorage.prototype.clear = function () { };
}
/**
 * @param {?} v
 * @return {?}
 */
function isPromise(v) {
    return v && isFunction(v.then);
}
/**
 * @param {?} asyncOrValue
 * @return {?}
 */
function observify(asyncOrValue) {
    if (isPromise(asyncOrValue) || isObservable(asyncOrValue)) {
        return from(asyncOrValue);
    }
    return of(asyncOrValue);
}
/**
 * @record
 */
export function PersistStateParams() { }
if (false) {
    /**
     * The storage key
     * @type {?}
     */
    PersistStateParams.prototype.key;
    /**
     * Whether to enable persistState in a non-browser environment
     * @type {?}
     */
    PersistStateParams.prototype.enableInNonBrowser;
    /**
     * Storage strategy to use. This defaults to LocalStorage but you can pass SessionStorage or anything that implements the StorageEngine API.
     * @type {?}
     */
    PersistStateParams.prototype.storage;
    /**
     * Custom deserializer. Defaults to JSON.parse
     * @type {?}
     */
    PersistStateParams.prototype.deserialize;
    /**
     * Custom serializer, defaults to JSON.stringify
     * @type {?}
     */
    PersistStateParams.prototype.serialize;
    /**
     * By default the whole state is saved to storage, use this param to include only the stores you need.
     * Pay attention that you can't use both include and exclude
     * @type {?}
     */
    PersistStateParams.prototype.include;
    /**
     *  By default the whole state is saved to storage, use this param to exclude stores that you don't need.
     *  Pay attention that you can't use both include and exclude
     * @type {?}
     */
    PersistStateParams.prototype.exclude;
    /** @type {?} */
    PersistStateParams.prototype.skipStorageUpdate;
    /** @type {?} */
    PersistStateParams.prototype.preStorageUpdateOperator;
    /**
     * Whether to persist a dynamic store upon destroy
     * @type {?}
     */
    PersistStateParams.prototype.persistOnDestroy;
    /**
     * @param {?} storeName
     * @param {?} state
     * @return {?}
     */
    PersistStateParams.prototype.preStorageUpdate = function (storeName, state) { };
    /**
     * @param {?} storeName
     * @param {?} state
     * @return {?}
     */
    PersistStateParams.prototype.preStoreUpdate = function (storeName, state) { };
}
/**
 * @param {?=} params
 * @return {?}
 */
export function persistState(params) {
    /** @type {?} */
    var defaults = {
        key: 'AkitaStores',
        enableInNonBrowser: false,
        storage: typeof localStorage === 'undefined' ? params.storage : localStorage,
        deserialize: JSON.parse,
        serialize: JSON.stringify,
        include: [],
        /**
         * @deprecated use include with a callback
         */
        exclude: [],
        persistOnDestroy: false,
        preStorageUpdate: (/**
         * @param {?} storeName
         * @param {?} state
         * @return {?}
         */
        function (storeName, state) {
            return state;
        }),
        preStoreUpdate: (/**
         * @param {?} storeName
         * @param {?} state
         * @return {?}
         */
        function (storeName, state) {
            return state;
        }),
        skipStorageUpdate: getSkipStorageUpdate,
        preStorageUpdateOperator: (/**
         * @return {?}
         */
        function () { return (/**
         * @param {?} source
         * @return {?}
         */
        function (source) { return source; }); })
    };
    var _a = Object.assign({}, defaults, params), storage = _a.storage, enableInNonBrowser = _a.enableInNonBrowser, deserialize = _a.deserialize, serialize = _a.serialize, include = _a.include, exclude = _a.exclude, key = _a.key, preStorageUpdate = _a.preStorageUpdate, persistOnDestroy = _a.persistOnDestroy, preStorageUpdateOperator = _a.preStorageUpdateOperator, preStoreUpdate = _a.preStoreUpdate, skipStorageUpdate = _a.skipStorageUpdate;
    if (isNotBrowser && !enableInNonBrowser)
        return;
    /** @type {?} */
    var hasInclude = include.length > 0;
    /** @type {?} */
    var hasExclude = exclude.length > 0;
    /** @type {?} */
    var includeStores;
    if (hasInclude && hasExclude) {
        throw new AkitaError("You can't use both include and exclude");
    }
    if (hasInclude) {
        includeStores = include.reduce((/**
         * @param {?} acc
         * @param {?} path
         * @return {?}
         */
        function (acc, path) {
            if (isFunction(path)) {
                acc.fns.push(path);
            }
            else {
                /** @type {?} */
                var storeName = path.split('.')[0];
                acc[storeName] = path;
            }
            return acc;
        }), { fns: [] });
    }
    /** @type {?} */
    var stores = {};
    /** @type {?} */
    var acc = {};
    /** @type {?} */
    var subscriptions = [];
    /** @type {?} */
    var buffer = [];
    /**
     * @param {?} v
     * @return {?}
     */
    function _save(v) {
        observify(v).subscribe((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var next = buffer.shift();
            next && _save(next);
        }));
    }
    // when we use the local/session storage we perform the serialize, otherwise we let the passed storage implementation to do it
    /** @type {?} */
    var isLocalStorage = typeof localStorage !== 'undefined' && (storage === localStorage || storage === sessionStorage);
    observify(storage.getItem(key)).subscribe((/**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var storageState = isObject(value) ? value : deserialize(value || '{}');
        /**
         * @param {?} storeCache
         * @return {?}
         */
        function save(storeCache) {
            storageState['$cache'] = tslib_1.__assign({}, (storageState['$cache'] || {}), storeCache);
            storageState = Object.assign({}, storageState, acc);
            buffer.push(storage.setItem(key, isLocalStorage ? serialize(storageState) : storageState));
            _save(buffer.shift());
        }
        /**
         * @param {?} storeName
         * @param {?} path
         * @return {?}
         */
        function subscribe(storeName, path) {
            stores[storeName] = __stores__[storeName]
                ._select((/**
             * @param {?} state
             * @return {?}
             */
            function (state) { return getValue(state, path); }))
                .pipe(skip(1), filter((/**
             * @return {?}
             */
            function () { return skipStorageUpdate() === false; })), preStorageUpdateOperator())
                .subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                acc[storeName] = preStorageUpdate(storeName, data);
                Promise.resolve().then((/**
                 * @return {?}
                 */
                function () {
                    var _a;
                    return save((_a = {}, _a[storeName] = __stores__[storeName]._cache().getValue(), _a));
                }));
            }));
        }
        /**
         * @param {?} storeName
         * @param {?} store
         * @param {?} path
         * @return {?}
         */
        function setInitial(storeName, store, path) {
            if (storeName in storageState) {
                setAction('@PersistState');
                store._setState((/**
                 * @param {?} state
                 * @return {?}
                 */
                function (state) {
                    return setValue(state, path, preStoreUpdate(storeName, storageState[storeName]));
                }));
                /** @type {?} */
                var hasCache = storageState['$cache'] ? storageState['$cache'][storeName] : false;
                __stores__[storeName].setHasCache(hasCache, { restartTTL: true });
            }
        }
        subscriptions.push($$deleteStore.subscribe((/**
         * @param {?} storeName
         * @return {?}
         */
        function (storeName) {
            var _a;
            if (stores[storeName]) {
                if (persistOnDestroy === false) {
                    save((_a = {}, _a[storeName] = false, _a));
                }
                stores[storeName].unsubscribe();
                delete stores[storeName];
            }
        })));
        subscriptions.push($$addStore.subscribe((/**
         * @param {?} storeName
         * @return {?}
         */
        function (storeName) {
            if (storeName === 'router' || (hasExclude && exclude.includes(storeName))) {
                return;
            }
            /** @type {?} */
            var store = __stores__[storeName];
            if (hasInclude) {
                /** @type {?} */
                var path = includeStores[storeName];
                if (!path) {
                    /** @type {?} */
                    var passPredicate = includeStores.fns.some((/**
                     * @param {?} fn
                     * @return {?}
                     */
                    function (fn) { return fn(storeName); }));
                    if (passPredicate) {
                        path = storeName;
                    }
                    else {
                        return;
                    }
                }
                setInitial(storeName, store, path);
                subscribe(storeName, path);
            }
            else {
                setInitial(storeName, store, storeName);
                subscribe(storeName, storeName);
            }
        })));
        _persistStateInit.next();
    }));
    return {
        destroy: /**
         * @return {?}
         */
        function () {
            subscriptions.forEach((/**
             * @param {?} s
             * @return {?}
             */
            function (s) { return s.unsubscribe(); }));
            for (var i = 0, keys = Object.keys(stores); i < keys.length; i++) {
                /** @type {?} */
                var storeName = keys[i];
                stores[storeName].unsubscribe();
            }
            stores = {};
        },
        clear: /**
         * @return {?}
         */
        function () {
            storage.clear();
        },
        clearStore: /**
         * @param {?=} storeName
         * @return {?}
         */
        function (storeName) {
            if (isNil(storeName)) {
                /** @type {?} */
                var value_1 = observify(storage.setItem(key, '{}'));
                value_1.subscribe();
                return;
            }
            /** @type {?} */
            var value = storage.getItem(key);
            observify(value).subscribe((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                /** @type {?} */
                var storageState = deserialize(v || '{}');
                if (storageState[storeName]) {
                    delete storageState[storeName];
                    /** @type {?} */
                    var value_2 = observify(storage.setItem(key, serialize(storageState)));
                    value_2.subscribe();
                }
            }));
        }
    };
}
//# sourceMappingURL=data:application/json;base64,