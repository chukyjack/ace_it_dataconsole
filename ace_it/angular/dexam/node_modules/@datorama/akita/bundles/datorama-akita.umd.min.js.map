{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@datorama/akita/src/isArray.ts","ng://@datorama/akita/src/isEmpty.ts","ng://@datorama/akita/src/toEntitiesObject.ts","ng://@datorama/akita/src/hasEntity.ts","ng://@datorama/akita/src/activeState.ts","ng://@datorama/akita/src/setEntities.ts","ng://@datorama/akita/src/actions.ts","ng://@datorama/akita/src/config.ts","ng://@datorama/akita/src/deepFreeze.ts","ng://@datorama/akita/src/dispatchers.ts","ng://@datorama/akita/src/env.ts","ng://@datorama/akita/src/errors.ts","ng://@datorama/akita/src/isNil.ts","ng://@datorama/akita/src/isDefined.ts","ng://@datorama/akita/src/isFunction.ts","ng://@datorama/akita/src/toBoolean.ts","ng://@datorama/akita/src/isPlainObject.ts","ng://@datorama/akita/src/root.ts","ng://@datorama/akita/src/storeConfig.ts","ng://@datorama/akita/src/stores.ts","ng://@datorama/akita/src/transaction.ts","ng://@datorama/akita/src/store.ts","ng://@datorama/akita/src/isObject.ts","ng://@datorama/akita/src/getActiveEntities.ts","ng://@datorama/akita/src/addEntities.ts","ng://@datorama/akita/src/coerceArray.ts","ng://@datorama/akita/src/removeEntities.ts","ng://@datorama/akita/src/getInitialEntitiesState.ts","ng://@datorama/akita/src/updateEntities.ts","ng://@datorama/akita/src/isUndefined.ts","ng://@datorama/akita/src/entityActions.ts","ng://@datorama/akita/src/defaultIDKey.ts","ng://@datorama/akita/src/entityStore.ts","ng://@datorama/akita/src/arrayFind.ts","ng://@datorama/akita/src/sort.ts","ng://@datorama/akita/src/entitiesToArray.ts","ng://@datorama/akita/src/entitiesToMap.ts","ng://@datorama/akita/src/isString.ts","ng://@datorama/akita/src/getEntity.ts","ng://@datorama/akita/src/queryConfig.ts","ng://@datorama/akita/src/query.ts","ng://@datorama/akita/src/compareKeys.ts","ng://@datorama/akita/src/sortByOptions.ts","ng://@datorama/akita/src/queryEntity.ts","ng://@datorama/akita/src/mapSkipUndefined.ts","ng://@datorama/akita/src/filterNil.ts","ng://@datorama/akita/src/getValueByString.ts","ng://@datorama/akita/src/setValueByString.ts","ng://@datorama/akita/src/persistState.ts","ng://@datorama/akita/src/snapshotManager.ts","ng://@datorama/akita/src/plugins/plugin.ts","ng://@datorama/akita/src/plugins/paginator/paginatorPlugin.ts","ng://@datorama/akita/src/plugins/persistForm/persistNgFormPlugin.ts","ng://@datorama/akita/src/captialize.ts","ng://@datorama/akita/src/devtools.ts","ng://@datorama/akita/src/plugins/entityCollectionPlugin.ts","ng://@datorama/akita/src/plugins/stateHistory/stateHistoryPlugin.ts","ng://@datorama/akita/src/plugins/stateHistory/entityStateHistoryPlugin.ts","ng://@datorama/akita/src/plugins/dirtyCheck/dirtyCheckPlugin.ts","ng://@datorama/akita/src/plugins/dirtyCheck/entityDirtyCheckPlugin.ts","ng://@datorama/akita/src/runStoreAction.ts","ng://@datorama/akita/src/arrayUpdate.ts","ng://@datorama/akita/src/arrayAdd.ts","ng://@datorama/akita/src/entityService.ts","ng://@datorama/akita/src/guid.ts","ng://@datorama/akita/src/toEntitiesIds.ts","ng://@datorama/akita/src/resetStores.ts","ng://@datorama/akita/src/isNumber.ts","ng://@datorama/akita/src/arrayUpsert.ts","ng://@datorama/akita/src/arrayRemove.ts","ng://@datorama/akita/src/not.ts","ng://@datorama/akita/src/fp.ts","ng://@datorama/akita/src/cacheable.ts","ng://@datorama/akita/src/combineQueries.ts","ng://@datorama/akita/src/setLoading.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","isArray","isEmpty","arr","toEntitiesObject","entities","idKey","preAddEntity","acc","ids","entities_1","tslib_1.__values","entities_1_1","current","hasEntity","id","hasActiveState","state","isMultiActiveState","active","resolveActiveEntity","_a","getExitingActives","currentActivesIds","newIds","filtered","filter","indexOf","isEntityState","applyMiddleware","mapped","_b","keys","_c","setEntities","newEntities","isNativePreAdd","resolve","map","isNaN","Number","newState","loading","currentAction","type","entityIds","skip","customActionActive","resetCustomAction","logAction","setAction","setSkipAction","action","propertyKey","descriptor","originalMethod","args","_i","CONFIG","resettable","ttl","producerFn","undefined","getAkitaConfig","deepFreeze","freeze","oIsFunction","hasOwnProp","getOwnPropertyNames","forEach","prop","isFrozen","$$deleteStore","Subject","$$addStore","ReplaySubject","$$updateStore","dispatchDeleted","storeName","dispatchAdded","dispatchUpdate","isDev","__DEV__","exports","tslib_1.__extends","Error","AkitaError","message","_super","isNil","v","isDefined","val","isFunction","toBoolean","isPlainObject","name","isBrowser","window","isNotBrowser","configKey","global","__runtimeVersion","__stores__","__queries__","$$stores","$$queries","transactionFinished","transactionInProcess","BehaviorSubject","transactionManager","activeTransactions","batchTransaction","startBatch","isTransactionInProcess","endBatch","complete","commit","asObservable","of","applyTransaction","thisArg","transaction","_this","Store","setLoading","_value","_setState","setHasCache","hasCache","options","restartTTL","cache","ttlConfig","getCacheTTL","clearTimeout","setTimeout","getValue","storeValue","setError","_select","project","store","pipe","distinctUntilChanged","_cache","config","deepFreezeFn","getGlobalProducerFn","_dispatchAction","_newState","handleTransaction","dispatch","reset","isResettable","_initialState","console","warn","update","stateOrCallback","currentState","_producerFn","withHook","akitaPreUpdate","resolved","updateStoreConfig","newOptions","_","nextState","ngOnDestroy","destroy","hmrEnabled","onInit","initialState","assertStoreHasName","className","watchTransaction","subscribe","inTransaction","cacheConfig","isObject","getActiveEntities","idOrOptions","currentActive","result","wrap","currentIdIndex","prev","isFirst","isLast","addEntities","hasNewEntities","entity","entityId","prepend","unshift","coerceArray","removeEntities","removeAllEntities","_d","includes","getInitialEntitiesState","updateEntities","idToUpdate","newStateOrFn","preUpdateEntity","updatedEntities","isUpdatingIdKey","ids_1","ids_1_1","oldEntity","isIdChanged","newEntity","merged","updatedIds","stateEntities","id_1","_e","__rest","getOwnPropertySymbols","isUndefined","Set","Add","Update","Remove","DEFAULT_ID_KEY","EntityStore","entityActions","set","akitaPreAddEntity","hasInitialUIState","handleUICreation","EntityActions","add","collection","data","idsOrFnOrState","akitaPreUpdateEntity","upsert","predicate","isUpdate","toArray","isClassBased","baseClass","updateIds","withId","upsertMany","addedIds","withPreCheckHook","akitaPreCheckEntity","nextId","hasUIStore","replace","replaced","toArray_1","toArray_1_1","move","from","to","slice","splice","remove","idsOrFn","idPassed","handleUIRemove","updateActive","newStateOrCallback","setActive","_setActive","addActive","every","uniques","removeActive","some","currentId","toggleActive","filterExists","createUIStore","storeConfig","defaults","ui","EntityUIStore","nextEntity","createFn","isFunc","_akitaCreateEntityFn","uiEntities","tslib_1.__decorate","T","setInitialEntityState","find","idsOrPredicate","collection_1","collection_1_1","toSet","reduce","collection_2","collection_2_1","has","distinctUntilArrayItemChanged","prevCollection","currentCollection","hasChange","first","second","currentItem","prevItem","ASC","DESC","compareValues","order","Order","a","varA","toUpperCase","varB","comparison","entitiesToArray","filterBy","limitTo","sortBy","sortByOrder","fn","_sortBy_1","sort","Math","min","entitiesToMap","hasLimit","count","length_1","finalLength","isString","getEntity","queryConfigKey","Query","select","mapFn","compareKeys","keysOrFuncs","prevState","currState","isFns","keyOrFunc","func","k","selectLoading","selectError","selectHasCache","getHasCache","__store__","sortByOptions","QueryEntity","selectAll","asObject","getAll","selectMany","mapSkipUndefined","callbackFn","index","array","selectEntity","idOrPredicate","findEntityByPredicate","selectActiveId","getActiveId","selectActive","getActive","switchMap","activeId","selectCount","getCount","selectLast","selectAt","selectFirst","selectEntityAction","selectEntityAction$","ac","projectOrIds","hasActive","isIdProvided","createUIQuery","EntityUIQuery","filterNil","source","obj","split","join","part","setValue","lastIndex","skipStorageUpdate","_persistStateInit","setSkipStorageUpdate","getSkipStorageUpdate","observify","asyncOrValue","isPromise","then","isObservable","SnapshotManager","getStoresSnapshot","stores","setStoresSnapshot","mergedOptions","lazy","normalizedStores","JSON","parse","size","take","snapshotManager","AkitaPlugin","getQuery","query","getStore","isEntityBased","selectSource","property","withStoreName","getSource","updateStore","onReset","original","params","resetFn","paginatorDefaults","pagesControls","range","startWith","cacheTimeout","clearStoreWithCache","PaginatorPlugin","page","pagination","currentPage","lastPage","withControls","withRange","response","addPage","pages","clearCache","initial","clearStore","Map","clearPage","delete","clearCacheSubscription","unsubscribe","setPage","isPageActive","hasPage","nextPage","prevPage","setLastPage","setFirstPage","getPage","req","selectPage","refreshCurrentPage","getFrom","perPage","getTo","total","get","pageControls","generatePages","len","ceil","isLoading$","delay","Paginator","PersistNgFormPlugin","setForm","form","builder","activate","isKeyBased","initialValue","factoryFnOrPath","stateKey","formArray","controls","cleanArray","insert","patchValue","emitEvent","formKey","control","removeAt","resolveInitialValue","formValue","root","factory_1","arrControlFactory","path","isRootKeys","formChanges","valueChanges","debounceTime","capitalize","charAt","subs","EntityCollectionPlugin","removeEntity","createEntity","plugin","getIds","resolvedIds","rebase","actions","beforeAdd","instantiatePlugin","afterAdd","beforeRemove","_ids","selectIds","forEachId","cb","StateHistoryPlugin","_hasPast$","_hasFuture$","history","past","future","watchProperty","updateHasHistory","hasFutureSubject","hasFuture","hasPastSubject","hasPast","present","_entityId","subscription","pairwise","shouldUpdate","comparator","skipUpdate","maxAge","undo","previous","redo","newFuture","jumpToPast","newPast","newPresent","jumpToFuture","jump","clear","customUpdateFn","clearHistory","ignoreNext","action$$1","EntityStateHistoryPlugin","dirtyCheckDefaultParams","head","stringify","getNestedPath","nestedObj","DirtyCheckPlugin","currentValue","updateFn","_reset","setHead","_getHead","updateDirtiness","isDirty","dirty","hasHead","getHead","isPathDirty","currentPathValue","headPathValue","__akitaKey","combineLatest","isChange","compareTo","getWatchedValues","watched","isDirty$","reset$","watchProp","EntityDirtyCheckPlugin","_someDirty","someDirty","checkSomeDirty","entitiesIds","entitiesIds_1","entitiesIds_1_1","someDirty$","merge","auditTime","AddEntities","SetEntities","UpdateEntities","RemoveEntities","UpsertEntities","arrayUpdate","keyOrRoot","predicateOrIds","condition","item","arrayAdd","addFn","withTransaction","tap","StoreConfig","QueryConfig","akitaConfig","persistState","enableInNonBrowser","storage","localStorage","deserialize","serialize","include","exclude","persistOnDestroy","preStorageUpdate","preStoreUpdate","preStorageUpdateOperator","includeStores","hasInclude","hasExclude","fns","subscriptions","buffer","isLocalStorage","sessionStorage","getItem","storageState","save","storeCache","setItem","_save","shift","Promise","setInitial","selectPersistStateInit","akitaDevtools","ngZoneOrOptions","__REDUX_DEVTOOLS_EXTENSION__","run","shallow","storesWhitelist","devTools","connect","appState","isAllowed","send","normalize","msg","logTrace","group","trace","groupEnd","sortAlphabetically","sortedAppState","payload","init","rootState_1","guid","random","toString","toEntitiesIds","resetStores","stores_1","stores_1_1","isNumber","parseFloat","enableAkitaProdMode","runStoreAction","StoreActions","arrayUpsert","entityIsObject","arrayFind","arrayRemove","identifier","identifiers","filterFn","not","pred","createEntityQuery","createEntityStore","createQuery","createStore","cacheable","request$","emitNext","EMPTY","combineQueries","observables","defer","finalize"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// @internal\nexport function isArray<T>(value: any): value is T[] {\n  return Array.isArray(value);\n}\n","import { isArray } from './isArray';\n\n// @internal\nexport function isEmpty<T>(arr: T) {\n  if (isArray(arr)) {\n    return arr.length === 0;\n  }\n  return false;\n}\n","import { PreAddEntity } from './types';\n\n// @internal\nexport function toEntitiesObject<E>(entities: E[], idKey: string, preAddEntity: PreAddEntity<E>) {\n  const acc = {\n    entities: {},\n    ids: []\n  };\n\n  for (const entity of entities) {\n    // evaluate the middleware first to support dynamic ids\n    const current = preAddEntity(entity);\n    acc.entities[current[idKey]] = current;\n    acc.ids.push(current[idKey]);\n  }\n\n  return acc;\n}\n","import { EntityState, ID } from './index';\n\n// @internal\nexport function hasEntity<E>(entities: EntityState<E>, id: ID) {\n  return entities.hasOwnProperty(id);\n}\n","import { ActiveState, EntityState, ID, IDS, MultiActiveState } from './types';\nimport { hasEntity } from './hasEntity';\nimport { isArray } from './isArray';\n\n// @internal\nexport function hasActiveState<E>(state: EntityState<E>): state is EntityState<E> & (ActiveState | MultiActiveState) {\n  return state.hasOwnProperty('active');\n}\n\n// @internal\nexport function isMultiActiveState(active: IDS): active is ID[] {\n  return isArray(active);\n}\n\n// @internal\nexport function resolveActiveEntity<E>({ active, ids, entities }: EntityState<E> & (ActiveState | MultiActiveState)) {\n  if (isMultiActiveState(active)) {\n    return getExitingActives(active, ids);\n  }\n\n  if (hasEntity(entities, active) === false) {\n    return null;\n  }\n\n  return active;\n}\n\n// @internal\nexport function getExitingActives(currentActivesIds: ID[], newIds: ID[]) {\n  const filtered = currentActivesIds.filter(id => newIds.indexOf(id) > -1);\n  /** Return the same reference if nothing has changed */\n  if (filtered.length === currentActivesIds.length) {\n    return currentActivesIds;\n  }\n\n  return filtered;\n}\n","import { Entities, EntityState, HashMap, ID, PreAddEntity } from './types';\nimport { toEntitiesObject } from './toEntitiesObject';\nimport { isArray } from './isArray';\nimport { hasActiveState, resolveActiveEntity } from './activeState';\n\nexport type SetEntities<Entity> = Entity[] | Entities<Entity> | HashMap<Entity>;\n\nexport type SetEntitiesParams<State, Entity> = {\n  state: State;\n  entities: SetEntities<Entity>;\n  idKey: string;\n  preAddEntity: PreAddEntity<Entity>;\n  isNativePreAdd?: boolean;\n};\n\n// @internal\nexport function isEntityState<Entity>(state): state is Entities<Entity> {\n  return state.entities && state.ids;\n}\n\n// @internal\nfunction applyMiddleware<E>(entities: HashMap<E>, preAddEntity: PreAddEntity<E>) {\n  let mapped = {};\n  for (const id of Object.keys(entities)) {\n    mapped[id] = preAddEntity(entities[id]);\n  }\n\n  return mapped;\n}\n\n// @internal\nexport function setEntities<S extends EntityState<E>, E>({ state, entities, idKey, preAddEntity, isNativePreAdd }: SetEntitiesParams<S, E>): S {\n  let newEntities: HashMap<E>;\n  let newIds: ID[];\n\n  if (isArray(entities)) {\n    const resolve = toEntitiesObject(entities, idKey, preAddEntity);\n    newEntities = resolve.entities;\n    newIds = resolve.ids;\n  } else if (isEntityState(entities)) {\n    newEntities = isNativePreAdd ? entities.entities : applyMiddleware(entities.entities, preAddEntity);\n    newIds = entities.ids;\n  } else {\n    // it's an object\n    newEntities = isNativePreAdd ? entities : applyMiddleware(entities, preAddEntity);\n    newIds = Object.keys(newEntities).map(id => (isNaN(id as any) ? id : Number(id)));\n  }\n\n  const newState = {\n    ...state,\n    entities: newEntities,\n    ids: newIds,\n    loading: false\n  };\n\n  if (hasActiveState(state)) {\n    newState.active = resolveActiveEntity(newState as any);\n  }\n\n  return newState;\n}\n","export const currentAction = {\n  type: null,\n  entityIds: null,\n  skip: false\n};\n\nlet customActionActive = false;\n\nexport function resetCustomAction() {\n  customActionActive = false;\n}\n\n// public API for custom actions. Custom action always wins\nexport function logAction(type: string, entityIds?) {\n  setAction(type, entityIds);\n  customActionActive = true;\n}\n\nexport function setAction(type: string, entityIds?) {\n  if (customActionActive === false) {\n    currentAction.type = type;\n    currentAction.entityIds = entityIds;\n  }\n}\n\nexport function setSkipAction(skip = true) {\n  currentAction.skip = skip;\n}\n\nexport function action(action: string, entityIds?) {\n  return function(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function(...args) {\n      logAction(action, entityIds);\n      return originalMethod.apply(this, args);\n    };\n\n    return descriptor;\n  };\n}\n","export interface AkitaConfig {\n  /**\n   * Whether to allowed the reset() stores functionality\n   */\n  resettable?: boolean;\n  ttl?: number;\n  producerFn?: (state: any, fn: any) => any;\n}\n\nlet CONFIG: AkitaConfig = {\n  resettable: false,\n  ttl: null,\n  producerFn: undefined\n};\n\nexport function akitaConfig(config: AkitaConfig) {\n  CONFIG = { ...CONFIG, ...config };\n}\n\n// @internal\nexport function getAkitaConfig() {\n  return CONFIG;\n}\n\nexport function getGlobalProducerFn() {\n  return CONFIG.producerFn;\n}\n","// @internal\nexport function deepFreeze(o) {\n  Object.freeze(o);\n\n  const oIsFunction = typeof o === 'function';\n  const hasOwnProp = Object.prototype.hasOwnProperty;\n\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\n    if (\n      hasOwnProp.call(o, prop) &&\n      (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&\n      o[prop] !== null &&\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n      !Object.isFrozen(o[prop])\n    ) {\n      deepFreeze(o[prop]);\n    }\n  });\n\n  return o;\n}\n","import { ReplaySubject, Subject } from 'rxjs';\n\n// @internal\nexport const $$deleteStore = new Subject<string>();\n// @internal\nexport const $$addStore = new ReplaySubject<string>(50, 5000);\n// @internal\nexport const $$updateStore = new Subject<string>();\n\n// @internal\nexport function dispatchDeleted(storeName: string) {\n  $$deleteStore.next(storeName);\n}\n\n// @internal\nexport function dispatchAdded(storeName: string) {\n  $$addStore.next(storeName);\n}\n\n// @internal\nexport function dispatchUpdate(storeName: string) {\n  $$updateStore.next(storeName);\n}\n","export let __DEV__ = true;\n\nexport function enableAkitaProdMode() {\n  __DEV__ = false;\n}\n\n// @internal\nexport function isDev() {\n  return __DEV__;\n}\n","// @internal\nexport class AkitaError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n\n// @internal\nexport function assertStoreHasName(name: string, className: string) {\n  if (!name) {\n    console.error(`@StoreConfig({ name }) is missing in ${className}`);\n  }\n}\n","// @internal\nexport function isNil(v) {\n  return v === null || v === undefined;\n}\n","import { isNil } from './isNil';\n\n// @internal\nexport function isDefined(val: any) {\n  return isNil(val) === false;\n}\n","// @internal\nexport function isFunction(value: any): value is Function {\n  return typeof value === 'function';\n}\n","// @internal\nexport function toBoolean(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n","import { toBoolean } from './toBoolean';\n\n// @internal\nexport function isPlainObject(value) {\n  return toBoolean(value) && value.constructor.name === 'Object';\n}\n","export const isBrowser = typeof window !== 'undefined';\nexport const isNotBrowser = !isBrowser;\nexport const isNativeScript = typeof global !== 'undefined' && (<any>global).__runtimeVersion !== 'undefined';\n","import { AkitaConfig } from './config';\n\nexport type StoreConfigOptions = {\n  name: string;\n  resettable?: AkitaConfig['resettable'];\n  cache?: { ttl: number };\n  deepFreezeFn?: (o: any) => any;\n  idKey?: string;\n  producerFn?: AkitaConfig['producerFn'];\n};\n\nexport type UpdatableStoreConfigOptions = {\n  cache?: { ttl: number };\n};\n\nexport const configKey = 'akitaConfig';\n\nexport function StoreConfig(metadata: StoreConfigOptions) {\n  return function(constructor: Function) {\n    constructor[configKey] = { idKey: 'id' };\n\n    for (let i = 0, keys = Object.keys(metadata); i < keys.length; i++) {\n      const key = keys[i];\n      /* name is preserved read only key */\n      if (key === 'name') {\n        constructor[configKey]['storeName'] = metadata[key];\n      } else {\n        constructor[configKey][key] = metadata[key];\n      }\n    }\n  };\n}\n","import { Store } from './store';\nimport { isDev } from './env';\nimport { isBrowser } from './root';\nimport { Query } from './query';\n\n// @internal\nexport const __stores__: { [storeName: string]: Store<any> } = {};\n\n// @internal\nexport const __queries__: { [storeName: string]: Query<any> } = {};\n\nif (isBrowser && isDev()) {\n  (window as any).$$stores = __stores__;\n  (window as any).$$queries = __queries__;\n}\n","import { BehaviorSubject, Observable, of, Subject } from 'rxjs';\nimport { logAction } from './actions';\nimport { tap } from 'rxjs/operators';\n\n// @internal\nconst transactionFinished = new Subject();\n\n// @internal\nconst transactionInProcess = new BehaviorSubject(false);\n\nexport type TransactionManager = {\n  activeTransactions: number;\n  batchTransaction: Subject<boolean> | null;\n};\n\n// @internal\nexport const transactionManager: TransactionManager = {\n  activeTransactions: 0,\n  batchTransaction: null\n};\n\n// @internal\nexport function startBatch() {\n  if (!isTransactionInProcess()) {\n    transactionManager.batchTransaction = new Subject();\n  }\n  transactionManager.activeTransactions++;\n  transactionInProcess.next(true);\n}\n\n// @internal\nexport function endBatch() {\n  if (--transactionManager.activeTransactions === 0) {\n    transactionManager.batchTransaction.next(true);\n    transactionManager.batchTransaction.complete();\n    transactionInProcess.next(false);\n    transactionFinished.next(true);\n  }\n}\n\n// @internal\nexport function isTransactionInProcess() {\n  return transactionManager.activeTransactions > 0;\n}\n\n// @internal\nexport function commit(): Observable<boolean> {\n  return transactionManager.batchTransaction ? transactionManager.batchTransaction.asObservable() : of(true);\n}\n\n/**\n *  A logical transaction.\n *  Use this transaction to optimize the dispatch of all the stores.\n *  The following code will update the store, BUT  emits only once\n *\n *  @example\n *  applyTransaction(() => {\n *    this.todosStore.add(new Todo(1, title));\n *    this.todosStore.add(new Todo(2, title));\n *  });\n *\n */\nexport function applyTransaction<T>(action: () => T, thisArg = undefined): T {\n  startBatch();\n  try {\n    return action.apply(thisArg);\n  } finally {\n    logAction('@Transaction');\n    endBatch();\n  }\n}\n\n/**\n *  A logical transaction.\n *  Use this transaction to optimize the dispatch of all the stores.\n *\n *  The following code will update the store, BUT  emits only once.\n *\n *  @example\n *  @transaction\n *  addTodos() {\n *    this.todosStore.add(new Todo(1, title));\n *    this.todosStore.add(new Todo(2, title));\n *  }\n *\n *\n */\nexport function transaction() {\n  return function(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = function(...args) {\n      return applyTransaction(() => {\n        return originalMethod.apply(this, args);\n      }, this);\n    };\n\n    return descriptor;\n  };\n}\n\n/**\n *\n * RxJS custom operator that wraps the callback inside transaction\n *\n * @example\n *\n * return http.get().pipe(\n *    withTransaction(response > {\n *      store.setActive(1);\n *      store.update();\n *      store.updateEntity(1, {});\n *    })\n * )\n *\n */\nexport function withTransaction<T>(next: (value: T) => void) {\n  return function(source: Observable<T>): Observable<T> {\n    return source.pipe(tap(value => applyTransaction(() => next(value))));\n  };\n}\n","import { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { resetCustomAction, setAction } from './actions';\nimport { getAkitaConfig, getGlobalProducerFn } from './config';\nimport { deepFreeze } from './deepFreeze';\nimport { dispatchAdded, dispatchDeleted, dispatchUpdate } from './dispatchers';\nimport { __DEV__, isDev } from './env';\nimport { assertStoreHasName } from './errors';\nimport { isDefined } from './isDefined';\nimport { isFunction } from './isFunction';\nimport { isPlainObject } from './isPlainObject';\nimport { isBrowser } from './root';\nimport { configKey, StoreConfigOptions, UpdatableStoreConfigOptions } from './storeConfig';\nimport { __stores__ } from './stores';\nimport { commit, isTransactionInProcess } from './transaction';\nimport { StoreCache, UpdateStateCallback } from './types';\n\n/**\n *\n * Store for managing any type of data\n *\n * @example\n *\n * export interface SessionState {\n *   token: string;\n *   userDetails: UserDetails\n * }\n *\n * export function createInitialState(): SessionState {\n *  return {\n *    token: '',\n *    userDetails: null\n *  };\n * }\n *\n * @StoreConfig({ name: 'session' })\n * export class SessionStore extends Store<SessionState> {\n *   constructor() {\n *    super(createInitialState());\n *   }\n * }\n */\nexport class Store<S = any> {\n  private store: BehaviorSubject<Readonly<S>>;\n  private storeValue: S;\n  private inTransaction = false;\n  private _initialState: S;\n  protected cache: StoreCache = {\n    active: new BehaviorSubject<boolean>(false),\n    ttl: null\n  };\n\n  constructor(initialState: Partial<S>, protected options: Partial<StoreConfigOptions> = {}) {\n    this.onInit(initialState as S);\n  }\n\n  /**\n   *  Set the loading state\n   *\n   *  @example\n   *\n   *  store.setLoading(true)\n   *\n   */\n  setLoading(loading = false) {\n    if (loading !== (this._value() as S & { loading: boolean }).loading) {\n      isDev() && setAction('Set Loading');\n      this._setState(state => ({ ...state, loading } as S & { loading: boolean }));\n    }\n  }\n\n  /**\n   *\n   * Set whether the data is cached\n   *\n   * @example\n   *\n   * store.setHasCache(true)\n   * store.setHasCache(false)\n   * store.setHasCache(true, { restartTTL: true })\n   *\n   */\n  setHasCache(hasCache: boolean, options: { restartTTL: boolean } = { restartTTL: false }) {\n    if (hasCache !== this.cache.active.value) {\n      this.cache.active.next(hasCache);\n    }\n\n    if (options.restartTTL) {\n      const ttlConfig = this.getCacheTTL();\n      if (ttlConfig) {\n        if (this.cache.ttl !== null) {\n          clearTimeout(this.cache.ttl);\n        }\n        this.cache.ttl = <any>setTimeout(() => this.setHasCache(false), ttlConfig);\n      }\n    }\n  }\n\n  /**\n   *\n   * Sometimes we need to access the store value from a store\n   *\n   * @example middleware\n   *\n   */\n  getValue() {\n    return this.storeValue;\n  }\n\n  /**\n   *  Set the error state\n   *\n   *  @example\n   *\n   *  store.setError({text: 'unable to load data' })\n   *\n   */\n  setError<T>(error: T) {\n    if (error !== (this._value() as S & { error: any }).error) {\n      isDev() && setAction('Set Error');\n      this._setState(state => ({ ...state, error } as S & { error: any }));\n    }\n  }\n\n  // @internal\n  _select<R>(project: (store: S) => R): Observable<R> {\n    return this.store.asObservable().pipe(\n      map(project),\n      distinctUntilChanged()\n    );\n  }\n\n  // @internal\n  _value(): S {\n    return this.storeValue;\n  }\n\n  // @internal\n  _cache(): BehaviorSubject<boolean> {\n    return this.cache.active;\n  }\n\n  // @internal\n  get config(): StoreConfigOptions {\n    return this.constructor[configKey] || {};\n  }\n\n  // @internal\n  get storeName() {\n    return (this.config as StoreConfigOptions & { storeName: string }).storeName || (this.options as StoreConfigOptions & { storeName: string }).storeName || this.options.name;\n  }\n\n  // @internal\n  get deepFreeze() {\n    return this.config.deepFreezeFn || this.options.deepFreezeFn || deepFreeze;\n  }\n\n  // @internal\n  get cacheConfig() {\n    return this.config.cache || this.options.cache;\n  }\n\n  get _producerFn() {\n    return this.config.producerFn || this.options.producerFn || getGlobalProducerFn();\n  }\n\n  // @internal\n  get resettable() {\n    return isDefined(this.config.resettable) ? this.config.resettable : this.options.resettable;\n  }\n\n  // @internal\n  _setState(newState: ((state: Readonly<S>) => S) | S, _dispatchAction = true) {\n    if (isFunction(newState)) {\n      const _newState = newState(this._value());\n      this.storeValue = __DEV__ ? this.deepFreeze(_newState) : _newState;\n    } else {\n      this.storeValue = newState;\n    }\n\n    if (!this.store) {\n      this.store = new BehaviorSubject(this.storeValue);\n      return;\n    }\n\n    if (isTransactionInProcess()) {\n      this.handleTransaction();\n      return;\n    }\n\n    this.dispatch(this.storeValue, _dispatchAction);\n  }\n\n  /**\n   *\n   * Reset the current store back to the initial value\n   *\n   * @example\n   *\n   * store.reset()\n   *\n   */\n  reset() {\n    if (this.isResettable()) {\n      isDev() && setAction('Reset');\n      this._setState(() => Object.assign({}, this._initialState));\n      this.setHasCache(false);\n    } else {\n      isDev() && console.warn(`You need to enable the reset functionality`);\n    }\n  }\n\n  /**\n   *\n   * Update the store's value\n   *\n   * @example\n   *\n   * this.store.update(state => {\n   *   return {...}\n   * })\n   */\n  update(stateCallback: UpdateStateCallback<S>);\n  /**\n   *\n   * @example\n   *\n   *  this.store.update({ token: token })\n   */\n  update(state: Partial<S>);\n  update(stateOrCallback: Partial<S> | UpdateStateCallback<S>) {\n    isDev() && setAction('Update');\n\n    let newState;\n    const currentState = this._value();\n    if (isFunction(stateOrCallback)) {\n      newState = isFunction(this._producerFn) ? this._producerFn(currentState, stateOrCallback) : stateOrCallback(currentState);\n    } else {\n      newState = stateOrCallback;\n    }\n\n    const withHook = this.akitaPreUpdate(currentState, { ...currentState, ...newState } as S);\n    const resolved = isPlainObject(currentState) ? withHook : new (currentState as any).constructor(withHook);\n    this._setState(resolved);\n  }\n\n  updateStoreConfig(newOptions: UpdatableStoreConfigOptions) {\n    this.options = { ...this.options, ...newOptions };\n  }\n\n  // @internal\n  akitaPreUpdate(_: Readonly<S>, nextState: Readonly<S>): S {\n    return nextState;\n  }\n\n  ngOnDestroy() {\n    this.destroy();\n  }\n\n  /**\n   *\n   * Destroy the store\n   *\n   * @example\n   *\n   * store.destroy()\n   *\n   */\n  destroy() {\n    const hmrEnabled = isBrowser ? (window as any).hmrEnabled : false;\n    if (!hmrEnabled && this === __stores__[this.storeName]) {\n      delete __stores__[this.storeName];\n      dispatchDeleted(this.storeName);\n      this.setHasCache(false);\n      this.cache.active.complete();\n    }\n  }\n\n  private onInit(initialState: S) {\n    __stores__[this.storeName] = this;\n    this._setState(() => initialState);\n    dispatchAdded(this.storeName);\n    if (this.isResettable()) {\n      this._initialState = initialState;\n    }\n    isDev() && assertStoreHasName(this.storeName, this.constructor.name);\n  }\n\n  private dispatch(state: S, _dispatchAction = true) {\n    this.store.next(state);\n    if (_dispatchAction) {\n      dispatchUpdate(this.storeName);\n      resetCustomAction();\n    }\n  }\n\n  private watchTransaction() {\n    commit().subscribe(() => {\n      this.inTransaction = false;\n      this.dispatch(this._value());\n    });\n  }\n\n  private isResettable() {\n    if (this.resettable === false) {\n      return false;\n    }\n    return this.resettable || getAkitaConfig().resettable;\n  }\n\n  private handleTransaction() {\n    if (!this.inTransaction) {\n      this.watchTransaction();\n      this.inTransaction = true;\n    }\n  }\n\n  private getCacheTTL() {\n    return (this.cacheConfig && this.cacheConfig.ttl) || getAkitaConfig().ttl;\n  }\n}\n","// @internal\nexport function isObject(value: any) {\n  const type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n","import { ID, IDS } from './types';\nimport { isNil } from './isNil';\nimport { isObject } from './isObject';\nimport { isArray } from './isArray';\n\nexport type SetActiveOptions = { prev?: boolean; next?: boolean; wrap?: boolean };\n\n// @internal\nexport function getActiveEntities(idOrOptions: IDS | SetActiveOptions | null, ids: ID[], currentActive: IDS | null) {\n  let result;\n\n  if (isArray(idOrOptions)) {\n    result = idOrOptions;\n  } else {\n    if (isObject(idOrOptions)) {\n      if (isNil(currentActive)) return;\n      (idOrOptions as SetActiveOptions) = Object.assign({ wrap: true }, idOrOptions);\n      const currentIdIndex = ids.indexOf(currentActive as ID);\n      if ((idOrOptions as SetActiveOptions).prev) {\n        const isFirst = currentIdIndex === 0;\n        if (isFirst && !(idOrOptions as SetActiveOptions).wrap) return;\n        result = isFirst ? ids[ids.length - 1] : (ids[currentIdIndex - 1] as any);\n      } else if ((idOrOptions as SetActiveOptions).next) {\n        const isLast = ids.length === currentIdIndex + 1;\n        if (isLast && !(idOrOptions as SetActiveOptions).wrap) return;\n        result = isLast ? ids[0] : (ids[currentIdIndex + 1] as any);\n      }\n    } else {\n      if (idOrOptions === currentActive) return;\n      result = idOrOptions as ID;\n    }\n  }\n\n  return result;\n}\n","import { EntityState, PreAddEntity } from './types';\nimport { hasEntity } from './hasEntity';\n\nexport type AddEntitiesParams<State, Entity> = {\n  state: State;\n  entities: Entity[];\n  idKey: string;\n  options: AddEntitiesOptions;\n  preAddEntity: PreAddEntity<Entity>;\n};\n\nexport type AddEntitiesOptions = { prepend?: boolean; loading?: boolean };\n\n// @internal\nexport function addEntities<S extends EntityState<E>, E>({ state, entities, idKey, options = {}, preAddEntity }: AddEntitiesParams<S, E>) {\n  let newEntities = {};\n  let newIds = [];\n  let hasNewEntities = false;\n\n  for (const entity of entities) {\n    if (hasEntity(state.entities, entity[idKey]) === false) {\n      // evaluate the middleware first to support dynamic ids\n      const current = preAddEntity(entity);\n      const entityId = current[idKey];\n      newEntities[entityId] = current;\n      if (options.prepend) newIds.unshift(entityId);\n      else newIds.push(entityId);\n\n      hasNewEntities = true;\n    }\n  }\n\n  return hasNewEntities\n    ? {\n        newState: {\n          ...state,\n          entities: {\n            ...state.entities,\n            ...newEntities\n          },\n          ids: options.prepend ? [...newIds, ...state.ids] : [...state.ids, ...newIds]\n        },\n        newIds\n      }\n    : null;\n}\n","import { isNil } from './isNil';\n\n// @internal\nexport function coerceArray<T>(value: T | T[]): T[] {\n  if (isNil(value)) {\n    return [];\n  }\n  return Array.isArray(value) ? value : [value];\n}\n","import { EntityState, ID, StateWithActive } from './types';\nimport { isNil } from './isNil';\nimport { hasActiveState, isMultiActiveState, resolveActiveEntity } from './activeState';\n\nexport type RemoveEntitiesParams<State, Entity> = {\n  state: StateWithActive<State>;\n  ids: any[];\n};\n\n// @internal\nexport function removeEntities<S extends EntityState<E>, E>({ state, ids }: RemoveEntitiesParams<S, E>): S {\n  if (isNil(ids)) return removeAllEntities(state);\n  const entities = state.entities;\n  let newEntities = {};\n\n  for (const id of state.ids) {\n    if (ids.includes(id) === false) {\n      newEntities[id] = entities[id];\n    }\n  }\n\n  const newState = {\n    ...state,\n    entities: newEntities,\n    ids: state.ids.filter(current => ids.includes(current) === false)\n  };\n\n  if (hasActiveState(state)) {\n    newState.active = resolveActiveEntity(newState);\n  }\n\n  return newState;\n}\n\n// @internal\nexport function removeAllEntities<S>(state: StateWithActive<S>): S {\n  return {\n    ...state,\n    entities: {},\n    ids: [],\n    active: isMultiActiveState(state.active) ? [] : null\n  };\n}\n","import { EntityState } from './index';\n\n// @internal\nexport const getInitialEntitiesState = () =>\n  ({\n    entities: {},\n    ids: [],\n    loading: true,\n    error: null\n  } as EntityState);\n","import { EntityState, ID, PreUpdateEntity, UpdateStateCallback } from './types';\nimport { isFunction } from './isFunction';\nimport { hasEntity } from './hasEntity';\nimport { isPlainObject } from './isPlainObject';\n\nexport type UpdateEntitiesParams<State, Entity> = {\n  state: State;\n  ids: any[];\n  idKey: string;\n  newStateOrFn: UpdateStateCallback<Entity> | Partial<Entity> | Partial<State>;\n  preUpdateEntity: PreUpdateEntity<Entity>;\n  producerFn;\n};\n\n// @internal\nexport function updateEntities<S extends EntityState<E>, E>({ state, ids, idKey, newStateOrFn, preUpdateEntity, producerFn }: UpdateEntitiesParams<S, E>) {\n  const updatedEntities = {};\n\n  let isUpdatingIdKey = false;\n  let idToUpdate: ID;\n\n  for (const id of ids) {\n    // if the entity doesn't exist don't do anything\n    if (hasEntity(state.entities, id) === false) {\n      continue;\n    }\n\n    const oldEntity = state.entities[id];\n    let newState;\n    if (isFunction(newStateOrFn)) {\n      newState = isFunction(producerFn) ? producerFn(oldEntity, newStateOrFn) : newStateOrFn(oldEntity);\n    } else {\n      newState = newStateOrFn;\n    }\n\n    const isIdChanged = newState.hasOwnProperty(idKey) && newState[idKey] !== oldEntity[idKey];\n    let newEntity: E;\n    idToUpdate = id;\n\n    if (isIdChanged) {\n      isUpdatingIdKey = true;\n      idToUpdate = newState[idKey];\n    }\n\n    const merged = {\n      ...oldEntity,\n      ...newState\n    };\n\n    if (isPlainObject(oldEntity)) {\n      newEntity = merged;\n    } else {\n      /**\n       * In case that new state is class of it's own, there's\n       * a possibility that it will be different than the old\n       * class.\n       * For example, Old state is an instance of animal class\n       * and new state is instance of person class.\n       * To avoid run over new person class with the old animal\n       * class we check if the new state is a class of it's own.\n       * If so, use it. Otherwise, use the old state class\n       */\n      if (isPlainObject(newState)) {\n        newEntity = new (oldEntity as any).constructor(merged);\n      } else {\n        newEntity = new (newState as any).constructor(merged);\n      }\n    }\n\n    updatedEntities[idToUpdate] = preUpdateEntity(oldEntity, newEntity);\n  }\n\n  let updatedIds = state.ids;\n  let stateEntities = state.entities;\n\n  if (isUpdatingIdKey) {\n    const [id] = ids;\n    const { [id]: deletedEntity, ...rest } = state.entities;\n    stateEntities = rest;\n    updatedIds = state.ids.map(current => (current === id ? idToUpdate : current));\n  }\n\n  return {\n    ...state,\n    entities: {\n      ...stateEntities,\n      ...updatedEntities\n    },\n    ids: updatedIds\n  };\n}\n","// @internal\nexport function isUndefined(value: any): value is undefined {\n  return value === undefined;\n}\n","export enum EntityActions {\n  Set,\n  Add,\n  Update,\n  Remove\n}\n\nexport interface EntityAction<IDType> {\n  type: EntityActions;\n  ids: IDType[];\n}\n","export const DEFAULT_ID_KEY = 'id';\n","import { isEmpty } from './isEmpty';\nimport { SetEntities, setEntities } from './setEntities';\nimport { Store } from './store';\nimport { Constructor, EntityState, EntityUICreateFn, ID, IDS, OrArray, StateWithActive, UpdateEntityPredicate, UpdateStateCallback, getEntityType, getIDType } from './types';\nimport { getActiveEntities, SetActiveOptions } from './getActiveEntities';\nimport { addEntities, AddEntitiesOptions } from './addEntities';\nimport { coerceArray } from './coerceArray';\nimport { removeEntities } from './removeEntities';\nimport { getInitialEntitiesState } from './getInitialEntitiesState';\nimport { isDefined } from './isDefined';\nimport { updateEntities } from './updateEntities';\nimport { transaction } from './transaction';\nimport { isNil } from './isNil';\nimport { isFunction } from './isFunction';\nimport { isUndefined } from './isUndefined';\nimport { StoreConfigOptions } from './storeConfig';\nimport { logAction, setAction } from './actions';\nimport { isDev } from './env';\nimport { hasEntity } from './hasEntity';\nimport { Observable, Subject } from 'rxjs';\nimport { EntityAction, EntityActions } from './entityActions';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\n\n/**\n *\n * Store for managing a collection of entities\n *\n * @example\n *\n * export interface WidgetsState extends EntityState<Widget> { }\n *\n * @StoreConfig({ name: 'widgets' })\n *  export class WidgetsStore extends EntityStore<WidgetsState> {\n *   constructor() {\n *     super();\n *   }\n * }\n *\n *\n */\nexport class EntityStore<S extends EntityState = any, EntityType = getEntityType<S>, IDType = getIDType<S>> extends Store<S> {\n  ui: EntityUIStore<any, EntityType>;\n  private entityActions = new Subject<EntityAction<IDType>>();\n\n  constructor(initialState: Partial<S> = {}, protected options: Partial<StoreConfigOptions> = {}) {\n    super({ ...getInitialEntitiesState(), ...initialState }, options);\n  }\n\n  // @internal\n  get selectEntityAction$(): Observable<EntityAction<IDType>> {\n    return this.entityActions.asObservable();\n  }\n\n  // @internal\n  get idKey() {\n    return (this.config as StoreConfigOptions).idKey || this.options.idKey || DEFAULT_ID_KEY;\n  }\n\n  /**\n   *\n   * Replace current collection with provided collection\n   *\n   * @example\n   *\n   * this.store.set([Entity, Entity])\n   * this.store.set({ids: [], entities: {}})\n   * this.store.set({ 1: {}, 2: {}})\n   *\n   */\n  set(entities: SetEntities<EntityType>) {\n    if (isNil(entities)) return;\n\n    isDev() && setAction('Set Entity');\n\n    const isNativePreAdd = this.akitaPreAddEntity === EntityStore.prototype.akitaPreAddEntity;\n    this._setState(state =>\n      setEntities({\n        state,\n        entities,\n        idKey: this.idKey,\n        preAddEntity: this.akitaPreAddEntity,\n        isNativePreAdd\n      })\n    );\n\n    this.setHasCache(true, { restartTTL: true });\n\n    if (this.hasInitialUIState()) {\n      this.handleUICreation();\n    }\n\n    this.entityActions.next({ type: EntityActions.Set, ids: this.ids });\n  }\n\n  /**\n   * Add entities\n   *\n   * @example\n   *\n   * this.store.add([Entity, Entity])\n   * this.store.add(Entity)\n   * this.store.add(Entity, { prepend: true })\n   *\n   * this.store.add(Entity, { loading: false })\n   */\n  add(entities: OrArray<EntityType>, options: AddEntitiesOptions = { loading: false }) {\n    const collection = coerceArray(entities);\n\n    if (isEmpty(collection)) return;\n\n    const data = addEntities({\n      state: this._value(),\n      preAddEntity: this.akitaPreAddEntity,\n      entities: collection,\n      idKey: this.idKey,\n      options\n    });\n\n    if (data) {\n      isDev() && setAction('Add Entity');\n      data.newState.loading = options.loading;\n\n      this._setState(() => data.newState);\n\n      if (this.hasInitialUIState()) {\n        this.handleUICreation(true);\n      }\n\n      this.entityActions.next({ type: EntityActions.Add, ids: data.newIds });\n    }\n  }\n\n  /**\n   *\n   * Update entities\n   *\n   * @example\n   *\n   * store.update(1, entity => ...)\n   * store.update([1, 2, 3], entity => ...)\n   * store.update(null, entity => ...)\n   */\n  update(id: OrArray<IDType> | null, newStateFn: UpdateStateCallback<EntityType>);\n  /**\n   * store.update(1, { name: newName })\n   */\n  update(id: OrArray<IDType> | null, newState: Partial<EntityType>);\n  /**\n   * store.update(entity => entity.price > 3, entity => ({ name: newName }))\n   */\n  update(predicate: UpdateEntityPredicate<EntityType>, newStateFn: UpdateStateCallback<EntityType>);\n  /**\n   * store.update(entity => entity.price > 3, { name: newName })\n   */\n  update(predicate: UpdateEntityPredicate<EntityType>, newState: Partial<EntityType>);\n  /** Support non-entity updates */\n  update(newState: UpdateStateCallback<S>);\n  update(newState: Partial<S>);\n  update(\n    idsOrFnOrState: OrArray<IDType> | null | Partial<S> | UpdateStateCallback<S> | UpdateEntityPredicate<EntityType>,\n    newStateOrFn?: UpdateStateCallback<EntityType> | Partial<EntityType> | Partial<S>\n  ) {\n    if (isUndefined(newStateOrFn)) {\n      super.update(idsOrFnOrState as Partial<S>);\n      return;\n    }\n    let ids: IDType[] = [];\n\n    if (isFunction(idsOrFnOrState)) {\n      // We need to filter according the predicate function\n      ids = this.ids.filter(id => (idsOrFnOrState as UpdateEntityPredicate<EntityType>)(this.entities[id]));\n    } else {\n      // If it's nil we want all of them\n      ids = isNil(idsOrFnOrState) ? this.ids : coerceArray(idsOrFnOrState as OrArray<IDType>);\n    }\n\n    if (isEmpty(ids)) return;\n\n    isDev() && setAction('Update Entity', ids);\n    this._setState(state =>\n      updateEntities({\n        idKey: this.idKey,\n        ids,\n        preUpdateEntity: this.akitaPreUpdateEntity,\n        state,\n        newStateOrFn,\n        producerFn: this._producerFn\n      })\n    );\n\n    this.entityActions.next({ type: EntityActions.Update, ids });\n  }\n\n  /**\n   *\n   * Create or update\n   *\n   * @example\n   *\n   * store.upsert(1, { active: true })\n   * store.upsert([2, 3], { active: true })\n   * store.upsert([2, 3], entity => ({ isOpen: !entity.isOpen}))\n   *\n   */\n  @transaction()\n  upsert(ids: OrArray<IDType>, newState: Partial<EntityType> | EntityType | UpdateStateCallback<EntityType> | EntityType[], options: { baseClass?: Constructor } = {}) {\n    const toArray = coerceArray(ids);\n    const predicate = isUpdate => id => hasEntity(this.entities, id) === isUpdate;\n    const isClassBased = isFunction(options.baseClass);\n    const updateIds = toArray.filter(predicate(true));\n    const newEntities = toArray.filter(predicate(false)).map(id => {\n      let entity = isFunction(newState) ? newState({} as EntityType) : newState;\n      const withId = { ...(entity as EntityType), [this.idKey]: id };\n      if (isClassBased) {\n        return new options.baseClass(withId);\n      }\n      return withId;\n    });\n\n    // it can be any of the three types\n    this.update(updateIds as any, newState as any);\n    this.add(newEntities);\n    isDev() && logAction('Upsert Entity');\n  }\n\n  /**\n   *\n   * Upsert entity collection (idKey must be present)\n   *\n   * @example\n   *\n   * store.upsertMany([ { id: 1 }, { id: 2 }]);\n   *\n   * store.upsertMany([ { id: 1 }, { id: 2 }], { loading: true  });\n   * store.upsertMany([ { id: 1 }, { id: 2 }], { baseClass: Todo  });\n   *\n   */\n  upsertMany(entities: EntityType[], options: { baseClass?: Constructor; loading?: boolean } = {}) {\n    const addedIds = [];\n    const updatedIds = [];\n    const updatedEntities = {};\n\n    // Update the state directly to optimize performance\n    for (const entity of entities) {\n      const withPreCheckHook = this.akitaPreCheckEntity(entity);\n      const id = withPreCheckHook[this.idKey];\n      if (hasEntity(this.entities, id)) {\n        const prev = this._value().entities[id];\n        const merged = { ...this._value().entities[id], ...withPreCheckHook };\n        const next = options.baseClass ? new options.baseClass(merged) : merged;\n        const withHook = this.akitaPreUpdateEntity(prev, next);\n        const nextId = withHook[this.idKey];\n        updatedEntities[nextId] = withHook;\n        updatedIds.push(nextId);\n      } else {\n        const newEntity = options.baseClass ? new options.baseClass(withPreCheckHook) : withPreCheckHook;\n        const withHook = this.akitaPreAddEntity(newEntity);\n        const nextId = withHook[this.idKey];\n        addedIds.push(nextId);\n        updatedEntities[nextId] = withHook;\n      }\n    }\n\n    isDev() && logAction('Upsert Many');\n\n    this._setState(state => ({\n      ...state,\n      ids: addedIds.length ? [...state.ids, ...addedIds] : state.ids,\n      entities: {\n        ...state.entities,\n        ...updatedEntities\n      },\n      loading: !!options.loading\n    }));\n\n    updatedIds.length && this.entityActions.next({ type: EntityActions.Update, ids: updatedIds });\n    addedIds.length && this.entityActions.next({ type: EntityActions.Add, ids: addedIds });\n    if (addedIds.length && this.hasUIStore()) {\n      this.handleUICreation(true);\n    }\n  }\n\n  /**\n   *\n   * Replace one or more entities (except the id property)\n   *\n   *\n   * @example\n   *\n   * this.store.replace(5, newEntity)\n   * this.store.replace([1,2,3], newEntity)\n   */\n  replace(ids: IDS, newState: Partial<EntityType>) {\n    const toArray = coerceArray(ids);\n    if (isEmpty(toArray)) return;\n    let replaced = {};\n    for (const id of toArray) {\n      newState[this.idKey] = id;\n      replaced[id] = newState;\n    }\n    isDev() && setAction('Replace Entity', ids);\n    this._setState(state => ({\n      ...state,\n      entities: {\n        ...state.entities,\n        ...replaced\n      }\n    }));\n  }\n\n  /**\n   *\n   * Move entity inside the collection\n   *\n   *\n   * @example\n   *\n   * this.store.move(fromIndex, toIndex)\n   */\n  move(from: number, to: number) {\n    const ids = this.ids.slice();\n    ids.splice(to < 0 ? ids.length + to : to, 0, ids.splice(from, 1)[0]);\n\n    isDev() && setAction('Move Entity');\n    this._setState(state => ({\n      ...state,\n      // Change the entities reference so that selectAll emit\n      entities: {\n        ...state.entities\n      },\n      ids\n    }));\n  }\n\n  /**\n   *\n   * Remove one or more entities\n   *\n   * @example\n   *\n   * this.store.remove(5)\n   * this.store.remove([1,2,3])\n   * this.store.remove()\n   */\n  remove(id?: OrArray<IDType>);\n  /**\n   * this.store.remove(entity => entity.id === 1)\n   */\n  remove(predicate: (entity: Readonly<EntityType>) => boolean);\n  remove(idsOrFn?: OrArray<IDType> | ((entity: Readonly<EntityType>) => boolean)) {\n    if (isEmpty(this.ids)) return;\n\n    const idPassed = isDefined(idsOrFn);\n\n    // null means remove all\n    let ids: IDType[] | null = [];\n\n    if (isFunction(idsOrFn)) {\n      ids = this.ids.filter(entityId => idsOrFn(this.entities[entityId]));\n    } else {\n      ids = idPassed ? coerceArray(idsOrFn) : null;\n    }\n\n    if (isEmpty(ids)) return;\n\n    isDev() && setAction('Remove Entity', ids);\n    this._setState((state: StateWithActive<S>) => removeEntities({ state, ids }));\n    if (ids === null) {\n      this.setHasCache(false);\n    }\n\n    this.handleUIRemove(ids);\n    this.entityActions.next({ type: EntityActions.Remove, ids });\n  }\n\n  /**\n   *\n   * Update the active entity\n   *\n   * @example\n   *\n   * this.store.updateActive({ completed: true })\n   * this.store.updateActive(active => {\n   *   return {\n   *     config: {\n   *      ..active.config,\n   *      date\n   *     }\n   *   }\n   * })\n   */\n  updateActive(newStateOrCallback: UpdateStateCallback<EntityType> | Partial<EntityType>) {\n    const ids = coerceArray(this.active);\n    isDev() && setAction('Update Active', ids);\n    this.update(ids, newStateOrCallback as Partial<EntityType>);\n  }\n\n  /**\n   * Set the given entity as active\n   *\n   * @example\n   *\n   * store.setActive(1)\n   * store.setActive([1, 2, 3])\n   */\n  setActive(idOrOptions: S['active'] extends any[] ? S['active'] : (SetActiveOptions | S['active']));\n  setActive(idOrOptions: IDType | SetActiveOptions | null) {\n    const active = getActiveEntities(idOrOptions, this.ids, this.active);\n\n    if (active === undefined) {\n      return;\n    }\n\n    isDev() && setAction('Set Active', active);\n    this._setActive(active);\n  }\n\n  /**\n   * Add active entities\n   *\n   * @example\n   *\n   * store.addActive(2);\n   * store.addActive([3, 4, 5]);\n   */\n  addActive<T = OrArray<IDType>>(ids: T) {\n    const toArray = coerceArray(ids);\n    if (isEmpty(toArray)) return;\n    const everyExist = toArray.every(id => this.active.indexOf(id) > -1);\n    if (everyExist) return;\n\n    isDev() && setAction('Add Active', ids);\n    this._setState(state => {\n      /** Protect against case that one of the items in the array exist */\n      const uniques = Array.from(new Set([...(state.active as IDType[]), ...toArray]));\n      return {\n        ...state,\n        active: uniques\n      };\n    });\n  }\n\n  /**\n   * Remove active entities\n   *\n   * @example\n   *\n   * store.removeActive(2)\n   * store.removeActive([3, 4, 5])\n   */\n  removeActive<T = OrArray<IDType>>(ids: T) {\n    const toArray = coerceArray(ids);\n    if (isEmpty(toArray)) return;\n    const someExist = toArray.some(id => this.active.indexOf(id) > -1);\n    if (!someExist) return;\n\n    isDev() && setAction('Remove Active', ids);\n    this._setState(state => {\n      return {\n        ...state,\n        active: Array.isArray(state.active) ? state.active.filter(currentId => toArray.indexOf(currentId) === -1) : null\n      };\n    });\n  }\n\n  /**\n   * Toggle active entities\n   *\n   * @example\n   *\n   * store.toggle(2)\n   * store.toggle([3, 4, 5])\n   */\n  @transaction()\n  toggleActive<T = OrArray<IDType>>(ids: T) {\n    const toArray = coerceArray(ids);\n    const filterExists = remove => id => this.active.includes(id) === remove;\n    const remove = toArray.filter(filterExists(true));\n    const add = toArray.filter(filterExists(false));\n    this.removeActive(remove);\n    this.addActive(add);\n    isDev() && logAction('Toggle Active');\n  }\n\n  /**\n   *\n   * Create sub UI store for managing Entity's UI state\n   *\n   * @example\n   *\n   * export type ProductUI = {\n   *   isLoading: boolean;\n   *   isOpen: boolean\n   * }\n   *\n   * interface ProductsUIState extends EntityState<ProductUI> {}\n   *\n   * export class ProductsStore EntityStore<ProductsState, Product> {\n   *   ui: EntityUIStore<ProductsUIState, ProductUI>;\n   *\n   *   constructor() {\n   *     super();\n   *     this.createUIStore();\n   *   }\n   *\n   * }\n   */\n  createUIStore(initialState = {}, storeConfig: Partial<StoreConfigOptions> = {}) {\n    const defaults: Partial<StoreConfigOptions> = { name: `UI/${this.storeName}`, idKey: this.idKey };\n    this.ui = new EntityUIStore(initialState, { ...defaults, ...storeConfig });\n    return this.ui;\n  }\n\n  // @internal\n  destroy() {\n    super.destroy();\n    if (this.ui instanceof EntityStore) {\n      this.ui.destroy();\n    }\n    this.entityActions.complete();\n  }\n\n  // @internal\n  akitaPreUpdateEntity(_: Readonly<EntityType>, nextEntity: any): EntityType {\n    return nextEntity as EntityType;\n  }\n\n  // @internal\n  akitaPreAddEntity(newEntity: any): EntityType {\n    return newEntity as EntityType;\n  }\n\n  // @internal\n  akitaPreCheckEntity(newEntity: Readonly<EntityType>): EntityType {\n    return newEntity;\n  }\n\n  private get ids() {\n    return this._value().ids;\n  }\n\n  private get entities() {\n    return this._value().entities;\n  }\n\n  private get active() {\n    return this._value().active;\n  }\n\n  private _setActive(ids: OrArray<IDType>) {\n    this._setState(state => {\n      return {\n        ...state,\n        active: ids\n      };\n    });\n  }\n\n  private handleUICreation(add = false) {\n    const ids = this.ids;\n    const isFunc = isFunction(this.ui._akitaCreateEntityFn);\n    let uiEntities;\n    const createFn = id => {\n      const current = this.entities[id];\n      const ui = isFunc ? this.ui._akitaCreateEntityFn(current) : this.ui._akitaCreateEntityFn;\n      return {\n        [this.idKey]: current[this.idKey],\n        ...ui\n      };\n    };\n\n    if (add) {\n      uiEntities = this.ids.filter(id => isUndefined(this.ui.entities[id])).map(createFn);\n    } else {\n      uiEntities = ids.map(createFn);\n    }\n\n    add ? this.ui.add(uiEntities) : this.ui.set(uiEntities);\n  }\n\n  private hasInitialUIState() {\n    return this.hasUIStore() && isUndefined(this.ui._akitaCreateEntityFn) === false;\n  }\n\n  private handleUIRemove(ids: IDType[]) {\n    if (this.hasUIStore()) {\n      this.ui.remove(ids);\n    }\n  }\n\n  private hasUIStore() {\n    return this.ui instanceof EntityUIStore;\n  }\n}\n\n// @internal\nexport class EntityUIStore<UIState, DEPRECATED = any> extends EntityStore<UIState> {\n  _akitaCreateEntityFn: EntityUICreateFn;\n\n  constructor(initialState = {}, storeConfig: Partial<StoreConfigOptions> = {}) {\n    super(initialState, storeConfig);\n  }\n\n  /**\n   *\n   * Set the initial UI entity state. This function will determine the entity's\n   * initial state when we call `set()` or `add()`.\n   *\n   * @example\n   *\n   * constructor() {\n   *   super();\n   *   this.createUIStore().setInitialEntityState(entity => ({ isLoading: false, isOpen: true }));\n   *   this.createUIStore().setInitialEntityState({ isLoading: false, isOpen: true });\n   * }\n   *\n   */\n  setInitialEntityState<EntityUI = any, Entity = any>(createFn: EntityUICreateFn<EntityUI, Entity>) {\n    this._akitaCreateEntityFn = createFn;\n  }\n}\n","import { ID, IDS, ItemPredicate } from './types';\nimport { coerceArray } from './coerceArray';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { MonoTypeOperatorFunction, Observable } from 'rxjs';\nimport { isArray } from './isArray';\nimport { isFunction } from './isFunction';\nimport { isEmpty } from './isEmpty';\n\n// @internal\nexport function find<T>(collection: T[], idsOrPredicate: IDS | ItemPredicate, idKey: string) {\n  const result = [];\n  if (isFunction(idsOrPredicate)) {\n    for (const entity of collection) {\n      if (idsOrPredicate(entity) === true) {\n        result.push(entity);\n      }\n    }\n  } else {\n    const toSet = coerceArray(idsOrPredicate).reduce((acc, current) => acc.add(current), new Set());\n\n    for (const entity of collection) {\n      if (toSet.has(entity[idKey])) {\n        result.push(entity);\n      }\n    }\n  }\n\n  return result;\n}\n\n// @internal\nexport function distinctUntilArrayItemChanged<T>(): MonoTypeOperatorFunction<T[]> {\n  return distinctUntilChanged((prevCollection: T[], currentCollection: T[]) => {\n    if (prevCollection === currentCollection) {\n      return true;\n    }\n\n    if (isArray(prevCollection) === false || isArray(currentCollection) === false) {\n      return false;\n    }\n\n    if (isEmpty(prevCollection) && isEmpty(currentCollection)) {\n      return true;\n    }\n\n    // if item is new in the current collection but not exist in the prev collection\n    const hasNewItem = hasChange(currentCollection, prevCollection);\n\n    if (hasNewItem) {\n      return false;\n    }\n\n    const isOneOfItemReferenceChanged = hasChange(prevCollection, currentCollection);\n\n    // return false means there is a change and we want to call next()\n    return isOneOfItemReferenceChanged === false;\n  });\n}\n\n// @internal\nfunction hasChange<T>(first: T[], second: T[]) {\n  const hasChange = second.some(currentItem => {\n    const oldItem = first.find(prevItem => prevItem === currentItem);\n    return oldItem === undefined;\n  });\n\n  return hasChange;\n}\n\n/**\n * Find items in a collection\n *\n * @example\n *\n *  selectEntity(1, 'comments').pipe(\n *   arrayFind(comment => comment.text = 'text')\n * )\n */\nexport function arrayFind<T>(ids: ItemPredicate<T>, idKey?: never): (source: Observable<T[]>) => Observable<T[]>;\n/**\n * @example\n *\n * selectEntity(1, 'comments').pipe(\n *   arrayFind(3)\n * )\n */\nexport function arrayFind<T>(ids: ID, idKey?: string): (source: Observable<T[]>) => Observable<T>;\n/**\n * @example\n *\n * selectEntity(1, 'comments').pipe(\n *   arrayFind([1, 2, 3])\n * )\n */\nexport function arrayFind<T>(ids: ID[], idKey?: string): (source: Observable<T[]>) => Observable<T[]>;\nexport function arrayFind<T>(idsOrPredicate: ID[] | ID | ItemPredicate<T>, idKey?: string): (source: Observable<T[]>) => Observable<T[] | T> {\n  return function(source: Observable<T[]>) {\n    return source.pipe(\n      map((collection: T[] | undefined | null) => {\n        // which means the user deleted the root entity or set the collection to nil\n        if (isArray(collection) === false) {\n          return collection;\n        }\n        return find(collection, idsOrPredicate, idKey || DEFAULT_ID_KEY);\n      }),\n      distinctUntilArrayItemChanged(),\n      map(value => {\n        if (isArray(value) === false) {\n          return value;\n        }\n\n        if (isArray(idsOrPredicate) || isFunction(idsOrPredicate)) {\n          return value;\n        }\n\n        return value[0];\n      })\n    );\n  };\n}\n","export enum Order {\n  ASC = 'asc',\n  DESC = 'desc'\n}\n\n// @internal\nexport function compareValues(key, order: Order = Order.ASC) {\n  return function(a, b) {\n    if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n      return 0;\n    }\n\n    const varA = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key];\n    const varB = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key];\n\n    let comparison = 0;\n    if (varA > varB) {\n      comparison = 1;\n    } else if (varA < varB) {\n      comparison = -1;\n    }\n    return order == Order.DESC ? comparison * -1 : comparison;\n  };\n}\n","import { EntityState, SelectOptions } from './types';\nimport { isFunction } from './isFunction';\nimport { compareValues } from './sort';\nimport { coerceArray } from './coerceArray';\n\n// @internal\nexport function entitiesToArray<E, S extends EntityState>(state: S, options: SelectOptions<E>): E[] {\n  let arr = [];\n  const { ids, entities } = state;\n  const { filterBy, limitTo, sortBy, sortByOrder } = options;\n\n  for (let i = 0; i < ids.length; i++) {\n    const entity = entities[ids[i]];\n    if (!filterBy) {\n      arr.push(entity);\n      continue;\n    }\n\n    const toArray = coerceArray(filterBy);\n    const allPass = toArray.every(fn => fn(entity, i));\n    if (allPass) {\n      arr.push(entity);\n    }\n  }\n\n  if (sortBy) {\n    let _sortBy: any = isFunction(sortBy) ? sortBy : compareValues(sortBy, sortByOrder);\n    arr = arr.sort((a, b) => _sortBy(a, b, state));\n  }\n\n  const length = Math.min(limitTo || arr.length, arr.length);\n\n  return length === arr.length ? arr : arr.slice(0, length);\n}\n","import { EntityState } from './types';\nimport { isNil } from './isNil';\nimport { coerceArray } from './coerceArray';\n\n// @internal\nexport function entitiesToMap<S extends EntityState<E>, E>(state: S, options) {\n  const map = {};\n  const { filterBy, limitTo } = options;\n  const { ids, entities } = state;\n\n  if (!filterBy && !limitTo) {\n    return entities;\n  }\n  const hasLimit = isNil(limitTo) === false;\n\n  if (filterBy && hasLimit) {\n    let count = 0;\n    for (let i = 0, length = ids.length; i < length; i++) {\n      if (count === limitTo) break;\n      const id = ids[i];\n      const entity = entities[id];\n      const allPass = coerceArray(filterBy).every(fn => fn(entity, i));\n      if (allPass) {\n        map[id] = entity;\n        count++;\n      }\n    }\n  } else {\n    const finalLength = Math.min(limitTo || ids.length, ids.length);\n\n    for (let i = 0; i < finalLength; i++) {\n      const id = ids[i];\n      const entity = entities[id];\n\n      if (!filterBy) {\n        map[id] = entity;\n        continue;\n      }\n\n      const allPass = coerceArray(filterBy).every(fn => fn(entity, i));\n      if (allPass) {\n        map[id] = entity;\n      }\n    }\n  }\n\n  return map;\n}\n","// @internal\nexport function isString(value: any): value is string {\n  return typeof value === 'string';\n}\n","import { isUndefined } from './isUndefined';\nimport { isString } from './isString';\nimport { ItemPredicate } from './types';\n\n// @internal\nexport function findEntityByPredicate<E>(predicate: ItemPredicate<E>, entities) {\n    for(const entityId of Object.keys(entities)) {\n      if(predicate(entities[entityId]) === true) {\n        return entityId;\n      }\n    }\n\n    return undefined;\n}\n\n// @internal\nexport function getEntity( id, project ) {\n  return function(entities) {\n    const entity = entities[id];\n\n    if(isUndefined(entity)) {\n      return undefined;\n    }\n\n    if(!project) {\n      return entity;\n    }\n\n    if(isString(project)) {\n      return entity[project];\n    }\n\n    return (project as Function)(entity);\n  };\n\n}\n","import { Order } from './sort';\n\nexport type SortBy<E, S = any> = ((a: E, b: E, state?: S) => number) | keyof E;\n\nexport interface SortByOptions<E> {\n  sortBy?: SortBy<E>;\n  sortByOrder?: Order;\n}\n\nexport interface QueryConfigOptions<E = any> extends SortByOptions<E> {}\n\nexport const queryConfigKey = 'akitaQueryConfig';\n\nexport function QueryConfig<E>(metadata: QueryConfigOptions<E>) {\n  return function(constructor: Function) {\n    constructor[queryConfigKey] = {};\n    for (let i = 0, keys = Object.keys(metadata); i < keys.length; i++) {\n      const key = keys[i];\n      constructor[queryConfigKey][key] = metadata[key];\n    }\n  };\n}\n","import { Store } from './store';\nimport { Observable } from 'rxjs';\nimport { queryConfigKey, QueryConfigOptions } from './queryConfig';\nimport { isString } from './isString';\nimport { isFunction } from './isFunction';\nimport { isDev } from './env';\nimport { __queries__ } from './stores';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { compareKeys } from './compareKeys';\nimport { ReturnTypes } from './types';\n\nexport class Query<S> {\n  // @internal\n  __store__: Store<S>;\n\n  constructor(protected store: Store<S>) {\n    this.__store__ = store;\n    if (isDev()) {\n      // @internal\n      __queries__[store.storeName] = this;\n    }\n  }\n\n  /**\n   * Select a slice from the store\n   *\n   * @example\n   *\n   * this.query.select()\n   * this.query.select(state => state.entities)\n   * this.query.select('token');\n   * this.query.select(['name', 'email'])\n   * this.query.select([state => state.name, state => state.age])\n   *\n   */\n  select<K extends keyof S>(key: K): Observable<S[K]>;\n  select<R>(project: (store: S) => R): Observable<R>;\n  select<K extends keyof S>(stateKeys: K[]): Observable<Pick<S, K>>;\n  select<R extends [(state: S) => any] | Array<(state: S) => any>>(selectorFns: R): Observable<ReturnTypes<R>>;\n  select(): Observable<S>;\n  select<R>(project?: ((store: S) => R) | keyof S | (keyof S)[] | ((state: S) => any)[]): Observable<R | S | any[]> {\n    let mapFn;\n    if (isFunction(project)) {\n      mapFn = project;\n    } else if (isString(project)) {\n      mapFn = state => state[project];\n    } else if (Array.isArray(project)) {\n      return this.store\n        ._select(state => state)\n        .pipe(\n          distinctUntilChanged(compareKeys(project)),\n          map(state => {\n            if (isFunction(project[0])) {\n              return (project as ((state: S) => any)[]).map(func => func(state));\n            }\n\n            return (project as (keyof S)[]).reduce((acc, k) => {\n              acc[k as any] = state[k];\n              return acc;\n            }, {});\n          })\n        ) as any;\n    } else {\n      mapFn = state => state;\n    }\n\n    return this.store._select(mapFn);\n  }\n\n  /**\n   * Select the loading state\n   *\n   * @example\n   *\n   * this.query.selectLoading().subscribe(isLoading => {})\n   */\n  selectLoading() {\n    return this.select(state => (state as S & { loading: boolean }).loading);\n  }\n\n  /**\n   * Select the error state\n   *\n   * @example\n   *\n   * this.query.selectError().subscribe(error => {})\n   */\n  selectError<ErrorType = any>(): Observable<ErrorType> {\n    return this.select(state => (state as S & { error: ErrorType }).error);\n  }\n\n  /**\n   * Get the store's value\n   *\n   * @example\n   *\n   * this.query.getValue()\n   *\n   */\n  getValue(): S {\n    return this.store._value();\n  }\n\n  /**\n   * Select the cache state\n   *\n   * @example\n   *\n   * this.query.selectHasCache().pipe(\n   *   switchMap(hasCache => {\n   *     return hasCache ? of() : http().pipe(res => store.set(res))\n   *   })\n   * )\n   */\n  selectHasCache(): Observable<boolean> {\n    return this.store._cache().asObservable();\n  }\n\n  /**\n   * Whether we've cached data\n   *\n   * @example\n   *\n   * this.query.getHasCache()\n   *\n   */\n  getHasCache(): boolean {\n    return this.store._cache().value;\n  }\n\n  // @internal\n  get config(): QueryConfigOptions {\n    return this.constructor[queryConfigKey];\n  }\n}\n","import { isFunction } from './isFunction';\n\nexport function compareKeys<T>(keysOrFuncs: any[]) {\n  return function <T>(prevState, currState) {\n    const isFns = isFunction(keysOrFuncs[0]);\n    // Return when they are NOT changed\n    return keysOrFuncs.some(keyOrFunc => {\n      if(isFns) {\n        return keyOrFunc(prevState) !== keyOrFunc(currState);\n      }\n      return prevState[keyOrFunc] !== currState[keyOrFunc];\n    }) === false;\n  };\n}\n","// @internal\nexport function sortByOptions(options, config) {\n  options.sortBy = options.sortBy || (config && config.sortBy);\n  options.sortByOrder = options.sortByOrder || (config && config.sortByOrder);\n}\n","import { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { distinctUntilArrayItemChanged } from './arrayFind';\nimport { entitiesToArray } from './entitiesToArray';\nimport { entitiesToMap } from './entitiesToMap';\nimport { EntityAction, EntityActions } from './entityActions';\nimport { EntityStore } from './entityStore';\nimport { findEntityByPredicate, getEntity } from './getEntity';\nimport { isArray } from './isArray';\nimport { isDefined } from './isDefined';\nimport { isFunction } from './isFunction';\nimport { isNil } from './isNil';\nimport { isUndefined } from './isUndefined';\nimport { mapSkipUndefined } from './mapSkipUndefined';\nimport { Query } from './query';\nimport { QueryConfigOptions } from './queryConfig';\nimport { SelectAllOptionsA, SelectAllOptionsB, SelectAllOptionsC, SelectAllOptionsD, SelectAllOptionsE } from './selectAllOverloads';\nimport { sortByOptions } from './sortByOptions';\nimport { toBoolean } from './toBoolean';\nimport { EntityState, getEntityType, getIDType, HashMap, ItemPredicate, OrArray, SelectOptions } from './types';\n\n/**\n *\n *  The Entity Query is similar to the general Query, with additional functionality tailored for EntityStores.\n *\n *  class WidgetsQuery extends QueryEntity<WidgetsState> {\n *     constructor(protected store: WidgetsStore) {\n *       super(store);\n *     }\n *  }\n *\n *\n *\n */\nexport class QueryEntity<S extends EntityState, EntityType = getEntityType<S>, IDType = getIDType<S>> extends Query<S> {\n  ui: EntityUIQuery<any, EntityType>;\n  protected store: EntityStore<S>;\n\n  // @internal\n  __store__;\n\n  constructor(store: EntityStore<S>, private options: QueryConfigOptions = {}) {\n    super(store);\n    this.__store__ = store;\n  }\n\n  /**\n   * Select the entire store's entity collection\n   *\n   * @example\n   *\n   * this.query.selectAll()\n   *\n   * this.query.selectAll({\n   *   limitTo: 5\n   *   filterBy: entity => entity.completed === true\n   * })\n   *\n   * this.query.selectAll({\n   *   asObject: true,\n   *   limitTo: 3\n   * })\n   *\n   *  this.query.selectAll({\n   *   sortBy: 'price',\n   *   sortByOrder: Order.DESC\n   * })\n   *\n   */\n  selectAll(options: SelectAllOptionsA<EntityType>): Observable<HashMap<EntityType>>;\n  selectAll(options: SelectAllOptionsB<EntityType>): Observable<EntityType[]>;\n  selectAll(options: SelectAllOptionsC<EntityType>): Observable<HashMap<EntityType>>;\n  selectAll(options: SelectAllOptionsD<EntityType>): Observable<EntityType[]>;\n  selectAll(options: SelectAllOptionsE<EntityType>): Observable<EntityType[]>;\n  selectAll(): Observable<EntityType[]>;\n  selectAll(\n    options: SelectOptions<EntityType> = {\n      asObject: false\n    }\n  ): Observable<EntityType[] | HashMap<EntityType>> {\n    return this.select(state => state.entities).pipe(map(() => this.getAll(options)));\n  }\n\n  /**\n   * Get the entire store's entity collection\n   *\n   * @example\n   *\n   * this.query.getAll()\n   *\n   * this.query.getAll({\n   *   limitTo: 5\n   *   filterBy: entity => entity.completed === true\n   * })\n   *\n   * this.query.getAll({\n   *   asObject: true,\n   *   limitTo: 3\n   * })\n   *\n   *  this.query.getAll({\n   *   sortBy: 'price',\n   *   sortByOrder: Order.DESC\n   * })\n   */\n  getAll(options: SelectAllOptionsA<EntityType>): HashMap<EntityType>;\n  getAll(options: SelectAllOptionsB<EntityType>): EntityType[];\n  getAll(options: SelectAllOptionsC<EntityType>): HashMap<EntityType>;\n  getAll(options: SelectAllOptionsD<EntityType>): EntityType[];\n  getAll(options: SelectAllOptionsE<EntityType>): EntityType[];\n  getAll(): EntityType[];\n  getAll(options: SelectOptions<EntityType> = { asObject: false, filterBy: undefined, limitTo: undefined }): EntityType[] | HashMap<EntityType> {\n    if (options.asObject) {\n      return entitiesToMap(this.getValue(), options);\n    }\n    sortByOptions(options, this.config || this.options);\n\n    return entitiesToArray(this.getValue(), options);\n  }\n\n  /**\n   * Select multiple entities from the store\n   *\n   * @example\n   *\n   * this.query.selectMany([1,2,3])\n   * this.query.selectMany([1,2], entity => entity.title)\n   */\n  selectMany<R>(ids: IDType[]): Observable<EntityType[]>;\n  selectMany<R>(ids: IDType[], project: (entity: EntityType) => R): Observable<R[]>;\n  selectMany<R>(ids: IDType[], project?: (entity: EntityType) => R): Observable<EntityType[] | R[]> {\n    if (!ids || !ids.length) return of([]);\n\n    return this.select(state => state.entities).pipe(\n      map(entities => mapSkipUndefined(ids, id => getEntity(id, project)(entities))),\n      distinctUntilArrayItemChanged()\n    );\n  }\n\n  /**\n   * Select an entity or a slice of an entity\n   *\n   * @example\n   *\n   * this.query.selectEntity(1)\n   * this.query.selectEntity(1, entity => entity.config.date)\n   * this.query.selectEntity(1, 'comments')\n   * this.query.selectEntity(e => e.title === 'title')\n   *\n   */\n  selectEntity<R>(id: IDType): Observable<EntityType>;\n  selectEntity<K extends keyof EntityType>(id: IDType, project?: K): Observable<EntityType[K]>;\n  selectEntity<R>(id: IDType, project: (entity: EntityType) => R): Observable<R>;\n  selectEntity<R>(predicate: ItemPredicate<EntityType>): Observable<EntityType>;\n  selectEntity<R>(idOrPredicate: IDType | ItemPredicate<EntityType>, project?: ((entity: EntityType) => R) | keyof EntityType): Observable<R | EntityType> {\n    let id = idOrPredicate;\n\n    if (isFunction(idOrPredicate)) {\n      // For performance reason we expect the entity to be in the store\n      (id as any) = findEntityByPredicate(idOrPredicate, this.getValue().entities);\n    }\n\n    return this.select(state => state.entities).pipe(\n      map(getEntity(id, project)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Get an entity by id\n   *\n   * @example\n   *\n   * this.query.getEntity(1);\n   */\n  getEntity(id: IDType): EntityType {\n    return this.getValue().entities[id as any];\n  }\n\n  /**\n   * Select the active entity's id\n   *\n   * @example\n   *\n   * this.query.selectActiveId()\n   */\n  selectActiveId(): Observable<S['active']> {\n    return this.select(state => (state as S & { active: S['active'] }).active);\n  }\n\n  /**\n   * Get the active id\n   *\n   * @example\n   *\n   * this.query.getActiveId()\n   */\n  getActiveId(): S['active'] {\n    return this.getValue().active;\n  }\n\n  /**\n   * Select the active entity\n   *\n   * @example\n   *\n   * this.query.selectActive()\n   * this.query.selectActive(entity => entity.title)\n   */\n  selectActive<R>(): S['active'] extends any[] ? Observable<EntityType[]> : Observable<EntityType>;\n  selectActive<R>(project?: (entity: EntityType) => R): S['active'] extends any[] ? Observable<R[]> : Observable<R>;\n  selectActive<R>(project?: (entity: EntityType) => R): Observable<R | EntityType> | Observable<EntityType[] | R[]> {\n    if (isArray(this.getActive())) {\n      return this.selectActiveId().pipe(switchMap(ids => this.selectMany(ids, project)));\n    }\n    return this.selectActiveId().pipe(switchMap(ids => this.selectEntity(ids, project)));\n  }\n\n  /**\n   * Get the active entity\n   *\n   * @example\n   *\n   * this.query.getActive()\n   */\n  getActive(): S['active'] extends any[] ? EntityType[] : EntityType;\n  getActive(): OrArray<EntityType> {\n    const activeId = this.getActiveId();\n    if (isArray(activeId)) {\n      return activeId.map(id => this.getValue().entities[id as any]);\n    }\n    return toBoolean(activeId) ? this.getEntity(activeId) : undefined;\n  }\n\n  /**\n   * Select the store's entity collection length\n   *\n   * @example\n   *\n   * this.query.selectCount()\n   * this.query.selectCount(entity => entity.completed)\n   */\n  selectCount(predicate?: (entity: EntityType, index: number) => boolean): Observable<number> {\n    return this.select(state => state.entities).pipe(map(() => this.getCount(predicate)));\n  }\n\n  /**\n   * Get the store's entity collection length\n   *\n   * @example\n   *\n   * this.query.getCount()\n   * this.query.getCount(entity => entity.completed)\n   */\n  getCount(predicate?: (entity: EntityType, index: number) => boolean): number {\n    if (isFunction(predicate)) {\n      return this.getAll().filter(predicate).length;\n    }\n    return this.getValue().ids.length;\n  }\n\n  /**\n   *\n   * Select the last entity from the store\n   *\n   * @example\n   *\n   * this.query.selectLast()\n   * this.query.selectLast(todo => todo.title)\n   */\n  selectLast<R>(): Observable<EntityType>;\n  selectLast<R>(project: (entity: EntityType) => R): Observable<R>;\n  selectLast<R>(project?: (entity: EntityType) => R): Observable<R | EntityType> {\n    return this.selectAt(ids => ids[ids.length - 1], project);\n  }\n\n  /**\n   *\n   * Select the first entity from the store\n   *\n   * @example\n   *\n   * this.query.selectFirst()\n   * this.query.selectFirst(todo => todo.title)\n   */\n  selectFirst<R>(): Observable<EntityType>;\n  selectFirst<R>(project: (entity: EntityType) => R): Observable<R>;\n  selectFirst<R>(project?: (entity: EntityType) => R): Observable<R | EntityType> {\n    return this.selectAt(ids => ids[0], project);\n  }\n\n  /**\n   *\n   * Listen for entity actions\n   *\n   *  @example\n   *\n   *  this.query.selectEntityAction(EntityActions.Add);\n   *  this.query.selectEntityAction(EntityActions.Update);\n   *  this.query.selectEntityAction(EntityActions.Remove);\n   *\n   *  this.query.selectEntityAction();\n   */\n  selectEntityAction(action: EntityActions): Observable<IDType[]>;\n  selectEntityAction(): Observable<EntityAction<IDType>>;\n  selectEntityAction(action?: EntityActions): Observable<IDType[] | EntityAction<IDType>> {\n    if (isUndefined(action)) {\n      return this.store.selectEntityAction$;\n    }\n    return this.store.selectEntityAction$.pipe(\n      filter(ac => ac.type === action),\n      map(action => action.ids)\n    );\n  }\n\n  /**\n   * Returns whether entity exists\n   *\n   * @example\n   *\n   * this.query.hasEntity(2)\n   * this.query.hasEntity(entity => entity.completed)\n   * this.query.hasEntity([1, 2, 33])\n   *\n   */\n  hasEntity(id: IDType): boolean;\n  hasEntity(id: IDType[]): boolean;\n  hasEntity(project: (entity: EntityType) => boolean): boolean;\n  hasEntity(): boolean;\n  hasEntity(projectOrIds?: IDType | IDType[] | ((entity: EntityType) => boolean)): boolean {\n    if (isNil(projectOrIds)) {\n      return this.getValue().ids.length > 0;\n    }\n\n    if (isFunction(projectOrIds)) {\n      return this.getAll().some(projectOrIds);\n    }\n\n    if (isArray(projectOrIds)) {\n      return projectOrIds.every(id => (id as any) in this.getValue().entities);\n    }\n\n    return (projectOrIds as any) in this.getValue().entities;\n  }\n\n  /**\n   * Returns whether entity store has an active entity\n   *\n   * @example\n   *\n   * this.query.hasActive()\n   * this.query.hasActive(3)\n   *\n   */\n  hasActive(id?: IDType): boolean {\n    const active = this.getValue().active;\n    const isIdProvided = isDefined(id);\n    if (Array.isArray(active)) {\n      if (isIdProvided) {\n        return active.includes(id);\n      }\n      return active.length > 0;\n    }\n    return isIdProvided ? active === id : isDefined(active);\n  }\n\n  /**\n   *\n   * Create sub UI query for querying Entity's UI state\n   *\n   * @example\n   *\n   *\n   * export class ProductsQuery extends QueryEntity<ProductsState> {\n   *   ui: EntityUIQuery<ProductsUIState>;\n   *\n   *   constructor(protected store: ProductsStore) {\n   *     super(store);\n   *     this.createUIQuery();\n   *   }\n   *\n   * }\n   */\n  createUIQuery() {\n    this.ui = new EntityUIQuery(this.__store__.ui);\n  }\n\n  private selectAt<R>(mapFn: (ids: IDType[]) => IDType, project?: (entity: EntityType) => R) {\n    return this.select(state => state.ids as any[]).pipe(\n      map(mapFn),\n      distinctUntilChanged(),\n      switchMap((id: IDType) => this.selectEntity(id, project))\n    );\n  }\n}\n\n// @internal\nexport class EntityUIQuery<UIState, DEPRECATED = any> extends QueryEntity<UIState> {\n  constructor(store) {\n    super(store);\n  }\n}\n","// @internal\nexport function mapSkipUndefined<T, V>(arr: T[], callbackFn: (value: T, index: number, array: T[]) => V) {\n  return arr.reduce((result, value, index, array) => {\n    const val = callbackFn(value, index, array);\n    if (val !== undefined) {\n      result.push(val);\n    }\n    return result;\n  }, []);\n}\n","import { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Diff } from './types';\n\n/**\n * @example\n *\n * query.selectEntity(2).pipe(filterNil)\n */\nexport const filterNil = <T>(source: Observable<T | undefined | null>) => source.pipe(filter((value): value is Diff<T, null | undefined> => value !== null && typeof value !== 'undefined'));\n","/**\n * @internal\n *\n * @example\n *\n * getValue(state, 'todos.ui')\n *\n */\nexport function getValue( obj: any, prop: string ) {\n  /** return the whole state  */\n  if( prop.split('.').length === 1 ) {\n    return obj;\n  }\n  const removeStoreName = prop\n    .split('.')\n    .slice(1)\n    .join('.');\n  return removeStoreName.split('.').reduce(( acc: any, part: string ) => acc && acc[part], obj);\n}\n","import { isObject } from './isObject';\n\n/**\n * @internal\n *\n * @example\n * setValue(state, 'todos.ui', { filter: {} })\n */\nexport function setValue(obj: any, prop: string, val: any) {\n  const split = prop.split('.');\n\n  if (split.length === 1) {\n    return { ...obj, ...val };\n  }\n\n  obj = { ...obj };\n\n  const lastIndex = split.length - 2;\n  const removeStoreName = prop.split('.').slice(1);\n\n  removeStoreName.reduce((acc, part, index) => {\n    if (index === lastIndex) {\n      if (isObject(acc[part])) {\n        acc[part] = { ...acc[part], ...val };\n      } else {\n        acc[part] = val;\n      }\n    } else {\n      acc[part] = { ...acc[part] };\n    }\n\n    return acc && acc[part];\n  }, obj);\n\n  return obj;\n}\n","import { filter, skip } from 'rxjs/operators';\nimport { from, isObservable, of, OperatorFunction, ReplaySubject, Subscription } from 'rxjs';\nimport { HashMap, MaybeAsync } from './types';\nimport { isFunction } from './isFunction';\nimport { AkitaError } from './errors';\nimport { __stores__ } from './stores';\nimport { getValue } from './getValueByString';\nimport { setAction } from './actions';\nimport { setValue } from './setValueByString';\nimport { $$addStore, $$deleteStore } from './dispatchers';\nimport { isNil } from './isNil';\nimport { isObject } from './isObject';\nimport { isNotBrowser } from './root';\n\nlet skipStorageUpdate = false;\n\nconst _persistStateInit = new ReplaySubject(1);\n\nexport function selectPersistStateInit() {\n  return _persistStateInit.asObservable();\n}\n\nexport function setSkipStorageUpdate(skip: boolean) {\n  skipStorageUpdate = skip;\n}\n\nexport function getSkipStorageUpdate() {\n  return skipStorageUpdate;\n}\n\nexport interface PersistStateStorage {\n  getItem(key: string): MaybeAsync;\n\n  setItem(key: string, value: any): MaybeAsync;\n\n  clear(): void;\n}\n\nfunction isPromise(v: any) {\n  return v && isFunction(v.then);\n}\n\nfunction observify(asyncOrValue: any) {\n  if (isPromise(asyncOrValue) || isObservable(asyncOrValue)) {\n    return from(asyncOrValue);\n  }\n\n  return of(asyncOrValue);\n}\n\nexport interface PersistStateParams {\n  /** The storage key */\n  key: string;\n  /** Whether to enable persistState in a non-browser environment */\n  enableInNonBrowser: boolean;\n  /** Storage strategy to use. This defaults to LocalStorage but you can pass SessionStorage or anything that implements the StorageEngine API. */\n  storage: PersistStateStorage;\n  /** Custom deserializer. Defaults to JSON.parse */\n  deserialize: Function;\n  /** Custom serializer, defaults to JSON.stringify */\n  serialize: Function;\n  /**\n   * By default the whole state is saved to storage, use this param to include only the stores you need.\n   * Pay attention that you can't use both include and exclude\n   */\n  include: (string | ((storeName: string) => boolean))[];\n  /**\n   *  By default the whole state is saved to storage, use this param to exclude stores that you don't need.\n   *  Pay attention that you can't use both include and exclude\n   */\n  exclude: string[];\n\n  preStorageUpdate(storeName: string, state: any): any;\n\n  preStoreUpdate(storeName: string, state: any): any;\n\n  skipStorageUpdate: () => boolean;\n  preStorageUpdateOperator: () => OperatorFunction<any, any>;\n  /** Whether to persist a dynamic store upon destroy */\n  persistOnDestroy: boolean;\n}\n\nexport function persistState(params?: Partial<PersistStateParams>) {\n  const defaults: PersistStateParams = {\n    key: 'AkitaStores',\n    enableInNonBrowser: false,\n    storage: typeof localStorage === 'undefined' ? params.storage : localStorage,\n    deserialize: JSON.parse,\n    serialize: JSON.stringify,\n    include: [],\n    /**\n     * @deprecated use include with a callback\n     */\n    exclude: [],\n    persistOnDestroy: false,\n    preStorageUpdate: function(storeName, state) {\n      return state;\n    },\n    preStoreUpdate: function(storeName, state) {\n      return state;\n    },\n    skipStorageUpdate: getSkipStorageUpdate,\n    preStorageUpdateOperator: () => source => source\n  };\n\n  const { storage, enableInNonBrowser, deserialize, serialize, include, exclude, key, preStorageUpdate, persistOnDestroy, preStorageUpdateOperator, preStoreUpdate, skipStorageUpdate } = Object.assign(\n    {},\n    defaults,\n    params\n  );\n\n  if (isNotBrowser && !enableInNonBrowser) return;\n\n  const hasInclude = include.length > 0;\n  const hasExclude = exclude.length > 0;\n  let includeStores: { fns: Function[]; [key: string]: Function[] | string };\n\n  if (hasInclude && hasExclude) {\n    throw new AkitaError(\"You can't use both include and exclude\");\n  }\n\n  if (hasInclude) {\n    includeStores = include.reduce(\n      (acc, path) => {\n        if (isFunction(path)) {\n          acc.fns.push(path);\n        } else {\n          const storeName = path.split('.')[0];\n          acc[storeName] = path;\n        }\n        return acc;\n      },\n      { fns: [] }\n    );\n  }\n\n  let stores: HashMap<Subscription> = {};\n  let acc = {};\n  let subscriptions: Subscription[] = [];\n\n  const buffer = [];\n\n  function _save(v: any) {\n    observify(v).subscribe(() => {\n      const next = buffer.shift();\n      next && _save(next);\n    });\n  }\n\n  // when we use the local/session storage we perform the serialize, otherwise we let the passed storage implementation to do it\n  const isLocalStorage = typeof localStorage !== 'undefined' && (storage === localStorage || storage === sessionStorage);\n\n  observify(storage.getItem(key)).subscribe((value: any) => {\n    let storageState = isObject(value) ? value : deserialize(value || '{}');\n\n    function save(storeCache) {\n      storageState['$cache'] = { ...(storageState['$cache'] || {}), ...storeCache };\n      storageState = Object.assign({}, storageState, acc);\n\n      buffer.push(storage.setItem(key, isLocalStorage ? serialize(storageState) : storageState));\n      _save(buffer.shift());\n    }\n\n    function subscribe(storeName, path) {\n      stores[storeName] = __stores__[storeName]\n        ._select(state => getValue(state, path))\n        .pipe(\n          skip(1),\n          filter(() => skipStorageUpdate() === false),\n          preStorageUpdateOperator()\n        )\n        .subscribe(data => {\n          acc[storeName] = preStorageUpdate(storeName, data);\n          Promise.resolve().then(() => save({ [storeName]: __stores__[storeName]._cache().getValue() }));\n        });\n    }\n\n    function setInitial(storeName, store, path) {\n      if (storeName in storageState) {\n        setAction('@PersistState');\n        store._setState(state => {\n          return setValue(state, path, preStoreUpdate(storeName, storageState[storeName]));\n        });\n        const hasCache = storageState['$cache'] ? storageState['$cache'][storeName] : false;\n        __stores__[storeName].setHasCache(hasCache, { restartTTL: true });\n      }\n    }\n\n    subscriptions.push(\n      $$deleteStore.subscribe(storeName => {\n        if (stores[storeName]) {\n          if (persistOnDestroy === false) {\n            save({ [storeName]: false });\n          }\n          stores[storeName].unsubscribe();\n          delete stores[storeName];\n        }\n      })\n    );\n\n    subscriptions.push(\n      $$addStore.subscribe(storeName => {\n        if (storeName === 'router' || (hasExclude && exclude.includes(storeName))) {\n          return;\n        }\n\n        const store = __stores__[storeName];\n        if (hasInclude) {\n          let path = includeStores[storeName];\n\n          if (!path) {\n            const passPredicate = includeStores.fns.some(fn => fn(storeName));\n            if (passPredicate) {\n              path = storeName;\n            } else {\n              return;\n            }\n          }\n          setInitial(storeName, store, path);\n          subscribe(storeName, path);\n        } else {\n          setInitial(storeName, store, storeName);\n          subscribe(storeName, storeName);\n        }\n      })\n    );\n\n    _persistStateInit.next();\n  });\n\n  return {\n    destroy() {\n      subscriptions.forEach(s => s.unsubscribe());\n      for (let i = 0, keys = Object.keys(stores); i < keys.length; i++) {\n        const storeName = keys[i];\n        stores[storeName].unsubscribe();\n      }\n      stores = {};\n    },\n    clear() {\n      storage.clear();\n    },\n    clearStore(storeName?: string) {\n      if (isNil(storeName)) {\n        const value = observify(storage.setItem(key, '{}'));\n        value.subscribe();\n        return;\n      }\n      const value = storage.getItem(key);\n      observify(value).subscribe(v => {\n        const storageState = deserialize(v || '{}');\n\n        if (storageState[storeName]) {\n          delete storageState[storeName];\n          const value = observify(storage.setItem(key, serialize(storageState)));\n          value.subscribe();\n        }\n      });\n    }\n  };\n}\n","import { __stores__ } from './stores';\nimport { isString } from './isString';\nimport { setSkipStorageUpdate } from './persistState';\nimport { $$addStore } from './dispatchers';\nimport { filter, take } from 'rxjs/operators';\n\nexport class SnapshotManager {\n  /**\n   * Get a snapshot of the whole state or a specific stores\n   * Use it ONLY for things such as saving the state in the server\n   */\n  getStoresSnapshot(stores: string[] = []) {\n    let acc = {};\n    const hasInclude = stores.length > 0;\n    const keys = hasInclude ? stores : Object.keys(__stores__);\n    for (let i = 0; i < keys.length; i++) {\n      let storeName = keys[i];\n      if (storeName !== 'router') {\n        acc[storeName] = __stores__[storeName]._value();\n      }\n    }\n\n    return acc;\n  }\n\n  setStoresSnapshot(stores: { [storeName: string]: any } | string, options?: { skipStorageUpdate?: boolean; lazy?: boolean }) {\n    const mergedOptions = { ...{ skipStorageUpdate: false, lazy: false }, ...options };\n    mergedOptions.skipStorageUpdate && setSkipStorageUpdate(true);\n\n    let normalizedStores = stores;\n\n    if (isString(stores)) {\n      normalizedStores = JSON.parse(normalizedStores as string);\n    }\n\n    const size = Object.keys(normalizedStores).length;\n\n    if (mergedOptions.lazy) {\n      $$addStore\n        .pipe(\n          filter(name => normalizedStores.hasOwnProperty(name)),\n          take(size)\n        )\n        .subscribe(name => __stores__[name]._setState(() => normalizedStores[name]));\n    } else {\n      for (let i = 0, keys = Object.keys(normalizedStores); i < keys.length; i++) {\n        const storeName = keys[i];\n        if (__stores__[storeName]) {\n          __stores__[storeName]._setState(() => normalizedStores[storeName]);\n        }\n      }\n    }\n\n    mergedOptions.skipStorageUpdate && setSkipStorageUpdate(false);\n  }\n}\n\nexport const snapshotManager = new SnapshotManager();\n","import { QueryEntity } from '../queryEntity';\nimport { Query } from '../query';\nimport { filterNil } from '../filterNil';\nimport { toBoolean } from '../toBoolean';\nimport { getAkitaConfig } from '../config';\nimport { getValue } from '../getValueByString';\nimport { setValue } from '../setValueByString';\n\nexport type Queries<State> = Query<State> | QueryEntity<State>;\n\nexport abstract class AkitaPlugin<State = any> {\n  protected constructor(protected query: Queries<State>, config?: { resetFn?: Function }) {\n    if (config && config.resetFn) {\n      if (getAkitaConfig().resettable) {\n        this.onReset(config.resetFn);\n      }\n    }\n  }\n\n  /** This method is responsible for getting access to the query. */\n  protected getQuery() {\n    return this.query;\n  }\n\n  /** This method is responsible for getting access to the store. */\n  protected getStore() {\n    return this.getQuery().__store__;\n  }\n\n  /** This method is responsible for cleaning. */\n  public abstract destroy();\n\n  /** This method is responsible tells whether the plugin is entityBased or not.  */\n  protected isEntityBased(entityId: any) {\n    return toBoolean(entityId);\n  }\n\n  /** This method is responsible for selecting the source; it can be the whole store or one entity. */\n  protected selectSource(entityId: any, property?: string) {\n    if (this.isEntityBased(entityId)) {\n      return (this.getQuery() as QueryEntity<State>).selectEntity(entityId).pipe(filterNil);\n    }\n\n    if (property) {\n      return this.getQuery().select(state => getValue(state, this.withStoreName(property)));\n    }\n\n    return this.getQuery().select();\n  }\n\n  protected getSource(entityId: any, property?: string): any {\n    if (this.isEntityBased(entityId)) {\n      return (this.getQuery() as QueryEntity<State>).getEntity(entityId);\n    }\n\n    const state = this.getQuery().getValue();\n\n    if (property) {\n      return getValue(state, this.withStoreName(property));\n    }\n\n    return state;\n  }\n\n  protected withStoreName(prop: string) {\n    return `${this.storeName}.${prop}`;\n  }\n\n  protected get storeName() {\n    return this.getStore().storeName;\n  }\n\n  /** This method is responsible for updating the store or one entity; it can be the whole store or one entity. */\n  protected updateStore(newState, entityId?, property?: string) {\n    if (this.isEntityBased(entityId)) {\n      this.getStore().update(entityId, newState);\n    } else {\n      if (property) {\n        this.getStore()._setState(state => {\n          return setValue(state, this.withStoreName(property), newState);\n        });\n        return;\n      }\n      this.getStore()._setState(state => ({ ...state, ...newState }));\n    }\n  }\n\n  /**\n   * Function to invoke upon reset\n   */\n  private onReset(fn: Function) {\n    const original = this.getStore().reset;\n    this.getStore().reset = (...params) => {\n      /** It should run after the plugin destroy method */\n      setTimeout(() => {\n        original.apply(this.getStore(), params);\n        fn();\n      });\n    };\n  }\n}\n","import { QueryEntity } from '../../queryEntity';\nimport { delay, map, switchMap, take } from 'rxjs/operators';\nimport { BehaviorSubject, from, isObservable, Observable, Subscription } from 'rxjs';\nimport { EntityState, ID, getEntityType } from '../../types';\nimport { AkitaPlugin } from '../plugin';\nimport { applyTransaction } from '../../transaction';\nimport { isUndefined } from '../../isUndefined';\nimport { action, logAction } from '../../actions';\nimport { isNil } from '../../isNil';\n\nexport interface PaginationResponse<E> {\n  currentPage: number;\n  perPage: number;\n  lastPage: number;\n  data: E[];\n  total?: number;\n  from?: number;\n  to?: number;\n  pageControls?: number[];\n}\n\nexport type PaginatorConfig = {\n  pagesControls?: boolean;\n  range?: boolean;\n  startWith?: number;\n  cacheTimeout?: Observable<number>;\n  clearStoreWithCache?: boolean;\n};\n\nconst paginatorDefaults: PaginatorConfig = {\n  pagesControls: false,\n  range: false,\n  startWith: 1,\n  cacheTimeout: undefined,\n  clearStoreWithCache: true\n};\n\nexport class PaginatorPlugin<State extends EntityState> extends AkitaPlugin<State> {\n  /** Save current filters, sorting, etc. in cache */\n  metadata = new Map();\n\n  private page: BehaviorSubject<number>;\n  private pages = new Map<number, { ids: ID[] }>();\n  private readonly clearCacheSubscription: Subscription;\n\n  private pagination: PaginationResponse<getEntityType<State>> = {\n    currentPage: 1,\n    perPage: 0,\n    total: 0,\n    lastPage: 0,\n    data: []\n  };\n\n  /**\n   * When the user navigates to a different page and return\n   * we don't want to call `clearCache` on first time.\n   */\n  private initial = true;\n\n  constructor(protected query: QueryEntity<State>, public config: PaginatorConfig = {}) {\n    super(query, {\n      resetFn: () => {\n        this.initial = false;\n        this.destroy({ clearCache: true, currentPage: 1 });\n      }\n    });\n    this.config = Object.assign(paginatorDefaults, config);\n    const { startWith, cacheTimeout } = this.config;\n    this.page = new BehaviorSubject(startWith);\n    if (isObservable(cacheTimeout)) {\n      this.clearCacheSubscription = cacheTimeout.subscribe(() => this.clearCache());\n    }\n  }\n\n  /**\n   * Proxy to the query loading\n   */\n  isLoading$ = this.query.selectLoading().pipe(delay(0));\n\n  /**\n   * Listen to page changes\n   */\n  get pageChanges() {\n    return this.page.asObservable();\n  }\n\n  /**\n   * Get the current page number\n   */\n  get currentPage() {\n    return this.pagination.currentPage;\n  }\n\n  /**\n   * Check if current page is the first one\n   */\n  get isFirst() {\n    return this.currentPage === 1;\n  }\n\n  /**\n   * Check if current page is the last one\n   */\n  get isLast() {\n    return this.currentPage === this.pagination.lastPage;\n  }\n\n  /**\n   * Whether to generate an array of pages for *ngFor\n   * [1, 2, 3, 4]\n   */\n  withControls() {\n    this.config.pagesControls = true;\n    return this;\n  }\n\n  /**\n   * Whether to generate the `from` and `to` keys\n   * [1, 2, 3, 4]\n   */\n  withRange() {\n    this.config.range = true;\n    return this;\n  }\n\n  /**\n   * Set the loading state\n   */\n  setLoading(value = true) {\n    this.getStore().setLoading(value);\n  }\n\n  /**\n   * Update the pagination object and add the page\n   */\n  @action('@Pagination - New Page')\n  update(response: PaginationResponse<getEntityType<State>>) {\n    this.pagination = response;\n    this.addPage(response.data);\n  }\n\n  /**\n   *\n   * Set the ids and add the page to store\n   */\n  addPage(data: getEntityType<State>[]) {\n    this.pages.set(this.currentPage, { ids: data.map(entity => entity[this.getStore().idKey]) });\n    this.getStore().add(data);\n  }\n\n  /**\n   * Clear the cache.\n   */\n  clearCache(options: { clearStore?: boolean } = {}) {\n    if (!this.initial) {\n      logAction('@Pagination - Clear Cache');\n\n      if (options.clearStore !== false && (this.config.clearStoreWithCache || options.clearStore)) {\n        this.getStore().remove();\n      }\n\n      this.pages = new Map();\n      this.metadata = new Map();\n    }\n    this.initial = false;\n  }\n\n  clearPage(page: number) {\n    this.pages.delete(page);\n  }\n\n  /**\n   * Clear the cache timeout and optionally the pages\n   */\n  destroy({ clearCache, currentPage }: { clearCache?: boolean; currentPage?: number } = {}) {\n    if (this.clearCacheSubscription) {\n      this.clearCacheSubscription.unsubscribe();\n    }\n    if (clearCache) {\n      this.clearCache();\n    }\n    if (!isUndefined(currentPage)) {\n      this.setPage(currentPage);\n    }\n    this.initial = true;\n  }\n\n  /**\n   * Whether the provided page is active\n   */\n  isPageActive(page: number) {\n    return this.currentPage === page;\n  }\n\n  /**\n   * Set the current page\n   */\n  setPage(page: number) {\n    if (page !== this.currentPage || !this.hasPage(page)) {\n      this.page.next((this.pagination.currentPage = page));\n    }\n  }\n\n  /**\n   * Increment current page\n   */\n  nextPage() {\n    if (this.currentPage !== this.pagination.lastPage) {\n      this.setPage(this.pagination.currentPage + 1);\n    }\n  }\n\n  /**\n   * Decrement current page\n   */\n  prevPage() {\n    if (this.pagination.currentPage > 1) {\n      this.setPage(this.pagination.currentPage - 1);\n    }\n  }\n\n  /**\n   * Set current page to last\n   */\n  setLastPage() {\n    this.setPage(this.pagination.lastPage);\n  }\n\n  /**\n   * Set current page to first\n   */\n  setFirstPage() {\n    this.setPage(1);\n  }\n\n  /**\n   * Check if page exists in cache\n   */\n  hasPage(page: number) {\n    return this.pages.has(page);\n  }\n\n  /**\n   * Get the current page if it's in cache, otherwise invoke the request\n   */\n  getPage(req: () => Observable<PaginationResponse<getEntityType<State>>>) {\n    let page = this.pagination.currentPage;\n    if (this.hasPage(page)) {\n      return this.selectPage(page);\n    } else {\n      this.setLoading(true);\n      return from(req()).pipe(\n        switchMap((config: PaginationResponse<getEntityType<State>>) => {\n          page = config.currentPage;\n          applyTransaction(() => {\n            this.setLoading(false);\n            this.update(config);\n          });\n          return this.selectPage(page);\n        })\n      );\n    }\n  }\n\n  getQuery(): QueryEntity<State> {\n    return this.query;\n  }\n\n  refreshCurrentPage() {\n    if (isNil(this.currentPage) === false) {\n      this.clearPage(this.currentPage);\n      this.setPage(this.currentPage);\n    }\n  }\n\n  private getFrom() {\n    if (this.isFirst) {\n      return 1;\n    }\n    return (this.currentPage - 1) * this.pagination.perPage + 1;\n  }\n\n  private getTo() {\n    if (this.isLast) {\n      return this.pagination.total;\n    }\n    return this.currentPage * this.pagination.perPage;\n  }\n\n  /**\n   * Select the page\n   */\n  private selectPage(page: number): Observable<PaginationResponse<getEntityType<State>>> {\n    return this.query.selectAll({ asObject: true }).pipe(\n      take(1),\n      map(entities => {\n        let response: PaginationResponse<getEntityType<State>> = {\n          ...this.pagination,\n          data: this.pages.get(page).ids.map(id => entities[id])\n        };\n\n        const { range, pagesControls } = this.config;\n\n        /** If no total - calc it */\n        if (isNaN(this.pagination.total)) {\n          if (response.lastPage === 1) {\n            response.total = response.data ? response.data.length : 0;\n          } else {\n            response.total = response.perPage * response.lastPage;\n          }\n          this.pagination.total = response.total;\n        }\n\n        if (range) {\n          response.from = this.getFrom();\n          response.to = this.getTo();\n        }\n\n        if (pagesControls) {\n          response.pageControls = generatePages(this.pagination.total, this.pagination.perPage);\n        }\n\n        return response;\n      })\n    );\n  }\n}\n\n/**\n * Generate an array so we can ngFor them to navigate between pages\n */\nfunction generatePages(total: number, perPage: number) {\n  const len = Math.ceil(total / perPage);\n  let arr = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(i + 1);\n  }\n  return arr;\n}\n\n/** backward compatibility */\nexport const Paginator = PaginatorPlugin;\n","import { AkitaPlugin } from '../plugin';\nimport { Query } from '../../query';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { getValue } from '../../getValueByString';\nimport { toBoolean } from '../../toBoolean';\nimport { isString } from '../../isString';\nimport { setValue } from '../../setValueByString';\nimport { logAction } from '../../actions';\n\nexport type FormGroupLike = {\n  patchValue: Function;\n  setValue: Function;\n  value: any;\n  get: Function;\n  valueChanges: Observable<any>;\n  controls: any;\n};\n\nexport type AkitaFormProp<T> = {\n  [key: string]: T;\n};\n\nexport type PersistFormParams = {\n  debounceTime?: number;\n  formKey?: string;\n  emitEvent?: boolean;\n  arrControlFactory?: ArrayControlFactory;\n};\n\nexport type ArrayControlFactory = (value: any) => any; // Todo: Return  AbstractControl interface\n\nexport class PersistNgFormPlugin<T = any> extends AkitaPlugin {\n  formChanges: Subscription;\n  private isRootKeys: boolean;\n  private form: FormGroupLike;\n  private isKeyBased: boolean;\n  private initialValue;\n  private builder;\n\n  constructor(protected query: Query<any>, private factoryFnOrPath?: Function | string, private params: PersistFormParams = {}) {\n    super(query);\n    this.params = { ...{ debounceTime: 300, formKey: 'akitaForm', emitEvent: false, arrControlFactory: v => this.builder.control(v) }, ...params };\n    this.isRootKeys = toBoolean(factoryFnOrPath) === false;\n    this.isKeyBased = isString(factoryFnOrPath) || this.isRootKeys;\n  }\n\n  setForm(form: FormGroupLike, builder?) {\n    this.form = form;\n    this.builder = builder;\n    this.activate();\n    return this;\n  }\n\n  reset(initialState?: T) {\n    let value;\n    if (initialState) {\n      value = initialState;\n    } else {\n      value = this.isKeyBased ? this.initialValue : (this as any).factoryFnOrPath();\n    }\n\n    if (this.isKeyBased) {\n      Object.keys(this.initialValue).forEach(stateKey => {\n        const value = this.initialValue[stateKey];\n        if (Array.isArray(value) && this.builder) {\n          const formArray = this.form.controls[stateKey];\n          this.cleanArray(formArray);\n          value.forEach((v, i) => {\n            this.form.get(stateKey).insert(i, (this.params.arrControlFactory as Function)(v));\n          });\n        }\n      });\n    }\n    this.form.patchValue(value, { emitEvent: this.params.emitEvent });\n\n    const storeValue = this.isKeyBased ? setValue(this.getQuery().getValue(), `${this.getStore().storeName}.${this.factoryFnOrPath}`, value) : { [this.params.formKey]: value };\n    this.updateStore(storeValue);\n  }\n\n  private cleanArray(control) {\n    while (control.length !== 0) {\n      control.removeAt(0);\n    }\n  }\n\n  private resolveInitialValue(formValue, root) {\n    if (!formValue) return;\n    return Object.keys(formValue).reduce((acc, stateKey) => {\n      const value = root[stateKey];\n      if (Array.isArray(value) && this.builder) {\n        const factory = this.params.arrControlFactory;\n        this.cleanArray(this.form.get(stateKey));\n        value.forEach((v, i) => {\n          this.form.get(stateKey).insert(i, (factory as Function)(v));\n        });\n      }\n      acc[stateKey] = root[stateKey];\n      return acc;\n    }, {});\n  }\n\n  private activate() {\n    let path;\n\n    if (this.isKeyBased) {\n      if (this.isRootKeys) {\n        this.initialValue = this.resolveInitialValue(this.form.value, this.getQuery().getValue());\n        this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });\n      } else {\n        path = `${this.getStore().storeName}.${this.factoryFnOrPath}`;\n        const root = getValue(this.getQuery().getValue(), path);\n        this.initialValue = this.resolveInitialValue(root, root);\n        this.form.patchValue(this.initialValue, { emitEvent: this.params.emitEvent });\n      }\n    } else {\n      if (!(this.getQuery().getValue() as AkitaFormProp<T>)[this.params.formKey]) {\n        logAction('@PersistNgFormPlugin activate');\n        this.updateStore({ [this.params.formKey]: (this as any).factoryFnOrPath() });\n      }\n\n      const value = this.getQuery().getValue()[this.params.formKey];\n      this.form.patchValue(value);\n    }\n\n    this.formChanges = this.form.valueChanges.pipe(debounceTime(this.params.debounceTime)).subscribe(value => {\n      logAction('@PersistForm - Update');\n      let newState;\n      if (this.isKeyBased) {\n        if (this.isRootKeys) {\n          newState = state => ({ ...state, ...value });\n        } else {\n          newState = state => setValue(state, path, value);\n        }\n      } else {\n        newState = () => ({ [this.params.formKey]: value });\n      }\n      this.updateStore(newState(this.getQuery().getValue()));\n    });\n  }\n\n  destroy() {\n    this.formChanges && this.formChanges.unsubscribe();\n    this.form = null;\n    this.builder = null;\n  }\n}\n","// @internal\nexport function capitalize(value: string) {\n  return value && value.charAt(0).toUpperCase() + value.slice(1);\n}\n","import { currentAction, setSkipAction } from './actions';\nimport { isDefined } from './isDefined';\nimport { $$addStore, $$deleteStore, $$updateStore } from './dispatchers';\nimport { __stores__ } from './stores';\nimport { capitalize } from './captialize';\nimport { isNotBrowser } from './root';\n\nexport type DevtoolsOptions = {\n  /** instance name visible in devtools */\n  name: string;\n  /**  maximum allowed actions to be stored in the history tree */\n  maxAge: number;\n  latency: number;\n  actionsBlacklist: string[];\n  actionsWhitelist: string[];\n  storesWhitelist: string[];\n  shouldCatchErrors: boolean;\n  logTrace: boolean;\n  predicate: (state: any, action: any) => boolean;\n  shallow: boolean;\n  sortAlphabetically: boolean;\n};\nlet subs = [];\n\nexport type NgZoneLike = { run: any };\n\nexport function akitaDevtools(ngZone: NgZoneLike, options?: Partial<DevtoolsOptions>);\nexport function akitaDevtools(options?: Partial<DevtoolsOptions>);\nexport function akitaDevtools(ngZoneOrOptions?: NgZoneLike | Partial<DevtoolsOptions>, options: Partial<DevtoolsOptions> = {}) {\n  if (isNotBrowser) return;\n\n  if (!(window as any).__REDUX_DEVTOOLS_EXTENSION__) {\n    return;\n  }\n\n  subs.length &&\n    subs.forEach(s => {\n      if (s.unsubscribe) {\n        s.unsubscribe();\n      } else {\n        s && s();\n      }\n    });\n\n  const isAngular = ngZoneOrOptions && ngZoneOrOptions['run'];\n\n  if (!isAngular) {\n    ngZoneOrOptions = ngZoneOrOptions || {};\n    (ngZoneOrOptions as any).run = cb => cb();\n    options = ngZoneOrOptions as Partial<DevtoolsOptions>;\n  }\n\n  const defaultOptions: Partial<DevtoolsOptions> & { name: string } = { name: 'Akita', shallow: true, storesWhitelist: [] };\n  const merged = Object.assign({}, defaultOptions, options);\n  const storesWhitelist = merged.storesWhitelist;\n  const devTools = (window as any).__REDUX_DEVTOOLS_EXTENSION__.connect(merged);\n  let appState = {};\n\n  const isAllowed = storeName => {\n    if (!storesWhitelist.length) {\n      return true;\n    }\n\n    return storesWhitelist.indexOf(storeName) > -1;\n  };\n\n  subs.push(\n    $$addStore.subscribe(storeName => {\n      if (isAllowed(storeName) === false) return;\n      appState = {\n        ...appState,\n        [storeName]: __stores__[storeName]._value()\n      };\n      devTools.send({ type: `[${capitalize(storeName)}] - @@INIT` }, appState);\n    })\n  );\n\n  subs.push(\n    $$deleteStore.subscribe(storeName => {\n      if (isAllowed(storeName) === false) return;\n      delete appState[storeName];\n      devTools.send({ type: `[${storeName}] - Delete Store` }, appState);\n    })\n  );\n\n  subs.push(\n    $$updateStore.subscribe(storeName => {\n      if (isAllowed(storeName) === false) return;\n      const { type, entityIds, skip } = currentAction;\n\n      if (skip) {\n        setSkipAction(false);\n        return;\n      }\n\n      const store = __stores__[storeName];\n      if (!store) {\n        return;\n      }\n\n      if (options.shallow === false && appState[storeName]) {\n        const isEqual = JSON.stringify(store._value()) === JSON.stringify(appState[storeName]);\n        if (isEqual) return;\n      }\n\n      appState = {\n        ...appState,\n        [storeName]: store._value()\n      };\n\n      const normalize = capitalize(storeName);\n      let msg = isDefined(entityIds) ? `[${normalize}] - ${type} (ids: ${entityIds})` : `[${normalize}] - ${type}`;\n\n      if (options.logTrace) {\n        console.group(msg);\n        console.trace();\n        console.groupEnd();\n      }\n\n      if (options.sortAlphabetically) {\n        const sortedAppState = Object.keys(appState)\n          .sort()\n          .reduce((acc, storeName) => {\n            acc[storeName] = appState[storeName];\n            return acc;\n          }, {});\n\n        devTools.send({ type: msg }, sortedAppState);\n        return;\n      }\n\n      devTools.send({ type: msg }, appState);\n    })\n  );\n\n  subs.push(\n    devTools.subscribe(message => {\n      if (message.type === 'DISPATCH') {\n        const payloadType = message.payload.type;\n\n        if (payloadType === 'COMMIT') {\n          devTools.init(appState);\n          return;\n        }\n\n        if (message.state) {\n          const rootState = JSON.parse(message.state);\n          for (let i = 0, keys = Object.keys(rootState); i < keys.length; i++) {\n            const storeName = keys[i];\n            if (__stores__[storeName]) {\n              (ngZoneOrOptions as NgZoneLike).run(() => {\n                __stores__[storeName]._setState(() => rootState[storeName], false);\n              });\n            }\n          }\n        }\n      }\n    })\n  );\n}\n","import { Observable } from 'rxjs';\nimport { EntityState, OrArray, getIDType } from '../types';\nimport { QueryEntity } from '../queryEntity';\nimport { isUndefined } from '../isUndefined';\nimport { coerceArray } from '../coerceArray';\nimport { toBoolean } from '../toBoolean';\nimport { isFunction } from '../isFunction';\n\nexport type RebaseAction<P = any> = (plugin: P) => any;\n\nexport type RebaseActions<P = any> = { beforeRemove?: RebaseAction; beforeAdd?: RebaseAction; afterAdd?: RebaseAction };\n\n/**\n * Each plugin that wants to add support for entities should extend this interface.\n */\nexport abstract class EntityCollectionPlugin<State extends EntityState, P> {\n  protected entities = new Map<getIDType<State>, P>();\n\n  protected constructor(protected query: QueryEntity<State>, private entityIds: OrArray<getIDType<State>>) {}\n\n  /**\n   * Get the entity plugin instance.\n   */\n  protected getEntity(id: getIDType<State>): P {\n    return this.entities.get(id);\n  }\n\n  /**\n   * Whether the entity plugin exist.\n   */\n  protected hasEntity(id: getIDType<State>): boolean {\n    return this.entities.has(id);\n  }\n\n  /**\n   * Remove the entity plugin instance.\n   */\n  protected removeEntity(id: getIDType<State>) {\n    this.destroy(id);\n    return this.entities.delete(id);\n  }\n\n  /**\n   * Set the entity plugin instance.\n   */\n  protected createEntity(id: getIDType<State>, plugin: P) {\n    return this.entities.set(id, plugin);\n  }\n\n  /**\n   * If the user passes `entityIds` we take them; otherwise, we take all.\n   */\n  protected getIds(): any {\n    return isUndefined(this.entityIds) ? this.query.getValue().ids : coerceArray(this.entityIds);\n  }\n\n  /**\n   * When you call one of the plugin methods, you can pass id/ids or undefined which means all.\n   */\n  protected resolvedIds(ids?): getIDType<State>[] {\n    return isUndefined(ids) ? this.getIds() : coerceArray(ids);\n  }\n\n  /**\n   * Call this method when you want to activate the plugin on init or when you need to listen to add/remove of entities dynamically.\n   *\n   * For example in your plugin you may do the following:\n   *\n   * this.query.select(state => state.ids).pipe(skip(1)).subscribe(ids => this.activate(ids));\n   */\n  protected rebase(ids: getIDType<State>[], actions: RebaseActions<P> = {}) {\n    /**\n     *\n     * If the user passes `entityIds` & we have new ids check if we need to add/remove instances.\n     *\n     * This phase will be called only upon update.\n     */\n    if (toBoolean(ids)) {\n      /**\n       * Which means all\n       */\n      if (isUndefined(this.entityIds)) {\n        for (let i = 0, len = ids.length; i < len; i++) {\n          const entityId = ids[i];\n          if (this.hasEntity(entityId) === false) {\n            isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);\n            const plugin = this.instantiatePlugin(entityId);\n            this.entities.set(entityId, plugin);\n            isFunction(actions.afterAdd) && actions.afterAdd(plugin);\n          }\n        }\n\n        this.entities.forEach((plugin, entityId) => {\n          if (ids.indexOf(entityId) === -1) {\n            isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);\n            this.removeEntity(entityId);\n          }\n        });\n      } else {\n        /**\n         * Which means the user passes specific ids\n         */\n        const _ids = coerceArray(this.entityIds);\n        for (let i = 0, len = _ids.length; i < len; i++) {\n          const entityId = _ids[i];\n          /** The Entity in current ids and doesn't exist, add it. */\n          if (ids.indexOf(entityId) > -1 && this.hasEntity(entityId) === false) {\n            isFunction(actions.beforeAdd) && actions.beforeAdd(entityId);\n            const plugin = this.instantiatePlugin(entityId);\n            this.entities.set(entityId, plugin);\n            isFunction(actions.afterAdd) && actions.afterAdd(plugin);\n          } else {\n            this.entities.forEach((plugin, entityId) => {\n              /** The Entity not in current ids and exists, remove it. */\n              if (ids.indexOf(entityId) === -1 && this.hasEntity(entityId) === true) {\n                isFunction(actions.beforeRemove) && actions.beforeRemove(plugin);\n                this.removeEntity(entityId);\n              }\n            });\n          }\n        }\n      }\n    } else {\n      /**\n       * Otherwise, start with the provided ids or all.\n       */\n      this.getIds().forEach(id => {\n        if (!this.hasEntity(id)) this.createEntity(id, this.instantiatePlugin(id));\n      });\n    }\n  }\n\n  /**\n   * Listen for add/remove entities.\n   */\n  protected selectIds(): Observable<any> {\n    return this.query.select(state => state.ids);\n  }\n\n  /**\n   * Base method for activation, you can override it if you need to.\n   */\n  protected activate(ids?: any[]) {\n    this.rebase(ids);\n  }\n\n  /**\n   * This method is responsible for plugin instantiation.\n   *\n   * For example:\n   * return new StateHistory(this.query, this.params, id) as P;\n   */\n  protected abstract instantiatePlugin(id: getIDType<State>): P;\n\n  /**\n   * This method is responsible for cleaning.\n   */\n  public abstract destroy(id?: getIDType<State>);\n\n  /**\n   * Loop over each id and invoke the plugin method.\n   */\n  protected forEachId(ids: OrArray<getIDType<State>>, cb: (entity: P) => any) {\n    const _ids = this.resolvedIds(ids);\n\n    for (let i = 0, len = _ids.length; i < len; i++) {\n      const id = _ids[i];\n      if (this.hasEntity(id)) {\n        cb(this.getEntity(id));\n      }\n    }\n  }\n}\n","import { pairwise, distinctUntilChanged } from 'rxjs/operators';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AkitaPlugin, Queries } from '../plugin';\nimport { logAction } from '../../actions';\nimport { isFunction } from '../../isFunction';\n\nexport interface StateHistoryParams {\n  maxAge?: number;\n  watchProperty?: string;\n  comparator?: (prevState, currentState) => boolean;\n}\n\nexport type History<State> = {\n  past: State[];\n  present: State | null;\n  future: State[];\n};\n\nexport class StateHistoryPlugin<State = any> extends AkitaPlugin<State> {\n  /** Allow skipping an update from outside */\n  private skip = false;\n\n  private history = {\n    past: [],\n    present: null,\n    future: []\n  };\n\n  /** Skip the update when redo/undo */\n  private skipUpdate = false;\n  private subscription;\n\n  /* Subjects for supporting observable hasPast$ and hasFuture$ */\n  private hasPastSubject: BehaviorSubject<boolean>;\n  private _hasPast$: Observable<boolean>;\n  private hasFutureSubject: BehaviorSubject<boolean>;\n  private _hasFuture$: Observable<boolean>;\n\n  constructor(protected query: Queries<State>, private params: StateHistoryParams = {}, private _entityId?: any) {\n    super(query, {\n      resetFn: () => this.clear()\n    });\n    params.maxAge = !!params.maxAge ? params.maxAge : 10;\n    params.comparator = params.comparator || (() => true);\n\n    this.activate();\n  }\n\n  /**\n   * Observable stream representing whether the history plugin has an available past\n   *\n   */\n  get hasPast$(): Observable<boolean> {\n    return this._hasPast$;\n  }\n\n  /**\n   * Observable stream representing whether the history plugin has an available future\n   *\n   */\n  get hasFuture$(): Observable<boolean> {\n    return this._hasFuture$;\n  }\n\n  get hasPast() {\n    return this.history.past.length > 0;\n  }\n\n  get hasFuture() {\n    return this.history.future.length > 0;\n  }\n\n  private get property() {\n    return this.params.watchProperty;\n  }\n\n  /* Updates the hasPast$ hasFuture$ observables*/\n  private updateHasHistory() {\n    this.hasFutureSubject.next(this.hasFuture);\n    this.hasPastSubject.next(this.hasPast);\n  }\n\n  activate() {\n    this.hasPastSubject = new BehaviorSubject(false);\n    this._hasPast$ = this.hasPastSubject.asObservable().pipe(distinctUntilChanged());\n    this.hasFutureSubject = new BehaviorSubject(false);\n    this._hasFuture$ = this.hasFutureSubject.asObservable().pipe(distinctUntilChanged());\n\n    this.history.present = this.getSource(this._entityId, this.property);\n    this.subscription = (this as any)\n      .selectSource(this._entityId, this.property)\n      .pipe(pairwise())\n      .subscribe(([past, present]) => {\n        if (this.skip) {\n          this.skip = false;\n          return;\n        }\n        /**\n         *  comparator: (prev, current) => isEqual(prev, current) === false\n         */\n        const shouldUpdate = this.params.comparator(past, present);\n\n        if (!this.skipUpdate && shouldUpdate) {\n          if (this.history.past.length === this.params.maxAge) {\n            this.history.past = this.history.past.slice(1);\n          }\n          this.history.past = [...this.history.past, past];\n          this.history.present = present;\n          this.updateHasHistory();\n        }\n      });\n  }\n\n  undo() {\n    if (this.history.past.length > 0) {\n      const { past, present } = this.history;\n      const previous = past[past.length - 1];\n      this.history.past = past.slice(0, past.length - 1);\n      this.history.present = previous;\n      this.history.future = [present, ...this.history.future];\n      this.update();\n    }\n  }\n\n  redo() {\n    if (this.history.future.length > 0) {\n      const { past, present } = this.history;\n      const next = this.history.future[0];\n      const newFuture = this.history.future.slice(1);\n      this.history.past = [...past, present];\n      this.history.present = next;\n      this.history.future = newFuture;\n      this.update('Redo');\n    }\n  }\n\n  jumpToPast(index: number) {\n    if (index < 0 || index >= this.history.past.length) return;\n\n    const { past, future, present } = this.history;\n    /**\n     *\n     * const past = [1, 2, 3, 4, 5];\n     * const present = 6;\n     * const future = [7, 8, 9];\n     * const index = 2;\n     *\n     * newPast = past.slice(0, index) = [1, 2];\n     * newPresent = past[index] = 3;\n     * newFuture = [...past.slice(index + 1),present, ...future] = [4, 5, 6, 7, 8, 9];\n     *\n     */\n    const newPast = past.slice(0, index);\n    const newFuture = [...past.slice(index + 1), present, ...future];\n    const newPresent = past[index];\n    this.history.past = newPast;\n    this.history.present = newPresent;\n    this.history.future = newFuture;\n    this.update();\n  }\n\n  jumpToFuture(index: number) {\n    if (index < 0 || index >= this.history.future.length) return;\n\n    const { past, future, present } = this.history;\n    /**\n     *\n     * const past = [1, 2, 3, 4, 5];\n     * const present = 6;\n     * const future = [7, 8, 9, 10]\n     * const index = 1\n     *\n     * newPast = [...past, present, ...future.slice(0, index) = [1, 2, 3, 4, 5, 6, 7];\n     * newPresent = future[index] = 8;\n     * newFuture = futrue.slice(index+1) = [9, 10];\n     *\n     */\n\n    const newPast = [...past, present, ...future.slice(0, index)];\n    const newPresent = future[index];\n    const newFuture = future.slice(index + 1);\n    this.history.past = newPast;\n    this.history.present = newPresent;\n    this.history.future = newFuture;\n    this.update('Redo');\n  }\n\n  /**\n   *\n   * jump n steps in the past or forward\n   *\n   */\n  jump(n: number) {\n    if (n > 0) return this.jumpToFuture(n - 1);\n    if (n < 0) return this.jumpToPast(this.history.past.length + n);\n  }\n\n  /**\n   * Clear the history\n   *\n   * @param customUpdateFn Callback function for only clearing part of the history\n   *\n   * @example\n   *\n   * stateHistory.clear((history) => {\n   *  return {\n   *    past: history.past,\n   *    present: history.present,\n   *    future: []\n   *  };\n   * });\n   */\n  clear(customUpdateFn?: (history: History<State>) => History<State>) {\n    this.history = isFunction(customUpdateFn)\n      ? customUpdateFn(this.history)\n      : {\n          past: [],\n          present: null,\n          future: []\n        };\n    this.updateHasHistory();\n  }\n\n  destroy(clearHistory = false) {\n    if (clearHistory) {\n      this.clear();\n    }\n    this.subscription.unsubscribe();\n  }\n\n  ignoreNext() {\n    this.skip = true;\n  }\n\n  private update(action = 'Undo') {\n    this.skipUpdate = true;\n    logAction(`@StateHistory - ${action}`);\n    this.updateStore(this.history.present, this._entityId, this.property);\n    this.updateHasHistory();\n    this.skipUpdate = false;\n  }\n}\n","import { EntityState, OrArray, getIDType } from '../../types';\nimport { QueryEntity } from '../../queryEntity';\nimport { StateHistoryParams, StateHistoryPlugin } from './stateHistoryPlugin';\nimport { toBoolean } from '../../toBoolean';\nimport { skip } from 'rxjs/operators';\nimport { EntityCollectionPlugin } from '../entityCollectionPlugin';\n\nexport interface StateHistoryEntityParams<IDType> extends StateHistoryParams {\n  entityIds?: OrArray<IDType>;\n}\n\nexport class EntityStateHistoryPlugin<State extends EntityState = any, P extends StateHistoryPlugin<State> = StateHistoryPlugin<State>> extends EntityCollectionPlugin<State, P> {\n  constructor(protected query: QueryEntity<State>, protected readonly params: StateHistoryEntityParams<getIDType<State>> = {}) {\n    super(query, params.entityIds);\n    params.maxAge = toBoolean(params.maxAge) ? params.maxAge : 10;\n    this.activate();\n    this.selectIds()\n      .pipe(skip(1))\n      .subscribe(ids => this.activate(ids));\n  }\n\n  redo(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, e => e.redo());\n  }\n\n  undo(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, e => e.undo());\n  }\n\n  hasPast(id: getIDType<State>) {\n    if (this.hasEntity(id)) {\n      return this.getEntity(id).hasPast;\n    }\n  }\n\n  hasFuture(id: getIDType<State>) {\n    if (this.hasEntity(id)) {\n      return this.getEntity(id).hasFuture;\n    }\n  }\n\n  jumpToFuture(ids: OrArray<getIDType<State>>, index: number) {\n    this.forEachId(ids, e => e.jumpToFuture(index));\n  }\n\n  jumpToPast(ids: OrArray<getIDType<State>>, index: number) {\n    this.forEachId(ids, e => e.jumpToPast(index));\n  }\n\n  clear(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, e => e.clear());\n  }\n\n  destroy(ids?: OrArray<getIDType<State>>, clearHistory = false) {\n    this.forEachId(ids, e => e.destroy(clearHistory));\n  }\n\n  ignoreNext(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, e => e.ignoreNext());\n  }\n\n  protected instantiatePlugin(id: getIDType<State>) {\n    return new StateHistoryPlugin<State>(this.query, this.params, id) as P;\n  }\n}\n","import { AkitaPlugin, Queries } from '../plugin';\nimport { QueryEntity } from '../../queryEntity';\nimport { BehaviorSubject, combineLatest, Observable, Subject, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, skip } from 'rxjs/operators';\nimport { isUndefined } from '../../isUndefined';\nimport { Query } from '../../query';\nimport { coerceArray } from '../../coerceArray';\nimport { isFunction } from '../../isFunction';\nimport { logAction } from '../../actions';\n\ntype Head<State = any> = State | Partial<State>;\n\nexport type DirtyCheckComparator<State> = (head: State, current: State) => boolean;\n\nexport type DirtyCheckParams<StoreState = any> = {\n  comparator?: DirtyCheckComparator<StoreState>;\n  watchProperty?: keyof StoreState | (keyof StoreState)[];\n};\n\nexport const dirtyCheckDefaultParams = {\n  comparator: (head, current) => JSON.stringify(head) !== JSON.stringify(current)\n};\n\nexport function getNestedPath(nestedObj, path: string) {\n  const pathAsArray: string[] = path.split('.');\n  return pathAsArray.reduce((obj, key) => (obj && obj[key] !== 'undefined' ? obj[key] : undefined), nestedObj);\n}\n\nexport type DirtyCheckResetParams<StoreState = any> = {\n  updateFn?: StoreState | ((head: StoreState, current: StoreState) => any);\n};\n\nexport class DirtyCheckPlugin<State = any> extends AkitaPlugin<State> {\n  private head: Head<State>;\n  private dirty = new BehaviorSubject(false);\n  private subscription: Subscription;\n  private active = false;\n  private _reset = new Subject();\n\n  isDirty$: Observable<boolean> = this.dirty.asObservable().pipe(distinctUntilChanged());\n  reset$ = this._reset.asObservable();\n\n  constructor(protected query: Queries<State>, private params?: DirtyCheckParams<State>, private _entityId?: any) {\n    super(query);\n    this.params = { ...dirtyCheckDefaultParams, ...params };\n    if (this.params.watchProperty) {\n      let watchProp = coerceArray(this.params.watchProperty) as any[];\n      if (query instanceof QueryEntity && watchProp.includes('entities') && !watchProp.includes('ids')) {\n        watchProp.push('ids');\n      }\n      this.params.watchProperty = watchProp;\n    }\n  }\n\n  reset(params: DirtyCheckResetParams = {}) {\n    let currentValue = this.head;\n    if (isFunction(params.updateFn)) {\n      if (this.isEntityBased(this._entityId)) {\n        currentValue = params.updateFn(this.head, (this.getQuery() as QueryEntity<State>).getEntity(this._entityId));\n      } else {\n        currentValue = params.updateFn(this.head, (this.getQuery() as Query<State>).getValue());\n      }\n    }\n    logAction(`@DirtyCheck - Revert`);\n    this.updateStore(currentValue, this._entityId);\n    this._reset.next();\n  }\n\n  setHead() {\n    if (!this.active) {\n      this.activate();\n      this.active = true;\n    } else {\n      this.head = this._getHead();\n    }\n    this.updateDirtiness(false);\n    return this;\n  }\n\n  isDirty(): boolean {\n    return !!this.dirty.value;\n  }\n\n  hasHead() {\n    return !!this.getHead();\n  }\n\n  destroy() {\n    this.head = null;\n    this.subscription && this.subscription.unsubscribe();\n    this._reset && this._reset.complete();\n  }\n\n  isPathDirty(path: string) {\n    const head = this.getHead();\n    const current = (this.getQuery() as Query<State>).getValue();\n    const currentPathValue = getNestedPath(current, path);\n    const headPathValue = getNestedPath(head, path);\n\n    return this.params.comparator(currentPathValue, headPathValue);\n  }\n\n  protected getHead() {\n    return this.head;\n  }\n\n  private activate() {\n    this.head = this._getHead();\n    /** if we are tracking specific properties select only the relevant ones */\n    const source = this.params.watchProperty\n      ? (this.params.watchProperty as (keyof State)[]).map(prop =>\n          this.query\n            .select(state => state[prop])\n            .pipe(\n              map(val => ({\n                val,\n                __akitaKey: prop\n              }))\n            )\n        )\n      : [this.selectSource(this._entityId)];\n    this.subscription = combineLatest(...source)\n      .pipe(skip(1))\n      .subscribe((currentState: any[]) => {\n        if (isUndefined(this.head)) return;\n        /** __akitaKey is used to determine if we are tracking a specific property or a store change */\n        const isChange = currentState.some(state => {\n          const head = state.__akitaKey ? this.head[state.__akitaKey as any] : this.head;\n          const compareTo = state.__akitaKey ? state.val : state;\n\n          return this.params.comparator(head, compareTo);\n        });\n\n        this.updateDirtiness(isChange);\n      });\n  }\n\n  private updateDirtiness(isDirty: boolean) {\n    this.dirty.next(isDirty);\n  }\n\n  private _getHead(): Head<State> {\n    let head: Head<State> = this.getSource(this._entityId);\n    if (this.params.watchProperty) {\n      head = this.getWatchedValues(head as State);\n    }\n    return head;\n  }\n\n  private getWatchedValues(source: State): Partial<State> {\n    return (this.params.watchProperty as (keyof State)[]).reduce(\n      (watched, prop) => {\n        watched[prop] = source[prop];\n        return watched;\n      },\n      {} as Partial<State>\n    );\n  }\n}\n","import { DirtyCheckComparator, dirtyCheckDefaultParams, DirtyCheckPlugin, DirtyCheckResetParams, getNestedPath } from './dirtyCheckPlugin';\nimport { EntityCollectionPlugin } from '../entityCollectionPlugin';\nimport { auditTime, map, skip } from 'rxjs/operators';\nimport { merge, Observable, Subject } from 'rxjs';\nimport { EntityState, OrArray, getIDType, getEntityType } from '../../types';\nimport { QueryEntity } from '../../queryEntity';\nimport { coerceArray } from '../../coerceArray';\n\nexport type DirtyCheckCollectionParams<State extends EntityState> = {\n  comparator?: DirtyCheckComparator<getEntityType<State>>;\n  entityIds?: OrArray<getIDType<State>>;\n};\n\nexport class EntityDirtyCheckPlugin<State extends EntityState = any, P extends DirtyCheckPlugin<State> = DirtyCheckPlugin<State>> extends EntityCollectionPlugin<State, P> {\n  private _someDirty = new Subject();\n  someDirty$: Observable<boolean> = merge(this.query.select(state => state.entities), this._someDirty.asObservable()).pipe(\n    auditTime(0),\n    map(() => this.checkSomeDirty())\n  );\n\n  constructor(protected query: QueryEntity<State>, private readonly params: DirtyCheckCollectionParams<State> = {}) {\n    super(query, params.entityIds);\n    this.params = { ...dirtyCheckDefaultParams, ...params };\n    // TODO lazy activate?\n    this.activate();\n    this.selectIds()\n      .pipe(skip(1))\n      .subscribe(ids => {\n        super.rebase(ids, { afterAdd: plugin => plugin.setHead() });\n      });\n  }\n\n  setHead(ids?: OrArray<getIDType<State>>) {\n    if (this.params.entityIds && ids) {\n      const toArray = coerceArray(ids) as getIDType<State>[];\n      const someAreWatched = coerceArray(this.params.entityIds).some(id => toArray.indexOf(id) > -1);\n      if (someAreWatched === false) {\n        return this;\n      }\n    }\n    this.forEachId(ids, e => e.setHead());\n    this._someDirty.next();\n    return this;\n  }\n\n  hasHead(id: getIDType<State>): boolean {\n    if (this.entities.has(id)) {\n      const entity = this.getEntity(id);\n      return entity.hasHead();\n    }\n\n    return false;\n  }\n\n  reset(ids?: OrArray<getIDType<State>>, params: DirtyCheckResetParams = {}) {\n    this.forEachId(ids, e => e.reset(params));\n  }\n\n  isDirty(id: getIDType<State>): Observable<boolean>;\n  isDirty(id: getIDType<State>, asObservable: true): Observable<boolean>;\n  isDirty(id: getIDType<State>, asObservable: false): boolean;\n  isDirty(id: getIDType<State>, asObservable = true): Observable<boolean> | boolean {\n    if (this.entities.has(id)) {\n      const entity = this.getEntity(id);\n      return asObservable ? entity.isDirty$ : entity.isDirty();\n    }\n\n    return false;\n  }\n\n  someDirty(): boolean {\n    return this.checkSomeDirty();\n  }\n\n  isPathDirty(id: getIDType<State>, path: string) {\n    if (this.entities.has(id)) {\n      const head = (this.getEntity(id) as any).getHead();\n      const current = this.query.getEntity(id);\n      const currentPathValue = getNestedPath(current, path);\n      const headPathValue = getNestedPath(head, path);\n\n      return this.params.comparator(currentPathValue, headPathValue);\n    }\n\n    return null;\n  }\n\n  destroy(ids?: OrArray<getIDType<State>>) {\n    this.forEachId(ids, e => e.destroy());\n    /** complete only when the plugin destroys */\n    if (!ids) {\n      this._someDirty.complete();\n    }\n  }\n\n  protected instantiatePlugin(id: getIDType<State>): P {\n    return new DirtyCheckPlugin(this.query, this.params, id) as P;\n  }\n\n  private checkSomeDirty(): boolean {\n    const entitiesIds = this.resolvedIds();\n    for (const id of entitiesIds) {\n      if (this.getEntity(id).isDirty()) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","import { __stores__ } from './stores';\nimport { IDS } from './types';\nimport { AddEntitiesOptions } from './addEntities';\nimport { EntityStore } from './entityStore';\nimport { SetEntities } from './setEntities';\nimport { isNil } from './isNil';\nimport { AkitaError } from './errors';\n\nexport enum StoreActions {\n  Update,\n  AddEntities,\n  SetEntities,\n  UpdateEntities,\n  RemoveEntities,\n  UpsertEntities\n}\n\ninterface RunStoreActionSetEntities<Entity = any> {\n  payload: {\n    data: SetEntities<Entity>;\n  };\n}\n\ninterface RunStoreActionAddEntities<Entity = any> {\n  payload: {\n    data: Entity[] | Entity;\n    params?: AddEntitiesOptions;\n  };\n}\n\ninterface RunStoreActionUpdateEntities<Entity = any> {\n  payload: {\n    data: Partial<Entity>;\n    entityIds: IDS;\n  };\n}\n\ninterface RunStoreActionRemoveEntities<Entity = any> {\n  payload: {\n    entityIds: IDS;\n  };\n}\n\ninterface RunStoreActionUpsertEntities<Entity = any> {\n  payload: {\n    data: Partial<Entity>[] | Partial<Entity>;\n    entityIds?: IDS;\n  };\n}\n\ninterface RunStoreActionUpdate<State = any> {\n  payload: {\n    data: Partial<State>;\n  };\n}\n\n/**\n * @example\n *\n * runStoreAction('books', StoreActions.Update, {\n *   payload: {\n *    data: { filter: 'New filter' }\n *   }\n * });\n */\nexport function runStoreAction<State = any>(storeName: string, action: StoreActions.Update, params: RunStoreActionUpdate<State>);\n/**\n * @example\n *\n * runStoreAction('books', StoreActions.RemoveEntities, {\n *   payload: {\n *    entityIds: 2\n *   }\n * });\n */\nexport function runStoreAction<Entity = any>(storeName: string, action: StoreActions.RemoveEntities, params: RunStoreActionRemoveEntities<Entity>);\n/**\n * @example\n *\n * runStoreAction('books', StoreActions.UpdateEntities, {\n *   payload: {\n *    data: { title: 'New title' },\n *    entityIds: 2\n *   }\n * });\n */\nexport function runStoreAction<Entity = any>(storeName: string, action: StoreActions.UpdateEntities, params: RunStoreActionUpdateEntities<Entity>);\n/**\n * @example\n *\n * runStoreAction('books', StoreActions.SetEntities, {\n *   payload: {\n *    data: [{ id: 1 }, { id: 2 }]\n *   }\n * });\n */\nexport function runStoreAction<Entity = any>(storeName: string, action: StoreActions.SetEntities, params: RunStoreActionSetEntities<Entity>);\n/**\n * @example\n *\n * runStoreAction('books', StoreActions.AddEntities, {\n *   payload: {\n *    data: { id: 1 }\n *   }\n * });\n */\nexport function runStoreAction<Entity = any>(storeName: string, action: StoreActions.AddEntities, params: RunStoreActionAddEntities<Entity>);\n/**\n * @example\n *\n * runStoreAction('books', StoreActions.UpsertEntities, {\n *   payload: {\n *    data: { title: 'New Title' },\n *    entityIds: [1, 2]\n *   }\n * });\n * runStoreAction('books', StoreActions.UpsertEntities, {\n *   payload: {\n *    data: [{ id: 2, title: 'New Title' }, { id: 3, title: 'Another title'}],\n *   }\n * });\n */\nexport function runStoreAction<Entity = any>(storeName: string, action: StoreActions.UpsertEntities, params: RunStoreActionUpsertEntities<Entity>);\nexport function runStoreAction<EntityOrState = any>(\n  storeName: string,\n  action: StoreActions,\n  params:\n    | RunStoreActionSetEntities<EntityOrState>\n    | RunStoreActionAddEntities<EntityOrState>\n    | RunStoreActionRemoveEntities<EntityOrState>\n    | RunStoreActionUpdateEntities<EntityOrState>\n    | RunStoreActionUpsertEntities<EntityOrState>\n) {\n  const store = __stores__[storeName];\n\n  if (isNil(store)) {\n    throw new AkitaError(`${storeName} doesn't exist`);\n  }\n\n  switch (action) {\n    case StoreActions.SetEntities: {\n      const { payload } = params as RunStoreActionSetEntities;\n      (store as EntityStore).set(payload.data);\n      return;\n    }\n    case StoreActions.AddEntities: {\n      const { payload } = params as RunStoreActionAddEntities;\n      (store as EntityStore).add(payload.data, payload.params);\n      return;\n    }\n\n    case StoreActions.UpdateEntities: {\n      const { payload } = params as RunStoreActionUpdateEntities;\n      (store as EntityStore).update(payload.entityIds, payload.data);\n      return;\n    }\n\n    case StoreActions.RemoveEntities: {\n      const { payload } = params as RunStoreActionRemoveEntities;\n      (store as EntityStore).remove(payload.entityIds);\n      return;\n    }\n\n    case StoreActions.UpsertEntities: {\n      const { payload } = params as RunStoreActionUpsertEntities;\n      if (payload.entityIds) {\n        (store as EntityStore).upsert(payload.entityIds, payload.data);\n      } else if (Array.isArray(payload.data)) {\n        (store as EntityStore).upsertMany(payload.data);\n      } else {\n        (store as EntityStore).upsertMany([payload.data]);\n      }\n      return;\n    }\n\n    case StoreActions.Update: {\n      const { payload } = params as RunStoreActionUpdate;\n      (store as EntityStore).update(payload.data);\n      return;\n    }\n  }\n}\n","import { ArrayProperties, IDS, ItemPredicate } from './types';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { coerceArray } from './coerceArray';\nimport { isFunction } from './isFunction';\nimport { isObject } from './isObject';\nimport { isArray } from './isArray';\n\n/**\n * Update item in a collection\n *\n * @example\n *\n *\n * store.update(1, entity => ({\n *   comments: arrayUpdate(entity.comments, 1, { name: 'newComment' })\n * }))\n */\nexport function arrayUpdate<Root extends any[], Entity = any>(keyOrRoot: Root, predicateOrIds: IDS | ItemPredicate<Root[0]>, obj: Partial<Root[0]>, idKey?: string): Root[0][];\n/**\n * @deprecated\n */\nexport function arrayUpdate<Root, Entity = any>(keyOrRoot: ArrayProperties<Root>, predicateOrIds: IDS | ItemPredicate<Entity>, obj: Partial<Entity>, idKey?: string): (state: Root) => Root;\nexport function arrayUpdate<Root, Entity = any>(keyOrRoot: ArrayProperties<Root> | Root, predicateOrIds: IDS | ItemPredicate<Entity>, obj: Partial<Entity>, idKey = DEFAULT_ID_KEY) {\n  let condition: ItemPredicate<Entity>;\n\n  if (isFunction(predicateOrIds)) {\n    condition = predicateOrIds;\n  } else {\n    const ids = coerceArray(predicateOrIds);\n    condition = item => ids.includes(isObject(item) ? item[idKey] : item) === true;\n  }\n\n  const updateFn = state =>\n    state.map(entity => {\n      if (condition(entity) === true) {\n        return isObject(entity)\n          ? {\n              ...entity,\n              ...obj\n            }\n          : obj;\n      }\n\n      return entity;\n    });\n\n  if (isArray(keyOrRoot)) {\n    return updateFn(keyOrRoot);\n  }\n\n  return root => {\n    return {\n      [keyOrRoot as string]: updateFn(root[keyOrRoot])\n    };\n  };\n}\n","import { ArrayProperties, OrArray } from './types';\nimport { coerceArray } from './coerceArray';\nimport { AddEntitiesOptions } from './addEntities';\nimport { isArray } from './isArray';\n\n/**\n * Add item to a collection\n *\n * @example\n *\n *\n * store.update(state => ({\n *   comments: arrayAdd(state.comments, { id: 2 })\n * }))\n *\n */\nexport function arrayAdd<Root extends any[], Entity = any>(keyOrRoot: Root, newEntity: OrArray<Root[0]>, options?: AddEntitiesOptions): Root[0][];\n/**\n * @deprecated\n */\nexport function arrayAdd<Root, Entity = any>(keyOrRoot: ArrayProperties<Root>, newEntity: OrArray<Entity>, options?: AddEntitiesOptions): (state: Root) => Root;\nexport function arrayAdd<Root, Entity = any>(keyOrRoot: ArrayProperties<Root> | Root, newEntity: OrArray<Entity>, options: AddEntitiesOptions = {}) {\n  const newEntities = coerceArray(newEntity);\n\n  const addFn = state => (options.prepend ? [...newEntities, ...(state || [])] : [...(state || []), ...newEntities]);\n\n  if (isArray(keyOrRoot)) {\n    return addFn(keyOrRoot);\n  }\n\n  return state => {\n    return {\n      [keyOrRoot as ArrayProperties<Root>]: addFn(state[keyOrRoot])\n    };\n  };\n}\n","import { EntityState, getEntityType, getIDType } from './types';\nimport { Observable } from 'rxjs';\n\nexport abstract class EntityService<S extends EntityState> {\n  abstract get<T>(id?: getIDType<S>, config?: any): Observable<T>;\n  abstract add<T>(entity: getEntityType<EntityState>, config?: any): Observable<T>;\n  abstract update<T>(id: getIDType<S>, entity: Partial<getEntityType<S>>, config: any): Observable<T>;\n  abstract delete<T>(id: getIDType<S>, config: any): Observable<T>;\n}\n","/**\n * Generate random guid\n *\n * @example\n *\n * {\n *   id: guid()\n * }\n *\n */\nexport function guid() {\n  return 'xxxxxx4xyx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n","import { DEFAULT_ID_KEY } from './defaultIDKey';\n\n// @internal\nexport function toEntitiesIds<E>(entities: E[], idKey = DEFAULT_ID_KEY) {\n  const ids = [];\n  for (const entity of entities) {\n    ids.push(entity[idKey]);\n  }\n  return ids;\n}\n","import { __stores__ } from './stores';\nimport { applyTransaction } from './transaction';\n\nexport interface ResetStoresParams {\n  exclude: string[];\n}\n\n/**\n * Reset stores back to their initial state\n *\n * @example\n *\n * resetStores()\n * resetStores({\n *   exclude: ['auth']\n * })\n */\nexport function resetStores(options?: Partial<ResetStoresParams>) {\n  const defaults: ResetStoresParams = {\n    exclude: []\n  };\n\n  options = Object.assign({}, defaults, options);\n  const stores = Object.keys(__stores__);\n\n  applyTransaction(() => {\n    for (const store of stores) {\n      const s = __stores__[store];\n      if (!options.exclude) {\n        s.reset();\n      } else {\n        if (options.exclude.indexOf(s.storeName) === -1) {\n          s.reset();\n        }\n      }\n    }\n  });\n}\n","import { isArray } from './isArray';\n\n// @internal\nexport function isNumber(value: any): value is number {\n  return !isArray(value) && value - parseFloat(value) + 1 >= 0;\n}\n","import { ID } from './types';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { arrayAdd } from './arrayAdd';\nimport { arrayUpdate } from './arrayUpdate';\nimport { isObject } from './isObject';\n\n/**\n * Upsert item in a collection\n *\n * @example\n *\n *\n * store.update(1, entity => ({\n *   comments: arrayUpsert(entity.comments, 1, { name: 'newComment' })\n * }))\n */\nexport function arrayUpsert<Root extends any[]>(arr: Root, id: ID, obj: Partial<Root[0]>, idKey = DEFAULT_ID_KEY): Root[0][] {\n  const entityIsObject = isObject(obj);\n  const entityExists = arr.some(entity => (entityIsObject ? entity[idKey] === id : entity === id));\n  if (entityExists) {\n    return arrayUpdate(arr, id, obj, idKey);\n  } else {\n    return arrayAdd(arr, entityIsObject ? { ...obj, [idKey]: id } : obj);\n  }\n}\n","import { ArrayProperties, IDS, ItemPredicate } from './types';\nimport { DEFAULT_ID_KEY } from './defaultIDKey';\nimport { coerceArray } from './coerceArray';\nimport { isObject } from './isObject';\nimport { isFunction } from './isFunction';\nimport { not } from './not';\n\n/**\n * Remove item from collection\n *\n * @example\n *\n *\n * store.update(state => ({\n *   names: arrayRemove(state.names, ['one', 'second'])\n * }))\n */\nexport function arrayRemove<Root extends any[], Entity = Root[0]>(keyOrRoot: Root, identifier: IDS | ItemPredicate<Root[0]>, idKey?: string): Root[0][];\n/**\n * @deprecated\n */\nexport function arrayRemove<Root, Entity = any>(keyOrRoot: ArrayProperties<Root>, identifier: IDS | ItemPredicate<Entity>, idKey?: string): (state: Root) => Root;\nexport function arrayRemove<Root, Entity = any>(keyOrRoot: ArrayProperties<Root> | Root, identifier: IDS | ItemPredicate<Entity>, idKey = DEFAULT_ID_KEY) {\n  let identifiers;\n  let filterFn;\n\n  if (isFunction(identifier)) {\n    filterFn = not(identifier);\n  } else {\n    identifiers = coerceArray(identifier as IDS);\n    filterFn = current => {\n      return identifiers.includes(isObject(current) ? current[idKey] : current) === false;\n    };\n  }\n\n  if (Array.isArray(keyOrRoot)) {\n    return keyOrRoot.filter(filterFn);\n  }\n\n  return state => {\n    return {\n      [keyOrRoot as string]: state[keyOrRoot].filter(filterFn)\n    };\n  };\n}\n","// @internal\nexport function not(pred: Function): Function {\n  return function(...args) {\n    return !pred(...args);\n  };\n}\n","import { Store } from './store';\nimport { Query } from './query';\nimport { StoreConfigOptions } from './storeConfig';\nimport { EntityStore } from './entityStore';\nimport { QueryEntity } from './queryEntity';\nimport { QueryConfigOptions } from './queryConfig';\nimport { EntityState } from './types';\n\nexport function createStore<State>(initialState: Partial<State>, options: Partial<StoreConfigOptions>) {\n  return new Store<State>(initialState, options);\n}\n\nexport function createQuery<State>(store: Store<State>) {\n  return new Query<State>(store);\n}\n\nexport function createEntityStore<State extends EntityState>(initialState: Partial<State>, options: Partial<StoreConfigOptions>) {\n  return new EntityStore<State>(initialState, options);\n}\n\nexport function createEntityQuery<State extends EntityState>(store: EntityStore<State>, options: QueryConfigOptions = {}) {\n  return new QueryEntity<State>(store, options);\n}\n","import { EMPTY, Observable, of } from 'rxjs';\nimport { Store } from './store';\n\n/**\n * \n * Helper function for checking if we have data in cache\n * \n * export class ProductsService {\n *   constructor(private productsStore: ProductsStore) {}\n\n *   get(): Observable<void> {\n *     const request = this.http.get().pipe(\n *       tap(this.productsStore.set(response))\n *     );\n *\n *     return cacheable(this.productsStore, request);\n *   }\n * }\n */\nexport function cacheable<T>(store: Store, request$: Observable<T>, options: { emitNext: boolean } = { emitNext: false }) {\n  if (store._cache().value) {\n    return options.emitNext ? of(undefined) : EMPTY;\n  }\n  return request$;\n}\n","import { combineLatest, Observable, ObservableInput, ObservedValueOf } from 'rxjs';\nimport { auditTime } from 'rxjs/operators';\n\ntype ReturnTypes<T extends Observable<any>[]> = { [P in keyof T]: T[P] extends Observable<infer R> ? R : never };\ntype Observables = [Observable<any>] | Observable<any>[];\n\nexport function combineQueries<R extends Observables>(observables: R): Observable<ReturnTypes<R>> {\n  return combineLatest(observables).pipe(auditTime(0)) as any;\n}\n","import { Store } from './store';\nimport { Observable, defer } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\n\nexport function setLoading(store: Store) {\n  return function<T>(source: Observable<T>) {\n    return defer(() => {\n      store.setLoading(true);\n      return source.pipe(finalize(() => store.setLoading(false)));\n    });\n  };\n}\n"]}